       1/       0 :                            cpu     8085
       2/       0 :                            include "i8085.inc"
(1)    1/       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    2/       0 :                            include "i8080.inc"
(2)    1/       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)    2/       0 :                    ;;; i8080
(2)    3/       0 :                    ;;; FLAGS Register
(2)    4/       0 : =80                F_SIGN:         equ     10000000B ; set to 1 if negative
(2)    5/       0 : =40                F_ZERO:         equ     01000000B ; set to 1 if zero
(2)    6/       0 : =10                F_HALF_CARRY:   equ     00010000B ; set to 1 if carry from bit-3
(2)    7/       0 : =4                 F_PARITY:       equ     00000100B ; set to 1 if even parity
(2)    8/       0 : =1                 F_CARRY:        equ     00000001B ; set to 1 if carry
(2)    9/       0 :                    ;;; Interrupt origin
(2)   10/       0 : =0                 ORG_RESET:      equ     0000H   ; RESET
(2)   11/       0 : =0                 ORG_RST0:       equ     0000H   ; RST 0
(2)   12/       0 : =8                 ORG_RST1:       equ     0008H   ; RST 1
(2)   13/       0 : =10                ORG_RST2:       equ     0010H   ; RST 2
(2)   14/       0 : =18                ORG_RST3:       equ     0018H   ; RST 3
(2)   15/       0 : =20                ORG_RST4:       equ     0020H   ; RST 4
(2)   16/       0 : =28                ORG_RST5:       equ     0028H   ; RST 5
(2)   17/       0 : =30                ORG_RST6:       equ     0030H   ; RST 6
(2)   18/       0 : =38                ORG_RST7:       equ     0038H   ; RST 7
(1)    3/       0 :                    ;;; i8085
(1)    4/       0 :                    ;;; Set Innterrupt Maske
(1)    5/       0 : =80                SIM_SOD:        equ     10000000B ; Serial Output Data
(1)    6/       0 : =40                SIM_SDE:        equ     01000000B ; Serial Data Enable
(1)    7/       0 : =10                SIM_R75:        equ     00010000B ; Reset RST 7.5 latch
(1)    8/       0 : =8                 SIM_MSE:        equ     00001000B ; Mask Set Enable
(1)    9/       0 : =4                 SIM_M75:        equ     00000100B ; RST 7.5 Mask
(1)   10/       0 : =2                 SIM_M65:        equ     00000010B ; RST 6.5 Mask
(1)   11/       0 : =1                 SIM_M55:        equ     00000001B ; RST 5.5 Mask
(1)   12/       0 :                    ;;; Read Interrupt Mask
(1)   13/       0 : =80                RIM_SID:        equ     10000000B ; Serial Input Data
(1)   14/       0 : =40                RIM_I75:        equ     01000000B ; RST 7.5 Pending
(1)   15/       0 : =20                RIM_I65:        equ     00100000B ; RST 6.5 Pending
(1)   16/       0 : =10                RIM_I55:        equ     00010000B ; RST 5.5 Pending
(1)   17/       0 : =8                 RIM_IE:         equ     00001000B ; Interrupt Enable
(1)   18/       0 : =4                 RIM_M75:        equ     SIM_M75
(1)   19/       0 : =2                 RIM_M65:        equ     SIM_M65
(1)   20/       0 : =1                 RIM_M55:        equ     SIM_M55
(1)   21/       0 :                    ;;; Interrupt origin
(1)   22/       0 : =24                ORG_TRAP:       equ     0024H   ; TRAP
(1)   23/       0 : =2C                ORG_RST55:      equ     002CH   ; RST 5.5
(1)   24/       0 : =34                ORG_RST65:      equ     0034H   ; RST 6.5
(1)   25/       0 : =3C                ORG_RST75:      equ     003CH   ; RST 7.5
       3/       0 :
       4/       0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
       5/       0 : =0                 USART:  equ     00H
       6/       0 : =0                 USARTD: equ     USART+0         ; Data register
       7/       0 : =1                 USARTS: equ     USART+1         ; Status register
       8/       0 : =1                 USARTC: equ     USART+1         ; Control register
       9/       0 :                            include "i8251.inc"
(1)    1/       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    2/       0 :
(1)    3/       0 :                    ;;; i8251 USART device emulator.
(1)    4/       0 : =6                 MODE_STOP_gp:   equ     6
(1)    5/       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)    6/       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)    7/       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)    8/       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)    9/       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)   10/       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)   11/       0 : =2                 MODE_LEN_gp:    equ     2
(1)   12/       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)   13/       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)   14/       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)   15/       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)   16/       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)   17/       0 : =0                 MODE_BAUD_gp:   equ     0
(1)   18/       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)   19/       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)   20/       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)   21/       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)   22/       0 :                    ;;; Bit Definition of command register
(1)   23/       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)   24/       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)   25/       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)   26/       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)   27/       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)   28/       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)   29/       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)   30/       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)   31/       0 :
(1)   32/       0 :                    ;;; Bit definition of status register
(1)   33/       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)   34/       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)   35/       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)   36/       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)   37/       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)   38/       0 : =4                 ST_TxEMPTY_bm:  equ     00000100B   ; Transmitter empty
(1)   39/       0 : =2                 ST_RxRDY_bm:    equ     00000010B   ; Receiver ready
(1)   40/       0 : =1                 ST_TxRDY_bm:    equ     00000001B   ; Transmitter ready
      10/       0 :
      11/    1000 :                            org     1000H
      12/    1000 : =1000              stack:  equ     $
      13/    1000 :
      14/       0 :                            org     ORG_RESET
      15/       0 : 31 00 10                   lxi     sp, stack
      16/       3 : CD 55 00                   call    init_usart
      17/       6 : C3 00 E0                   jmp     0e000H
      18/       9 :
      19/       9 :                    ;;; NAS-SYS SCAL entry
      20/      18 :                            org     ORG_RST3
      21/      18 : C3 33 00                   jmp     SCAL
      22/      1B :
      23/      1B :                    ;;; NAS-SYS ROUT entry
      24/      30 :                            org     ORG_RST6
      25/      30 : C3 77 00                   jmp     putchar
      26/      33 :
      27/      33 :                    SCAL:
      28/      33 : E3                         xthl
      29/      34 : 7E                         mov     a,m
      30/      35 : 23                         inx     h
      31/      36 : E3                         xthl
      32/      37 : FE 0B                      cpi     0BH
      33/      39 : CA 47 00                   jz      BLINK
      34/      3C : FE 62                      cpi     62H
      35/      3E : CA 4A 00                   jz      RIN
      36/      41 : FE 5B                      cpi     5BH
      37/      43 : CA 52 00                   jz      MRET
      38/      46 : C9                         ret
      39/      47 :
      40/      47 :                    ;;; Get input in A
      41/      47 :                    BLINK:
      42/      47 : C3 6D 00                   jmp     getchar
      43/      4A :
      44/      4A :                    ;;; Scan input
      45/      4A :                    ;;; Return immediately with NC if no input
      46/      4A :                    ;;; Return with C and input in A
      47/      4A :                    RIN:
      48/      4A : DB 01                      in      USARTS
      49/      4C : 0F                         rrc
      50/      4D : 0F                         rrc
      51/      4E : D0                         rnc
      52/      4F : DB 00                      in      USARTD
      53/      51 : C9                         ret
      54/      52 :
      55/      52 :                    MRET:
      56/      52 : C3 52 00                   jmp     MRET
      57/      55 :
      58/      55 :                    init_usart:
      59/      55 : AF                         xra     a               ; clear A
      60/      56 : D3 01                      out     USARTC
      61/      58 : D3 01                      out     USARTC
      62/      5A : D3 01                      out     USARTC          ; safest way to sync mode
      63/      5C : 3E 40                      mvi     a, CMD_IR_bm
      64/      5E : D3 01                      out     USARTC          ; reset
      65/      60 : 00                         nop
      66/      61 : 00                         nop
      67/      62 : 3E 4E                      mvi     a, MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
      68/      64 : D3 01                      out     USARTC          ; async 1stop 8data x16
      69/      66 : 00                         nop
      70/      67 : 00                         nop
      71/      68 : 3E 37                      mvi     a, CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
      72/      6A : D3 01                      out     USARTC          ; RTS/DTR, error reset, Rx enable, Tx enable
      73/      6C : C9                         ret
      74/      6D :
      75/      6D :                    getchar:
      76/      6D : DB 01                      in      USARTS
      77/      6F : E6 02                      ani     ST_RxRDY_bm
      78/      71 : CA 6D 00                   jz      getchar
      79/      74 : DB 00                      in      USARTD
      80/      76 : C9                         ret
      81/      77 :
      82/      77 :                    putchar:
      83/      77 : F5                         push    psw
      84/      78 :                    putchar_loop:
      85/      78 : DB 01                      in      USARTS
      86/      7A : E6 01                      ani     ST_TxRDY_bm
      87/      7C : CA 78 00                   jz      putchar_loop
      88/      7F : F1                         pop     psw
      89/      80 : D3 00                      out     USARTD
      90/      82 : FE 0D                      cpi     0DH
      91/      84 : C0                         rnz
      92/      85 : F5                         push    psw
      93/      86 : 3E 0A                      mvi     a,0AH
      94/      88 : CD 77 00                   call    putchar
      95/      8B : F1                         pop     psw
      96/      8C : C9                         ret

          0 :                            cpu     8085
          0 :                            include "i8085.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            include "i8080.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; i8080
(2)       0 :                    ;;; FLAGS Register
(2)       0 : =80                F_SIGN:         equ     10000000B ; set to 1 if negative
(2)       0 : =40                F_ZERO:         equ     01000000B ; set to 1 if zero
(2)       0 : =10                F_HALF_CARRY:   equ     00010000B ; set to 1 if carry from bit-3
(2)       0 : =4                 F_PARITY:       equ     00000100B ; set to 1 if even parity
(2)       0 : =1                 F_CARRY:        equ     00000001B ; set to 1 if carry
(2)       0 :                    ;;; Interrupt origin
(2)       0 : =0                 ORG_RESET:      equ     0000H   ; RESET
(2)       0 : =0                 ORG_RST0:       equ     0000H   ; RST 0
(2)       0 : =8                 ORG_RST1:       equ     0008H   ; RST 1
(2)       0 : =10                ORG_RST2:       equ     0010H   ; RST 2
(2)       0 : =18                ORG_RST3:       equ     0018H   ; RST 3
(2)       0 : =20                ORG_RST4:       equ     0020H   ; RST 4
(2)       0 : =28                ORG_RST5:       equ     0028H   ; RST 5
(2)       0 : =30                ORG_RST6:       equ     0030H   ; RST 6
(2)       0 : =38                ORG_RST7:       equ     0038H   ; RST 3
(1)       0 :                    ;;; i8085
(1)       0 :                    ;;; Set Innterrupt Maske
(1)       0 : =80                SIM_SOD:        equ     10000000B ; Serial Output Data
(1)       0 : =40                SIM_SDE:        equ     01000000B ; Serial Data Enable
(1)       0 : =10                SIM_R75:        equ     00010000B ; Reset RST 7.5 latch
(1)       0 : =8                 SIM_MSE:        equ     00001000B ; Mask Set Enable
(1)       0 : =4                 SIM_M75:        equ     00000100B ; RST 7.5 Mask
(1)       0 : =2                 SIM_M65:        equ     00000010B ; RST 6.5 Mask
(1)       0 : =1                 SIM_M55:        equ     00000001B ; RST 5.5 Mask
(1)       0 :                    ;;; Read Interrupt Mask
(1)       0 : =80                RIM_SID:        equ     10000000B ; Serial Input Data
(1)       0 : =40                RIM_I75:        equ     01000000B ; RST 7.5 Pending
(1)       0 : =20                RIM_I65:        equ     00100000B ; RST 6.5 Pending
(1)       0 : =10                RIM_I55:        equ     00010000B ; RST 5.5 Pending
(1)       0 : =8                 RIM_IE:         equ     00001000B ; Interrupt Enable
(1)       0 : =4                 RIM_M75:        equ     SIM_M75
(1)       0 : =2                 RIM_M65:        equ     SIM_M65
(1)       0 : =1                 RIM_M55:        equ     SIM_M55
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =24                ORG_TRAP:       equ     0024H   ; TRAP
(1)       0 : =2C                ORG_RST55:      equ     002CH   ; RST 5.5
(1)       0 : =34                ORG_RST65:      equ     0034H   ; RST 6.5
(1)       0 : =3C                ORG_RST75:      equ     003CH   ; RST 7.5
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =0                 USART:  equ     00H
          0 : =0                 USARTD: equ     USART+0         ; Data register
          0 : =1                 USARTS: equ     USART+1         ; Status register
          0 : =1                 USARTC: equ     USART+1         ; Control register
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     00000100B   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     00000010B   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     00000001B   ; Transmitter ready
          0 :
       1000 :                            org     1000H
       1000 : =1000              stack:  equ     $
       1000 :
          0 :                            org     ORG_RESET
          0 : C3 00 01                   jmp     init_usart
          3 :
        100 :                            org     0100H
        100 :                    init_usart:
        100 : 31 00 10                   lxi     sp, stack
        103 : AF                         xra     A               ; clear A
        104 : D3 01                      out     USARTC
        106 : D3 01                      out     USARTC
        108 : D3 01                      out     USARTC          ; safest way to sync mode
        10A : 3E 40                      mvi     A, CMD_IR_bm
        10C : D3 01                      out     USARTC          ; reset
        10E : 00                         nop
        10F : 00                         nop
        110 : 3E 4E                      mvi     A, MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
        112 : D3 01                      out     USARTC          ; async 1stop 8data x16
        114 : 00                         nop
        115 : 00                         nop
        116 : 3E 37                      mvi     A, CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
        118 : D3 01                      out     USARTC          ; RTS/DTR, error reset, Rx enable, Tx enable
        11A :
        11A : CD 00 10                   call    mandelbrot
        11D : 76                         hlt
        11E :
        11E :                    putchar:
        11E : F5                         push    PSW
        11F :                    putchar_loop:
        11F : DB 01                      in      USARTS
        121 : E6 01                      ani     ST_TxRDY_bm
        123 : CA 1F 01                   jz      putchar_loop
        126 : F1                         pop     PSW
        127 : D3 00                      out     USARTD
        129 : C9                         ret
        12A :
        12A :                    newline:
        12A : F5                         push    PSW
        12B : 3E 0D                      mvi     A, 0DH
        12D : CD 1E 01                   call    putchar
        130 : 3E 0A                      mvi     A, 0AH
        132 : CD 1E 01                   call    putchar
        135 : F1                         pop     PSW
        136 : C9                         ret
        137 :
        137 :                    putspace:
        137 : F5                         push    PSW
        138 : 3E 20                      mvi     A, ' '
        13A : CD 1E 01                   call    putchar
        13D : F1                         pop     PSW
        13E : C9                         ret
        13F :
        13F :                            include "mandelbrot.inc"
(1)     200 :                            org     0200H
(1)     200 :                    vF:     ds      2
(1)     202 :                    vC:     ds      2
(1)     204 :                    vD:     ds      2
(1)     206 :                    vA:     ds      2
(1)     208 :                    vB:     ds      2
(1)     20A :                    vP:     ds      2
(1)     20C :                    vQ:     ds      2
(1)     20E :                    vS:     ds      2
(1)     210 :                    vT:     ds      2
(1)     212 :                    tmp:    ds      2
(1)     214 :                    vY:     ds      2
(1)     216 :                    vX:     ds      2
(1)     218 :                    vI:     ds      2
(1)     21A :
(1)    1000 :                            org     1000H
(1)    1000 :                    mandelbrot:
(1)    1000 : 21 32 00                   lxi     H, 50
(1)    1003 : 22 00 02                   shld    vF              ; F=50
(1)    1006 : 21 F4 FF                   lxi     H, -12
(1)    1009 : 22 14 02                   shld    vY              ; Y=-12
(1)    100C :                    loop_y:
(1)    100C : 21 CF FF                   lxi     H, -49
(1)    100F : 22 16 02                   shld    vX              ; X=-49
(1)    1012 :                    loop_x:
(1)    1012 : 2A 16 02                   lhld    vX
(1)    1015 : 22 02 02                   shld    vC              ; C=X
(1)    1018 : 21 E5 00                   lxi     H, 229
(1)    101B : 22 12 02                   shld    tmp
(1)    101E : 01 02 02                   lxi     B, vC
(1)    1021 : 11 12 02                   lxi     D, tmp
(1)    1024 : CD 34 12                   call    mulsi2          ; C=X*229
(1)    1027 : 21 64 00                   lxi     H, 100
(1)    102A : 22 12 02                   shld    tmp
(1)    102D : CD D1 12                   call    divsi2          ; C=X*229/100
(1)    1030 : 2A 14 02                   lhld    vY
(1)    1033 : 22 04 02                   shld    vD              ; D=Y
(1)    1036 : 21 A0 01                   lxi     H, 416
(1)    1039 : 22 12 02                   shld    tmp
(1)    103C : 01 04 02                   lxi     B, vD
(1)    103F : CD 34 12                   call    mulsi2          ; D=Y*416
(1)    1042 : 21 64 00                   lxi     H, 100
(1)    1045 : 22 12 02                   shld    tmp
(1)    1048 : CD D1 12                   call    divsi2          ; D=Y*416/100
(1)    104B : 2A 02 02                   lhld    vC
(1)    104E : 22 06 02                   shld    vA              ; A=C
(1)    1051 : 2A 04 02                   lhld    vD
(1)    1054 : 22 08 02                   shld    vB              ; B=D
(1)    1057 : 21 00 00                   lxi     H, 0
(1)    105A : 22 18 02                   shld    vI              ; I=0
(1)    105D :                    loop_i:
(1)    105D : 2A 08 02                   lhld    vB
(1)    1060 : 22 0C 02                   shld    vQ              ; Q=B
(1)    1063 : 01 0C 02                   lxi     B, vQ
(1)    1066 : 11 00 02                   lxi     D, vF
(1)    1069 : CD D1 12                   call    divsi2          ; Q=B/F
(1)    106C : 01 0E 02                   lxi     B, vS
(1)    106F : 11 0C 02                   lxi     D, vQ
(1)    1072 : CD A5 11                   call    negsi2          ; S=-Q
(1)    1075 : 11 00 02                   lxi     D, vF
(1)    1078 : CD 34 12                   call    mulsi2          ; S=-Q*F
(1)    107B : 11 08 02                   lxi     D, vB
(1)    107E : CD B4 11                   call    addsi2          ; S=B-Q*F
(1)    1081 : 2A 08 02                   lhld    vB
(1)    1084 : 22 12 02                   shld    tmp
(1)    1087 : 01 12 02                   lxi     B, tmp
(1)    108A : CD 34 12                   call    mulsi2          ; tmp=B*B
(1)    108D : 2A 06 02                   lhld    vA
(1)    1090 : 22 10 02                   shld    vT
(1)    1093 : 01 10 02                   lxi     B, vT
(1)    1096 : 11 06 02                   lxi     D, vA
(1)    1099 : CD 34 12                   call    mulsi2          ; T=A*A
(1)    109C : 11 12 02                   lxi     D, tmp
(1)    109F : CD C5 11                   call    subsi2          ; T=A*A-B*B
(1)    10A2 : 11 00 02                   lxi     D, vF
(1)    10A5 : CD D1 12                   call    divsi2          ; T=(A*A-B*B)/F
(1)    10A8 : 11 02 02                   lxi     D, vC
(1)    10AB : CD B4 11                   call    addsi2          ; T=(A*A-B*B)/F+C
(1)    10AE : 2A 06 02                   lhld    vA
(1)    10B1 : 22 12 02                   shld    tmp
(1)    10B4 : 01 12 02                   lxi     B, tmp
(1)    10B7 : 11 0E 02                   lxi     D, vS
(1)    10BA : CD 34 12                   call    mulsi2          ; tmp=A*S
(1)    10BD : 11 00 02                   lxi     D, vF
(1)    10C0 : CD D1 12                   call    divsi2          ; tmp=A*S/F
(1)    10C3 : 2A 06 02                   lhld    vA
(1)    10C6 : 22 08 02                   shld    vB              ; B=A
(1)    10C9 : 01 08 02                   lxi     B, vB
(1)    10CC : 11 0C 02                   lxi     D, vQ
(1)    10CF : CD 34 12                   call    mulsi2          ; B=A*Q
(1)    10D2 : 11 12 02                   lxi     D, tmp
(1)    10D5 : CD B4 11                   call    addsi2          ; B=A*Q+A*S/F
(1)    10D8 : 11 08 02                   lxi     D, vB
(1)    10DB : CD B4 11                   call    addsi2          ; B=2*(A*Q+A*S/F)
(1)    10DE : 11 04 02                   lxi     D, vD
(1)    10E1 : CD B4 11                   call    addsi2          ; B=2*(A*Q+A*S/F)+D
(1)    10E4 : 2A 10 02                   lhld    vT
(1)    10E7 : 22 06 02                   shld    vA              ; A=T
(1)    10EA : 22 0A 02                   shld    vP              ; P=A
(1)    10ED : 01 0A 02                   lxi     B, vP
(1)    10F0 : 11 00 02                   lxi     D, vF
(1)    10F3 : CD D1 12                   call    divsi2          ; P=A/F
(1)    10F6 : 2A 08 02                   lhld    vB
(1)    10F9 : 22 0C 02                   shld    vQ
(1)    10FC : 01 0C 02                   lxi     B, vQ
(1)    10FF : CD D1 12                   call    divsi2          ; Q=B/F
(1)    1102 : 2A 0C 02                   lhld    vQ
(1)    1105 : 22 12 02                   shld    tmp
(1)    1108 : 01 12 02                   lxi     B, tmp
(1)    110B : 11 0C 02                   lxi     D, vQ
(1)    110E : CD 34 12                   call    mulsi2          ; tmp=Q*Q
(1)    1111 : 2A 0A 02                   lhld    vP
(1)    1114 : 22 10 02                   shld    vT
(1)    1117 : 01 10 02                   lxi     B, vT
(1)    111A : 11 0A 02                   lxi     D, vP
(1)    111D : CD 34 12                   call    mulsi2          ; T=P*P
(1)    1120 : 11 12 02                   lxi     D, tmp
(1)    1123 : CD B4 11                   call    addsi2          ; T=P*P+Q*Q
(1)    1126 : 21 04 00                   lxi     H, 4
(1)    1129 : 22 12 02                   shld    tmp
(1)    112C : 01 12 02                   lxi     B, tmp
(1)    112F : 11 10 02                   lxi     D, vT
(1)    1132 : CD D6 11                   call    cmpsi2          ; 4-T
(1)    1135 : FA 59 11                   jm      print_i         ; if 4<T
(1)    1138 : 2A 18 02                   lhld    vI
(1)    113B : 23                         inx     H
(1)    113C : 22 18 02                   shld    vI              ; I+=1
(1)    113F : 21 10 00                   lxi     H, 16
(1)    1142 : 22 12 02                   shld    tmp
(1)    1145 : 01 18 02                   lxi     B, vI
(1)    1148 : 11 12 02                   lxi     D, tmp
(1)    114B : CD D6 11                   call    cmpsi2
(1)    114E : FA 5D 10                   jm      loop_i          ; if I<16
(1)    1151 : 3E 20                      mvi     A, ' '
(1)    1153 : CD 1E 01                   call    putchar
(1)    1156 : C3 68 11                   jmp     next_x
(1)    1159 :                    print_i:
(1)    1159 : 3A 18 02                   lda     vI
(1)    115C : FE 0A                      cpi     10
(1)    115E : DA 63 11                   jc      print_i2        ; if I<10
(1)    1161 : C6 07                      adi     'A'-'0'-10
(1)    1163 :                    print_i2:
(1)    1163 : C6 30                      adi     '0'
(1)    1165 : CD 1E 01                   call    putchar
(1)    1168 :                    next_x:
(1)    1168 : 2A 16 02                   lhld    vX
(1)    116B : 23                         inx     H
(1)    116C : 22 16 02                   shld    vX              ; X+=1
(1)    116F : 21 1E 00                   lxi     H, 30
(1)    1172 : 22 12 02                   shld    tmp
(1)    1175 : 01 16 02                   lxi     B, vX
(1)    1178 : 11 12 02                   lxi     D, tmp
(1)    117B : CD D6 11                   call    cmpsi2
(1)    117E : FA 12 10                   jm      loop_x          ; if X<30
(1)    1181 : 3E 0D                      mvi     A, 0DH
(1)    1183 : CD 1E 01                   call    putchar
(1)    1186 : 3E 0A                      mvi     A, 0AH
(1)    1188 : CD 1E 01                   call    putchar
(1)    118B : 2A 14 02                   lhld    vY
(1)    118E : 23                         inx     H
(1)    118F : 22 14 02                   shld    vY              ; Y+=1
(1)    1192 : 21 0D 00                   lxi     H, 13
(1)    1195 : 22 12 02                   shld    tmp
(1)    1198 : 01 14 02                   lxi     B, vY
(1)    119B : 11 12 02                   lxi     D, tmp
(1)    119E : CD D6 11                   call    cmpsi2
(1)    11A1 : FA 0C 10                   jm      loop_y          ; if X<13
(1)    11A4 : C9                         ret
(1)    11A5 :
(1)    11A5 :                    ;;; Local Variables:
(1)    11A5 :                    ;;; mode: asm
(1)    11A5 :                    ;;; End:
(1)    11A5 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       11A5 :                            include "arith.inc"
(1)    11A5 :                            cpu     8085
(1)    11A5 :
(1)    11A5 :                    ;;; Negation; result = -value
(1)    11A5 :                    ;;; @param @BC: result
(1)    11A5 :                    ;;; @param @DE: value
(1)    11A5 :                    ;;; @clobber A
(1)    11A5 :                    negsi2:
(1)    11A5 : 1A                         ldax    D
(1)    11A6 : 2F                         cma
(1)    11A7 : C6 01                      adi     1
(1)    11A9 : 02                         stax    B
(1)    11AA : 13                         inx     D
(1)    11AB : 1A                         ldax    D
(1)    11AC : 2F                         cma
(1)    11AD : CE 00                      aci     0
(1)    11AF : 03                         inx     B
(1)    11B0 : 02                         stax    B
(1)    11B1 : 1B                         dcx     D
(1)    11B2 : 0B                         dcx     B
(1)    11B3 : C9                         ret
(1)    11B4 :
(1)    11B4 :                    ;;; Signed addition: summand += addend
(1)    11B4 :                    ;;; @param @BC: summand
(1)    11B4 :                    ;;; @param @DE: addend
(1)    11B4 :                    ;;; @clobber A
(1)    11B4 :                    addsi2:
(1)    11B4 : E5                         push    H
(1)    11B5 : 1A                         ldax    D
(1)    11B6 : 6F                         mov     L, A
(1)    11B7 : 13                         inx     D
(1)    11B8 : 1A                         ldax    D
(1)    11B9 : 67                         mov     H, A
(1)    11BA : 1B                         dcx     D
(1)    11BB : 0A                         ldax    B
(1)    11BC : 85                         add     L
(1)    11BD : 02                         stax    B
(1)    11BE : 03                         inx     B
(1)    11BF : 0A                         ldax    B
(1)    11C0 : 8C                         adc     H
(1)    11C1 : 02                         stax    B
(1)    11C2 : 0B                         dcx     B
(1)    11C3 : E1                         pop     H
(1)    11C4 : C9                         ret
(1)    11C5 :
(1)    11C5 :                    ;;; Singed subtraction: minuend -= subtrahend
(1)    11C5 :                    ;;; @param @BC: minuend
(1)    11C5 :                    ;;; @param @DE: subtrahend
(1)    11C5 :                    ;;; @clobber A
(1)    11C5 :                    subsi2:
(1)    11C5 : E5                         push    H
(1)    11C6 : 1A                         ldax    D
(1)    11C7 : 6F                         mov     L, A
(1)    11C8 : 13                         inx     D
(1)    11C9 : 1A                         ldax    D
(1)    11CA : 1B                         dcx     D
(1)    11CB : 67                         mov     H, A
(1)    11CC : 0A                         ldax    B
(1)    11CD : 95                         sub     L
(1)    11CE : 02                         stax    B
(1)    11CF : 03                         inx     B
(1)    11D0 : 0A                         ldax    B
(1)    11D1 : 9C                         sbb     H
(1)    11D2 : 02                         stax    B
(1)    11D3 : 0B                         dcx     B
(1)    11D4 : E1                         pop     H
(1)    11D5 : C9                         ret
(1)    11D6 :
(1)    11D6 :                    ;;; Signed comparison: minuend - subtrahend
(1)    11D6 :                    ;;; @param @BC: minuend
(1)    11D6 :                    ;;; @param @DE: subtrahend
(1)    11D6 :                    ;;; @return PSW.Z, PSW.S
(1)    11D6 :                    ;;; @clobber A
(1)    11D6 :                    cmpsi2:
(1)    11D6 : C5                         push    B
(1)    11D7 : D5                         push    D
(1)    11D8 : E5                         push    H
(1)    11D9 : 1A                         ldax    D
(1)    11DA : 6F                         mov     L, A
(1)    11DB : 13                         inx     D
(1)    11DC : 1A                         ldax    D
(1)    11DD : 57                         mov     D, A
(1)    11DE : 5D                         mov     E, L            ; DE=@DE
(1)    11DF : 0A                         ldax    B
(1)    11E0 : 6F                         mov     L, A
(1)    11E1 : 03                         inx     B
(1)    11E2 : 0A                         ldax    B
(1)    11E3 : 47                         mov     B, A
(1)    11E4 : 4D                         mov     C, L            ; BC=@BC
(1)    11E5 : 79                         mov     A, C
(1)    11E6 : 93                         sub     E
(1)    11E7 : 6F                         mov     L, A
(1)    11E8 : 78                         mov     A, B
(1)    11E9 : 9A                         sbb     D
(1)    11EA : 67                         mov     H, A            ; HL=@BC-@DE
(1)    11EB : B5                         ora     L
(1)    11EC : CA F8 11                   jz      cmpsi2_return   ; PSW.Z=1
(1)    11EF : 7C                         mov     A, H            ; high(@BC-@DE)
(1)    11F0 : A8                         xra     B               ; high((@BC-@DE)^@BC)
(1)    11F1 : 6F                         mov     L, A
(1)    11F2 : 78                         mov     A, B
(1)    11F3 : AA                         xra     D               ; high(@BC^@DE)
(1)    11F4 : A5                         ana     L               ; overflow
(1)    11F5 : AC                         xra     H               ; PSW.S=overflow^sign
(1)    11F6 : F6 01                      ori     1               ; clear PSW.Z
(1)    11F8 :                    cmpsi2_return:
(1)    11F8 : E1                         pop     H
(1)    11F9 : D1                         pop     D
(1)    11FA : C1                         pop     B
(1)    11FB : C9                         ret
(1)    11FC :
(1)    11FC :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    11FC :                    ;;; @param BC: multiplicand
(1)    11FC :                    ;;; @param DE: multiplier
(1)    11FC :                    ;;; @return HL: result
(1)    11FC :                    ;;; @clobber BC DE HL A
(1)    11FC :                    umul16:
(1)    11FC : 21 00 00                   lxi     H, 0            ; result=0
(1)    11FF : C3 14 12                   jmp     umul16_check
(1)    1202 :                    umul16_loop:
(1)    1202 : B7                         ora     A               ; cleat PSW.C
(1)    1203 : 7A                         mov     A, D            ; multiplier >>= 1
(1)    1204 : 1F                         rar
(1)    1205 : 57                         mov     D, A
(1)    1206 : 7B                         mov     A, E
(1)    1207 : 1F                         rar
(1)    1208 : 5F                         mov     E, A
(1)    1209 : D2 0D 12                   jnc     umul16_next     ; if lsb(multiplier) == 0
(1)    120C : 09                         dad     B               ; result += multiplicand
(1)    120D :                    umul16_next:
(1)    120D : B7                         ora     A               ; clear PSW.C
(1)    120E : 79                         mov     A, C            ; multiplicand <<= 1
(1)    120F : 17                         ral
(1)    1210 : 4F                         mov     C, A
(1)    1211 : 78                         mov     A, B
(1)    1212 : 17                         ral
(1)    1213 : 47                         mov     B, A
(1)    1214 :                    umul16_check:
(1)    1214 : 7A                         mov     A, D
(1)    1215 : B3                         ora     E
(1)    1216 : C2 02 12                   jnz     umul16_loop     ; while multiplier != 0
(1)    1219 :                    umul16_end:
(1)    1219 : C9                         ret
(1)    121A :
(1)    121A :                    ;;; Unsigned multiplication: multiplicand *= multiplier
(1)    121A :                    ;;; @param @BC: multiplicand
(1)    121A :                    ;;; @param @DE: multiplier
(1)    121A :                    ;;; @clobber HL A
(1)    121A :                    umulsi2:
(1)    121A : C5                         push    B
(1)    121B : D5                         push    D
(1)    121C : 0A                         ldax    B
(1)    121D : 6F                         mov     L, A
(1)    121E : 03                         inx     B
(1)    121F : 0A                         ldax    B
(1)    1220 : 47                         mov     B, A
(1)    1221 : 4D                         mov     C, L            ; BC=multiplicand
(1)    1222 : 1A                         ldax    D
(1)    1223 : 6F                         mov     L, A
(1)    1224 : 13                         inx     D
(1)    1225 : 1A                         ldax    D
(1)    1226 : 57                         mov     D, A
(1)    1227 : 5D                         mov     E, L            ; DE=multiplier
(1)    1228 : CD FC 11                   call    umul16          ; HL=multiplicand * multiplier
(1)    122B : D1                         pop     D
(1)    122C : C1                         pop     B
(1)    122D : 7D                         mov     A, L
(1)    122E : 02                         stax    B
(1)    122F : 03                         inx     B
(1)    1230 : 7C                         mov     A, H
(1)    1231 : 02                         stax    B
(1)    1232 : 0B                         dcx     B               ; @BC=HL
(1)    1233 : C9                         ret
(1)    1234 :
(1)    1234 :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)    1234 :                    ;;; @param @BC: multiplicand
(1)    1234 :                    ;;; @param @DE: multiplier
(1)    1234 :                    ;;; @clobber HL A
(1)    1234 :                    mulsi2:
(1)    1234 : C5                         push    B
(1)    1235 : D5                         push    D
(1)    1236 : 0A                         ldax    B
(1)    1237 : 6F                         mov     L, A
(1)    1238 : 03                         inx     B
(1)    1239 : 0A                         ldax    B
(1)    123A : 47                         mov     B, A
(1)    123B : 4D                         mov     C, L            ; BC=multiplicand
(1)    123C : 60                         mov     H, B            ; H=high(multiplicand)
(1)    123D : B7                         ora     A
(1)    123E : F2 47 12                   jp      mulsi2_abs_muliplicand
(1)    1241 : 2F                         cma
(1)    1242 : 47                         mov     B, A
(1)    1243 : 79                         mov     A, C
(1)    1244 : 2F                         cma
(1)    1245 : 4F                         mov     C, A
(1)    1246 : 03                         inx     B               ; multiplicand = -multiplicand
(1)    1247 :                    mulsi2_abs_muliplicand:
(1)    1247 : 1A                         ldax    D
(1)    1248 : 6F                         mov     L, A
(1)    1249 : 13                         inx     D
(1)    124A : 1A                         ldax    D
(1)    124B : 57                         mov     D, A
(1)    124C : 5D                         mov     E, L            ; DE=multiplier
(1)    124D : AC                         xra     H               ; H=high(multiplicand^multiplier)
(1)    124E : F5                         push    PSW             ; save sign
(1)    124F : 7A                         mov     A, D
(1)    1250 : B7                         ora     A
(1)    1251 : F2 5A 12                   jp      mulsi2_multiply
(1)    1254 : 2F                         cma
(1)    1255 : 57                         mov     D, A
(1)    1256 : 7B                         mov     A, E
(1)    1257 : 2F                         cma
(1)    1258 : 5F                         mov     E, A
(1)    1259 : 13                         inx     D               ; multiplier = -multiplier
(1)    125A :                    mulsi2_multiply:
(1)    125A : CD FC 11                   call    umul16          ; HL = multiplicand * multiplier
(1)    125D : C1                         pop     B               ; B=sign
(1)    125E : 78                         mov     A, B
(1)    125F : B7                         ora     A
(1)    1260 : F2 6A 12                   jp      mulsi2_return
(1)    1263 : 7C                         mov     A, H
(1)    1264 : 2F                         cma
(1)    1265 : 67                         mov     H, A
(1)    1266 : 7D                         mov     A, L
(1)    1267 : 2F                         cma
(1)    1268 : 6F                         mov     L, A
(1)    1269 : 23                         inx     H               ; result = -result
(1)    126A :                    mulsi2_return:
(1)    126A : D1                         pop     D
(1)    126B : C1                         pop     B
(1)    126C : 7D                         mov     A, L
(1)    126D : 02                         stax    B
(1)    126E : 03                         inx     B
(1)    126F : 7C                         mov     A, H
(1)    1270 : 02                         stax    B
(1)    1271 : 0B                         dcx     B               ; @BC=result
(1)    1272 : C9                         ret
(1)    1273 :
(1)    1273 :                    ;;; Unsigned division: divident / divisor = quotient ... reminder
(1)    1273 :                    ;;; @praram BC: divident
(1)    1273 :                    ;;; @praram DE: divisor
(1)    1273 :                    ;;; @return HL: reminder
(1)    1273 :                    ;;; @return BC: quotient
(1)    1273 :                    ;;; @clobber BC DE HL A
(1)    1273 :                    udiv16:
(1)    1273 : 7B                         mov     A, E
(1)    1274 : B2                         ora     D
(1)    1275 : C8                         rz                      ; divide by zero
(1)    1276 : 2E 01                      mvi     L, 1            ; L=bits
(1)    1278 : C3 83 12                   jmp     udiv16_prep
(1)    127B :                    udiv16_prep_loop:
(1)    127B : B7                         ora     A               ; clear PSW.C
(1)    127C : 7B                         mov     A, E            ; divisor <<= 1
(1)    127D : 17                         ral
(1)    127E : 5F                         mov     E, A
(1)    127F : 7A                         mov     A, D
(1)    1280 : 17                         ral
(1)    1281 : 57                         mov     D, A
(1)    1282 : 23                         inx     H               ; ++bits
(1)    1283 :                    udiv16_prep:                    ; while msb(divisor) == 0
(1)    1283 : 7A                         mov     A, D
(1)    1284 : B7                         ora     A
(1)    1285 : F2 7B 12                   jp      udiv16_prep_loop
(1)    1288 : 7D                         mov     A, L
(1)    1289 : F5                         push    PSW             ; push bits
(1)    128A : 60                         mov     H, B
(1)    128B : 69                         mov     L, C            ; HL=divident
(1)    128C : AF                         xra     A
(1)    128D : 47                         mov     B, A
(1)    128E : 4F                         mov     C, A            ; BC=quotient
(1)    128F : C3 A1 12                   jmp     udiv16_enter_loop
(1)    1292 :                    udiv16_loop:
(1)    1292 : F5                         push    PSW             ; push bits
(1)    1293 : B7                         ora     A               ; clear PSW.C
(1)    1294 : 7A                         mov     A, D            ; divisor >>= 1
(1)    1295 : 1F                         rar
(1)    1296 : 57                         mov     D, A
(1)    1297 : 7B                         mov     A, E
(1)    1298 : 1F                         rar
(1)    1299 : 5F                         mov     E, A
(1)    129A : B7                         ora     A               ; clear PSW.C
(1)    129B : 79                         mov     A, C            ; quotient <<= 1
(1)    129C : 17                         ral
(1)    129D : 4F                         mov     C, A
(1)    129E : 78                         mov     A, B
(1)    129F : 17                         ral
(1)    12A0 : 47                         mov     B, A
(1)    12A1 :                    udiv16_enter_loop:
(1)    12A1 : 7D                         mov     A, L
(1)    12A2 : 93                         sub     E
(1)    12A3 : 6F                         mov     L, A
(1)    12A4 : 7C                         mov     A, H
(1)    12A5 : 9A                         sbb     D
(1)    12A6 : 67                         mov     H, A            ; divident -= divisor
(1)    12A7 : DA AE 12                   jc      udiv16_readd    ; if divident < 0
(1)    12AA : 03                         inx     B               ; quotient |= 1
(1)    12AB : C3 AF 12                   jmp     udiv16_next    ;
(1)    12AE :                    udiv16_readd:
(1)    12AE : 19                         dad     D               ; divident += divisor
(1)    12AF :                    udiv16_next:
(1)    12AF : F1                         pop     PSW
(1)    12B0 : 3D                         dcr     A               ; --bits
(1)    12B1 : C2 92 12                   jnz     udiv16_loop     ; while bits != 0
(1)    12B4 : C9                         ret
(1)    12B5 :
(1)    12B5 :                    ;;; Unsigned division: dividend /= divisor
(1)    12B5 :                    ;;; @praram @BC: dividend
(1)    12B5 :                    ;;; @praram @DE: divisor
(1)    12B5 :                    ;;; @clobber HL A
(1)    12B5 :                    udivsi2:
(1)    12B5 : C5                         push    B
(1)    12B6 : D5                         push    D
(1)    12B7 : 0A                         ldax    B
(1)    12B8 : 6F                         mov     L, A
(1)    12B9 : 03                         inx     B
(1)    12BA : 0A                         ldax    B
(1)    12BB : 47                         mov     B, A
(1)    12BC : 4D                         mov     C, L            ; BC=divident
(1)    12BD : 1A                         ldax    D
(1)    12BE : 6F                         mov     L, A
(1)    12BF : 13                         inx     D
(1)    12C0 : 1A                         ldax    D
(1)    12C1 : 57                         mov     D, A
(1)    12C2 : 5D                         mov     E, L            ; DE=divisor
(1)    12C3 : CD FC 11                   call    umul16          ; HL=reminder BC=quotient
(1)    12C6 : 60                         mov     H, B
(1)    12C7 : 69                         mov     L, C            ; HL=quotient
(1)    12C8 : D1                         pop     D
(1)    12C9 : C1                         pop     B
(1)    12CA : 7D                         mov     A, L
(1)    12CB : 02                         stax    B
(1)    12CC : 03                         inx     B
(1)    12CD : 7C                         mov     A, H
(1)    12CE : 02                         stax    B
(1)    12CF : 0B                         dcx     B               ; @BC=HL
(1)    12D0 : C9                         ret
(1)    12D1 :
(1)    12D1 :                    ;;; Signed division: divident *= divisor
(1)    12D1 :                    ;;; @param @BC: divident
(1)    12D1 :                    ;;; @param @DE: divisor
(1)    12D1 :                    ;;; @clobber HL A
(1)    12D1 :                    divsi2:
(1)    12D1 : C5                         push    B
(1)    12D2 : D5                         push    D
(1)    12D3 : 0A                         ldax    B
(1)    12D4 : 6F                         mov     L, A
(1)    12D5 : 03                         inx     B
(1)    12D6 : 0A                         ldax    B
(1)    12D7 : 47                         mov     B, A
(1)    12D8 : 4D                         mov     C, L            ; BC=divident
(1)    12D9 : 60                         mov     H, B            ; H=high(divident)
(1)    12DA : B7                         ora     A
(1)    12DB : F2 E4 12                   jp      divsi2_abs_divident
(1)    12DE : 2F                         cma
(1)    12DF : 47                         mov     B, A
(1)    12E0 : 79                         mov     A, C
(1)    12E1 : 2F                         cma
(1)    12E2 : 4F                         mov     C, A
(1)    12E3 : 03                         inx     B               ; divident = -divident
(1)    12E4 :                    divsi2_abs_divident:
(1)    12E4 : 1A                         ldax    D
(1)    12E5 : 6F                         mov     L, A
(1)    12E6 : 13                         inx     D
(1)    12E7 : 1A                         ldax    D
(1)    12E8 : 57                         mov     D, A
(1)    12E9 : 5D                         mov     E, L            ; DE=divisor
(1)    12EA : AC                         xra     H               ; H=high(divident^divisor)
(1)    12EB : F5                         push    PSW             ; save sign
(1)    12EC : 7A                         mov     A, D
(1)    12ED : B7                         ora     A
(1)    12EE : F2 F7 12                   jp      divsi2_divide
(1)    12F1 : 2F                         cma
(1)    12F2 : 57                         mov     D, A
(1)    12F3 : 7B                         mov     A, E
(1)    12F4 : 2F                         cma
(1)    12F5 : 5F                         mov     E, A
(1)    12F6 : 13                         inx     D               ; divisor = -divisor
(1)    12F7 :                    divsi2_divide:
(1)    12F7 : CD 73 12                   call    udiv16          ; BC = divident / divisor
(1)    12FA : 60                         mov     H, B
(1)    12FB : 69                         mov     L, C            ; HL=quotient
(1)    12FC : C1                         pop     B               ; B=sign
(1)    12FD : 78                         mov     A, B
(1)    12FE : B7                         ora     A
(1)    12FF : F2 09 13                   jp      divsi2_return
(1)    1302 : 7C                         mov     A, H
(1)    1303 : 2F                         cma
(1)    1304 : 67                         mov     H, A
(1)    1305 : 7D                         mov     A, L
(1)    1306 : 2F                         cma
(1)    1307 : 6F                         mov     L, A
(1)    1308 : 23                         inx     H               ; quotient=-quotient
(1)    1309 :                    divsi2_return:
(1)    1309 : D1                         pop     D
(1)    130A : C1                         pop     B
(1)    130B : 7D                         mov     A, L
(1)    130C : 02                         stax    B
(1)    130D : 03                         inx     B
(1)    130E : 7C                         mov     A, H
(1)    130F : 02                         stax    B
(1)    1310 : 0B                         dcx     B               ; @BC=result
(1)    1311 : C9                         ret
(1)    1312 :
(1)    1312 :                    ;;; Local Variables:
(1)    1312 :                    ;;; mode: asm
(1)    1312 :                    ;;; End:
(1)    1312 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       1312 :
       1312 :                            end

          0 :                            cpu     8085
          0 :                            include "i8085.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            include "i8080.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; i8080
(2)       0 :                    ;;; FLAGS Register
(2)       0 : =80                F_SIGN:         equ     10000000B ; set to 1 if negative
(2)       0 : =40                F_ZERO:         equ     01000000B ; set to 1 if zero
(2)       0 : =10                F_HALF_CARRY:   equ     00010000B ; set to 1 if carry from bit-3
(2)       0 : =4                 F_PARITY:       equ     00000100B ; set to 1 if even parity
(2)       0 : =1                 F_CARRY:        equ     00000001B ; set to 1 if carry
(2)       0 :                    ;;; Interrupt origin
(2)       0 : =0                 ORG_RESET:      equ     0000H   ; RESET
(2)       0 : =0                 ORG_RST0:       equ     0000H   ; RST 0
(2)       0 : =8                 ORG_RST1:       equ     0008H   ; RST 1
(2)       0 : =10                ORG_RST2:       equ     0010H   ; RST 2
(2)       0 : =18                ORG_RST3:       equ     0018H   ; RST 3
(2)       0 : =20                ORG_RST4:       equ     0020H   ; RST 4
(2)       0 : =28                ORG_RST5:       equ     0028H   ; RST 5
(2)       0 : =30                ORG_RST6:       equ     0030H   ; RST 6
(2)       0 : =38                ORG_RST7:       equ     0038H   ; RST 3
(1)       0 :                    ;;; i8085
(1)       0 :                    ;;; Set Innterrupt Maske
(1)       0 : =80                SIM_SOD:        equ     10000000B ; Serial Output Data
(1)       0 : =40                SIM_SDE:        equ     01000000B ; Serial Data Enable
(1)       0 : =10                SIM_R75:        equ     00010000B ; Reset RST 7.5 latch
(1)       0 : =8                 SIM_MSE:        equ     00001000B ; Mask Set Enable
(1)       0 : =4                 SIM_M75:        equ     00000100B ; RST 7.5 Mask
(1)       0 : =2                 SIM_M65:        equ     00000010B ; RST 6.5 Mask
(1)       0 : =1                 SIM_M55:        equ     00000001B ; RST 5.5 Mask
(1)       0 :                    ;;; Read Interrupt Mask
(1)       0 : =80                RIM_SID:        equ     10000000B ; Serial Input Data
(1)       0 : =40                RIM_I75:        equ     01000000B ; RST 7.5 Pending
(1)       0 : =20                RIM_I65:        equ     00100000B ; RST 6.5 Pending
(1)       0 : =10                RIM_I55:        equ     00010000B ; RST 5.5 Pending
(1)       0 : =8                 RIM_IE:         equ     00001000B ; Interrupt Enable
(1)       0 : =4                 RIM_M75:        equ     SIM_M75
(1)       0 : =2                 RIM_M65:        equ     SIM_M65
(1)       0 : =1                 RIM_M55:        equ     SIM_M55
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =24                ORG_TRAP:       equ     0024H   ; TRAP
(1)       0 : =2C                ORG_RST55:      equ     002CH   ; RST 5.5
(1)       0 : =34                ORG_RST65:      equ     0034H   ; RST 6.5
(1)       0 : =3C                ORG_RST75:      equ     003CH   ; RST 7.5
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =0                 USART:          equ     00H
          0 : =0                 USARTD:         equ     USART+0 ; Receive/Transmit data
          0 : =1                 USARTS:         equ     USART+1 ; Srtatus register
          0 : =1                 USARTC:         equ     USART+1 ; Control register
          0 : =2                 USARTRV:        equ     USART+2 ; Receive interrupt vector (ORG_*)
          0 : =3                 USARTTV:        equ     USART+3 ; Transmit interrupt vector (ORG_*)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     00000100B   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     00000010B   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     00000001B   ; Transmitter ready
          0 : =27                TXRX_ENABLE     equ     CMD_RTS_bm|CMD_DTR_bm|CMD_RxEN_bm|CMD_TxEN_bm
          0 : =37                RXERR_RESET     equ     TXRX_ENABLE | CMD_ER_bm
          0 :
       2000 :                            org     2000H
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       ds      tx_queue_size
       2100 : 01                 tx_intr_enable: db      1
       2101 :
       1000 :                            org     1000H
       1000 : =1000              stack:  equ     $
       1000 :
          0 :                            org     ORG_RESET
          0 : C3 37 00                   jmp     init
          3 :
         2C :                            org     ORG_RST55
         2C : C3 7E 01                   jmp     isr_intr_rx
         2F :
         34 :                            org     ORG_RST65
         34 : C3 A0 01                   jmp     isr_intr_tx
         37 :
         37 :                    init:
         37 : 31 00 10                   lxi     sp, stack
         3A : 21 00 20                   lxi     h, rx_queue
         3D : 06 80                      mvi     b, rx_queue_size
         3F : CD 1C 01                   call     queue_init
         42 : 21 80 20                   lxi     h, tx_queue
         45 : 06 80                      mvi     b, tx_queue_size
         47 : CD 1C 01                   call     queue_init
         4A :                    init_usart:
         4A : AF                         xra     a               ; clear A
         4B : D3 01                      out     USARTC
         4D : D3 01                      out     USARTC
         4F : D3 01                      out     USARTC          ; safest way to sync mode
         51 : 3E 40                      mvi     a, CMD_IR_bm
         53 : D3 01                      out     USARTC          ; reset
         55 : 00                         nop
         56 : 00                         nop
         57 : 3E 4E                      mvi     a, MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
         59 : D3 01                      out     USARTC          ; async 1stop 8data x16
         5B : 00                         nop
         5C : 00                         nop
         5D : 3E 27                      mvi     a, TXRX_ENABLE
         5F : D3 01                      out     USARTC          ; RTS/DTR, error reset, Rx enable, Tx enable
         61 : 3E 2C                      mvi     a, ORG_RST55
         63 : D3 02                      out     USARTRV         ; enable RxRDY interrupt using RST 5.5
         65 : 3E 00                      mvi     a, ORG_RESET
         67 : D3 03                      out     USARTTV         ; disable TxRDY interrupt
         69 : 32 00 21                   sta     tx_intr_enable
         6C :
         6C : 20                         rim
         6D : E6 FC                      ani     ~(SIM_M55|SIM_M65) ; enable RST 5.5/RST 5.6
         6F : F6 18                      ori     SIM_MSE|SIM_R75
         71 : 30                         sim
         72 : FB                         ei
         73 :
         73 :                    receive_loop:
         73 : CD F1 00                   call    getchar
         76 : D2 73 00                   jnc     receive_loop
         79 : B7                         ora     a
         7A : C2 7E 00                   jnz     echo_back
         7D : 76                         hlt
         7E :                    echo_back:
         7E : 47                         mov     b, a
         7F : CD FC 00                   call    putchar         ; echo
         82 : 3E 20                      mvi     a, ' '          ; space
         84 : CD FC 00                   call    putchar
         87 : CD A2 00                   call    put_hex8        ; print in hex
         8A : 3E 20                      mvi     a, ' '          ; space
         8C : CD FC 00                   call    putchar
         8F : CD C6 00                   call    put_bin8        ; print in binary
         92 : CD 98 00                   call    newline
         95 : C3 73 00                   jmp     receive_loop
         98 :
         98 :                    ;;; Put newline
         98 :                    ;;; @clobber A
         98 :                    newline:
         98 : 3E 0D                      mvi     a, 0DH
         9A : CD FC 00                   call    putchar
         9D : 3E 0A                      mvi     a, 0AH
         9F : C3 FC 00                   jmp     putchar
         A2 :
         A2 :                    ;;; Print uint8_t in hex
         A2 :                    ;;; @param B uint8_t value to be printed in hex.
         A2 :                    ;;; @clobber A
         A2 :                    put_hex8:
         A2 : 3E 30                      mvi     a, '0'
         A4 : CD FC 00                   call    putchar
         A7 : 3E 78                      mvi     a, 'x'
         A9 : CD FC 00                   call    putchar
         AC : 78                         mov     a, b
         AD : 0F                         rrc
         AE : 0F                         rrc
         AF : 0F                         rrc
         B0 : 0F                         rrc
         B1 : CD B5 00                   call    put_hex4
         B4 : 78                         mov     a, b
         B5 :                    put_hex4:
         B5 : E6 0F                      ani     0FH
         B7 : FE 0A                      cpi     10
         B9 : DA C1 00                   jc      put_hex8_dec    ; A<10
         BC : C6 37                      adi     'A'-10
         BE : C3 FC 00                   jmp     putchar
         C1 :                    put_hex8_dec:
         C1 : C6 30                      adi     '0'
         C3 : C3 FC 00                   jmp     putchar
         C6 :
         C6 :                    ;;; Print uint8_t in binary
         C6 :                    ;;; @param B uint8_t value to be printed in binary.
         C6 :                    ;;; @clobber A
         C6 :                    put_bin8:
         C6 : C5                         push    b
         C7 : 3E 30                      mvi     a, '0'
         C9 : CD FC 00                   call    putchar
         CC : 3E 62                      mvi     a, 'b'
         CE : CD FC 00                   call    putchar
         D1 : 78                         mov     a, b
         D2 : CD DB 00                   call    put_bin4
         D5 : 07                         rlc
         D6 : CD DB 00                   call    put_bin4
         D9 : C1                         pop     b
         DA : C9                         ret
         DB :                    put_bin4:
         DB : CD DF 00                   call    put_bin2
         DE : 07                         rlc
         DF :                    put_bin2:
         DF : CD E3 00                   call    put_bin1
         E2 : 07                         rlc
         E3 :                    put_bin1:
         E3 : 0E 30                      mvi     c, '0'
         E5 : B7                         ora     a               ; chech MSB
         E6 : F2 EA 00                   jp      put_bin0        ; MSB=0
         E9 : 0C                         inr     c               ; MSB=1
         EA :                    put_bin0:
         EA : 47                         mov     b, a
         EB : 79                         mov     a, c
         EC : CD FC 00                   call    putchar
         EF : 78                         mov     a, b
         F0 : C9                         ret
         F1 :
         F1 :                    ;;; Get character
         F1 :                    ;;; @return A
         F1 :                    ;;; @return CC.C 0 if no character
         F1 :                    getchar:
         F1 : E5                         push    h
         F2 : 21 00 20                   lxi     h, rx_queue
         F5 : F3                         di
         F6 : CD 5A 01                   call    queue_remove
         F9 : FB                         ei
         FA : E1                         pop     h
         FB : C9                         ret
         FC :
         FC :                    ;;; Put character
         FC :                    ;;; @param A
         FC :                    putchar:
         FC : F5                         push    psw
         FD : E5                         push    h
         FE : 21 80 20                   lxi     h, tx_queue
        101 :                    putchar_retry:
        101 : F3                         di
        102 : CD 32 01                   call    queue_add
        105 : FB                         ei
        106 : D2 01 01                   jnc     putchar_retry   ; branch if queue is full
        109 : E1                         pop     h
        10A : 3A 00 21                   lda     tx_intr_enable
        10D : B7                         ora     a
        10E : C2 1A 01                   jnz     putchar_exit    ; already enabled
        111 : 3E 34                      mvi     a, ORG_RST65
        113 : F3                         di
        114 : D3 03                      out     USARTTV
        116 : 32 00 21                   sta     tx_intr_enable
        119 : FB                         ei
        11A :                    putchar_exit:
        11A : F1                         pop     psw
        11B : C9                         ret
        11C :
        11C :                            include "queue.inc"
(1)     11C :                    ;;; [queue] queue structure
(1)     11C : =0                 queue_len:      equ     0       ; queue length
(1)     11C : =1                 queue_size:     equ     1       ; buffer size
(1)     11C : =2                 queue_put:      equ     2       ; queue put index
(1)     11C : =3                 queue_get:      equ     3       ; queue get index
(1)     11C : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     11C :
(1)     11C :                    ;;; [queue] Initialize queue
(1)     11C :                    ;;; @param HL queue work space pointer
(1)     11C :                    ;;; @param B queue work space size
(1)     11C :                    ;;; @clobber B
(1)     11C :                    queue_init:
(1)     11C : F5                         push    psw
(1)     11D : E5                         push    h
(1)     11E : AF                         xra     a
(1)     11F : 77                         mov     m, a            ; queue_len
(1)     120 : 78                         mov     a, b
(1)     121 : DE 04                      sbi     queue_buf
(1)     123 : 23                         inx     h
(1)     124 : 77                         mov     m, a            ; queue_size
(1)     125 : C6 02                      adi     2               ; for queue_put and queue_get
(1)     127 : 47                         mov     b,a
(1)     128 : AF                         xra     a
(1)     129 :                    queue_init_loop:
(1)     129 : 23                         inx     h
(1)     12A : 77                         mov     m, a
(1)     12B : 05                         dcr     b
(1)     12C : C2 29 01                   jnz     queue_init_loop
(1)     12F : E1                         pop     h
(1)     130 : F1                         pop     psw
(1)     131 : C9                         ret
(1)     132 :
(1)     132 :                    ;;; [queue] Add an element to queue
(1)     132 :                    ;;; @param HL queue work space pointer
(1)     132 :                    ;;; @param A an element
(1)     132 :                    ;;; @return F.C 0 if queue is full
(1)     132 :                    queue_add:
(1)     132 : D5                         push    d
(1)     133 : 57                         mov     d, a            ; save an element
(1)     134 : 7E                         mov     a, m            ; queue_len
(1)     135 : 23                         inx     h
(1)     136 : BE                         cmp     m               ; queue_size
(1)     137 : 2B                         dcx     h
(1)     138 : 7A                         mov     a, d            ; restore an element
(1)     139 : DA 3E 01                   jc      queue_add_store ; queue_len < queue_size
(1)     13C : D1                         pop     d               ; cleared carry is ensured by |jc|
(1)     13D : C9                         ret
(1)     13E :                    queue_add_store:
(1)     13E : E5                         push    h
(1)     13F : 34                         inr     m               ; queue_len++
(1)     140 : 23                         inx     h
(1)     141 : 23                         inx     h
(1)     142 : 5E                         mov     e, m            ; queue_put
(1)     143 : 16 00                      mvi     d, 0
(1)     145 : EB                         xchg                    ; DE points queue_put
(1)     146 : 19                         dad     d
(1)     147 : 23                         inx     h
(1)     148 : 23                         inx     h               ; offset of queue_buf
(1)     149 : 77                         mov     m, a            ; store an element
(1)     14A : EB                         xchg                    ; DE points a stored element
(1)     14B : 7E                         mov     a, m            ; queue_put
(1)     14C : 3C                         inr     a               ; queue_put++
(1)     14D : 2B                         dcx     h
(1)     14E : BE                         cmp     m               ; queue_size
(1)     14F : 23                         inx     h
(1)     150 : DA 54 01                   jc      queue_add_update ; queue_put < queue_size
(1)     153 : AF                         xra     a                ; wrap around
(1)     154 :                    queue_add_update:
(1)     154 : 77                         mov     m, a            ; queue_put
(1)     155 : 1A                         ldax    d               ; restore an element
(1)     156 : E1                         pop     h
(1)     157 : D1                         pop     d
(1)     158 : 37                         stc                     ; set carry
(1)     159 : C9                         ret
(1)     15A :
(1)     15A :                    ;;; [queue] Remove an element from queue
(1)     15A :                    ;;; @param HL queue work space pointer
(1)     15A :                    ;;; @return A an element
(1)     15A :                    ;;; @return F.C 0 if queue is empty
(1)     15A :                    queue_remove:
(1)     15A : 7E                         mov     a, m            ; queue_len
(1)     15B : B7                         ora     a               ; clear carry
(1)     15C : C2 60 01                   jnz     queue_remove_elem ; queue_len > 0
(1)     15F : C9                         ret                     ; carry is cleared by |ora|
(1)     160 :                    queue_remove_elem:
(1)     160 : D5                         push    d
(1)     161 : E5                         push    h
(1)     162 : 35                         dcr     m               ; queue_len--
(1)     163 : 23                         inx     h
(1)     164 : 23                         inx     h
(1)     165 : 23                         inx     h
(1)     166 : 7E                         mov     a, m            ; queue_get
(1)     167 : 5F                         mov     e, a
(1)     168 : 16 00                      mvi     d, 0
(1)     16A : EB                         xchg                    ; DE points queue_get
(1)     16B : 19                         dad     d
(1)     16C : 23                         inx     h               ; offset of queue_buf
(1)     16D : EB                         xchg                    ; DE points an element to read
(1)     16E : 3C                         inr     a               ; queue_get++
(1)     16F : 2B                         dcx     h
(1)     170 : 2B                         dcx     h
(1)     171 : BE                         cmp     m               ; queue_size
(1)     172 : 23                         inx     h
(1)     173 : 23                         inx     h
(1)     174 : DA 78 01                   jc      queue_remove_update ; queue_get < queue_size
(1)     177 : AF                         xra     a                   ; wrap around
(1)     178 :                    queue_remove_update:
(1)     178 : 77                         mov     m, a            ; queue_get
(1)     179 : 1A                         ldax    d               ; read an element
(1)     17A : E1                         pop     h
(1)     17B : D1                         pop     d
(1)     17C : 37                         stc                     ; set carry
(1)     17D : C9                         ret
(1)     17E :
(1)     17E :                    ;;; Local Variables:
(1)     17E :                    ;;; mode: asm
(1)     17E :                    ;;; End:
(1)     17E :                    ;;; vim: set ft=asm et ts=4 sw=4:
        17E :
        17E :                    isr_intr_rx:
        17E : F5                         push    psw
        17F : E5                         push    h
        180 : C5                         push    b
        181 : DB 01                      in      USARTS
        183 : 47                         mov     b, a
        184 : E6 38                      ani     ST_FE_bm|ST_OE_bm|ST_PE_bm
        186 : CA 8D 01                   jz      isr_intr_receive
        189 : 3E 37                      mvi     a, RXERR_RESET
        18B : D3 01                      out     USARTC          ; reset error flags
        18D :                    isr_intr_receive:
        18D : 78                         mov     a, b
        18E : E6 02                      ani     ST_RxRDY_bm
        190 : CA 9B 01                   jz      isr_intr_rx_exit
        193 : DB 00                      in      USARTD          ; receive character
        195 : 21 00 20                   lxi     h, rx_queue
        198 : CD 32 01                   call    queue_add
        19B :                    isr_intr_rx_exit:
        19B : C1                         pop     b
        19C : E1                         pop     h
        19D : F1                         pop     psw
        19E : FB                         ei
        19F : C9                         ret
        1A0 :
        1A0 :                    isr_intr_tx:
        1A0 : F5                         push    psw
        1A1 : E5                         push    h
        1A2 : DB 01                      in      USARTS
        1A4 : E6 01                      ani     ST_TxRDY_bm
        1A6 : CA B4 01                   jz      isr_intr_tx_exit
        1A9 : 21 80 20                   lxi     h, tx_queue
        1AC : CD 5A 01                   call    queue_remove
        1AF : D2 B8 01                   jnc     isr_intr_send_empty
        1B2 : D3 00                      out     USARTD          ; send character
        1B4 :                    isr_intr_tx_exit:
        1B4 : E1                         pop     h
        1B5 : F1                         pop     psw
        1B6 : FB                         ei
        1B7 : C9                         ret
        1B8 :                    isr_intr_send_empty:
        1B8 : AF                         xra     a
        1B9 : D3 03                      out     USARTTV         ; disable Tx interrupt
        1BB : 32 00 21                   sta     tx_intr_enable
        1BE : C3 B4 01                   jmp     isr_intr_tx_exit

          0 :                            cpu     8085
          0 :                            include "i8085.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            include "i8080.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; i8080
(2)       0 :                    ;;; FLAGS Register
(2)       0 : =80                F_SIGN:         equ     10000000B ; set to 1 if negative
(2)       0 : =40                F_ZERO:         equ     01000000B ; set to 1 if zero
(2)       0 : =10                F_HALF_CARRY:   equ     00010000B ; set to 1 if carry from bit-3
(2)       0 : =4                 F_PARITY:       equ     00000100B ; set to 1 if even parity
(2)       0 : =1                 F_CARRY:        equ     00000001B ; set to 1 if carry
(2)       0 :                    ;;; Interrupt origin
(2)       0 : =0                 ORG_RESET:      equ     0000H   ; RESET
(2)       0 : =0                 ORG_RST0:       equ     0000H   ; RST 0
(2)       0 : =8                 ORG_RST1:       equ     0008H   ; RST 1
(2)       0 : =10                ORG_RST2:       equ     0010H   ; RST 2
(2)       0 : =18                ORG_RST3:       equ     0018H   ; RST 3
(2)       0 : =20                ORG_RST4:       equ     0020H   ; RST 4
(2)       0 : =28                ORG_RST5:       equ     0028H   ; RST 5
(2)       0 : =30                ORG_RST6:       equ     0030H   ; RST 6
(2)       0 : =38                ORG_RST7:       equ     0038H   ; RST 3
(1)       0 :                    ;;; i8085
(1)       0 :                    ;;; Set Innterrupt Maske
(1)       0 : =80                SIM_SOD:        equ     10000000B ; Serial Output Data
(1)       0 : =40                SIM_SDE:        equ     01000000B ; Serial Data Enable
(1)       0 : =10                SIM_R75:        equ     00010000B ; Reset RST 7.5 latch
(1)       0 : =8                 SIM_MSE:        equ     00001000B ; Mask Set Enable
(1)       0 : =4                 SIM_M75:        equ     00000100B ; RST 7.5 Mask
(1)       0 : =2                 SIM_M65:        equ     00000010B ; RST 6.5 Mask
(1)       0 : =1                 SIM_M55:        equ     00000001B ; RST 5.5 Mask
(1)       0 :                    ;;; Read Interrupt Mask
(1)       0 : =80                RIM_SID:        equ     10000000B ; Serial Input Data
(1)       0 : =40                RIM_I75:        equ     01000000B ; RST 7.5 Pending
(1)       0 : =20                RIM_I65:        equ     00100000B ; RST 6.5 Pending
(1)       0 : =10                RIM_I55:        equ     00010000B ; RST 5.5 Pending
(1)       0 : =8                 RIM_IE:         equ     00001000B ; Interrupt Enable
(1)       0 : =4                 RIM_M75:        equ     SIM_M75
(1)       0 : =2                 RIM_M65:        equ     SIM_M65
(1)       0 : =1                 RIM_M55:        equ     SIM_M55
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =24                ORG_TRAP:       equ     0024H   ; TRAP
(1)       0 : =2C                ORG_RST55:      equ     002CH   ; RST 5.5
(1)       0 : =34                ORG_RST65:      equ     0034H   ; RST 6.5
(1)       0 : =3C                ORG_RST75:      equ     003CH   ; RST 7.5
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =0                 USART:  equ     00H
          0 : =0                 USARTD: equ     USART+0         ; Data register
          0 : =1                 USARTS: equ     USART+1         ; Status register
          0 : =1                 USARTC: equ     USART+1         ; Control register
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     00000100B   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     00000010B   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     00000001B   ; Transmitter ready
          0 :
       1000 :                            org     1000H
       1000 : =1000              stack:  equ     $
       1000 :
          0 :                            org     ORG_RESET
          0 : C3 00 01                   jmp     init_usart
          3 :
        100 :                            org     0100H
        100 :                    init_usart:
        100 : 31 00 10                   lxi     sp, stack
        103 : AF                         xra     A               ; clear A
        104 : D3 01                      out     USARTC
        106 : D3 01                      out     USARTC
        108 : D3 01                      out     USARTC          ; safest way to sync mode
        10A : 3E 40                      mvi     A, CMD_IR_bm
        10C : D3 01                      out     USARTC          ; reset
        10E : 00                         nop
        10F : 00                         nop
        110 : 3E 4E                      mvi     A, MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
        112 : D3 01                      out     USARTC          ; async 1stop 8data x16
        114 : 00                         nop
        115 : 00                         nop
        116 : 3E 37                      mvi     A, CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
        118 : D3 01                      out     USARTC          ; RTS/DTR, error reset, Rx enable, Tx enable
        11A :
        11A : CD 00 10                   call    arith
        11D : 76                         hlt
        11E :
        11E :                    putchar:
        11E : F5                         push    PSW
        11F :                    putchar_loop:
        11F : DB 01                      in      USARTS
        121 : E6 01                      ani     ST_TxRDY_bm
        123 : CA 1F 01                   jz      putchar_loop
        126 : F1                         pop     PSW
        127 : D3 00                      out     USARTD
        129 : C9                         ret
        12A :
        12A :                    newline:
        12A : F5                         push    PSW
        12B : 3E 0D                      mvi     A, 0DH
        12D : CD 1E 01                   call    putchar
        130 : 3E 0A                      mvi     A, 0AH
        132 : CD 1E 01                   call    putchar
        135 : F1                         pop     PSW
        136 : C9                         ret
        137 :
        137 :                    putspace:
        137 : F5                         push    PSW
        138 : 3E 20                      mvi     A, ' '
        13A : CD 1E 01                   call    putchar
        13D : F1                         pop     PSW
        13E : C9                         ret
        13F :
        13F :                    ;;; Print unsigned 16-bit integer as decimal
        13F :                    ;;; @param HL: value
        13F :                    ;;; @clobber HL
        13F :                    print_uint16:
        13F : F5                         push    PSW
        140 :                    print_uint16_inner:
        140 : C5                         push    B
        141 : D5                         push    D
        142 : 44                         mov     B, H
        143 : 4D                         mov     C, L
        144 : 78                         mov     A, B
        145 : B1                         ora     C
        146 : CA 64 01                   jz      print_uint16_zero
        149 : CD 50 01                   call    print_uint16_loop
        14C : D1                         pop     D
        14D : C1                         pop     B
        14E : F1                         pop     PSW
        14F : C9                         ret
        150 :                    print_uint16_loop:
        150 : 78                         mov     A, B
        151 : B1                         ora     C
        152 : C8                         rz
        153 : 11 0A 00                   lxi     D, 10
        156 : CD DA 12                   call    udiv16
        159 : E5                         push    H               ; push reminder
        15A : CD 50 01                   call    print_uint16_loop
        15D : E1                         pop     H               ; pop reminder
        15E : 7D                         mov     A, L
        15F : C6 30                      adi     '0'
        161 : C3 1E 01                   jmp     putchar
        164 :                    print_uint16_zero:
        164 : 3E 30                      mvi     A, '0'
        166 : CD 1E 01                   call    putchar
        169 : D1                         pop     D
        16A : C1                         pop     B
        16B : F1                         pop     PSW
        16C : C9                         ret
        16D :
        16D :                    ;;; Print signed 16-bit integer as decimal
        16D :                    ;;; @param HL: value
        16D :                    ;;; @clobber HL
        16D :                    print_int16:
        16D : F5                         push    PSW
        16E : 7C                         mov     A, H
        16F : B7                         ora     A
        170 : F2 40 01                   jp      print_uint16_inner
        173 : 3E 2D                      mvi     A, '-'
        175 : CD 1E 01                   call    putchar
        178 : 7D                         mov     A, L
        179 : 2F                         cma
        17A : 6F                         mov     L, A
        17B : 7C                         mov     A, H
        17C : 2F                         cma
        17D : 67                         mov     H, A
        17E : 23                         inx     H               ; HL=-value
        17F : C3 40 01                   jmp     print_uint16_inner
        182 :
        182 :                    expr:
        182 : F5                         push    PSW
        183 : 0A                         ldax    B
        184 : 6F                         mov     L, A
        185 : 03                         inx     B
        186 : 0A                         ldax    B
        187 : 67                         mov     H, A
        188 : 0B                         dcx     B               ; HL=@BC
        189 : CD 6D 01                   call    print_int16
        18C : CD 37 01                   call    putspace
        18F : F1                         pop     PSW
        190 : CD 1E 01                   call    putchar
        193 : CD 37 01                   call    putspace
        196 : 1A                         ldax    D
        197 : 6F                         mov     L, A
        198 : 13                         inx     D
        199 : 1A                         ldax    D
        19A : 67                         mov     H, A
        19B : 1B                         dcx     D
        19C : C3 6D 01                   jmp     print_int16     ; HL=@DE
        19F :
        19F :                    answer:
        19F : CD 37 01                   call    putspace
        1A2 : 3E 3D                      mvi     A, '='
        1A4 : CD 1E 01                   call    putchar
        1A7 : CD 37 01                   call    putspace
        1AA : 2A 00 02                   lhld    vA
        1AD : CD 6D 01                   call    print_int16
        1B0 : C3 2A 01                   jmp     newline
        1B3 :
        1B3 :                    comp:
        1B3 : 01 00 02                   lxi     B, vA
        1B6 : 11 02 02                   lxi     D, vB
        1B9 : CD 3D 12                   call    cmpsi2
        1BC : CA CF 01                   jz      comp_eq
        1BF : F2 CA 01                   jp      comp_gt
        1C2 : FA D4 01                   jm      comp_lt
        1C5 : 3E 3F                      mvi     A, '?'
        1C7 : C3 D6 01                   jmp     comp_out
        1CA :                    comp_gt:
        1CA : 3E 3E                      mvi     A, '>'
        1CC : C3 D6 01                   jmp     comp_out
        1CF :                    comp_eq:
        1CF : 3E 3D                      mvi     A, '='
        1D1 : C3 D6 01                   jmp     comp_out
        1D4 :                    comp_lt:
        1D4 : 3E 3C                      mvi     A, '<'
        1D6 :                    comp_out:
        1D6 : CD 82 01                   call    expr
        1D9 : C3 2A 01                   jmp     newline
        1DC :
        200 :                            org     0200H
        200 :
        200 :                    vA:     ds      2
        202 :                    vB:     ds      2
        204 :
       1000 :                            org     1000H
       1000 :
       1000 :                    arith:
       1000 : 01 00 02                   lxi     B, vA
       1003 : 11 02 02                   lxi     D, vB
       1006 :
       1006 : 21 00 00                   lxi     H, 0
       1009 : 22 00 02                   shld    vA
       100C : 21 A0 92                   lxi     H, -28000
       100F : 22 02 02                   shld    vB
       1012 : 3E 2D                      mvi     A, '-'
       1014 : CD 82 01                   call    expr
       1017 : CD 0C 12                   call    negsi2
       101A : CD 9F 01                   call    answer          ; 28000
       101D :
       101D : 21 00 00                   lxi     H, 0
       1020 : 22 00 02                   shld    vA
       1023 : 21 60 6D                   lxi     H, 28000
       1026 : 22 02 02                   shld    vB
       1029 : 3E 2D                      mvi     A, '-'
       102B : CD 82 01                   call    expr
       102E : CD 0C 12                   call    negsi2
       1031 : CD 9F 01                   call    answer          ; -28000
       1034 :
       1034 : 21 50 46                   lxi     H, 18000
       1037 : 22 00 02                   shld    vA
       103A : 21 60 6D                   lxi     H, 28000
       103D : 22 02 02                   shld    vB
       1040 : 3E 2B                      mvi     A, '+'
       1042 : CD 82 01                   call    expr
       1045 : CD 1B 12                   call    addsi2
       1048 : CD 9F 01                   call    answer          ; -19536
       104B :
       104B : 21 50 46                   lxi     H, 18000
       104E : 22 00 02                   shld    vA
       1051 : 21 B0 B9                   lxi     H, -18000
       1054 : 22 02 02                   shld    vB
       1057 : 3E 2B                      mvi     A, '+'
       1059 : CD 82 01                   call    expr
       105C : CD 1B 12                   call    addsi2
       105F : CD 9F 01                   call    answer          ; 0
       1062 :
       1062 : 21 B0 B9                   lxi     H, -18000
       1065 : 22 00 02                   shld    vA
       1068 : 21 B0 B9                   lxi     H, -18000
       106B : 22 02 02                   shld    vB
       106E : 3E 2B                      mvi     A, '+'
       1070 : CD 82 01                   call    expr
       1073 : CD 1B 12                   call    addsi2
       1076 : CD 9F 01                   call    answer          ; 29536
       1079 :
       1079 : 21 B0 B9                   lxi     H, -18000
       107C : 22 00 02                   shld    vA
       107F : 21 A0 92                   lxi     H, -28000
       1082 : 22 02 02                   shld    vB
       1085 : 3E 2D                      mvi     A, '-'
       1087 : CD 82 01                   call    expr
       108A : CD 2C 12                   call    subsi2
       108D : CD 9F 01                   call    answer          ; -10000
       1090 :
       1090 : 21 64 00                   lxi     H, 100
       1093 : 22 00 02                   shld    vA
       1096 : 21 2C 01                   lxi     H, 300
       1099 : 22 02 02                   shld    vB
       109C : 3E 2A                      mvi     A, '*'
       109E : CD 82 01                   call    expr
       10A1 : CD 9B 12                   call    mulsi2
       10A4 : CD 9F 01                   call    answer          ; 30000
       10A7 :
       10A7 : 21 2C 01                   lxi     H, 300
       10AA : 22 00 02                   shld    vA
       10AD : 21 38 FF                   lxi     H, -200
       10B0 : 22 02 02                   shld    vB
       10B3 : 3E 2A                      mvi     A, '*'
       10B5 : CD 82 01                   call    expr
       10B8 : CD 9B 12                   call    mulsi2
       10BB : CD 9F 01                   call    answer          ; 5536
       10BE :
       10BE : 21 64 00                   lxi     H, 100
       10C1 : 22 00 02                   shld    vA
       10C4 : 21 D4 FE                   lxi     H, -300
       10C7 : 22 02 02                   shld    vB
       10CA : 3E 2A                      mvi     A, '*'
       10CC : CD 82 01                   call    expr
       10CF : CD 9B 12                   call    mulsi2
       10D2 : CD 9F 01                   call    answer          ; -30000
       10D5 :
       10D5 : 21 38 FF                   lxi     H, -200
       10D8 : 22 00 02                   shld    vA
       10DB : 21 9C FF                   lxi     H, -100
       10DE : 22 02 02                   shld    vB
       10E1 : 3E 2A                      mvi     A, '*'
       10E3 : CD 82 01                   call    expr
       10E6 : CD 9B 12                   call    mulsi2
       10E9 : CD 9F 01                   call    answer          ; 20000
       10EC :
       10EC : 21 30 75                   lxi     H, 30000
       10EF : 22 00 02                   shld    vA
       10F2 : 21 64 00                   lxi     H, 100
       10F5 : 22 02 02                   shld    vB
       10F8 : 3E 2F                      mvi     A, '/'
       10FA : CD 82 01                   call    expr
       10FD : CD 1C 13                   call    udivsi2
       1100 : CD 9F 01                   call    answer          ; 30
       1103 :
       1103 : 21 38 FF                   lxi     H, -200
       1106 : 22 00 02                   shld    vA
       1109 : 21 64 00                   lxi     H, 100
       110C : 22 02 02                   shld    vB
       110F : 3E 2F                      mvi     A, '/'
       1111 : CD 82 01                   call    expr
       1114 : CD 38 13                   call    divsi2
       1117 : CD 9F 01                   call    answer          ; -2
       111A :
       111A : 21 D0 8A                   lxi     H, -30000
       111D : 22 00 02                   shld    vA
       1120 : 21 38 FF                   lxi     H, -200
       1123 : 22 02 02                   shld    vB
       1126 : 3E 2F                      mvi     A, '/'
       1128 : CD 82 01                   call    expr
       112B : CD 38 13                   call    divsi2
       112E : CD 9F 01                   call    answer          ; 150
       1131 :
       1131 : 21 D0 8A                   lxi     H, -30000
       1134 : 22 00 02                   shld    vA
       1137 : 21 4E 00                   lxi     H, 78
       113A : 22 02 02                   shld    vB
       113D : 3E 2F                      mvi     A, '/'
       113F : CD 82 01                   call    expr
       1142 : CD 38 13                   call    divsi2
       1145 : CD 9F 01                   call    answer          ; -384
       1148 :
       1148 : 21 D0 FF                   lxi     H, -48
       114B : 22 00 02                   shld    vA
       114E : 21 1E 00                   lxi     H, 30
       1151 : 22 02 02                   shld    vB
       1154 : CD B3 01                   call    comp
       1157 :
       1157 : 21 1E 00                   lxi     H, 30
       115A : 22 00 02                   shld    vA
       115D : 21 D0 FF                   lxi     H, -48
       1160 : 22 02 02                   shld    vB
       1163 : CD B3 01                   call    comp
       1166 :
       1166 : 21 88 13                   lxi     H, 5000
       1169 : 22 00 02                   shld    vA
       116C : 21 A0 0F                   lxi     H, 4000
       116F : 22 02 02                   shld    vB
       1172 : CD B3 01                   call    comp
       1175 :
       1175 : 21 88 13                   lxi     H, 5000
       1178 : 22 02 02                   shld    vB
       117B : CD B3 01                   call    comp
       117E :
       117E : 21 A0 0F                   lxi     H, 4000
       1181 : 22 00 02                   shld    vA
       1184 : CD B3 01                   call    comp
       1187 :
       1187 : 21 78 EC                   lxi     H, -5000
       118A : 22 00 02                   shld    vA
       118D : 21 60 F0                   lxi     H, -4000
       1190 : 22 02 02                   shld    vB
       1193 : CD B3 01                   call    comp
       1196 :
       1196 : 21 78 EC                   lxi     H, -5000
       1199 : 22 02 02                   shld    vB
       119C : CD B3 01                   call    comp
       119F :
       119F : 21 60 F0                   lxi     H, -4000
       11A2 : 22 00 02                   shld    vA
       11A5 : CD B3 01                   call    comp
       11A8 :
       11A8 : 21 BC 7F                   lxi     H, 32700
       11AB : 22 00 02                   shld    vA
       11AE : 21 58 7F                   lxi     H, 32600
       11B1 : 22 02 02                   shld    vB
       11B4 : CD B3 01                   call    comp
       11B7 :
       11B7 : 21 BC 7F                   lxi     H, 32700
       11BA : 22 02 02                   shld    vB
       11BD : CD B3 01                   call    comp
       11C0 :
       11C0 : 21 58 7F                   lxi     H, 32600
       11C3 : 22 00 02                   shld    vA
       11C6 : CD B3 01                   call    comp
       11C9 :
       11C9 : 21 44 80                   lxi     H, -32700
       11CC : 22 00 02                   shld    vA
       11CF : 21 A8 80                   lxi     H, -32600
       11D2 : 22 02 02                   shld    vB
       11D5 : CD B3 01                   call    comp
       11D8 :
       11D8 : 21 44 80                   lxi     H, -32700
       11DB : 22 02 02                   shld    vB
       11DE : CD B3 01                   call    comp
       11E1 :
       11E1 : 21 A8 80                   lxi     H, -32600
       11E4 : 22 00 02                   shld    vA
       11E7 : CD B3 01                   call    comp
       11EA :
       11EA : 21 50 46                   lxi     H, 18000
       11ED : 22 00 02                   shld    vA
       11F0 : 21 A0 92                   lxi     H, -28000
       11F3 : 22 02 02                   shld    vB
       11F6 : CD B3 01                   call    comp
       11F9 :
       11F9 : 21 50 46                   lxi     H, 18000
       11FC : 22 02 02                   shld    vB
       11FF : CD B3 01                   call    comp
       1202 :
       1202 : 21 A0 92                   lxi     H, -28000
       1205 : 22 00 02                   shld    vA
       1208 : CD B3 01                   call    comp
       120B :
       120B : C9                         ret
       120C :
       120C :                            include "arith.inc"
(1)    120C :                            cpu     8085
(1)    120C :
(1)    120C :                    ;;; Negation; result = -value
(1)    120C :                    ;;; @param @BC: result
(1)    120C :                    ;;; @param @DE: value
(1)    120C :                    ;;; @clobber A
(1)    120C :                    negsi2:
(1)    120C : 1A                         ldax    D
(1)    120D : 2F                         cma
(1)    120E : C6 01                      adi     1
(1)    1210 : 02                         stax    B
(1)    1211 : 13                         inx     D
(1)    1212 : 1A                         ldax    D
(1)    1213 : 2F                         cma
(1)    1214 : CE 00                      aci     0
(1)    1216 : 03                         inx     B
(1)    1217 : 02                         stax    B
(1)    1218 : 1B                         dcx     D
(1)    1219 : 0B                         dcx     B
(1)    121A : C9                         ret
(1)    121B :
(1)    121B :                    ;;; Signed addition: summand += addend
(1)    121B :                    ;;; @param @BC: summand
(1)    121B :                    ;;; @param @DE: addend
(1)    121B :                    ;;; @clobber A
(1)    121B :                    addsi2:
(1)    121B : E5                         push    H
(1)    121C : 1A                         ldax    D
(1)    121D : 6F                         mov     L, A
(1)    121E : 13                         inx     D
(1)    121F : 1A                         ldax    D
(1)    1220 : 67                         mov     H, A
(1)    1221 : 1B                         dcx     D
(1)    1222 : 0A                         ldax    B
(1)    1223 : 85                         add     L
(1)    1224 : 02                         stax    B
(1)    1225 : 03                         inx     B
(1)    1226 : 0A                         ldax    B
(1)    1227 : 8C                         adc     H
(1)    1228 : 02                         stax    B
(1)    1229 : 0B                         dcx     B
(1)    122A : E1                         pop     H
(1)    122B : C9                         ret
(1)    122C :
(1)    122C :                    ;;; Singed subtraction: minuend -= subtrahend
(1)    122C :                    ;;; @param @BC: minuend
(1)    122C :                    ;;; @param @DE: subtrahend
(1)    122C :                    ;;; @clobber A
(1)    122C :                    subsi2:
(1)    122C : E5                         push    H
(1)    122D : 1A                         ldax    D
(1)    122E : 6F                         mov     L, A
(1)    122F : 13                         inx     D
(1)    1230 : 1A                         ldax    D
(1)    1231 : 1B                         dcx     D
(1)    1232 : 67                         mov     H, A
(1)    1233 : 0A                         ldax    B
(1)    1234 : 95                         sub     L
(1)    1235 : 02                         stax    B
(1)    1236 : 03                         inx     B
(1)    1237 : 0A                         ldax    B
(1)    1238 : 9C                         sbb     H
(1)    1239 : 02                         stax    B
(1)    123A : 0B                         dcx     B
(1)    123B : E1                         pop     H
(1)    123C : C9                         ret
(1)    123D :
(1)    123D :                    ;;; Signed comparison: minuend - subtrahend
(1)    123D :                    ;;; @param @BC: minuend
(1)    123D :                    ;;; @param @DE: subtrahend
(1)    123D :                    ;;; @return PSW.Z, PSW.S
(1)    123D :                    ;;; @clobber A
(1)    123D :                    cmpsi2:
(1)    123D : C5                         push    B
(1)    123E : D5                         push    D
(1)    123F : E5                         push    H
(1)    1240 : 1A                         ldax    D
(1)    1241 : 6F                         mov     L, A
(1)    1242 : 13                         inx     D
(1)    1243 : 1A                         ldax    D
(1)    1244 : 57                         mov     D, A
(1)    1245 : 5D                         mov     E, L            ; DE=@DE
(1)    1246 : 0A                         ldax    B
(1)    1247 : 6F                         mov     L, A
(1)    1248 : 03                         inx     B
(1)    1249 : 0A                         ldax    B
(1)    124A : 47                         mov     B, A
(1)    124B : 4D                         mov     C, L            ; BC=@BC
(1)    124C : 79                         mov     A, C
(1)    124D : 93                         sub     E
(1)    124E : 6F                         mov     L, A
(1)    124F : 78                         mov     A, B
(1)    1250 : 9A                         sbb     D
(1)    1251 : 67                         mov     H, A            ; HL=@BC-@DE
(1)    1252 : B5                         ora     L
(1)    1253 : CA 5F 12                   jz      cmpsi2_return   ; PSW.Z=1
(1)    1256 : 7C                         mov     A, H            ; high(@BC-@DE)
(1)    1257 : A8                         xra     B               ; high((@BC-@DE)^@BC)
(1)    1258 : 6F                         mov     L, A
(1)    1259 : 78                         mov     A, B
(1)    125A : AA                         xra     D               ; high(@BC^@DE)
(1)    125B : A5                         ana     L               ; overflow
(1)    125C : AC                         xra     H               ; PSW.S=overflow^sign
(1)    125D : F6 01                      ori     1               ; clear PSW.Z
(1)    125F :                    cmpsi2_return:
(1)    125F : E1                         pop     H
(1)    1260 : D1                         pop     D
(1)    1261 : C1                         pop     B
(1)    1262 : C9                         ret
(1)    1263 :
(1)    1263 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    1263 :                    ;;; @param BC: multiplicand
(1)    1263 :                    ;;; @param DE: multiplier
(1)    1263 :                    ;;; @return HL: result
(1)    1263 :                    ;;; @clobber BC DE HL A
(1)    1263 :                    umul16:
(1)    1263 : 21 00 00                   lxi     H, 0            ; result=0
(1)    1266 : C3 7B 12                   jmp     umul16_check
(1)    1269 :                    umul16_loop:
(1)    1269 : B7                         ora     A               ; cleat PSW.C
(1)    126A : 7A                         mov     A, D            ; multiplier >>= 1
(1)    126B : 1F                         rar
(1)    126C : 57                         mov     D, A
(1)    126D : 7B                         mov     A, E
(1)    126E : 1F                         rar
(1)    126F : 5F                         mov     E, A
(1)    1270 : D2 74 12                   jnc     umul16_next     ; if lsb(multiplier) == 0
(1)    1273 : 09                         dad     B               ; result += multiplicand
(1)    1274 :                    umul16_next:
(1)    1274 : B7                         ora     A               ; clear PSW.C
(1)    1275 : 79                         mov     A, C            ; multiplicand <<= 1
(1)    1276 : 17                         ral
(1)    1277 : 4F                         mov     C, A
(1)    1278 : 78                         mov     A, B
(1)    1279 : 17                         ral
(1)    127A : 47                         mov     B, A
(1)    127B :                    umul16_check:
(1)    127B : 7A                         mov     A, D
(1)    127C : B3                         ora     E
(1)    127D : C2 69 12                   jnz     umul16_loop     ; while multiplier != 0
(1)    1280 :                    umul16_end:
(1)    1280 : C9                         ret
(1)    1281 :
(1)    1281 :                    ;;; Unsigned multiplication: multiplicand *= multiplier
(1)    1281 :                    ;;; @param @BC: multiplicand
(1)    1281 :                    ;;; @param @DE: multiplier
(1)    1281 :                    ;;; @clobber HL A
(1)    1281 :                    umulsi2:
(1)    1281 : C5                         push    B
(1)    1282 : D5                         push    D
(1)    1283 : 0A                         ldax    B
(1)    1284 : 6F                         mov     L, A
(1)    1285 : 03                         inx     B
(1)    1286 : 0A                         ldax    B
(1)    1287 : 47                         mov     B, A
(1)    1288 : 4D                         mov     C, L            ; BC=multiplicand
(1)    1289 : 1A                         ldax    D
(1)    128A : 6F                         mov     L, A
(1)    128B : 13                         inx     D
(1)    128C : 1A                         ldax    D
(1)    128D : 57                         mov     D, A
(1)    128E : 5D                         mov     E, L            ; DE=multiplier
(1)    128F : CD 63 12                   call    umul16          ; HL=multiplicand * multiplier
(1)    1292 : D1                         pop     D
(1)    1293 : C1                         pop     B
(1)    1294 : 7D                         mov     A, L
(1)    1295 : 02                         stax    B
(1)    1296 : 03                         inx     B
(1)    1297 : 7C                         mov     A, H
(1)    1298 : 02                         stax    B
(1)    1299 : 0B                         dcx     B               ; @BC=HL
(1)    129A : C9                         ret
(1)    129B :
(1)    129B :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)    129B :                    ;;; @param @BC: multiplicand
(1)    129B :                    ;;; @param @DE: multiplier
(1)    129B :                    ;;; @clobber HL A
(1)    129B :                    mulsi2:
(1)    129B : C5                         push    B
(1)    129C : D5                         push    D
(1)    129D : 0A                         ldax    B
(1)    129E : 6F                         mov     L, A
(1)    129F : 03                         inx     B
(1)    12A0 : 0A                         ldax    B
(1)    12A1 : 47                         mov     B, A
(1)    12A2 : 4D                         mov     C, L            ; BC=multiplicand
(1)    12A3 : 60                         mov     H, B            ; H=high(multiplicand)
(1)    12A4 : B7                         ora     A
(1)    12A5 : F2 AE 12                   jp      mulsi2_abs_muliplicand
(1)    12A8 : 2F                         cma
(1)    12A9 : 47                         mov     B, A
(1)    12AA : 79                         mov     A, C
(1)    12AB : 2F                         cma
(1)    12AC : 4F                         mov     C, A
(1)    12AD : 03                         inx     B               ; multiplicand = -multiplicand
(1)    12AE :                    mulsi2_abs_muliplicand:
(1)    12AE : 1A                         ldax    D
(1)    12AF : 6F                         mov     L, A
(1)    12B0 : 13                         inx     D
(1)    12B1 : 1A                         ldax    D
(1)    12B2 : 57                         mov     D, A
(1)    12B3 : 5D                         mov     E, L            ; DE=multiplier
(1)    12B4 : AC                         xra     H               ; H=high(multiplicand^multiplier)
(1)    12B5 : F5                         push    PSW             ; save sign
(1)    12B6 : 7A                         mov     A, D
(1)    12B7 : B7                         ora     A
(1)    12B8 : F2 C1 12                   jp      mulsi2_multiply
(1)    12BB : 2F                         cma
(1)    12BC : 57                         mov     D, A
(1)    12BD : 7B                         mov     A, E
(1)    12BE : 2F                         cma
(1)    12BF : 5F                         mov     E, A
(1)    12C0 : 13                         inx     D               ; multiplier = -multiplier
(1)    12C1 :                    mulsi2_multiply:
(1)    12C1 : CD 63 12                   call    umul16          ; HL = multiplicand * multiplier
(1)    12C4 : C1                         pop     B               ; B=sign
(1)    12C5 : 78                         mov     A, B
(1)    12C6 : B7                         ora     A
(1)    12C7 : F2 D1 12                   jp      mulsi2_return
(1)    12CA : 7C                         mov     A, H
(1)    12CB : 2F                         cma
(1)    12CC : 67                         mov     H, A
(1)    12CD : 7D                         mov     A, L
(1)    12CE : 2F                         cma
(1)    12CF : 6F                         mov     L, A
(1)    12D0 : 23                         inx     H               ; result = -result
(1)    12D1 :                    mulsi2_return:
(1)    12D1 : D1                         pop     D
(1)    12D2 : C1                         pop     B
(1)    12D3 : 7D                         mov     A, L
(1)    12D4 : 02                         stax    B
(1)    12D5 : 03                         inx     B
(1)    12D6 : 7C                         mov     A, H
(1)    12D7 : 02                         stax    B
(1)    12D8 : 0B                         dcx     B               ; @BC=result
(1)    12D9 : C9                         ret
(1)    12DA :
(1)    12DA :                    ;;; Unsigned division: divident / divisor = quotient ... reminder
(1)    12DA :                    ;;; @praram BC: divident
(1)    12DA :                    ;;; @praram DE: divisor
(1)    12DA :                    ;;; @return HL: reminder
(1)    12DA :                    ;;; @return BC: quotient
(1)    12DA :                    ;;; @clobber BC DE HL A
(1)    12DA :                    udiv16:
(1)    12DA : 7B                         mov     A, E
(1)    12DB : B2                         ora     D
(1)    12DC : C8                         rz                      ; divide by zero
(1)    12DD : 2E 01                      mvi     L, 1            ; L=bits
(1)    12DF : C3 EA 12                   jmp     udiv16_prep
(1)    12E2 :                    udiv16_prep_loop:
(1)    12E2 : B7                         ora     A               ; clear PSW.C
(1)    12E3 : 7B                         mov     A, E            ; divisor <<= 1
(1)    12E4 : 17                         ral
(1)    12E5 : 5F                         mov     E, A
(1)    12E6 : 7A                         mov     A, D
(1)    12E7 : 17                         ral
(1)    12E8 : 57                         mov     D, A
(1)    12E9 : 23                         inx     H               ; ++bits
(1)    12EA :                    udiv16_prep:                    ; while msb(divisor) == 0
(1)    12EA : 7A                         mov     A, D
(1)    12EB : B7                         ora     A
(1)    12EC : F2 E2 12                   jp      udiv16_prep_loop
(1)    12EF : 7D                         mov     A, L
(1)    12F0 : F5                         push    PSW             ; push bits
(1)    12F1 : 60                         mov     H, B
(1)    12F2 : 69                         mov     L, C            ; HL=divident
(1)    12F3 : AF                         xra     A
(1)    12F4 : 47                         mov     B, A
(1)    12F5 : 4F                         mov     C, A            ; BC=quotient
(1)    12F6 : C3 08 13                   jmp     udiv16_enter_loop
(1)    12F9 :                    udiv16_loop:
(1)    12F9 : F5                         push    PSW             ; push bits
(1)    12FA : B7                         ora     A               ; clear PSW.C
(1)    12FB : 7A                         mov     A, D            ; divisor >>= 1
(1)    12FC : 1F                         rar
(1)    12FD : 57                         mov     D, A
(1)    12FE : 7B                         mov     A, E
(1)    12FF : 1F                         rar
(1)    1300 : 5F                         mov     E, A
(1)    1301 : B7                         ora     A               ; clear PSW.C
(1)    1302 : 79                         mov     A, C            ; quotient <<= 1
(1)    1303 : 17                         ral
(1)    1304 : 4F                         mov     C, A
(1)    1305 : 78                         mov     A, B
(1)    1306 : 17                         ral
(1)    1307 : 47                         mov     B, A
(1)    1308 :                    udiv16_enter_loop:
(1)    1308 : 7D                         mov     A, L
(1)    1309 : 93                         sub     E
(1)    130A : 6F                         mov     L, A
(1)    130B : 7C                         mov     A, H
(1)    130C : 9A                         sbb     D
(1)    130D : 67                         mov     H, A            ; divident -= divisor
(1)    130E : DA 15 13                   jc      udiv16_readd    ; if divident < 0
(1)    1311 : 03                         inx     B               ; quotient |= 1
(1)    1312 : C3 16 13                   jmp     udiv16_next    ;
(1)    1315 :                    udiv16_readd:
(1)    1315 : 19                         dad     D               ; divident += divisor
(1)    1316 :                    udiv16_next:
(1)    1316 : F1                         pop     PSW
(1)    1317 : 3D                         dcr     A               ; --bits
(1)    1318 : C2 F9 12                   jnz     udiv16_loop     ; while bits != 0
(1)    131B : C9                         ret
(1)    131C :
(1)    131C :                    ;;; Unsigned division: dividend /= divisor
(1)    131C :                    ;;; @praram @BC: dividend
(1)    131C :                    ;;; @praram @DE: divisor
(1)    131C :                    ;;; @clobber HL A
(1)    131C :                    udivsi2:
(1)    131C : C5                         push    B
(1)    131D : D5                         push    D
(1)    131E : 0A                         ldax    B
(1)    131F : 6F                         mov     L, A
(1)    1320 : 03                         inx     B
(1)    1321 : 0A                         ldax    B
(1)    1322 : 47                         mov     B, A
(1)    1323 : 4D                         mov     C, L            ; BC=divident
(1)    1324 : 1A                         ldax    D
(1)    1325 : 6F                         mov     L, A
(1)    1326 : 13                         inx     D
(1)    1327 : 1A                         ldax    D
(1)    1328 : 57                         mov     D, A
(1)    1329 : 5D                         mov     E, L            ; DE=divisor
(1)    132A : CD 63 12                   call    umul16          ; HL=reminder BC=quotient
(1)    132D : 60                         mov     H, B
(1)    132E : 69                         mov     L, C            ; HL=quotient
(1)    132F : D1                         pop     D
(1)    1330 : C1                         pop     B
(1)    1331 : 7D                         mov     A, L
(1)    1332 : 02                         stax    B
(1)    1333 : 03                         inx     B
(1)    1334 : 7C                         mov     A, H
(1)    1335 : 02                         stax    B
(1)    1336 : 0B                         dcx     B               ; @BC=HL
(1)    1337 : C9                         ret
(1)    1338 :
(1)    1338 :                    ;;; Signed division: divident *= divisor
(1)    1338 :                    ;;; @param @BC: divident
(1)    1338 :                    ;;; @param @DE: divisor
(1)    1338 :                    ;;; @clobber HL A
(1)    1338 :                    divsi2:
(1)    1338 : C5                         push    B
(1)    1339 : D5                         push    D
(1)    133A : 0A                         ldax    B
(1)    133B : 6F                         mov     L, A
(1)    133C : 03                         inx     B
(1)    133D : 0A                         ldax    B
(1)    133E : 47                         mov     B, A
(1)    133F : 4D                         mov     C, L            ; BC=divident
(1)    1340 : 60                         mov     H, B            ; H=high(divident)
(1)    1341 : B7                         ora     A
(1)    1342 : F2 4B 13                   jp      divsi2_abs_divident
(1)    1345 : 2F                         cma
(1)    1346 : 47                         mov     B, A
(1)    1347 : 79                         mov     A, C
(1)    1348 : 2F                         cma
(1)    1349 : 4F                         mov     C, A
(1)    134A : 03                         inx     B               ; divident = -divident
(1)    134B :                    divsi2_abs_divident:
(1)    134B : 1A                         ldax    D
(1)    134C : 6F                         mov     L, A
(1)    134D : 13                         inx     D
(1)    134E : 1A                         ldax    D
(1)    134F : 57                         mov     D, A
(1)    1350 : 5D                         mov     E, L            ; DE=divisor
(1)    1351 : AC                         xra     H               ; H=high(divident^divisor)
(1)    1352 : F5                         push    PSW             ; save sign
(1)    1353 : 7A                         mov     A, D
(1)    1354 : B7                         ora     A
(1)    1355 : F2 5E 13                   jp      divsi2_divide
(1)    1358 : 2F                         cma
(1)    1359 : 57                         mov     D, A
(1)    135A : 7B                         mov     A, E
(1)    135B : 2F                         cma
(1)    135C : 5F                         mov     E, A
(1)    135D : 13                         inx     D               ; divisor = -divisor
(1)    135E :                    divsi2_divide:
(1)    135E : CD DA 12                   call    udiv16          ; BC = divident / divisor
(1)    1361 : 60                         mov     H, B
(1)    1362 : 69                         mov     L, C            ; HL=quotient
(1)    1363 : C1                         pop     B               ; B=sign
(1)    1364 : 78                         mov     A, B
(1)    1365 : B7                         ora     A
(1)    1366 : F2 70 13                   jp      divsi2_return
(1)    1369 : 7C                         mov     A, H
(1)    136A : 2F                         cma
(1)    136B : 67                         mov     H, A
(1)    136C : 7D                         mov     A, L
(1)    136D : 2F                         cma
(1)    136E : 6F                         mov     L, A
(1)    136F : 23                         inx     H               ; quotient=-quotient
(1)    1370 :                    divsi2_return:
(1)    1370 : D1                         pop     D
(1)    1371 : C1                         pop     B
(1)    1372 : 7D                         mov     A, L
(1)    1373 : 02                         stax    B
(1)    1374 : 03                         inx     B
(1)    1375 : 7C                         mov     A, H
(1)    1376 : 02                         stax    B
(1)    1377 : 0B                         dcx     B               ; @BC=result
(1)    1378 : C9                         ret
(1)    1379 :
(1)    1379 :                    ;;; Local Variables:
(1)    1379 :                    ;;; mode: asm
(1)    1379 :                    ;;; End:
(1)    1379 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       1379 :
       1379 :                            end

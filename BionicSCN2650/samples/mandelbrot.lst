          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     2650
          0 :                            include "scn2650.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; PSU
(1)       0 : =80                PSU_S:  equ     B'10000000'  ; Sense
(1)       0 : =40                PSU_F:  equ     B'01000000'  ; Flag
(1)       0 : =20                PSU_II: equ     B'00100000'  ; Interrupt inhibit
(1)       0 : =7                 PSU_SP: equ     B'00000111'  ; Stack pointer
(1)       0 :                    ;;; PSL
(1)       0 : =80                PSL_CC1:        equ     B'10000000' ; Condition code 1 (10=Negative)
(1)       0 : =40                PSL_CC0:        equ     B'01000000' ; Condition code 0 (01=Positive)
(1)       0 : =20                PSL_IDC:        equ     B'00100000' ; Inter-digit carry
(1)       0 : =10                PSL_RS:         equ     B'00010000' ; Register bank select
(1)       0 : =8                 PSL_WC:         equ     B'00001000' ; With/Without carry
(1)       0 : =4                 PSL_OVF:        equ     B'00000100' ; Overflow
(1)       0 : =2                 PSL_COM:        equ     B'00000010' ; Logical arithmetic compare
(1)       0 : =1                 PSL_C:          equ     B'00000001' ; Carry
(1)       0 :                    ;;; Reset origin
(1)       0 : =0                 ORG_RESET:      equ     H'0000'
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =0                 USARTD:         equ     H'00'           ; Data register
          0 : =1                 USARTS:         equ     H'01'           ; Status register
          0 : =1                 USARTC:         equ     H'01'           ; Control register
          0 : =2                 USARTRI:        equ     H'02'           ; Receive interrupt vector
          0 : =3                 USARTTI:        equ     H'03'           ; Transmit interrupt vector
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     B'11000000'
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     B'00100000'
(1)       0 : =10                MODE_PARITY_bm: equ     B'00010000'
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     B'00001100'
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     B'00000011'
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ     (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ     (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     B'10000000'   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     B'01000000'   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     B'00100000'   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     B'00010000'   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     B'00001000'   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     B'00000100'   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     B'00000010'   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     B'00000001'   ; Transmit enable
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     B'10000000'   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     B'01000000'   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     B'00100000'   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     B'00010000'   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     B'00001000'   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     B'00000100'   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     B'00000010'   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     B'00000001'   ; Transmitter ready
(1)       0 :                    ;;; Interrupt name for receive/transmit interrupt
(1)       0 : =0                 INTR_NONE:      equ     0
(1)       0 : =1                 INTR_IRQ0:      equ     1
(1)       0 : =2                 INTR_IRQ1:      equ     2
(1)       0 : =3                 INTR_IRQ2:      equ     3
          0 :
          0 : =27                TXRX_ENABLE:    equ     CMD_RTS_bm + CMD_DTR_bm + CMD_RxEN_bm + CMD_TxEN_bm
          0 : =37                RXERR_RESET:    equ     TXRX_ENABLE + CMD_ER_bm
          0 :
       2000 :                            org     H'2000'
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       res     rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       res     tx_queue_size
       2100 :
          0 :                            org     ORG_RESET
          0 : 76 20                      ppsu    PSU_II          ; disable interrupt
          2 : 77 0A                      ppsl    PSL_WC+PSL_COM  ; with carry, logical compare
          4 : 1F 00 0D                   bcta,un init
          7 :
          7 : =7                 RXINTR_VEC:     equ     $
          7 : 1F 14 14                   bcta,un isr_intr_rx
          A :
          A : =A                 TXINTR_VEC:     equ     $
          A : 1F 14 27                   bcta,un isr_intr_tx
          D :
          D :                    init:
          D : 06 20                      lodi,r2 >rx_queue
          F : 07 00                      lodi,r3 <rx_queue
         11 : 05 80                      lodi,r1 rx_queue_size
         13 : 3F 13 6B                   bsta,un queue_init
         16 : 06 20                      lodi,r2 >tx_queue
         18 : 07 80                      lodi,r3 <tx_queue
         1A : 05 80                      lodi,r1 tx_queue_size
         1C : 3F 13 6B                   bsta,un queue_init
         1F :
         1F :                    init_usart:
         1F : 20                         eorz    r0              ; clear R0
         20 : D4 01                      wrte,r0 USARTC
         22 : D4 01                      wrte,r0 USARTC
         24 : D4 01                      wrte,r0 USARTC          ; safest way to sync mode
         26 : 04 40                      lodi,r0 CMD_IR_bm
         28 : D4 01                      wrte,r0 USARTC          ; reset
         2A : C0                         nop
         2B : C0                         nop
         2C : 04 4E                      lodi,r0 MODE_STOP1_gc + MODE_LEN8_gc + MODE_BAUD_X16
         2E : D4 01                      wrte,r0 USARTC          ; async 1stop 8data x16
         30 : C0                         nop
         31 : C0                         nop
         32 : 04 27                      lodi,r0 TXRX_ENABLE
         34 : D4 01                      wrte,r0 USARTC    ; RTS/DTR, error reset, Rx enable, Tx enable
         36 : 04 07                      lodi,r0 RXINTR_VEC
         38 : D4 02                      wrte,r0 USARTRI
         3A : 04 00                      lodi,r0 0               ; Disable TX interrupt
         3C : D4 03                      wrte,r0 USARTTI
         3E :
         3E : 1F 10 00                   bcta,un mandelbrot
         41 :
         41 :                    ;;; Put character
         41 :                    ;;; @param r0
         41 :                    putchar:
         41 : C8 28                      strr,r0 save_r0
         43 : CA 24                      strr,r2 save_r2
         45 : CB 23                      strr,r3 save_r3
         47 : 06 20                      lodi,r2 >tx_queue
         49 : 07 80                      lodi,r3 <tx_queue
         4B :                    putchar_retry:
         4B : 76 20                      ppsu    PSU_II
         4D : 3F 13 95                   bsta,un queue_add
         50 : 74 20                      cpsu    PSU_II
         52 : B5 01                      tpsl    PSL_C
         54 : 98 75                      bcfr,eq putchar_retry   ; branch if queue is full
         56 : 54 03                      rede,r0 USARTTI
         58 : 98 08                      bcfr,eq putchar_exit    ; already enabled
         5A : 04 0A                      lodi,r0 TXINTR_VEC
         5C : 76 20                      ppsu    PSU_II
         5E : D4 03                      wrte,r0 USARTTI
         60 : 74 20                      cpsu    PSU_II
         62 :                    putchar_exit:
         62 : 0B 06                      lodr,r3 save_r3
         64 : 0A 03                      lodr,r2 save_r2
         66 : 08 03                      lodr,r0 save_r0
         68 : 17                         retc,un
         69 :                    save_r2:
         69 :                            res     1
         6A :                    save_r3:
         6A :                            res     1
         6B :                    save_r0:
         6B :                            res     1
         6C :
         6C :                            include "mandelbrot.inc"
(1)     F00 :                            org     H'F00'
(1)     F00 : =F00               arith_work:     equ     $
(1)     F00 :                    vY:     res     2
(1)     F02 :                    vX:     res     2
(1)     F04 :                    vC:     res     2
(1)     F06 :                    vD:     res     2
(1)     F08 :                    vA:     res     2
(1)     F0A :                    vB:     res     2
(1)     F0C :                    vP:     res     2
(1)     F0E :                    vQ:     res     2
(1)     F10 :                    vS:     res     2
(1)     F12 :                    vT:     res     2
(1)     F14 :                    tmp:    res     2
(1)     F16 : 00 32              vF:     acon    50
(1)     F18 : 00 E5              C229:   acon    229
(1)     F1A : 00 64              C100:   acon    100
(1)     F1C : 01 A0              C416:   acon    416
(1)     F1E : 00 04              C4:     acon    4
(1)     F20 : 00 01              C1:     acon    1
(1)     F22 : 00 10              C16:    acon    16
(1)     F24 : 00 0A              C10:    acon    10
(1)     F26 : 00 1E              C30:    acon    30
(1)     F28 : 00 0D              C13:    acon    13
(1)     F2A :                    vI:     res     1
(1)     F2B :
(1)    1000 :                            org     H'1000'
(1)    1000 :                    mandelbrot:
(1)    1000 : 04 FF                      lodi,r0 >-12
(1)    1002 : CC 0F 00                   stra,r0 vY
(1)    1005 : 05 F4                      lodi,r1 <-12
(1)    1007 : CD 0F 01                   stra,r1 vY+1            ; Y=-12
(1)    100A :                    loop_y:
(1)    100A : 04 FF                      lodi,r0 >-49
(1)    100C : CC 0F 02                   stra,r0 vX
(1)    100F : 05 CF                      lodi,r1 <-49
(1)    1011 : CD 0F 03                   stra,r1 vX+1            ; X=-49
(1)    1014 :                    loop_x:
(1)    1014 : 0C 0F 02                   loda,r0 vX
(1)    1017 : 0D 0F 03                   loda,r1 vX+1
(1)    101A : CC 0F 04                   stra,r0 vC
(1)    101D : CD 0F 05                   stra,r1 vC+1            ; C=X
(1)    1020 : 06 04                      lodi,r2 vC-arith_work
(1)    1022 : 07 18                      lodi,r3 C229-arith_work
(1)    1024 : 3F 12 56                   bsta,un mulsi2          ; C=X*229
(1)    1027 : 07 1A                      lodi,r3 C100-arith_work
(1)    1029 : 3F 13 2B                   bsta,un divsi2          ; C=X*229/100
(1)    102C : 0C 0F 00                   loda,r0 vY
(1)    102F : 0D 0F 01                   loda,r1 vY+1
(1)    1032 : CC 0F 06                   stra,r0 vD
(1)    1035 : CD 0F 07                   stra,r1 vD+1            ; D=Y
(1)    1038 : 06 06                      lodi,r2 vD-arith_work
(1)    103A : 07 1C                      lodi,r3 C416-arith_work
(1)    103C : 3F 12 56                   bsta,un mulsi2          ; D=Y*416
(1)    103F : 07 1A                      lodi,r3 C100-arith_work
(1)    1041 : 3F 13 2B                   bsta,un divsi2          ; D=Y*416/100
(1)    1044 : 0C 0F 04                   loda,r0 vC
(1)    1047 : 0D 0F 05                   loda,r1 vC+1
(1)    104A : CC 0F 08                   stra,r0 vA
(1)    104D : CD 0F 09                   stra,r1 vA+1            ; A=C
(1)    1050 : 0C 0F 06                   loda,r0 vD
(1)    1053 : 0D 0F 07                   loda,r1 vD+1
(1)    1056 : CC 0F 0A                   stra,r0 vB
(1)    1059 : CD 0F 0B                   stra,r1 vB+1            ; B=D
(1)    105C : 20                         eorz    r0
(1)    105D : CC 0F 2A                   stra,r0 vI              ; I=0
(1)    1060 :                    loop_i:
(1)    1060 : 0C 0F 0A                   loda,r0 vB
(1)    1063 : 0D 0F 0B                   loda,r1 vB+1
(1)    1066 : CC 0F 0E                   stra,r0 vQ
(1)    1069 : CD 0F 0F                   stra,r1 vQ+1            ; Q=B
(1)    106C : 06 0E                      lodi,r2 vQ-arith_work
(1)    106E : 07 16                      lodi,r3 vF-arith_work
(1)    1070 : 3F 13 2B                   bsta,un divsi2          ; Q=B/F
(1)    1073 : 06 10                      lodi,r2 vS-arith_work
(1)    1075 : 07 0E                      lodi,r3 vQ-arith_work
(1)    1077 : 3F 11 9C                   bsta,un negsi2          ; S=-Q
(1)    107A : 07 16                      lodi,r3 vF-arith_work
(1)    107C : 3F 12 56                   bsta,un mulsi2          ; S=-Q*F
(1)    107F : 07 0A                      lodi,r3 vB-arith_work
(1)    1081 : 3F 11 B8                   bsta,un addsi2          ; S=B-Q*F
(1)    1084 : 0C 0F 0A                   loda,r0 vB
(1)    1087 : 0D 0F 0B                   loda,r1 vB+1
(1)    108A : CC 0F 14                   stra,r0 tmp
(1)    108D : CD 0F 15                   stra,r1 tmp+1           ; tmp=B
(1)    1090 : 06 14                      lodi,r2 tmp-arith_work
(1)    1092 : 3F 12 56                   bsta,un mulsi2          ; tmp=B*B
(1)    1095 : 0C 0F 08                   loda,r0 vA
(1)    1098 : 0D 0F 09                   loda,r1 vA+1
(1)    109B : CC 0F 12                   stra,r0 vT
(1)    109E : CD 0F 13                   stra,r1 vT+1            ; T=A
(1)    10A1 : 06 12                      lodi,r2 vT-arith_work
(1)    10A3 : 07 08                      lodi,r3 vA-arith_work
(1)    10A5 : 3F 12 56                   bsta,un mulsi2          ; T=A*A
(1)    10A8 : 07 14                      lodi,r3 tmp-arith_work
(1)    10AA : 3F 11 CD                   bsta,un subsi2          ; T=A*A-B*B
(1)    10AD : 07 16                      lodi,r3 vF-arith_work
(1)    10AF : 3F 13 2B                   bsta,un divsi2          ; T=(A*A-B*B)/F
(1)    10B2 : 07 04                      lodi,r3 vC-arith_work
(1)    10B4 : 3F 11 B8                   bsta,un addsi2          ; T=(A*A-B*B)/F+C
(1)    10B7 : 0C 0F 08                   loda,r0 vA
(1)    10BA : 0D 0F 09                   loda,r1 vA+1
(1)    10BD : CC 0F 14                   stra,r0 tmp
(1)    10C0 : CD 0F 15                   stra,r1 tmp+1           ; tmp=A
(1)    10C3 : 06 14                      lodi,r2 tmp-arith_work
(1)    10C5 : 07 10                      lodi,r3 vS-arith_work
(1)    10C7 : 3F 12 56                   bsta,un mulsi2          ; tmp=A*S
(1)    10CA : 07 16                      lodi,r3 vF-arith_work
(1)    10CC : 3F 13 2B                   bsta,un divsi2          ; tmp=A*S/F
(1)    10CF : 0C 0F 08                   loda,r0 vA
(1)    10D2 : 0D 0F 09                   loda,r1 vA+1
(1)    10D5 : CC 0F 0A                   stra,r0 vB
(1)    10D8 : CD 0F 0B                   stra,r1 vB+1            ; B=A
(1)    10DB : 06 0A                      lodi,r2 vB-arith_work
(1)    10DD : 07 0E                      lodi,r3 vQ-arith_work
(1)    10DF : 3F 12 56                   bsta,un mulsi2          ; B=A*Q
(1)    10E2 : 07 14                      lodi,r3 tmp-arith_work
(1)    10E4 : 3F 11 B8                   bsta,un addsi2          ; B=A*Q+A*S/F
(1)    10E7 : 07 0A                      lodi,r3 vB-arith_work
(1)    10E9 : 3F 11 B8                   bsta,un addsi2          ; B=2*(A*Q+A*S/F)
(1)    10EC : 07 06                      lodi,r3 vD-arith_work
(1)    10EE : 3F 11 B8                   bsta,un addsi2          ; B=2*(A*Q+A*S/F)+D
(1)    10F1 : 0C 0F 12                   loda,r0 vT
(1)    10F4 : 0D 0F 13                   loda,r1 vT+1
(1)    10F7 : CC 0F 08                   stra,r0 vA
(1)    10FA : CD 0F 09                   stra,r1 vA+1            ; A=T
(1)    10FD : CC 0F 0C                   stra,r0 vP
(1)    1100 : CD 0F 0D                   stra,r1 vP+1            ; P=A
(1)    1103 : 06 0C                      lodi,r2 vP-arith_work
(1)    1105 : 07 16                      lodi,r3 vF-arith_work
(1)    1107 : 3F 13 2B                   bsta,un divsi2          ; P=A/F
(1)    110A : 0C 0F 0A                   loda,r0 vB
(1)    110D : 0D 0F 0B                   loda,r1 vB+1
(1)    1110 : CC 0F 0E                   stra,r0 vQ
(1)    1113 : CD 0F 0F                   stra,r1 vQ+1            ; B=Q
(1)    1116 : 06 0E                      lodi,r2 vQ-arith_work
(1)    1118 : 3F 13 2B                   bsta,un divsi2          ; Q=B/F
(1)    111B : 0C 0F 0E                   loda,r0 vQ
(1)    111E : 0D 0F 0F                   loda,r1 vQ+1
(1)    1121 : CC 0F 14                   stra,r0 tmp
(1)    1124 : CD 0F 15                   stra,r1 tmp+1           ; tmp=Q
(1)    1127 : 06 14                      lodi,r2 tmp-arith_work
(1)    1129 : 07 0E                      lodi,r3 vQ-arith_work
(1)    112B : 3F 12 56                   bsta,un mulsi2          ; tmp=Q*Q
(1)    112E : 0C 0F 0C                   loda,r0 vP
(1)    1131 : 0D 0F 0D                   loda,r1 vP+1
(1)    1134 : CC 0F 12                   stra,r0 vT
(1)    1137 : CD 0F 13                   stra,r1 vT+1            ; T=P
(1)    113A : 06 12                      lodi,r2 vT-arith_work
(1)    113C : 07 0C                      lodi,r3 vP-arith_work
(1)    113E : 3F 12 56                   bsta,un mulsi2          ; T=P*P
(1)    1141 : 07 14                      lodi,r3 tmp-arith_work
(1)    1143 : 3F 11 B8                   bsta,un addsi2          ; T=P*P+Q*Q
(1)    1146 : 07 1E                      lodi,r3 C4-arith_work
(1)    1148 : 3F 11 E2                   bsta,un cmpsi2          ; T-4
(1)    114B : 19 16                      bctr,gt print_i         ; if T>4
(1)    114D : 0C 0F 2A                   loda,r0 vI
(1)    1150 : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    1152 : 84 01                      addi,r0 1
(1)    1154 : CC 0F 2A                   stra,r0 vI              ; I+=1
(1)    1157 : E4 10                      comi,r0 16              ;
(1)    1159 : 1E 10 60                   bcta,lt loop_i          ; if I<16
(1)    115C : 04 20                      lodi,r0 A' '
(1)    115E : 3F 00 41                   bsta,un putchar
(1)    1161 : 1B 10                      bctr,un next_x
(1)    1163 :                    print_i:
(1)    1163 : 0C 0F 2A                   loda,r0 vI
(1)    1166 : 64 30                      iori,r0 A'0'
(1)    1168 : E4 3A                      comi,r0 A'9'+1
(1)    116A : 1A 04                      bctr,lt print_num       ; if I<10
(1)    116C : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    116E : 84 07                      addi,r0 A'A'-A'0'-10
(1)    1170 :                    print_num:
(1)    1170 : 3F 00 41                   bsta,un putchar
(1)    1173 :                    next_x:
(1)    1173 : 06 02                      lodi,r2 vX-arith_work
(1)    1175 : 07 20                      lodi,r3 C1-arith_work
(1)    1177 : 3F 11 B8                   bsta,un addsi2
(1)    117A : 07 26                      lodi,r3 C30-arith_work
(1)    117C : 3F 11 E2                   bsta,un cmpsi2          ; X-30
(1)    117F : 1E 10 14                   bcta,lt loop_x          ; if X<30
(1)    1182 : 04 0D                      lodi,r0 H'0D'
(1)    1184 : 3F 00 41                   bsta,un putchar         ; newline
(1)    1187 : 04 0A                      lodi,r0 H'0A'
(1)    1189 : 3F 00 41                   bsta,un putchar         ; newline
(1)    118C : 06 00                      lodi,r2 vY-arith_work
(1)    118E : 07 20                      lodi,r3 C1-arith_work
(1)    1190 : 3F 11 B8                   bsta,un addsi2          ; Y+=1
(1)    1193 : 07 28                      lodi,r3 C13-arith_work
(1)    1195 : 3F 11 E2                   bsta,un cmpsi2          ; Y-13
(1)    1198 : 1E 10 0A                   bcta,lt loop_y          ; if Y<13
(1)    119B :
(1)    119B : 40                         halt
(1)    119C :
(1)    119C :                    ;;; Local Variables:
(1)    119C :                    ;;; mode: asm
(1)    119C :                    ;;; End:
(1)    119C :                    ;;; vim: set ft=asm et ts=4 sw=4:
       119C :                            include "arith.inc"
(1)    119C :                            cpu     2650
(1)    119C :
(1)    119C :                    ;;; PSL.WC and PSL.COM must be 1
(1)    119C :
(1)    119C :                    ;;; Negation; result = -value
(1)    119C :                    ;;; @param @R2: result
(1)    119C :                    ;;; @param @R3: value
(1)    119C :                    ;;; @clobber R0 R1 PSL
(1)    119C :                    negsi2:
(1)    119C : 0F 6F 01                   loda,r0 arith_work+1,r3
(1)    119F : C1                         strz    r1
(1)    11A0 : 0F 6F 00                   loda,r0 arith_work,r3
(1)    11A3 : 3B 08                      bstr,un negsi1
(1)    11A5 : CE 6F 00                   stra,r0 arith_work,r2
(1)    11A8 : 01                         lodz    r1
(1)    11A9 : CE 6F 01                   stra,r0 arith_work+1,r2
(1)    11AC : 17                         retc,un
(1)    11AD :
(1)    11AD :                    ;;; Negation; result = -result
(1)    11AD :                    ;;; @param R0:R1 result
(1)    11AD :                    ;;; @clobber R0 R1 PSL
(1)    11AD :                    negsi1:
(1)    11AD : 25 FF                      eori,r1 H'FF'
(1)    11AF : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    11B1 : 85 01                      addi,r1 1
(1)    11B3 : 24 FF                      eori,r0 H'FF'
(1)    11B5 : 84 00                      addi,r0 0               ; with carry
(1)    11B7 : 17                         retc,un
(1)    11B8 :
(1)    11B8 :                    ;;; Signed addition: summand += addend
(1)    11B8 :                    ;;; @param @R2: summand
(1)    11B8 :                    ;;; @param @R3: addend
(1)    11B8 :                    ;;; @clobber R0 PSL
(1)    11B8 :                    addsi2:
(1)    11B8 : 0E 6F 01                   loda,r0 arith_work+1,r2
(1)    11BB : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    11BD : 8F 6F 01                   adda,r0 arith_work+1,r3
(1)    11C0 : CE 6F 01                   stra,r0 arith_work+1,r2
(1)    11C3 : 0E 6F 00                   loda,r0 arith_work,r2
(1)    11C6 : 8F 6F 00                   adda,r0 arith_work,r3  ; with carry
(1)    11C9 : CE 6F 00                   stra,r0 arith_work,r2
(1)    11CC : 17                         retc,un
(1)    11CD :
(1)    11CD :                    ;;; Singed subtraction: minuend -= subtrahend
(1)    11CD :                    ;;; @param @R2: minuend
(1)    11CD :                    ;;; @param @R3: subtrahend
(1)    11CD :                    ;;; @clobber R0 PSL
(1)    11CD :                    subsi2:
(1)    11CD : 0E 6F 01                   loda,r0 arith_work+1,r2
(1)    11D0 : 77 01                      ppsl    PSL_C           ; PSL.C=1
(1)    11D2 : AF 6F 01                   suba,r0 arith_work+1,r3
(1)    11D5 : CE 6F 01                   stra,r0 arith_work+1,r2
(1)    11D8 : 0E 6F 00                   loda,r0 arith_work,r2
(1)    11DB : AF 6F 00                   suba,r0 arith_work,r3  ; with borrow
(1)    11DE : CE 6F 00                   stra,r0 arith_work,r2
(1)    11E1 : 17                         retc,un
(1)    11E2 :
(1)    11E2 :                    ;;; Signed comparison: minuend - subtrahend
(1)    11E2 :                    ;;; @param @R2: minuend
(1)    11E2 :                    ;;; @param @R3: subtrahend
(1)    11E2 :                    ;;; @clobber R0 R1 PSL
(1)    11E2 :                    cmpsi2:
(1)    11E2 : 0E 6F 01                   loda,r0 arith_work+1,r2
(1)    11E5 : 77 01                      ppsl    PSL_C           ; PSL.C=1
(1)    11E7 : AF 6F 01                   suba,r0 arith_work+1,r3
(1)    11EA : C1                         strz    r1              ; R1=low(@2-@r3)
(1)    11EB : 0E 6F 00                   loda,r0 arith_work,r2
(1)    11EE : AF 6F 00                   suba,r0 arith_work,r3
(1)    11F1 : C8 0D                      strr,r0 cmpsi2_hi       ; R0=high(@r2-@r3)
(1)    11F3 : 61                         iorz    r1              ; R0=low(@r2-@r3)|high(@r2-@r3)
(1)    11F4 : 14                         retc,eq                 ; return if PSL.CC=Z
(1)    11F5 : 08 09                      lodr,r0 cmpsi2_hi       ; R0.7=N
(1)    11F7 : B5 04                      tpsl    PSL_OVF
(1)    11F9 : 98 02                      bcfr,eq cmpsi2_v        ; branch if PSL.OVF=0
(1)    11FB : 24 80                      eori,r0 H'80'           ; R0.7=N^OVF
(1)    11FD :                    cmpsi2_v:
(1)    11FD : 64 01                      iori,r0 H'01'           ; PSL.CC!=Z
(1)    11FF : 17                         retc,un
(1)    1200 :                    cmpsi2_hi:
(1)    1200 :                            res     1
(1)    1201 :
(1)    1201 :                    ;;; Unsigned multiplication: result = multiplicand  multiplier
(1)    1201 :                    ;;; @param mul16_multiplicand
(1)    1201 :                    ;;; @param mul16_multiplier
(1)    1201 :                    ;;; @return R0:R1 result
(1)    1201 :                    ;;; @clobber R0 R1 PSL
(1)    1201 :                    umul16_r2
(1)    1201 :                            res     1
(1)    1202 :                    umul16:
(1)    1202 : CA 7D                      strr,r2 umul16_r2
(1)    1204 : 20                         eorz    r0
(1)    1205 : C1                         strz    r1              ; r0:r1=result
(1)    1206 : 1B 22                      bctr,un umul16_check
(1)    1208 :                    umul16_loop:
(1)    1208 : 0A 2B                      lodr,r2 umul16_multiplier
(1)    120A : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    120C : 52                         rrr     r2              ; multiplier >>= 1
(1)    120D : CA 26                      strr,r2 umul16_multiplier
(1)    120F : 0A 25                      lodr,r2 umul16_multiplier+1
(1)    1211 : 52                         rrr     r2
(1)    1212 : CA 22                      strr,r2 umul16_multiplier+1
(1)    1214 : B5 01                      tpsl    PSL_C           ; PSL.C=lsb(multiplier)
(1)    1216 : 98 06                      bcfr,eq umul16_next     ; branch if PSL.C=0
(1)    1218 : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    121A : 89 18                      addr,r1 umul16_multiplicand+1
(1)    121C : 88 15                      addr,r0 umul16_multiplicand ; result += multiplicand
(1)    121E :                    umul16_next:
(1)    121E : 0A 14                      lodr,r2 umul16_multiplicand+1
(1)    1220 : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    1222 : D2                         rrl     r2
(1)    1223 : CA 0F                      strr,r2 umul16_multiplicand+1
(1)    1225 : 0A 0C                      lodr,r2 umul16_multiplicand
(1)    1227 : D2                         rrl     r2
(1)    1228 : CA 09                      strr,r2 umul16_multiplicand ; multiplicand <<= 1
(1)    122A :                    umul16_check:
(1)    122A : 0A 09                      lodr,r2 umul16_multiplier
(1)    122C : 6A 08                      iorr,r2 umul16_multiplier+1
(1)    122E : 98 58                      bcfr,eq umul16_loop     ; while multiplier != 0
(1)    1230 :                    umul16_end:
(1)    1230 : 0A 4F                      lodr,r2 umul16_r2
(1)    1232 : 17                         retc,un
(1)    1233 :
(1)    1233 :                    umul16_multiplicand:
(1)    1233 :                            res     2
(1)    1235 :                    umul16_multiplier
(1)    1235 :                            res     2
(1)    1237 :
(1)    1237 :                    ;;; Unsigned multiplication: multiplicand = multiplier
(1)    1237 :                    ;;; @param @R2: multiplicand
(1)    1237 :                    ;;; @param @R3: multiplier
(1)    1237 :                    ;;; @clobber R0 R1 PSL
(1)    1237 :                    umulsi2:
(1)    1237 : 0E 6F 00                   loda,r0 arith_work,r2
(1)    123A : C8 77                      strr,r0 umul16_multiplicand
(1)    123C : 0E 6F 01                   loda,r0 arith_work+1,r2
(1)    123F : C8 73                      strr,r0 umul16_multiplicand+1
(1)    1241 : 0F 6F 00                   loda,r0 arith_work,r3
(1)    1244 : C8 6F                      strr,r0 umul16_multiplier
(1)    1246 : 0F 6F 01                   loda,r0 arith_work+1,r3
(1)    1249 : C8 6B                      strr,r0 umul16_multiplier+1
(1)    124B : 3F 12 02                   bsta,un umul16          ; r0:r1=multiplicand  multiplier
(1)    124E : CE 6F 00                   stra,r0 arith_work,r2
(1)    1251 : 01                         lodz    r1
(1)    1252 : CE 6F 01                   stra,r0 arith_work+1,r2
(1)    1255 : 17                         retc,un
(1)    1256 :
(1)    1256 :                    ;;; Signed multiplication: multiplicand = multiplier
(1)    1256 :                    ;;; @param @R2: multiplicand
(1)    1256 :                    ;;; @param @R3: multiplier
(1)    1256 :                    ;;; @clobber R0 R1 PSL
(1)    1256 :                    mulsi2:
(1)    1256 : 0E 6F 00                   loda,r0 arith_work,r2
(1)    1259 : 2F 6F 00                   eora,r0 arith_work,r3
(1)    125C : C8 34                      strr,r0 mulsi2_sign
(1)    125E : 0E 6F 01                   loda,r0 arith_work+1,r2
(1)    1261 : C1                         strz    r1
(1)    1262 : 0E 6F 00                   loda,r0 arith_work,r2
(1)    1265 : 3E 11 AD                   bsta,lt negsi1          ; multiplicand=-multiplicand
(1)    1268 : C8 49                      strr,r0 umul16_multiplicand
(1)    126A : 01                         lodz    r1
(1)    126B : C8 47                      strr,r0 umul16_multiplicand+1
(1)    126D : 0F 6F 01                   loda,r0 arith_work+1,r3
(1)    1270 : C1                         strz    r1
(1)    1271 : 0F 6F 00                   loda,r0 arith_work,r3
(1)    1274 : 3E 11 AD                   bsta,lt negsi1          ; multiplier=-multiplier
(1)    1277 : CC 12 35                   stra,r0 umul16_multiplier
(1)    127A : 01                         lodz    r1
(1)    127B : CC 12 36                   stra,r0 umul16_multiplier+1
(1)    127E : 3F 12 02                   bsta,un umul16          ; r0:r1=multiplicand  multiplier
(1)    1281 : CA 10                      strr,r2 mulsi2_r2
(1)    1283 : 0A 0D                      lodr,r2 mulsi2_sign
(1)    1285 : 3E 11 AD                   bsta,lt negsi1          ; result=-result
(1)    1288 : 0A 09                      lodr,r2 mulsi2_r2
(1)    128A : CE 6F 00                   stra,r0 arith_work,r2
(1)    128D : 01                         lodz    r1
(1)    128E : CE 6F 01                   stra,r0 arith_work+1,r2
(1)    1291 : 17                         retc,un
(1)    1292 :                    mulsi2_sign:
(1)    1292 :                            res     1
(1)    1293 :                    mulsi2_r2:
(1)    1293 :                            res     1
(1)    1294 :
(1)    1294 :                    ;;; Unsigned division: divident / divisor = quotient ... reminder
(1)    1294 :                    ;;; @praram udiv16_divident
(1)    1294 :                    ;;; @praram udiv16_divisor
(1)    1294 :                    ;;; @return udiv16_divident reminder
(1)    1294 :                    ;;; @return R0:R1 quotient
(1)    1294 :                    ;;; @clobber R0 R1 PSL
(1)    1294 :                    udiv16:
(1)    1294 : 0C 12 F2                   loda,r0 udiv16_divisor
(1)    1297 : 6C 12 F3                   iora,r0 udiv16_divisor+1
(1)    129A : 14                         retc,eq                 ; divide by zero
(1)    129B : 05 01                      lodi,r1 1               ; R1=bits
(1)    129D : 1B 14                      bctr,un udiv16_prep
(1)    129F :                    udiv16_prep_loop:
(1)    129F : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    12A1 : 0C 12 F3                   loda,r0 udiv16_divisor+1
(1)    12A4 : D0                         rrl     r0              ; divisor <<= 1
(1)    12A5 : CC 12 F3                   stra,r0 udiv16_divisor+1
(1)    12A8 : 0C 12 F2                   loda,r0 udiv16_divisor
(1)    12AB : D0                         rrl     r0
(1)    12AC : CC 12 F2                   stra,r0 udiv16_divisor
(1)    12AF : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    12B1 : 85 01                      addi,r1 1
(1)    12B3 :                    udiv16_prep:                    ; while msb(divisor) == 0
(1)    12B3 : 08 3D                      lodr,r0 udiv16_divisor
(1)    12B5 : 9A 68                      bcfr,lt udiv16_prep_loop
(1)    12B7 : 20                         eorz    r0
(1)    12B8 : C8 3A                      strr,r0 udiv16_quotient
(1)    12BA : C8 39                      strr,r0 udiv16_quotient+1
(1)    12BC : 1B 18                      bctr,un udiv16_enter_loop
(1)    12BE :                    udiv16_loop:
(1)    12BE : 08 32                      lodr,r0 udiv16_divisor
(1)    12C0 : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    12C2 : 50                         rrr     r0
(1)    12C3 : C8 2D                      strr,r0 udiv16_divisor
(1)    12C5 : 08 2C                      lodr,r0 udiv16_divisor+1
(1)    12C7 : 50                         rrr     r0
(1)    12C8 : C8 29                      strr,r0 udiv16_divisor+1 ; divisor >>= 1
(1)    12CA : 08 29                      lodr,r0 udiv16_quotient+1
(1)    12CC : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    12CE : D0                         rrl     r0
(1)    12CF : C8 24                      strr,r0 udiv16_quotient+1
(1)    12D1 : 08 21                      lodr,r0 udiv16_quotient
(1)    12D3 : D0                         rrl     r0
(1)    12D4 : C8 1E                      strr,r0 udiv16_quotient ; quotient <<= 1
(1)    12D6 :                    udiv16_enter_loop:
(1)    12D6 : 08 19                      lodr,r0 udiv16_divident+1
(1)    12D8 : 77 01                      ppsl    PSL_C           ; PSL.C=1
(1)    12DA : A8 17                      subr,r0 udiv16_divisor+1
(1)    12DC : C8 13                      strr,r0 udiv16_divident+1
(1)    12DE : 08 10                      lodr,r0 udiv16_divident
(1)    12E0 : A8 10                      subr,r0 udiv16_divisor
(1)    12E2 : C8 0C                      strr,r0 udiv16_divident ; divident -= divisor
(1)    12E4 : B5 01                      tpsl    PSL_C
(1)    12E6 : 98 0E                      bcfr,eq udiv16_readd    ; branch if divident < 0 (PSL.C=0)
(1)    12E8 : 08 0B                      lodr,r0 udiv16_quotient+1
(1)    12EA : 64 01                      iori,r0 1
(1)    12EC : C8 07                      strr,r0 udiv16_quotient+1 ; quotient |= 1
(1)    12EE : 1B 14                      bctr,un udiv16_next
(1)    12F0 :
(1)    12F0 :                    udiv16_divident:
(1)    12F0 :                            res     2
(1)    12F2 :                    udiv16_divisor:
(1)    12F2 :                            res     2
(1)    12F4 :                    udiv16_quotient:
(1)    12F4 :                            res     2
(1)    12F6 :
(1)    12F6 :                    udiv16_readd:
(1)    12F6 : 08 79                      lodr,r0 udiv16_divident+1
(1)    12F8 : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    12FA : 88 77                      addr,r0 udiv16_divisor+1
(1)    12FC : C8 73                      strr,r0 udiv16_divident+1
(1)    12FE : 08 70                      lodr,r0 udiv16_divident
(1)    1300 : 88 70                      addr,r0 udiv16_divisor
(1)    1302 : C8 6C                      strr,r0 udiv16_divident ; divident += divisor
(1)    1304 :                    udiv16_next:
(1)    1304 : FD 12 BE                   bdra,r1 udiv16_loop
(1)    1307 : 08 6B                      lodr,r0 udiv16_quotient
(1)    1309 : 09 6A                      lodr,r1 udiv16_quotient+1 ; R0:R1=quotient
(1)    130B : 17                         retc,un
(1)    130C :
(1)    130C :                    ;;; Unsigned division: dividend /= divisor
(1)    130C :                    ;;; @praram @R2: dividend
(1)    130C :                    ;;; @praram @R3: divisor
(1)    130C :                    ;;; @clobber R0 R1
(1)    130C :                    udivsi2:
(1)    130C : 0E 6F 00                   loda,r0 arith_work,r2
(1)    130F : C8 5F                      strr,r0 udiv16_divident
(1)    1311 : 0E 6F 01                   loda,r0 arith_work+1,r2
(1)    1314 : C8 5B                      strr,r0 udiv16_divident+1
(1)    1316 : 0F 6F 00                   loda,r0 arith_work,r3
(1)    1319 : C8 57                      strr,r0 udiv16_divisor
(1)    131B : 0F 6F 01                   loda,r0 arith_work+1,r3
(1)    131E : C8 53                      strr,r0 udiv16_divisor+1
(1)    1320 : 3F 12 94                   bsta,un udiv16          ; R0:R1=quotient
(1)    1323 : CE 6F 00                   stra,r0 arith_work,r2
(1)    1326 : 01                         lodz    r1
(1)    1327 : CE 6F 01                   stra,r0 arith_work+1,r2
(1)    132A : 17                         retc,un
(1)    132B :
(1)    132B :                    ;;; Signed division: divident = divisor
(1)    132B :                    ;;; @param @R2: divident
(1)    132B :                    ;;; @param @R3: divisor
(1)    132B :                    ;;; @clobber R0 R1 PSL
(1)    132B :                    divsi2:
(1)    132B : 0E 6F 00                   loda,r0 arith_work,r2
(1)    132E : 2F 6F 00                   eora,r0 arith_work,r3
(1)    1331 : C8 36                      strr,r0 divsi2_sign
(1)    1333 : 0E 6F 01                   loda,r0 arith_work+1,r2
(1)    1336 : C1                         strz    r1
(1)    1337 : 0E 6F 00                   loda,r0 arith_work,r2
(1)    133A : 3E 11 AD                   bsta,lt negsi1          ; divident=-divident
(1)    133D : CC 12 F0                   stra,r0 udiv16_divident
(1)    1340 : 01                         lodz    r1
(1)    1341 : CC 12 F1                   stra,r0 udiv16_divident+1
(1)    1344 : 0F 6F 01                   loda,r0 arith_work+1,r3
(1)    1347 : C1                         strz    r1
(1)    1348 : 0F 6F 00                   loda,r0 arith_work,r3
(1)    134B : 3E 11 AD                   bsta,lt negsi1          ; divisor=-divisor
(1)    134E : CC 12 F2                   stra,r0 udiv16_divisor
(1)    1351 : 01                         lodz    r1
(1)    1352 : CC 12 F3                   stra,r0 udiv16_divisor+1
(1)    1355 : 3F 12 94                   bsta,un udiv16          ; r0:r1=quotient
(1)    1358 : CA 10                      strr,r2 divsi2_r2
(1)    135A : 0A 0D                      lodr,r2 divsi2_sign
(1)    135C : 3E 11 AD                   bsta,lt negsi1          ; quotient=-quotient
(1)    135F : 0A 09                      lodr,r2 divsi2_r2
(1)    1361 : CE 6F 00                   stra,r0 arith_work,r2
(1)    1364 : 01                         lodz    r1
(1)    1365 : CE 6F 01                   stra,r0 arith_work+1,r2
(1)    1368 : 17                         retc,un
(1)    1369 :                    divsi2_sign:
(1)    1369 :                            res     1
(1)    136A :                    divsi2_r2
(1)    136A :                            res     1
(1)    136B :
(1)    136B :                    ;;; Local Variables:
(1)    136B :                    ;;; mode: asm
(1)    136B :                    ;;; End:
(1)    136B :                    ;;; vim: set ft=asm et ts=4 sw=4:
       136B :                            include "queue.inc"
(1)    136B :                    ;;; [queue] queue structure
(1)    136B : =0                 queue_len:      equ     0       ; queue length
(1)    136B : =1                 queue_size:     equ     1       ; buffer size
(1)    136B : =2                 queue_put:      equ     2       ; queue put index
(1)    136B : =3                 queue_get:      equ     3       ; queue get index
(1)    136B : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    136B :
(1)    136B :                    ;;; [queue] Initialize queue
(1)    136B :                    ;;; @param r2:r3 queue work space pointer
(1)    136B :                    ;;; @param r1 queue work space size
(1)    136B :                    ;;; @clobber r1
(1)    136B :                    queue_init:
(1)    136B : CE 13 D0                   stra,r2 queue_top
(1)    136E : CF 13 D1                   stra,r3 queue_top+1
(1)    1371 : CC 13 D2                   stra,r0 queue_r0
(1)    1374 : 20                         eorz    r0              ; clear R0
(1)    1375 : CC 93 D0                   stra,r0 *queue_top      ; queue_len
(1)    1378 : 01                         lodz,r1
(1)    1379 : 77 01                      ppsl    PSL_C           ; PSL.C=1
(1)    137B : A4 04                      subi,r0 queue_buf       ; without borrow
(1)    137D : 06 01                      lodi,r2 queue_size
(1)    137F : CE F3 D0                   stra,r0 *queue_top,r2   ; queue_size=R1-queue_buf
(1)    1382 : C3                         strz    r3              ; R3=queue_size
(1)    1383 : 87 02                      addi,r3 2               ; for queue_put and queue_get
(1)    1385 : 20                         eorz    r0              ; clear R0
(1)    1386 :                    queue_init_loop:
(1)    1386 : CE B3 D0                   stra,r0 *queue_top,r2,+
(1)    1389 : FB 7B                      bdrr,r3 queue_init_loop
(1)    138B : 0C 13 D2                   loda,r0 queue_r0
(1)    138E : 0F 13 D1                   loda,r3 queue_top+1
(1)    1391 : 0E 13 D0                   loda,r2 queue_top
(1)    1394 : 17                         retc,un
(1)    1395 :
(1)    1395 :                    ;;; [queue] Add an element to queue
(1)    1395 :                    ;;; @param r2:r3 queue work space pointer
(1)    1395 :                    ;;; @param r0 an element
(1)    1395 :                    ;;; @return FLAGS.C 0 if queue is full
(1)    1395 :                    queue_add:
(1)    1395 : CA 39                      strr,r2 queue_top
(1)    1397 : CB 38                      strr,r3 queue_top+1
(1)    1399 : C8 37                      strr,r0 queue_r0        ; store an element
(1)    139B : 08 B3                      lodr,r0 *queue_top      ; R0=queue_len
(1)    139D : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    139F : 84 01                      addi,r0 1               ; R0=++queue_len
(1)    13A1 : 06 01                      lodi,r2 queue_size
(1)    13A3 : EE F3 D0                   coma,r0 *queue_top,r2   ; compare with queue_size
(1)    13A6 : 9A 21                      bcfr,lt queue_add_return ; queue_len >= queue_size, PSL.C=0
(1)    13A8 :                    queue_add_store:
(1)    13A8 : C8 A6                      strr,r0 *queue_top      ; update queue_len
(1)    13AA : 06 02                      lodi,r2 queue_put
(1)    13AC : 0E F3 D0                   loda,r0 *queue_top,r2   ; R0=queue_put
(1)    13AF : C3                         strz    r3
(1)    13B0 : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    13B2 : 87 04                      addi,r3 queue_buf
(1)    13B4 : 08 1C                      lodr,r0 queue_r0        ; restore an element
(1)    13B6 : CF F3 D0                   stra,r0 *queue_top,r3   ; store an element
(1)    13B9 : 03                         lodz    r3
(1)    13BA : 77 01                      ppsl    PSL_C            ; PSL.C=1
(1)    13BC : A4 03                      subi,r0 queue_buf-1      ; ++queue_put
(1)    13BE : EE D3 D0                   coma,r0 *queue_top,r2,-  ; compare with queue_size
(1)    13C1 : 1A 01                      bctr,lt queue_add_update ; queue_put < queue_size
(1)    13C3 : 20                         eorz    r0
(1)    13C4 :                    queue_add_update:
(1)    13C4 : CE B3 D0                   stra,r0 *queue_top,r2,+ ; update queue_put
(1)    13C7 : 77 01                      ppsl    PSL_C           ; set PSL.C=1
(1)    13C9 :                    queue_add_return:
(1)    13C9 : 08 07                      lodr,r0 queue_r0
(1)    13CB : 0B 04                      lodr,r3 queue_top+1
(1)    13CD : 0A 01                      lodr,r2 queue_top
(1)    13CF : 17                         retc,un
(1)    13D0 :
(1)    13D0 :                    queue_top:
(1)    13D0 :                            res     2
(1)    13D2 :                    queue_r0:
(1)    13D2 :                            res     1
(1)    13D3 :
(1)    13D3 :                    ;;; [queue] Remove an element from queue
(1)    13D3 :                    ;;; @param r2:r3 queue work space pointer
(1)    13D3 :                    ;;; @return r0 an element
(1)    13D3 :                    ;;; @return FLAGS.C 0 if queue is empty
(1)    13D3 :                    queue_remove:
(1)    13D3 : CA 7B                      strr,r2 queue_top
(1)    13D5 : CB 7A                      strr,r3 queue_top+1
(1)    13D7 : C8 79                      strr,r0 queue_r0
(1)    13D9 : 08 F5                      lodr,r0 *queue_top      ; R0=queue_len
(1)    13DB : 98 13                      bcfr,eq queue_remove_elem ; queue_len!=0
(1)    13DD : 08 73                      lodr,r0 queue_r0
(1)    13DF : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    13E1 : 17                         retc,un
(1)    13E2 :                    queue_remove_update:
(1)    13E2 : 06 03                      lodi,r2 queue_get
(1)    13E4 : CE F3 D0                   stra,r0 *queue_top,r2   ; update queue_get
(1)    13E7 : 77 01                      ppsl    PSL_C           ; PSL.C=1
(1)    13E9 : 08 67                      lodr,r0 queue_r0        ; restore an element
(1)    13EB : 0B 64                      lodr,r3 queue_top+1
(1)    13ED : 0A 61                      lodr,r2 queue_top
(1)    13EF : 17                         retc,un
(1)    13F0 :                    queue_remove_elem:
(1)    13F0 : 77 01                      ppsl    PSL_C           ; PSL.C=1
(1)    13F2 : A4 01                      subi,r0 1               ; --queue_len
(1)    13F4 : C8 DA                      strr,r0 *queue_top      ; update queue_len
(1)    13F6 : 06 03                      lodi,r2 queue_get
(1)    13F8 : 0E F3 D0                   loda,r0 *queue_top,r2   ; R0=queue_get
(1)    13FB : C3                         strz    r3
(1)    13FC : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    13FE : 87 04                      addi,r3 queue_buf
(1)    1400 : 0F F3 D0                   loda,r0 *queue_top,r3   ; read an element
(1)    1403 : C8 4D                      strr,r0 queue_r0        ; save an element
(1)    1405 : 03                         lodz    r3
(1)    1406 : 77 01                      ppsl    PSL_C           ; PSL.C=1
(1)    1408 : A4 03                      subi,r0 queue_buf-1     ; ++queue_get
(1)    140A : 06 01                      lodi,r2 queue_size
(1)    140C : EE F3 D0                   coma,r0 *queue_top,r2       ; comapre with queue_size
(1)    140F : 1A 51                      bctr,lt queue_remove_update ; queue_get < queue_size
(1)    1411 : 20                         eorz    r0
(1)    1412 : 1B 4E                      bctr,un queue_remove_update
(1)    1414 :
(1)    1414 :                    ;;; Local Variables:
(1)    1414 :                    ;;; mode: asm
(1)    1414 :                    ;;; End:
(1)    1414 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       1414 :
       1414 :                    isr_intr_rx:
       1414 : 3B 2D                      bstr,un isr_save
       1416 : 54 01                      rede,r0 USARTS
       1418 : F4 02                      tmi,r0  ST_RxRDY_bm
       141A : 98 38                      bcfr,eq isr_return
       141C : 54 00                      rede,r0 USARTD
       141E : 06 20                      lodi,r2 >rx_queue
       1420 : 07 00                      lodi,r3 <rx_queue
       1422 : 3F 13 95                   bsta,un queue_add
       1425 : 1B 2D                      bctr,un isr_return
       1427 :
       1427 :                    isr_intr_tx:
       1427 : 3B 1A                      bstr,un isr_save
       1429 : 54 01                      rede,r0 USARTS
       142B : F4 01                      tmi,r0  ST_TxRDY_bm
       142D : 98 25                      bcfr,eq isr_return
       142F : 06 20                      lodi,r2 >tx_queue
       1431 : 07 80                      lodi,r3 <tx_queue
       1433 : 3F 13 D3                   bsta,un queue_remove
       1436 : B5 01                      tpsl    PSL_C
       1438 : 98 04                      bcfr,eq isr_intr_send_empty
       143A : D4 00                      wrte,r0 USARTD
       143C : 1B 16                      bctr,un isr_return
       143E :                    isr_intr_send_empty:
       143E : 20                         eorz,r0
       143F : D4 03                      wrte,r0 USARTTI
       1441 : 1B 11                      bctr,un isr_return
       1443 :
       1443 :                    isr_save:
       1443 : C8 0A                      strr,r0 isr_context
       1445 : C9 09                      strr,r1 isr_context+1
       1447 : CA 08                      strr,r2 isr_context+2
       1449 : CB 07                      strr,r3 isr_context+3
       144B : 13                         spsl
       144C : C8 05                      strr,r0 isr_context+4
       144E : 17                         retc,un
       144F :
       144F :                    isr_context:
       144F :                            res     5
       1454 :
       1454 :                    isr_return:
       1454 : 0B 7C                      lodr,r3 isr_context+3
       1456 : 0A 79                      lodr,r2 isr_context+2
       1458 : 09 76                      lodr,r1 isr_context+1
       145A : 08 77                      lodr,r0 isr_context+4
       145C : 93                         lpsl
       145D : 18 09                      bctr,eq isr_reteq
       145F : 19 0C                      bctr,gt isr_retgt
       1461 : 1A 11                      bctr,lt isr_retlt
       1463 : 08 6A                      lodr,r0 isr_context
       1465 : 77 C0                      ppsl    PSL_CC1+PSL_CC0
       1467 : 37                         rete,un
       1468 :                    isr_reteq:
       1468 : 08 65                      lodr,r0 isr_context
       146A : 75 C0                      cpsl    PSL_CC1+PSL_CC0
       146C : 37                         rete,un
       146D :                    isr_retgt:
       146D : 08 60                      lodr,r0 isr_context
       146F : 75 80                      cpsl    PSL_CC1
       1471 : 77 40                      ppsl    PSL_CC0
       1473 : 37                         rete,un
       1474 :                    isr_retlt:
       1474 : 08 59                      lodr,r0 isr_context
       1476 : 77 80                      ppsl    PSL_CC1
       1478 : 75 40                      cpsl    PSL_CC0
       147A : 37                         rete,un
       147B :
       147B :                            end

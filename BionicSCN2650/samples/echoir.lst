          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     2650
          0 :                            include "scn2650.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; PSU
(1)       0 : =80                PSU_S:  equ     B'10000000'  ; Sense
(1)       0 : =40                PSU_F:  equ     B'01000000'  ; Flag
(1)       0 : =20                PSU_II: equ     B'00100000'  ; Interrupt inhibit
(1)       0 : =7                 PSU_SP: equ     B'00000111'  ; Stack pointer
(1)       0 :                    ;;; PSL
(1)       0 : =80                PSL_CC1:        equ     B'10000000' ; Condition code 1 (10=Negative)
(1)       0 : =40                PSL_CC0:        equ     B'01000000' ; Condition code 0 (01=Positive)
(1)       0 : =20                PSL_IDC:        equ     B'00100000' ; Inter-digit carry
(1)       0 : =10                PSL_RS:         equ     B'00010000' ; Register bank select
(1)       0 : =8                 PSL_WC:         equ     B'00001000' ; With/Without carry
(1)       0 : =4                 PSL_OVF:        equ     B'00000100' ; Overflow
(1)       0 : =2                 PSL_COM:        equ     B'00000010' ; Logical arithmetic compare
(1)       0 : =1                 PSL_C:          equ     B'00000001' ; Carry
(1)       0 :                    ;;; Reset origin
(1)       0 : =0                 ORG_RESET:      equ     H'0000'
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =0                 USARTD:         equ     H'00'           ; Data register
          0 : =1                 USARTS:         equ     H'01'           ; Status register
          0 : =1                 USARTC:         equ     H'01'           ; Control register
          0 : =2                 USARTRI:        equ     H'02'           ; Receive interrupt vector
          0 : =3                 USARTTI:        equ     H'03'           ; Transmit interrupt vector
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     B'11000000'
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     B'00100000'
(1)       0 : =10                MODE_PARITY_bm: equ     B'00010000'
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     B'00001100'
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     B'00000011'
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ     (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ     (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     B'10000000'   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     B'01000000'   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     B'00100000'   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     B'00010000'   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     B'00001000'   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     B'00000100'   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     B'00000010'   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     B'00000001'   ; Transmit enable
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     B'10000000'   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     B'01000000'   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     B'00100000'   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     B'00010000'   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     B'00001000'   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     B'00000100'   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     B'00000010'   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     B'00000001'   ; Transmitter ready
(1)       0 :                    ;;; Interrupt name for receive/transmit interrupt
(1)       0 : =0                 INTR_NONE:      equ     0
(1)       0 : =1                 INTR_IRQ0:      equ     1
(1)       0 : =2                 INTR_IRQ1:      equ     2
(1)       0 : =3                 INTR_IRQ2:      equ     3
          0 :
       2000 :                            org     H'2000'
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       res     rx_queue_size
       2080 :
          0 :                            org     ORG_RESET
          0 : 76 20                      ppsu    PSU_II          ; disable interrupt
          2 : 77 0A                      ppsl    PSL_WC+PSL_COM  ; with carry, logical compare
          4 : 1F 00 0A                   bcta,un init
          7 :
          7 : =7                 RXINTR_VEC:     equ     $
          7 : 1F 00 F6                   bcta,un isr_intr
          A :
          A :                    init:
          A : 06 20                      lodi,r2 >rx_queue
          C : 07 00                      lodi,r3 <rx_queue
          E : 05 80                      lodi,r1 rx_queue_size
         10 : 3F 00 4D                   bsta,un queue_init
         13 :
         13 :                    init_usart:
         13 : 20                         eorz    r0              ; clear R0
         14 : D4 01                      wrte,r0 USARTC
         16 : D4 01                      wrte,r0 USARTC
         18 : D4 01                      wrte,r0 USARTC          ; safest way to sync mode
         1A : 04 40                      lodi,r0 CMD_IR_bm
         1C : D4 01                      wrte,r0 USARTC          ; reset
         1E : C0                         nop
         1F : C0                         nop
         20 : 04 4E                      lodi,r0 MODE_STOP1_gc + MODE_LEN8_gc + MODE_BAUD_X16
         22 : D4 01                      wrte,r0 USARTC          ; async 1stop 8data x16
         24 : C0                         nop
         25 : C0                         nop
         26 : 04 37                      lodi,r0 CMD_RTS_bm + CMD_DTR_bm + CMD_ER_bm + CMD_RxEN_bm + CMD_TxEN_bm
         28 : D4 01                      wrte,r0 USARTC    ; RTS/DTR, error reset, Rx enable, Tx enable
         2A : 04 07                      lodi,r0 RXINTR_VEC
         2C : D4 02                      wrte,r0 USARTRI
         2E :
         2E :                    receive_loop:
         2E : 76 20                      ppsu    PSU_II          ; disable interrupt
         30 : 3F 00 B5                   bsta,un queue_remove
         33 : 74 20                      cpsu    PSU_II          ; enable interrupt
         35 : B5 01                      tpsl    PSL_C
         37 : 98 75                      bcfr,eq receive_loop    ; PSL.C=0
         39 : 60                         iorz    r0
         3A : 18 10                      bctr,eq echoir_halt
         3C :                    transmit_loop:
         3C : 55 01                      rede,r1 USARTS
         3E : F5 01                      tmi,r1  ST_TxRDY_bm
         40 : 98 7A                      bcfr,eq transmit_loop
         42 :                    transmit_data:
         42 : D4 00                      wrte,r0 USARTD
         44 : E4 0D                      comi,r0 H'0D'
         46 : 98 66                      bcfr,eq receive_loop
         48 : 04 0A                      lodi,r0 H'0A'
         4A : 1B 70                      bctr,un transmit_loop
         4C :                    echoir_halt:
         4C : 40                         halt
         4D :
         4D :                            include "queue.inc"
(1)      4D :                    ;;; [queue] queue structure
(1)      4D : =0                 queue_len:      equ     0       ; queue length
(1)      4D : =1                 queue_size:     equ     1       ; buffer size
(1)      4D : =2                 queue_put:      equ     2       ; queue put index
(1)      4D : =3                 queue_get:      equ     3       ; queue get index
(1)      4D : =4                 queue_buf:      equ     4       ; buffer start offset
(1)      4D :
(1)      4D :                    ;;; [queue] Initialize queue
(1)      4D :                    ;;; @param r2:r3 queue work space pointer
(1)      4D :                    ;;; @param r1 queue work space size
(1)      4D :                    ;;; @clobber r1
(1)      4D :                    queue_init:
(1)      4D : CE 00 B2                   stra,r2 queue_top
(1)      50 : CF 00 B3                   stra,r3 queue_top+1
(1)      53 : CC 00 B4                   stra,r0 queue_r0
(1)      56 : 20                         eorz    r0              ; clear R0
(1)      57 : CC 80 B2                   stra,r0 *queue_top      ; queue_len
(1)      5A : 01                         lodz,r1
(1)      5B : 77 01                      ppsl    PSL_C           ; PSL.C=1
(1)      5D : A4 04                      subi,r0 queue_buf       ; without borrow
(1)      5F : 06 01                      lodi,r2 queue_size
(1)      61 : CE E0 B2                   stra,r0 *queue_top,r2   ; queue_size=R1-queue_buf
(1)      64 : C3                         strz    r3              ; R3=queue_size
(1)      65 : 87 02                      addi,r3 2               ; for queue_put and queue_get
(1)      67 : 20                         eorz    r0              ; clear R0
(1)      68 :                    queue_init_loop:
(1)      68 : CE A0 B2                   stra,r0 *queue_top,r2,+
(1)      6B : FB 7B                      bdrr,r3 queue_init_loop
(1)      6D : 0C 00 B4                   loda,r0 queue_r0
(1)      70 : 0F 00 B3                   loda,r3 queue_top+1
(1)      73 : 0E 00 B2                   loda,r2 queue_top
(1)      76 : 17                         retc,un
(1)      77 :
(1)      77 :                    ;;; [queue] Add an element to queue
(1)      77 :                    ;;; @param r2:r3 queue work space pointer
(1)      77 :                    ;;; @param r0 an element
(1)      77 :                    ;;; @return FLAGS.C 0 if queue is full
(1)      77 :                    queue_add:
(1)      77 : CA 39                      strr,r2 queue_top
(1)      79 : CB 38                      strr,r3 queue_top+1
(1)      7B : C8 37                      strr,r0 queue_r0        ; store an element
(1)      7D : 08 B3                      lodr,r0 *queue_top      ; R0=queue_len
(1)      7F : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)      81 : 84 01                      addi,r0 1               ; R0=++queue_len
(1)      83 : 06 01                      lodi,r2 queue_size
(1)      85 : EE E0 B2                   coma,r0 *queue_top,r2   ; compare with queue_size
(1)      88 : 9A 21                      bcfr,lt queue_add_return ; queue_len >= queue_size, PSL.C=0
(1)      8A :                    queue_add_store:
(1)      8A : C8 A6                      strr,r0 *queue_top      ; update queue_len
(1)      8C : 06 02                      lodi,r2 queue_put
(1)      8E : 0E E0 B2                   loda,r0 *queue_top,r2   ; R0=queue_put
(1)      91 : C3                         strz    r3
(1)      92 : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)      94 : 87 04                      addi,r3 queue_buf
(1)      96 : 08 1C                      lodr,r0 queue_r0        ; restore an element
(1)      98 : CF E0 B2                   stra,r0 *queue_top,r3   ; store an element
(1)      9B : 03                         lodz    r3
(1)      9C : 77 01                      ppsl    PSL_C            ; PSL.C=1
(1)      9E : A4 03                      subi,r0 queue_buf-1      ; ++queue_put
(1)      A0 : EE C0 B2                   coma,r0 *queue_top,r2,-  ; compare with queue_size
(1)      A3 : 1A 01                      bctr,lt queue_add_update ; queue_put < queue_size
(1)      A5 : 20                         eorz    r0
(1)      A6 :                    queue_add_update:
(1)      A6 : CE A0 B2                   stra,r0 *queue_top,r2,+ ; update queue_put
(1)      A9 : 77 01                      ppsl    PSL_C           ; set PSL.C=1
(1)      AB :                    queue_add_return:
(1)      AB : 08 07                      lodr,r0 queue_r0
(1)      AD : 0B 04                      lodr,r3 queue_top+1
(1)      AF : 0A 01                      lodr,r2 queue_top
(1)      B1 : 17                         retc,un
(1)      B2 :
(1)      B2 :                    queue_top:
(1)      B2 :                            res     2
(1)      B4 :                    queue_r0:
(1)      B4 :                            res     1
(1)      B5 :
(1)      B5 :                    ;;; [queue] Remove an element from queue
(1)      B5 :                    ;;; @param r2:r3 queue work space pointer
(1)      B5 :                    ;;; @return r0 an element
(1)      B5 :                    ;;; @return FLAGS.C 0 if queue is empty
(1)      B5 :                    queue_remove:
(1)      B5 : CA 7B                      strr,r2 queue_top
(1)      B7 : CB 7A                      strr,r3 queue_top+1
(1)      B9 : C8 79                      strr,r0 queue_r0
(1)      BB : 08 F5                      lodr,r0 *queue_top      ; R0=queue_len
(1)      BD : 98 13                      bcfr,eq queue_remove_elem ; queue_len!=0
(1)      BF : 08 73                      lodr,r0 queue_r0
(1)      C1 : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)      C3 : 17                         retc,un
(1)      C4 :                    queue_remove_update:
(1)      C4 : 06 03                      lodi,r2 queue_get
(1)      C6 : CE E0 B2                   stra,r0 *queue_top,r2   ; update queue_get
(1)      C9 : 77 01                      ppsl    PSL_C           ; PSL.C=1
(1)      CB : 08 67                      lodr,r0 queue_r0        ; restore an element
(1)      CD : 0B 64                      lodr,r3 queue_top+1
(1)      CF : 0A 61                      lodr,r2 queue_top
(1)      D1 : 17                         retc,un
(1)      D2 :                    queue_remove_elem:
(1)      D2 : 77 01                      ppsl    PSL_C           ; PSL.C=1
(1)      D4 : A4 01                      subi,r0 1               ; --queue_len
(1)      D6 : C8 DA                      strr,r0 *queue_top      ; update queue_len
(1)      D8 : 06 03                      lodi,r2 queue_get
(1)      DA : 0E E0 B2                   loda,r0 *queue_top,r2   ; R0=queue_get
(1)      DD : C3                         strz    r3
(1)      DE : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)      E0 : 87 04                      addi,r3 queue_buf
(1)      E2 : 0F E0 B2                   loda,r0 *queue_top,r3   ; read an element
(1)      E5 : C8 4D                      strr,r0 queue_r0        ; save an element
(1)      E7 : 03                         lodz    r3
(1)      E8 : 77 01                      ppsl    PSL_C           ; PSL.C=1
(1)      EA : A4 03                      subi,r0 queue_buf-1     ; ++queue_get
(1)      EC : 06 01                      lodi,r2 queue_size
(1)      EE : EE E0 B2                   coma,r0 *queue_top,r2       ; comapre with queue_size
(1)      F1 : 1A 51                      bctr,lt queue_remove_update ; queue_get < queue_size
(1)      F3 : 20                         eorz    r0
(1)      F4 : 1B 4E                      bctr,un queue_remove_update
(1)      F6 :
(1)      F6 :                    ;;; Local Variables:
(1)      F6 :                    ;;; mode: asm
(1)      F6 :                    ;;; End:
(1)      F6 :                    ;;; vim: set ft=asm et ts=4 sw=4:
         F6 :
         F6 :                    isr_intr:
         F6 : 3B 0D                      bstr,un isr_save
         F8 : 54 01                      rede,r0 USARTS
         FA : F4 02                      tmi,r0  ST_RxRDY_bm
         FC : 98 05                      bcfr,eq isr_intr_recv_end
         FE : 54 00                      rede,r0 USARTD
        100 : 3F 00 77                   bsta,un queue_add
        103 :                    isr_intr_recv_end:
        103 : 1B 11                      bctr,un isr_return
        105 :
        105 :                    isr_save:
        105 : C8 0A                      strr,r0 isr_context
        107 : C9 09                      strr,r1 isr_context+1
        109 : CA 08                      strr,r2 isr_context+2
        10B : CB 07                      strr,r3 isr_context+3
        10D : 13                         spsl
        10E : C8 05                      strr,r0 isr_context+4
        110 : 17                         retc,un
        111 :
        111 :                    isr_context:
        111 :                            res     5
        116 :
        116 :                    isr_return:
        116 : 0B 7C                      lodr,r3 isr_context+3
        118 : 0A 79                      lodr,r2 isr_context+2
        11A : 09 76                      lodr,r1 isr_context+1
        11C : 08 77                      lodr,r0 isr_context+4
        11E : 93                         lpsl
        11F : 18 09                      bctr,eq isr_reteq
        121 : 19 0C                      bctr,gt isr_retgt
        123 : 1A 11                      bctr,lt isr_retlt
        125 : 08 6A                      lodr,r0 isr_context
        127 : 77 C0                      ppsl    PSL_CC1+PSL_CC0
        129 : 37                         rete,un
        12A :                    isr_reteq:
        12A : 08 65                      lodr,r0 isr_context
        12C : 75 C0                      cpsl    PSL_CC1+PSL_CC0
        12E : 37                         rete,un
        12F :                    isr_retgt:
        12F : 08 60                      lodr,r0 isr_context
        131 : 75 80                      cpsl    PSL_CC1
        133 : 77 40                      ppsl    PSL_CC0
        135 : 37                         rete,un
        136 :                    isr_retlt:
        136 : 08 59                      lodr,r0 isr_context
        138 : 77 80                      ppsl    PSL_CC1
        13A : 75 40                      cpsl    PSL_CC0
        13C : 37                         rete,un

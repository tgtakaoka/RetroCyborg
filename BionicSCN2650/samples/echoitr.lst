          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     2650
          0 :                            include "scn2650.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; PSU
(1)       0 : =80                PSU_S:  equ     B'10000000'  ; Sense
(1)       0 : =40                PSU_F:  equ     B'01000000'  ; Flag
(1)       0 : =20                PSU_II: equ     B'00100000'  ; Interrupt inhibit
(1)       0 : =7                 PSU_SP: equ     B'00000111'  ; Stack pointer
(1)       0 :                    ;;; PSL
(1)       0 : =80                PSL_CC1:        equ     B'10000000' ; Condition code 1 (10=Negative)
(1)       0 : =40                PSL_CC0:        equ     B'01000000' ; Condition code 0 (01=Positive)
(1)       0 : =20                PSL_IDC:        equ     B'00100000' ; Inter-digit carry
(1)       0 : =10                PSL_RS:         equ     B'00010000' ; Register bank select
(1)       0 : =8                 PSL_WC:         equ     B'00001000' ; With/Without carry
(1)       0 : =4                 PSL_OVF:        equ     B'00000100' ; Overflow
(1)       0 : =2                 PSL_COM:        equ     B'00000010' ; Logical arithmetic compare
(1)       0 : =1                 PSL_C:          equ     B'00000001' ; Carry
(1)       0 :                    ;;; Reset origin
(1)       0 : =0                 ORG_RESET:      equ     H'0000'
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =0                 USARTD:         equ     H'00'           ; Data register
          0 : =1                 USARTS:         equ     H'01'           ; Status register
          0 : =1                 USARTC:         equ     H'01'           ; Control register
          0 : =2                 USARTRI:        equ     H'02'           ; Receive interrupt vector
          0 : =3                 USARTTI:        equ     H'03'           ; Transmit interrupt vector
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     B'11000000'
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     B'00100000'
(1)       0 : =10                MODE_PARITY_bm: equ     B'00010000'
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     B'00001100'
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     B'00000011'
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ     (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ     (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     B'10000000'   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     B'01000000'   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     B'00100000'   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     B'00010000'   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     B'00001000'   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     B'00000100'   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     B'00000010'   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     B'00000001'   ; Transmit enable
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     B'10000000'   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     B'01000000'   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     B'00100000'   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     B'00010000'   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     B'00001000'   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     B'00000100'   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     B'00000010'   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     B'00000001'   ; Transmitter ready
(1)       0 :                    ;;; Interrupt name for receive/transmit interrupt
(1)       0 : =0                 INTR_NONE:      equ     0
(1)       0 : =1                 INTR_IRQ0:      equ     1
(1)       0 : =2                 INTR_IRQ1:      equ     2
(1)       0 : =3                 INTR_IRQ2:      equ     3
          0 :
          0 : =27                TXRX_ENABLE:    equ     CMD_RTS_bm + CMD_DTR_bm + CMD_RxEN_bm + CMD_TxEN_bm
          0 : =37                RXERR_RESET:    equ     TXRX_ENABLE + CMD_ER_bm
          0 :
       2000 :                            org     H'2000'
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       res     rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       res     tx_queue_size
       2100 :
          0 :                            org     ORG_RESET
          0 : 76 20                      ppsu    PSU_II          ; disable interrupt
          2 : 77 0A                      ppsl    PSL_WC+PSL_COM  ; with carry, logical compare
          4 : 1F 00 0D                   bcta,un init
          7 :
          7 : =7                 RXINTR_VEC:     equ     $
          7 : 1F 01 96                   bcta,un isr_intr_rx
          A :
          A : =A                 TXINTR_VEC:     equ     $
          A : 1F 01 A9                   bcta,un isr_intr_tx
          D :
          D :                    init:
          D : 06 20                      lodi,r2 >rx_queue
          F : 07 00                      lodi,r3 <rx_queue
         11 : 05 80                      lodi,r1 rx_queue_size
         13 : 3F 00 ED                   bsta,un queue_init
         16 : 06 20                      lodi,r2 >tx_queue
         18 : 07 80                      lodi,r3 <tx_queue
         1A : 05 80                      lodi,r1 tx_queue_size
         1C : 3F 00 ED                   bsta,un queue_init
         1F :
         1F :                    init_usart:
         1F : 20                         eorz    r0              ; clear R0
         20 : D4 01                      wrte,r0 USARTC
         22 : D4 01                      wrte,r0 USARTC
         24 : D4 01                      wrte,r0 USARTC          ; safest way to sync mode
         26 : 04 40                      lodi,r0 CMD_IR_bm
         28 : D4 01                      wrte,r0 USARTC          ; reset
         2A : C0                         nop
         2B : C0                         nop
         2C : 04 4E                      lodi,r0 MODE_STOP1_gc + MODE_LEN8_gc + MODE_BAUD_X16
         2E : D4 01                      wrte,r0 USARTC          ; async 1stop 8data x16
         30 : C0                         nop
         31 : C0                         nop
         32 : 04 27                      lodi,r0 TXRX_ENABLE
         34 : D4 01                      wrte,r0 USARTC    ; RTS/DTR, error reset, Rx enable, Tx enable
         36 : 04 07                      lodi,r0 RXINTR_VEC
         38 : D4 02                      wrte,r0 USARTRI
         3A : 04 00                      lodi,r0 0               ; Disable TX interrupt
         3C : D4 03                      wrte,r0 USARTTI
         3E :
         3E : 74 20                      cpsu    PSU_II          ; enable interrupt
         40 :                    receive_loop:
         40 : 3F 00 AE                   bsta,un getchar
         43 : B5 01                      tpsl    PSL_C
         45 : 98 79                      bcfr,eq receive_loop    ; PSL.C=0
         47 : 60                         iorz    r0
         48 : 18 19                      bctr,eq echoitr_halt
         4A :                    echo_back:
         4A : C1                         strz    r1              ; save letter
         4B : 3F 00 C5                   bsta,un putchar         ; echo
         4E : 04 20                      lodi,r0 A' '            ; space
         50 : 3F 00 C5                   bsta,un putchar
         53 : 3F 00 6E                   bsta,un put_hex8        ; print in hex
         56 : 04 20                      lodi,r0 A' '            ; space
         58 : 3F 00 C5                   bsta,un putchar
         5B : 3F 00 92                   bsta,un put_bin8        ; print in binary
         5E : 3F 00 64                   bsta,un newline
         61 : 1B 5D                      bctr,un receive_loop
         63 :                    echoitr_halt:
         63 : 40                         halt
         64 :
         64 :                    ;;; Put newline
         64 :                    ;;; @clobber r0
         64 :                    newline:
         64 : 04 0D                      lodi,r0 H'0D'
         66 : 3F 00 C5                   bsta,un putchar
         69 : 04 0A                      lodi,r0 H'0A'
         6B : 1F 00 C5                   bcta,un putchar
         6E :
         6E :                    ;;; Print uint8_t in hex
         6E :                    ;;; @param r1 uint8_t value to be printed in hex.
         6E :                    ;;; @clobber r0
         6E :                    put_hex8:
         6E : 04 30                      lodi,r0 A'0'
         70 : 3F 00 C5                   bsta,un putchar
         73 : 04 78                      lodi,r0 A'x'
         75 : 3F 00 C5                   bsta,un putchar
         78 : 01                         lodz    r1
         79 : 75 01                      cpsl    PSL_C           ; PSL.C=0
         7B : 50                         rrr     r0
         7C : 50                         rrr     r0
         7D : 50                         rrr     r0
         7E : 50                         rrr     r0
         7F : 3B 01                      bstr,un put_hex4
         81 : 01                         lodz    r1
         82 :                    put_hex4:
         82 : 44 0F                      andi,r0 H'F'
         84 : E4 0A                      comi,r0 10
         86 : 1A 05                      bctr,lt put_hex8_dec ; R0<10
         88 : 84 37                      addi,r0 A'A'-10
         8A : 1F 00 C5                   bcta,un putchar
         8D :                    put_hex8_dec:
         8D : 84 30                      addi,r0 A'0'
         8F : 1F 00 C5                   bcta,un putchar
         92 :
         92 :                    ;;; Print uint8_t in binary
         92 :                    ;;; @param r1 uint8_t value to be printed in binary.
         92 :                    ;;; @clobber r0 r2 r3
         92 :                    put_bin8:
         92 : 04 30                      lodi,r0 A'0'
         94 : 3F 00 C5                   bsta,un putchar
         97 : 04 62                      lodi,r0 A'b'
         99 : 3F 00 C5                   bsta,un putchar
         9C : 01                         lodz    r1
         9D : C2                         strz    r2
         9E : 07 08                      lodi,r3 8
         A0 :                    put_bin_loop:
         A0 : D2                         rrl     r2
         A1 : 04 30                      lodi,r0 A'0'
         A3 : B5 01                      tpsl    PSL_C
         A5 : 98 02                      bcfr,eq put_bin0
         A7 : 04 31                      lodi,r0 A'1'
         A9 :                    put_bin0:
         A9 : 3B 1A                      bstr,un putchar
         AB : FB 73                      bdrr,r3 put_bin_loop
         AD : 17                         retc,un
         AE :
         AE :
         AE :                    ;;; Get character
         AE :                    ;;; @return r0
         AE :                    ;;; @return FLAGS.C 0 if no character
         AE :                    getchar:
         AE : CA 12                      strr,r2 save_r2
         B0 : CB 11                      strr,r3 save_r3
         B2 : 06 20                      lodi,r2 >rx_queue
         B4 : 07 00                      lodi,r3 <rx_queue
         B6 : 76 20                      ppsu    PSU_II
         B8 : 3F 01 55                   bsta,un queue_remove
         BB : 74 20                      cpsu    PSU_II
         BD : 0B 04                      lodr,r3 save_r3
         BF : 0A 01                      lodr,r2 save_r2
         C1 : 17                         retc,un
         C2 :
         C2 :                    save_r2:
         C2 :                            res     1
         C3 :                    save_r3:
         C3 :                            res     1
         C4 :                    save_r0:
         C4 :                            res     1
         C5 :
         C5 :                    ;;; Put character
         C5 :                    ;;; @param r0
         C5 :                    putchar:
         C5 : C8 7D                      strr,r0 save_r0
         C7 : CA 79                      strr,r2 save_r2
         C9 : CB 78                      strr,r3 save_r3
         CB : 06 20                      lodi,r2 >tx_queue
         CD : 07 80                      lodi,r3 <tx_queue
         CF :                    putchar_retry:
         CF : 76 20                      ppsu    PSU_II
         D1 : 3F 01 17                   bsta,un queue_add
         D4 : 74 20                      cpsu    PSU_II
         D6 : B5 01                      tpsl    PSL_C
         D8 : 98 75                      bcfr,eq putchar_retry   ; branch if queue is full
         DA : 54 03                      rede,r0 USARTTI
         DC : 98 08                      bcfr,eq putchar_exit    ; already enabled
         DE : 04 0A                      lodi,r0 TXINTR_VEC
         E0 : 76 20                      ppsu    PSU_II
         E2 : D4 03                      wrte,r0 USARTTI
         E4 : 74 20                      cpsu    PSU_II
         E6 :                    putchar_exit:
         E6 : 0B 5B                      lodr,r3 save_r3
         E8 : 0A 58                      lodr,r2 save_r2
         EA : 08 58                      lodr,r0 save_r0
         EC : 17                         retc,un
         ED :
         ED :                            include "queue.inc"
(1)      ED :                    ;;; [queue] queue structure
(1)      ED : =0                 queue_len:      equ     0       ; queue length
(1)      ED : =1                 queue_size:     equ     1       ; buffer size
(1)      ED : =2                 queue_put:      equ     2       ; queue put index
(1)      ED : =3                 queue_get:      equ     3       ; queue get index
(1)      ED : =4                 queue_buf:      equ     4       ; buffer start offset
(1)      ED :
(1)      ED :                    ;;; [queue] Initialize queue
(1)      ED :                    ;;; @param r2:r3 queue work space pointer
(1)      ED :                    ;;; @param r1 queue work space size
(1)      ED :                    ;;; @clobber r1
(1)      ED :                    queue_init:
(1)      ED : CE 01 52                   stra,r2 queue_top
(1)      F0 : CF 01 53                   stra,r3 queue_top+1
(1)      F3 : CC 01 54                   stra,r0 queue_r0
(1)      F6 : 20                         eorz    r0              ; clear R0
(1)      F7 : CC 81 52                   stra,r0 *queue_top      ; queue_len
(1)      FA : 01                         lodz,r1
(1)      FB : 77 01                      ppsl    PSL_C           ; PSL.C=1
(1)      FD : A4 04                      subi,r0 queue_buf       ; without borrow
(1)      FF : 06 01                      lodi,r2 queue_size
(1)     101 : CE E1 52                   stra,r0 *queue_top,r2   ; queue_size=R1-queue_buf
(1)     104 : C3                         strz    r3              ; R3=queue_size
(1)     105 : 87 02                      addi,r3 2               ; for queue_put and queue_get
(1)     107 : 20                         eorz    r0              ; clear R0
(1)     108 :                    queue_init_loop:
(1)     108 : CE A1 52                   stra,r0 *queue_top,r2,+
(1)     10B : FB 7B                      bdrr,r3 queue_init_loop
(1)     10D : 0C 01 54                   loda,r0 queue_r0
(1)     110 : 0F 01 53                   loda,r3 queue_top+1
(1)     113 : 0E 01 52                   loda,r2 queue_top
(1)     116 : 17                         retc,un
(1)     117 :
(1)     117 :                    ;;; [queue] Add an element to queue
(1)     117 :                    ;;; @param r2:r3 queue work space pointer
(1)     117 :                    ;;; @param r0 an element
(1)     117 :                    ;;; @return FLAGS.C 0 if queue is full
(1)     117 :                    queue_add:
(1)     117 : CA 39                      strr,r2 queue_top
(1)     119 : CB 38                      strr,r3 queue_top+1
(1)     11B : C8 37                      strr,r0 queue_r0        ; store an element
(1)     11D : 08 B3                      lodr,r0 *queue_top      ; R0=queue_len
(1)     11F : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)     121 : 84 01                      addi,r0 1               ; R0=++queue_len
(1)     123 : 06 01                      lodi,r2 queue_size
(1)     125 : EE E1 52                   coma,r0 *queue_top,r2   ; compare with queue_size
(1)     128 : 9A 21                      bcfr,lt queue_add_return ; queue_len >= queue_size, PSL.C=0
(1)     12A :                    queue_add_store:
(1)     12A : C8 A6                      strr,r0 *queue_top      ; update queue_len
(1)     12C : 06 02                      lodi,r2 queue_put
(1)     12E : 0E E1 52                   loda,r0 *queue_top,r2   ; R0=queue_put
(1)     131 : C3                         strz    r3
(1)     132 : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)     134 : 87 04                      addi,r3 queue_buf
(1)     136 : 08 1C                      lodr,r0 queue_r0        ; restore an element
(1)     138 : CF E1 52                   stra,r0 *queue_top,r3   ; store an element
(1)     13B : 03                         lodz    r3
(1)     13C : 77 01                      ppsl    PSL_C            ; PSL.C=1
(1)     13E : A4 03                      subi,r0 queue_buf-1      ; ++queue_put
(1)     140 : EE C1 52                   coma,r0 *queue_top,r2,-  ; compare with queue_size
(1)     143 : 1A 01                      bctr,lt queue_add_update ; queue_put < queue_size
(1)     145 : 20                         eorz    r0
(1)     146 :                    queue_add_update:
(1)     146 : CE A1 52                   stra,r0 *queue_top,r2,+ ; update queue_put
(1)     149 : 77 01                      ppsl    PSL_C           ; set PSL.C=1
(1)     14B :                    queue_add_return:
(1)     14B : 08 07                      lodr,r0 queue_r0
(1)     14D : 0B 04                      lodr,r3 queue_top+1
(1)     14F : 0A 01                      lodr,r2 queue_top
(1)     151 : 17                         retc,un
(1)     152 :
(1)     152 :                    queue_top:
(1)     152 :                            res     2
(1)     154 :                    queue_r0:
(1)     154 :                            res     1
(1)     155 :
(1)     155 :                    ;;; [queue] Remove an element from queue
(1)     155 :                    ;;; @param r2:r3 queue work space pointer
(1)     155 :                    ;;; @return r0 an element
(1)     155 :                    ;;; @return FLAGS.C 0 if queue is empty
(1)     155 :                    queue_remove:
(1)     155 : CA 7B                      strr,r2 queue_top
(1)     157 : CB 7A                      strr,r3 queue_top+1
(1)     159 : C8 79                      strr,r0 queue_r0
(1)     15B : 08 F5                      lodr,r0 *queue_top      ; R0=queue_len
(1)     15D : 98 13                      bcfr,eq queue_remove_elem ; queue_len!=0
(1)     15F : 08 73                      lodr,r0 queue_r0
(1)     161 : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)     163 : 17                         retc,un
(1)     164 :                    queue_remove_update:
(1)     164 : 06 03                      lodi,r2 queue_get
(1)     166 : CE E1 52                   stra,r0 *queue_top,r2   ; update queue_get
(1)     169 : 77 01                      ppsl    PSL_C           ; PSL.C=1
(1)     16B : 08 67                      lodr,r0 queue_r0        ; restore an element
(1)     16D : 0B 64                      lodr,r3 queue_top+1
(1)     16F : 0A 61                      lodr,r2 queue_top
(1)     171 : 17                         retc,un
(1)     172 :                    queue_remove_elem:
(1)     172 : 77 01                      ppsl    PSL_C           ; PSL.C=1
(1)     174 : A4 01                      subi,r0 1               ; --queue_len
(1)     176 : C8 DA                      strr,r0 *queue_top      ; update queue_len
(1)     178 : 06 03                      lodi,r2 queue_get
(1)     17A : 0E E1 52                   loda,r0 *queue_top,r2   ; R0=queue_get
(1)     17D : C3                         strz    r3
(1)     17E : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)     180 : 87 04                      addi,r3 queue_buf
(1)     182 : 0F E1 52                   loda,r0 *queue_top,r3   ; read an element
(1)     185 : C8 4D                      strr,r0 queue_r0        ; save an element
(1)     187 : 03                         lodz    r3
(1)     188 : 77 01                      ppsl    PSL_C           ; PSL.C=1
(1)     18A : A4 03                      subi,r0 queue_buf-1     ; ++queue_get
(1)     18C : 06 01                      lodi,r2 queue_size
(1)     18E : EE E1 52                   coma,r0 *queue_top,r2       ; comapre with queue_size
(1)     191 : 1A 51                      bctr,lt queue_remove_update ; queue_get < queue_size
(1)     193 : 20                         eorz    r0
(1)     194 : 1B 4E                      bctr,un queue_remove_update
(1)     196 :
(1)     196 :                    ;;; Local Variables:
(1)     196 :                    ;;; mode: asm
(1)     196 :                    ;;; End:
(1)     196 :                    ;;; vim: set ft=asm et ts=4 sw=4:
        196 :
        196 :                    isr_intr_rx:
        196 : 3B 2D                      bstr,un isr_save
        198 : 54 01                      rede,r0 USARTS
        19A : F4 02                      tmi,r0  ST_RxRDY_bm
        19C : 98 38                      bcfr,eq isr_return
        19E : 54 00                      rede,r0 USARTD
        1A0 : 06 20                      lodi,r2 >rx_queue
        1A2 : 07 00                      lodi,r3 <rx_queue
        1A4 : 3F 01 17                   bsta,un queue_add
        1A7 : 1B 2D                      bctr,un isr_return
        1A9 :
        1A9 :                    isr_intr_tx:
        1A9 : 3B 1A                      bstr,un isr_save
        1AB : 54 01                      rede,r0 USARTS
        1AD : F4 01                      tmi,r0  ST_TxRDY_bm
        1AF : 98 25                      bcfr,eq isr_return
        1B1 : 06 20                      lodi,r2 >tx_queue
        1B3 : 07 80                      lodi,r3 <tx_queue
        1B5 : 3F 01 55                   bsta,un queue_remove
        1B8 : B5 01                      tpsl    PSL_C
        1BA : 98 04                      bcfr,eq isr_intr_send_empty
        1BC : D4 00                      wrte,r0 USARTD
        1BE : 1B 16                      bctr,un isr_return
        1C0 :                    isr_intr_send_empty:
        1C0 : 20                         eorz,r0
        1C1 : D4 03                      wrte,r0 USARTTI
        1C3 : 1B 11                      bctr,un isr_return
        1C5 :
        1C5 :                    isr_save:
        1C5 : C8 0A                      strr,r0 isr_context
        1C7 : C9 09                      strr,r1 isr_context+1
        1C9 : CA 08                      strr,r2 isr_context+2
        1CB : CB 07                      strr,r3 isr_context+3
        1CD : 13                         spsl
        1CE : C8 05                      strr,r0 isr_context+4
        1D0 : 17                         retc,un
        1D1 :
        1D1 :                    isr_context:
        1D1 :                            res     5
        1D6 :
        1D6 :                    isr_return:
        1D6 : 0B 7C                      lodr,r3 isr_context+3
        1D8 : 0A 79                      lodr,r2 isr_context+2
        1DA : 09 76                      lodr,r1 isr_context+1
        1DC : 08 77                      lodr,r0 isr_context+4
        1DE : 93                         lpsl
        1DF : 18 09                      bctr,eq isr_reteq
        1E1 : 19 0C                      bctr,gt isr_retgt
        1E3 : 1A 11                      bctr,lt isr_retlt
        1E5 : 08 6A                      lodr,r0 isr_context
        1E7 : 77 C0                      ppsl    PSL_CC1+PSL_CC0
        1E9 : 37                         rete,un
        1EA :                    isr_reteq:
        1EA : 08 65                      lodr,r0 isr_context
        1EC : 75 C0                      cpsl    PSL_CC1+PSL_CC0
        1EE : 37                         rete,un
        1EF :                    isr_retgt:
        1EF : 08 60                      lodr,r0 isr_context
        1F1 : 75 80                      cpsl    PSL_CC1
        1F3 : 77 40                      ppsl    PSL_CC0
        1F5 : 37                         rete,un
        1F6 :                    isr_retlt:
        1F6 : 08 59                      lodr,r0 isr_context
        1F8 : 77 80                      ppsl    PSL_CC1
        1FA : 75 40                      cpsl    PSL_CC0
        1FC : 37                         rete,un

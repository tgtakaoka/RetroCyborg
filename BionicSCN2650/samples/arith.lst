          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     2650
          0 :                            include "scn2650.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; PSU
(1)       0 : =80                PSU_S:  equ     B'10000000'  ; Sense
(1)       0 : =40                PSU_F:  equ     B'01000000'  ; Flag
(1)       0 : =20                PSU_II: equ     B'00100000'  ; Interrupt inhibit
(1)       0 : =7                 PSU_SP: equ     B'00000111'  ; Stack pointer
(1)       0 :                    ;;; PSL
(1)       0 : =80                PSL_CC1:        equ     B'10000000' ; Condition code 1 (10=Negative)
(1)       0 : =40                PSL_CC0:        equ     B'01000000' ; Condition code 0 (01=Positive)
(1)       0 : =20                PSL_IDC:        equ     B'00100000' ; Inter-digit carry
(1)       0 : =10                PSL_RS:         equ     B'00010000' ; Register bank select
(1)       0 : =8                 PSL_WC:         equ     B'00001000' ; With/Without carry
(1)       0 : =4                 PSL_OVF:        equ     B'00000100' ; Overflow
(1)       0 : =2                 PSL_COM:        equ     B'00000010' ; Logical arithmetic compare
(1)       0 : =1                 PSL_C:          equ     B'00000001' ; Carry
(1)       0 :                    ;;; Reset origin
(1)       0 : =0                 ORG_RESET:      equ     H'0000'
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =0                 USARTD: equ     H'00'           ; Data register
          0 : =1                 USARTS: equ     H'01'           ; Status register
          0 : =1                 USARTC: equ     H'01'           ; Control register
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     B'11000000'
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     B'00100000'
(1)       0 : =10                MODE_PARITY_bm: equ     B'00010000'
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     B'00001100'
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     B'00000011'
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ     (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ     (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     B'10000000'   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     B'01000000'   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     B'00100000'   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     B'00010000'   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     B'00001000'   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     B'00000100'   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     B'00000010'   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     B'00000001'   ; Transmit enable
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     B'10000000'   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     B'01000000'   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     B'00100000'   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     B'00010000'   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     B'00001000'   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     B'00000100'   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     B'00000010'   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     B'00000001'   ; Transmitter ready
(1)       0 :                    ;;; Interrupt name for receive/transmit interrupt
(1)       0 : =0                 INTR_NONE:      equ     0
(1)       0 : =1                 INTR_IRQ0:      equ     1
(1)       0 : =2                 INTR_IRQ1:      equ     2
(1)       0 : =3                 INTR_IRQ2:      equ     3
          0 :
          0 :                            org     ORG_RESET
          0 : 76 20                      ppsu    PSU_II          ; disable interrupt
          2 : 77 0A                      ppsl    PSL_WC+PSL_COM  ; with carry, logical compare
          4 :                    init_usart:
          4 : 20                         eorz    r0              ; clear R0
          5 : D4 01                      wrte,r0 USARTC
          7 : D4 01                      wrte,r0 USARTC
          9 : D4 01                      wrte,r0 USARTC          ; safest way to sync mode
          B : 04 40                      lodi,r0 CMD_IR_bm
          D : D4 01                      wrte,r0 USARTC          ; reset
          F : C0                         nop
         10 : C0                         nop
         11 : 04 4E                      lodi,r0 MODE_STOP1_gc + MODE_LEN8_gc + MODE_BAUD_X16
         13 : D4 01                      wrte,r0 USARTC          ; async 1stop 8data x16
         15 : C0                         nop
         16 : C0                         nop
         17 : 04 37                      lodi,r0 CMD_RTS_bm + CMD_DTR_bm + CMD_ER_bm + CMD_RxEN_bm + CMD_TxEN_bm
         19 : D4 01                      wrte,r0 USARTC    ; RTS/DTR, error reset, Rx enable, Tx enable
         1B :
         1B : 1F 10 00                   bcta,un arith
         1E :
         1E :                    ;;; Print out char
         1E :                    ;;; @param R0 char
         1E :                    ;;; @clobber R0
         1E :                    putchar:
         1E : C9 13                      strr,r1 putchar_r1
         20 :                    putchar_loop:
         20 : 55 01                      rede,r1 USARTS
         22 : F5 01                      tmi,r1  ST_TxRDY_bm
         24 : 98 7A                      bcfr,eq putchar_loop
         26 : D4 00                      wrte,r0 USARTD
         28 : E4 0D                      comi,r0 H'0D'
         2A : 18 03                      bctr,eq putchar_nl
         2C : 09 05                      lodr,r1 putchar_r1
         2E : 17                         retc,un
         2F :                    putchar_nl:
         2F : 04 0A                      lodi,r0 H'0A'
         31 : 1B 6D                      bctr,un putchar_loop
         33 :                    putchar_r1:
         33 :                            res     1
         34 :
         34 :                    newline:
         34 : 04 0D                      lodi,r0 H'0D'
         36 : 1B 66                      bctr,un putchar
         38 :
         38 :                    putspace:
         38 : 04 20                      lodi,r0 A' '
         3A : 1B 62                      bctr,un putchar
         3C :
         3C :                    ;;; Print unsigned 16-bit integer as decimal
         3C :                    ;;; @param R0:R1: value
         3C :                    ;;; @clobber R0 R1
         3C :                    print_uint16:
         3C : CA 3B                      strr,r2 print_uint16_r2
         3E : 06 00                      lodi,r2 0
         40 : CA 38                      strr,r2 print_uint16_buf
         42 :                    print_uint16_inner:
         42 : CC 12 BD                   stra,r0 udiv16_divident
         45 : CD 12 BE                   stra,r1 udiv16_divident+1
         48 :                    print_uint16_loop:
         48 : 20                         eorz    r0
         49 : CC 12 BF                   stra,r0 udiv16_divisor
         4C : 04 0A                      lodi,r0 10
         4E : CC 12 C0                   stra,r0 udiv16_divisor+1
         51 : 3F 12 61                   bsta,un udiv16            ; R0:R1=value / 10
         54 : CC 12 BD                   stra,r0 udiv16_divident
         57 : 0C 12 BE                   loda,r0 udiv16_divident+1 ; R0=value % 10
         5A : CD 12 BE                   stra,r1 udiv16_divident+1
         5D : 64 30                      iori,r0 A'0'
         5F : CE 20 7A                   stra,r0 print_uint16_buf,r2,+ ; buf[++R2]=R0+'0'
         62 : 01                         lodz    r1
         63 : 6C 12 BD                   iora,r0 udiv16_divident
         66 : 98 60                      bcfr,eq print_uint16_loop
         68 : 75 01                      cpsl    PSL_C           ; PSL.C=0
         6A : 86 01                      addi,r2 1
         6C :                    print_uint16_out:
         6C : 0E 40 7A                   loda,r0 print_uint16_buf,r2,-
         6F : 18 05                      bctr,eq print_uint16_end
         71 : 3F 00 1E                   bsta,un putchar
         74 : 1B 76                      bctr,un print_uint16_out
         76 :                    print_uint16_end:
         76 : 0A 01                      lodr,r2 print_uint16_r2
         78 : 17                         retc,un
         79 :                    print_uint16_r2:
         79 :                            res     1
         7A :                    print_uint16_buf:
         7A :                            res     8
         82 :
         82 :                    ;;; Print signed 16-bit integer as decimal
         82 :                    ;;; @param R0:R1 value
         82 :                    ;;; @clobber R0 R1
         82 :                    print_int16:
         82 : 60                         iorz    r0
         83 : 9E 00 3C                   bcfa,lt print_uint16    ; branch if R0:R1>=0
         86 : 3F 11 7A                   bsta,un negsi1          ; R0:R1=-value
         89 : C8 6F                      strr,r0 print_uint16_buf
         8B : 04 2D                      lodi,r0 A'-'
         8D : 3F 00 1E                   bsta,un putchar
         90 : 08 68                      lodr,r0 print_uint16_buf
         92 : 1F 00 3C                   bcta,un print_uint16
         95 :
         95 :                    expr_r0:
         95 :                            res     1
         96 :                    expr:
         96 : C8 7D                      strr,r0 expr_r0
         98 : 0E 6F 01                   loda,r0 arith_work+1,r2
         9B : C1                         strz    r1
         9C : 0E 6F 00                   loda,r0 arith_work,r2
         9F : CC 0F 00                   stra,r0 arith_work
         A2 : CD 0F 01                   stra,r1 arith_work+1
         A5 : 3B 5B                      bstr,un print_int16
         A7 : 3F 00 38                   bsta,un putspace
         AA : 06 00                      lodi,r2 arith_work-arith_work
         AC : 08 67                      lodr,r0 expr_r0
         AE : 3F 00 1E                   bsta,un putchar
         B1 : 3F 00 38                   bsta,un putspace
         B4 : 0F 6F 01                   loda,r0 arith_work+1,r3
         B7 : C1                         strz    r1
         B8 : 0F 6F 00                   loda,r0 arith_work,r3
         BB : 1B 45                      bctr,un print_int16
         BD :
         BD :                    answer:
         BD : 3F 00 38                   bsta,un putspace
         C0 : 04 3D                      lodi,r0 A'='
         C2 : 3F 00 1E                   bsta,un putchar
         C5 : 3F 00 38                   bsta,un putspace
         C8 : 0E 6F 01                   loda,r0 arith_work+1,r2
         CB : C1                         strz    r1
         CC : 0E 6F 00                   loda,r0 arith_work,r2
         CF : 3F 00 82                   bsta,un print_int16
         D2 : 1F 00 34                   bcta,un newline
         D5 :
         D5 :                    comp:
         D5 : 3F 11 AF                   bsta,un cmpsi2
         D8 : 19 08                      bctr,gt comp_gt
         DA : 18 0A                      bctr,eq comp_eq
         DC : 1A 0C                      bctr,lt comp_lt
         DE : 04 3F                      lodi,r0 A'?'
         E0 : 1B 0A                      bctr,un comp_out
         E2 :                    comp_gt:
         E2 : 04 3E                      lodi,r0 A'>'
         E4 : 1B 06                      bctr,un comp_out
         E6 :                    comp_eq:
         E6 : 04 3D                      lodi,r0 A'='
         E8 : 1B 02                      bctr,un comp_out
         EA :                    comp_lt:
         EA : 04 3C                      lodi,r0 A'<'
         EC :                    comp_out:
         EC : 3F 00 96                   bsta,un expr
         EF : 1F 00 34                   bcta,un newline
         F2 :
        F00 :                            org     H'0F00'
        F00 : =F00               arith_work:     equ     $
        F00 :                            res     2
        F02 : 46 50              p18000: acon    18000
        F04 : 6D 60              p28000: acon    28000
        F06 : B9 B0              n18000: acon    -18000
        F08 : 92 A0              n28000: acon    -28000
        F0A : 01 2C              p300:   acon    300
        F0C : 00 C8              p200:   acon    200
        F0E : FF 38              n200:   acon    -200
        F10 : FF 9C              n100:   acon    -100
        F12 : 00 64              p100:   acon    100
        F14 : FE D4              n300:   acon    -300
        F16 : 00 00              zero:   acon    0
        F18 : 00 4E              p78     acon    78
        F1A : 75 30              p30000: acon    30000
        F1C : 8A D0              n30000: acon    -30000
        F1E : 13 88              p5000:  acon    5000
        F20 : 0F A0              p4000:  acon    4000
        F22 : EC 78              n5000:  acon    -5000
        F24 : F0 60              n4000:  acon    -4000
        F26 : 7F BC              p32700: acon    32700
        F28 : 7F 58              p32600: acon    32600
        F2A : 80 44              n32700: acon    -32700
        F2C : 80 A8              n32600: acon    -32600
        F2E :
       1000 :                            org     H'1000'
       1000 :                    arith:
       1000 : 06 16                      lodi,r2 zero-arith_work
       1002 : 07 08                      lodi,r3 n28000-arith_work
       1004 : 04 2D                      lodi,r0 A'-'
       1006 : 3F 00 96                   bsta,un expr
       1009 : 3F 11 69                   bsta,un negsi2
       100C : 3F 00 BD                   bsta,un answer          ; 28000
       100F :
       100F : 06 16                      lodi,r2 zero-arith_work
       1011 : 07 04                      lodi,r3 p28000-arith_work
       1013 : 04 2D                      lodi,r0 A'-'
       1015 : 3F 00 96                   bsta,un expr
       1018 : 3F 11 69                   bsta,un negsi2
       101B : 3F 00 BD                   bsta,un answer          ; -28000
       101E :
       101E : 06 02                      lodi,r2 p18000-arith_work
       1020 : 07 04                      lodi,r3 p28000-arith_work
       1022 : 04 2B                      lodi,r0 A'+'
       1024 : 3F 00 96                   bsta,un expr
       1027 : 3F 11 85                   bsta,un addsi2
       102A : 3F 00 BD                   bsta,un answer          ; -19536
       102D :
       102D : 06 02                      lodi,r2 p18000-arith_work
       102F : 07 06                      lodi,r3 n18000-arith_work
       1031 : 04 2B                      lodi,r0 A'+'
       1033 : 3F 00 96                   bsta,un expr
       1036 : 3F 11 85                   bsta,un addsi2
       1039 : 3F 00 BD                   bsta,un answer          ; 0
       103C :
       103C : 06 06                      lodi,r2 n18000-arith_work
       103E : 07 06                      lodi,r3 n18000-arith_work
       1040 : 04 2B                      lodi,r0 A'+'
       1042 : 3F 00 96                   bsta,un expr
       1045 : 3F 11 85                   bsta,un addsi2
       1048 : 3F 00 BD                   bsta,un answer          ; 29536
       104B :
       104B : 06 02                      lodi,r2 p18000-arith_work
       104D : 07 08                      lodi,r3 n28000-arith_work
       104F : 04 2D                      lodi,r0 A'-'
       1051 : 3F 00 96                   bsta,un expr
       1054 : 3F 11 9A                   bsta,un subsi2
       1057 : 3F 00 BD                   bsta,un answer          ; -19536
       105A :
       105A : 06 02                      lodi,r2 p18000-arith_work
       105C : 07 06                      lodi,r3 n18000-arith_work
       105E : 04 2D                      lodi,r0 A'-'
       1060 : 3F 00 96                   bsta,un expr
       1063 : 3F 11 9A                   bsta,un subsi2
       1066 : 3F 00 BD                   bsta,un answer          ; 29536
       1069 :
       1069 : 06 08                      lodi,r2 n28000-arith_work
       106B : 07 06                      lodi,r3 n18000-arith_work
       106D : 04 2D                      lodi,r0 A'-'
       106F : 3F 00 96                   bsta,un expr
       1072 : 3F 11 9A                   bsta,un subsi2
       1075 : 3F 00 BD                   bsta,un answer          ; -10000
       1078 :
       1078 : 06 12                      lodi,r2 p100-arith_work
       107A : 07 0A                      lodi,r3 p300-arith_work
       107C : 04 2A                      lodi,r0 A'*'
       107E : 3F 00 96                   bsta,un expr
       1081 : 3F 12 04                   bsta,un umulsi2
       1084 : 3F 00 BD                   bsta,un answer          ; 30000
       1087 :
       1087 : 06 0C                      lodi,r2 p200-arith_work
       1089 : 07 12                      lodi,r3 p100-arith_work
       108B : 04 2A                      lodi,r0 A'*'
       108D : 3F 00 96                   bsta,un expr
       1090 : 3F 12 04                   bsta,un umulsi2
       1093 : 3F 00 BD                   bsta,un answer          ; 20000
       1096 :
       1096 : 06 0A                      lodi,r2 p300-arith_work
       1098 : 07 0E                      lodi,r3 n200-arith_work
       109A : 04 2A                      lodi,r0 A'*'
       109C : 3F 00 96                   bsta,un expr
       109F : 3F 12 23                   bsta,un mulsi2
       10A2 : 3F 00 BD                   bsta,un answer          ; 5536
       10A5 :
       10A5 : 06 12                      lodi,r2 p100-arith_work
       10A7 : 07 14                      lodi,r3 n300-arith_work
       10A9 : 04 2A                      lodi,r0 A'*'
       10AB : 3F 00 96                   bsta,un expr
       10AE : 3F 12 23                   bsta,un mulsi2
       10B1 : 3F 00 BD                   bsta,un answer          ; -30000
       10B4 :
       10B4 : 06 0E                      lodi,r2 n200-arith_work
       10B6 : 07 10                      lodi,r3 n100-arith_work
       10B8 : 04 2A                      lodi,r0 A'*'
       10BA : 3F 00 96                   bsta,un expr
       10BD : 3F 12 23                   bsta,un mulsi2
       10C0 : 3F 00 BD                   bsta,un answer          ; 20000
       10C3 :
       10C3 : 06 1A                      lodi,r2 p30000-arith_work
       10C5 : 07 12                      lodi,r3 p100-arith_work
       10C7 : 04 2F                      lodi,r0 A'/'
       10C9 : 3F 00 96                   bsta,un expr
       10CC : 3F 12 D9                   bsta,un udivsi2
       10CF : 3F 00 BD                   bsta,un answer          ; 30
       10D2 :
       10D2 : 06 0E                      lodi,r2 n200-arith_work
       10D4 : 07 12                      lodi,r3 p100-arith_work
       10D6 : 04 2F                      lodi,r0 A'/'
       10D8 : 3F 00 96                   bsta,un expr
       10DB : 3F 12 F8                   bsta,un divsi2
       10DE : 3F 00 BD                   bsta,un answer          ; -2
       10E1 :
       10E1 : 06 1C                      lodi,r2 n30000-arith_work
       10E3 : 07 0E                      lodi,r3 n200-arith_work
       10E5 : 04 2F                      lodi,r0 A'/'
       10E7 : 3F 00 96                   bsta,un expr
       10EA : 3F 12 F8                   bsta,un divsi2
       10ED : 3F 00 BD                   bsta,un answer          ; 150
       10F0 :
       10F0 : 06 1C                      lodi,r2 n30000-arith_work
       10F2 : 07 18                      lodi,r3 p78-arith_work
       10F4 : 04 2F                      lodi,r0 A'/'
       10F6 : 3F 00 96                   bsta,un expr
       10F9 : 3F 12 F8                   bsta,un divsi2
       10FC : 3F 00 BD                   bsta,un answer          ; -384
       10FF :
       10FF : 06 1E                      lodi,r2 p5000-arith_work
       1101 : 07 20                      lodi,r3 p4000-arith_work
       1103 : 3F 00 D5                   bsta,un comp
       1106 :
       1106 : 06 1E                      lodi,r2 p5000-arith_work
       1108 : 07 1E                      lodi,r3 p5000-arith_work
       110A : 3F 00 D5                   bsta,un comp
       110D :
       110D : 06 20                      lodi,r2 p4000-arith_work
       110F : 07 1E                      lodi,r3 p5000-arith_work
       1111 : 3F 00 D5                   bsta,un comp
       1114 :
       1114 : 06 22                      lodi,r2 n5000-arith_work
       1116 : 07 24                      lodi,r3 n4000-arith_work
       1118 : 3F 00 D5                   bsta,un comp
       111B :
       111B : 06 22                      lodi,r2 n5000-arith_work
       111D : 07 22                      lodi,r3 n5000-arith_work
       111F : 3F 00 D5                   bsta,un comp
       1122 :
       1122 : 06 24                      lodi,r2 n4000-arith_work
       1124 : 07 22                      lodi,r3 n5000-arith_work
       1126 : 3F 00 D5                   bsta,un comp
       1129 :
       1129 : 06 26                      lodi,r2 p32700-arith_work
       112B : 07 28                      lodi,r3 p32600-arith_work
       112D : 3F 00 D5                   bsta,un comp
       1130 :
       1130 : 06 26                      lodi,r2 p32700-arith_work
       1132 : 07 26                      lodi,r3 p32700-arith_work
       1134 : 3F 00 D5                   bsta,un comp
       1137 :
       1137 : 06 28                      lodi,r2 p32600-arith_work
       1139 : 07 26                      lodi,r3 p32700-arith_work
       113B : 3F 00 D5                   bsta,un comp
       113E :
       113E : 06 2A                      lodi,r2 n32700-arith_work
       1140 : 07 2C                      lodi,r3 n32600-arith_work
       1142 : 3F 00 D5                   bsta,un comp
       1145 :
       1145 : 06 2A                      lodi,r2 n32700-arith_work
       1147 : 07 2A                      lodi,r3 n32700-arith_work
       1149 : 3F 00 D5                   bsta,un comp
       114C :
       114C : 06 2C                      lodi,r2 n32600-arith_work
       114E : 07 2A                      lodi,r3 n32700-arith_work
       1150 : 3F 00 D5                   bsta,un comp
       1153 :
       1153 : 06 02                      lodi,r2 p18000-arith_work
       1155 : 07 08                      lodi,r3 n28000-arith_work
       1157 : 3F 00 D5                   bsta,un comp
       115A :
       115A : 06 02                      lodi,r2 p18000-arith_work
       115C : 07 02                      lodi,r3 p18000-arith_work
       115E : 3F 00 D5                   bsta,un comp
       1161 :
       1161 : 06 08                      lodi,r2 n28000-arith_work
       1163 : 07 02                      lodi,r3 p18000-arith_work
       1165 : 3F 00 D5                   bsta,un comp
       1168 :
       1168 : 40                         halt
       1169 :
       1169 :                            include "arith.inc"
(1)    1169 :                            cpu     2650
(1)    1169 :
(1)    1169 :                    ;;; PSL.WC and PSL.COM must be 1
(1)    1169 :
(1)    1169 :                    ;;; Negation; result = -value
(1)    1169 :                    ;;; @param @R2: result
(1)    1169 :                    ;;; @param @R3: value
(1)    1169 :                    ;;; @clobber R0 R1 PSL
(1)    1169 :                    negsi2:
(1)    1169 : 0F 6F 01                   loda,r0 arith_work+1,r3
(1)    116C : C1                         strz    r1
(1)    116D : 0F 6F 00                   loda,r0 arith_work,r3
(1)    1170 : 3B 08                      bstr,un negsi1
(1)    1172 : CE 6F 00                   stra,r0 arith_work,r2
(1)    1175 : 01                         lodz    r1
(1)    1176 : CE 6F 01                   stra,r0 arith_work+1,r2
(1)    1179 : 17                         retc,un
(1)    117A :
(1)    117A :                    ;;; Negation; result = -result
(1)    117A :                    ;;; @param R0:R1 result
(1)    117A :                    ;;; @clobber R0 R1 PSL
(1)    117A :                    negsi1:
(1)    117A : 25 FF                      eori,r1 H'FF'
(1)    117C : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    117E : 85 01                      addi,r1 1
(1)    1180 : 24 FF                      eori,r0 H'FF'
(1)    1182 : 84 00                      addi,r0 0               ; with carry
(1)    1184 : 17                         retc,un
(1)    1185 :
(1)    1185 :                    ;;; Signed addition: summand += addend
(1)    1185 :                    ;;; @param @R2: summand
(1)    1185 :                    ;;; @param @R3: addend
(1)    1185 :                    ;;; @clobber R0 PSL
(1)    1185 :                    addsi2:
(1)    1185 : 0E 6F 01                   loda,r0 arith_work+1,r2
(1)    1188 : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    118A : 8F 6F 01                   adda,r0 arith_work+1,r3
(1)    118D : CE 6F 01                   stra,r0 arith_work+1,r2
(1)    1190 : 0E 6F 00                   loda,r0 arith_work,r2
(1)    1193 : 8F 6F 00                   adda,r0 arith_work,r3  ; with carry
(1)    1196 : CE 6F 00                   stra,r0 arith_work,r2
(1)    1199 : 17                         retc,un
(1)    119A :
(1)    119A :                    ;;; Singed subtraction: minuend -= subtrahend
(1)    119A :                    ;;; @param @R2: minuend
(1)    119A :                    ;;; @param @R3: subtrahend
(1)    119A :                    ;;; @clobber R0 PSL
(1)    119A :                    subsi2:
(1)    119A : 0E 6F 01                   loda,r0 arith_work+1,r2
(1)    119D : 77 01                      ppsl    PSL_C           ; PSL.C=1
(1)    119F : AF 6F 01                   suba,r0 arith_work+1,r3
(1)    11A2 : CE 6F 01                   stra,r0 arith_work+1,r2
(1)    11A5 : 0E 6F 00                   loda,r0 arith_work,r2
(1)    11A8 : AF 6F 00                   suba,r0 arith_work,r3  ; with borrow
(1)    11AB : CE 6F 00                   stra,r0 arith_work,r2
(1)    11AE : 17                         retc,un
(1)    11AF :
(1)    11AF :                    ;;; Signed comparison: minuend - subtrahend
(1)    11AF :                    ;;; @param @R2: minuend
(1)    11AF :                    ;;; @param @R3: subtrahend
(1)    11AF :                    ;;; @clobber R0 R1 PSL
(1)    11AF :                    cmpsi2:
(1)    11AF : 0E 6F 01                   loda,r0 arith_work+1,r2
(1)    11B2 : 77 01                      ppsl    PSL_C           ; PSL.C=1
(1)    11B4 : AF 6F 01                   suba,r0 arith_work+1,r3
(1)    11B7 : C1                         strz    r1              ; R1=low(@2-@r3)
(1)    11B8 : 0E 6F 00                   loda,r0 arith_work,r2
(1)    11BB : AF 6F 00                   suba,r0 arith_work,r3
(1)    11BE : C8 0D                      strr,r0 cmpsi2_hi       ; R0=high(@r2-@r3)
(1)    11C0 : 61                         iorz    r1              ; R0=low(@r2-@r3)|high(@r2-@r3)
(1)    11C1 : 14                         retc,eq                 ; return if PSL.CC=Z
(1)    11C2 : 08 09                      lodr,r0 cmpsi2_hi       ; R0.7=N
(1)    11C4 : B5 04                      tpsl    PSL_OVF
(1)    11C6 : 98 02                      bcfr,eq cmpsi2_v        ; branch if PSL.OVF=0
(1)    11C8 : 24 80                      eori,r0 H'80'           ; R0.7=N^OVF
(1)    11CA :                    cmpsi2_v:
(1)    11CA : 64 01                      iori,r0 H'01'           ; PSL.CC!=Z
(1)    11CC : 17                         retc,un
(1)    11CD :                    cmpsi2_hi:
(1)    11CD :                            res     1
(1)    11CE :
(1)    11CE :                    ;;; Unsigned multiplication: result = multiplicand  multiplier
(1)    11CE :                    ;;; @param mul16_multiplicand
(1)    11CE :                    ;;; @param mul16_multiplier
(1)    11CE :                    ;;; @return R0:R1 result
(1)    11CE :                    ;;; @clobber R0 R1 PSL
(1)    11CE :                    umul16_r2
(1)    11CE :                            res     1
(1)    11CF :                    umul16:
(1)    11CF : CA 7D                      strr,r2 umul16_r2
(1)    11D1 : 20                         eorz    r0
(1)    11D2 : C1                         strz    r1              ; r0:r1=result
(1)    11D3 : 1B 22                      bctr,un umul16_check
(1)    11D5 :                    umul16_loop:
(1)    11D5 : 0A 2B                      lodr,r2 umul16_multiplier
(1)    11D7 : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    11D9 : 52                         rrr     r2              ; multiplier >>= 1
(1)    11DA : CA 26                      strr,r2 umul16_multiplier
(1)    11DC : 0A 25                      lodr,r2 umul16_multiplier+1
(1)    11DE : 52                         rrr     r2
(1)    11DF : CA 22                      strr,r2 umul16_multiplier+1
(1)    11E1 : B5 01                      tpsl    PSL_C           ; PSL.C=lsb(multiplier)
(1)    11E3 : 98 06                      bcfr,eq umul16_next     ; branch if PSL.C=0
(1)    11E5 : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    11E7 : 89 18                      addr,r1 umul16_multiplicand+1
(1)    11E9 : 88 15                      addr,r0 umul16_multiplicand ; result += multiplicand
(1)    11EB :                    umul16_next:
(1)    11EB : 0A 14                      lodr,r2 umul16_multiplicand+1
(1)    11ED : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    11EF : D2                         rrl     r2
(1)    11F0 : CA 0F                      strr,r2 umul16_multiplicand+1
(1)    11F2 : 0A 0C                      lodr,r2 umul16_multiplicand
(1)    11F4 : D2                         rrl     r2
(1)    11F5 : CA 09                      strr,r2 umul16_multiplicand ; multiplicand <<= 1
(1)    11F7 :                    umul16_check:
(1)    11F7 : 0A 09                      lodr,r2 umul16_multiplier
(1)    11F9 : 6A 08                      iorr,r2 umul16_multiplier+1
(1)    11FB : 98 58                      bcfr,eq umul16_loop     ; while multiplier != 0
(1)    11FD :                    umul16_end:
(1)    11FD : 0A 4F                      lodr,r2 umul16_r2
(1)    11FF : 17                         retc,un
(1)    1200 :
(1)    1200 :                    umul16_multiplicand:
(1)    1200 :                            res     2
(1)    1202 :                    umul16_multiplier
(1)    1202 :                            res     2
(1)    1204 :
(1)    1204 :                    ;;; Unsigned multiplication: multiplicand = multiplier
(1)    1204 :                    ;;; @param @R2: multiplicand
(1)    1204 :                    ;;; @param @R3: multiplier
(1)    1204 :                    ;;; @clobber R0 R1 PSL
(1)    1204 :                    umulsi2:
(1)    1204 : 0E 6F 00                   loda,r0 arith_work,r2
(1)    1207 : C8 77                      strr,r0 umul16_multiplicand
(1)    1209 : 0E 6F 01                   loda,r0 arith_work+1,r2
(1)    120C : C8 73                      strr,r0 umul16_multiplicand+1
(1)    120E : 0F 6F 00                   loda,r0 arith_work,r3
(1)    1211 : C8 6F                      strr,r0 umul16_multiplier
(1)    1213 : 0F 6F 01                   loda,r0 arith_work+1,r3
(1)    1216 : C8 6B                      strr,r0 umul16_multiplier+1
(1)    1218 : 3F 11 CF                   bsta,un umul16          ; r0:r1=multiplicand  multiplier
(1)    121B : CE 6F 00                   stra,r0 arith_work,r2
(1)    121E : 01                         lodz    r1
(1)    121F : CE 6F 01                   stra,r0 arith_work+1,r2
(1)    1222 : 17                         retc,un
(1)    1223 :
(1)    1223 :                    ;;; Signed multiplication: multiplicand = multiplier
(1)    1223 :                    ;;; @param @R2: multiplicand
(1)    1223 :                    ;;; @param @R3: multiplier
(1)    1223 :                    ;;; @clobber R0 R1 PSL
(1)    1223 :                    mulsi2:
(1)    1223 : 0E 6F 00                   loda,r0 arith_work,r2
(1)    1226 : 2F 6F 00                   eora,r0 arith_work,r3
(1)    1229 : C8 34                      strr,r0 mulsi2_sign
(1)    122B : 0E 6F 01                   loda,r0 arith_work+1,r2
(1)    122E : C1                         strz    r1
(1)    122F : 0E 6F 00                   loda,r0 arith_work,r2
(1)    1232 : 3E 11 7A                   bsta,lt negsi1          ; multiplicand=-multiplicand
(1)    1235 : C8 49                      strr,r0 umul16_multiplicand
(1)    1237 : 01                         lodz    r1
(1)    1238 : C8 47                      strr,r0 umul16_multiplicand+1
(1)    123A : 0F 6F 01                   loda,r0 arith_work+1,r3
(1)    123D : C1                         strz    r1
(1)    123E : 0F 6F 00                   loda,r0 arith_work,r3
(1)    1241 : 3E 11 7A                   bsta,lt negsi1          ; multiplier=-multiplier
(1)    1244 : CC 12 02                   stra,r0 umul16_multiplier
(1)    1247 : 01                         lodz    r1
(1)    1248 : CC 12 03                   stra,r0 umul16_multiplier+1
(1)    124B : 3F 11 CF                   bsta,un umul16          ; r0:r1=multiplicand  multiplier
(1)    124E : CA 10                      strr,r2 mulsi2_r2
(1)    1250 : 0A 0D                      lodr,r2 mulsi2_sign
(1)    1252 : 3E 11 7A                   bsta,lt negsi1          ; result=-result
(1)    1255 : 0A 09                      lodr,r2 mulsi2_r2
(1)    1257 : CE 6F 00                   stra,r0 arith_work,r2
(1)    125A : 01                         lodz    r1
(1)    125B : CE 6F 01                   stra,r0 arith_work+1,r2
(1)    125E : 17                         retc,un
(1)    125F :                    mulsi2_sign:
(1)    125F :                            res     1
(1)    1260 :                    mulsi2_r2:
(1)    1260 :                            res     1
(1)    1261 :
(1)    1261 :                    ;;; Unsigned division: divident / divisor = quotient ... reminder
(1)    1261 :                    ;;; @praram udiv16_divident
(1)    1261 :                    ;;; @praram udiv16_divisor
(1)    1261 :                    ;;; @return udiv16_divident reminder
(1)    1261 :                    ;;; @return R0:R1 quotient
(1)    1261 :                    ;;; @clobber R0 R1 PSL
(1)    1261 :                    udiv16:
(1)    1261 : 0C 12 BF                   loda,r0 udiv16_divisor
(1)    1264 : 6C 12 C0                   iora,r0 udiv16_divisor+1
(1)    1267 : 14                         retc,eq                 ; divide by zero
(1)    1268 : 05 01                      lodi,r1 1               ; R1=bits
(1)    126A : 1B 14                      bctr,un udiv16_prep
(1)    126C :                    udiv16_prep_loop:
(1)    126C : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    126E : 0C 12 C0                   loda,r0 udiv16_divisor+1
(1)    1271 : D0                         rrl     r0              ; divisor <<= 1
(1)    1272 : CC 12 C0                   stra,r0 udiv16_divisor+1
(1)    1275 : 0C 12 BF                   loda,r0 udiv16_divisor
(1)    1278 : D0                         rrl     r0
(1)    1279 : CC 12 BF                   stra,r0 udiv16_divisor
(1)    127C : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    127E : 85 01                      addi,r1 1
(1)    1280 :                    udiv16_prep:                    ; while msb(divisor) == 0
(1)    1280 : 08 3D                      lodr,r0 udiv16_divisor
(1)    1282 : 9A 68                      bcfr,lt udiv16_prep_loop
(1)    1284 : 20                         eorz    r0
(1)    1285 : C8 3A                      strr,r0 udiv16_quotient
(1)    1287 : C8 39                      strr,r0 udiv16_quotient+1
(1)    1289 : 1B 18                      bctr,un udiv16_enter_loop
(1)    128B :                    udiv16_loop:
(1)    128B : 08 32                      lodr,r0 udiv16_divisor
(1)    128D : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    128F : 50                         rrr     r0
(1)    1290 : C8 2D                      strr,r0 udiv16_divisor
(1)    1292 : 08 2C                      lodr,r0 udiv16_divisor+1
(1)    1294 : 50                         rrr     r0
(1)    1295 : C8 29                      strr,r0 udiv16_divisor+1 ; divisor >>= 1
(1)    1297 : 08 29                      lodr,r0 udiv16_quotient+1
(1)    1299 : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    129B : D0                         rrl     r0
(1)    129C : C8 24                      strr,r0 udiv16_quotient+1
(1)    129E : 08 21                      lodr,r0 udiv16_quotient
(1)    12A0 : D0                         rrl     r0
(1)    12A1 : C8 1E                      strr,r0 udiv16_quotient ; quotient <<= 1
(1)    12A3 :                    udiv16_enter_loop:
(1)    12A3 : 08 19                      lodr,r0 udiv16_divident+1
(1)    12A5 : 77 01                      ppsl    PSL_C           ; PSL.C=1
(1)    12A7 : A8 17                      subr,r0 udiv16_divisor+1
(1)    12A9 : C8 13                      strr,r0 udiv16_divident+1
(1)    12AB : 08 10                      lodr,r0 udiv16_divident
(1)    12AD : A8 10                      subr,r0 udiv16_divisor
(1)    12AF : C8 0C                      strr,r0 udiv16_divident ; divident -= divisor
(1)    12B1 : B5 01                      tpsl    PSL_C
(1)    12B3 : 98 0E                      bcfr,eq udiv16_readd    ; branch if divident < 0 (PSL.C=0)
(1)    12B5 : 08 0B                      lodr,r0 udiv16_quotient+1
(1)    12B7 : 64 01                      iori,r0 1
(1)    12B9 : C8 07                      strr,r0 udiv16_quotient+1 ; quotient |= 1
(1)    12BB : 1B 14                      bctr,un udiv16_next
(1)    12BD :
(1)    12BD :                    udiv16_divident:
(1)    12BD :                            res     2
(1)    12BF :                    udiv16_divisor:
(1)    12BF :                            res     2
(1)    12C1 :                    udiv16_quotient:
(1)    12C1 :                            res     2
(1)    12C3 :
(1)    12C3 :                    udiv16_readd:
(1)    12C3 : 08 79                      lodr,r0 udiv16_divident+1
(1)    12C5 : 75 01                      cpsl    PSL_C           ; PSL.C=0
(1)    12C7 : 88 77                      addr,r0 udiv16_divisor+1
(1)    12C9 : C8 73                      strr,r0 udiv16_divident+1
(1)    12CB : 08 70                      lodr,r0 udiv16_divident
(1)    12CD : 88 70                      addr,r0 udiv16_divisor
(1)    12CF : C8 6C                      strr,r0 udiv16_divident ; divident += divisor
(1)    12D1 :                    udiv16_next:
(1)    12D1 : FD 12 8B                   bdra,r1 udiv16_loop
(1)    12D4 : 08 6B                      lodr,r0 udiv16_quotient
(1)    12D6 : 09 6A                      lodr,r1 udiv16_quotient+1 ; R0:R1=quotient
(1)    12D8 : 17                         retc,un
(1)    12D9 :
(1)    12D9 :                    ;;; Unsigned division: dividend /= divisor
(1)    12D9 :                    ;;; @praram @R2: dividend
(1)    12D9 :                    ;;; @praram @R3: divisor
(1)    12D9 :                    ;;; @clobber R0 R1
(1)    12D9 :                    udivsi2:
(1)    12D9 : 0E 6F 00                   loda,r0 arith_work,r2
(1)    12DC : C8 5F                      strr,r0 udiv16_divident
(1)    12DE : 0E 6F 01                   loda,r0 arith_work+1,r2
(1)    12E1 : C8 5B                      strr,r0 udiv16_divident+1
(1)    12E3 : 0F 6F 00                   loda,r0 arith_work,r3
(1)    12E6 : C8 57                      strr,r0 udiv16_divisor
(1)    12E8 : 0F 6F 01                   loda,r0 arith_work+1,r3
(1)    12EB : C8 53                      strr,r0 udiv16_divisor+1
(1)    12ED : 3F 12 61                   bsta,un udiv16          ; R0:R1=quotient
(1)    12F0 : CE 6F 00                   stra,r0 arith_work,r2
(1)    12F3 : 01                         lodz    r1
(1)    12F4 : CE 6F 01                   stra,r0 arith_work+1,r2
(1)    12F7 : 17                         retc,un
(1)    12F8 :
(1)    12F8 :                    ;;; Signed division: divident = divisor
(1)    12F8 :                    ;;; @param @R2: divident
(1)    12F8 :                    ;;; @param @R3: divisor
(1)    12F8 :                    ;;; @clobber R0 R1 PSL
(1)    12F8 :                    divsi2:
(1)    12F8 : 0E 6F 00                   loda,r0 arith_work,r2
(1)    12FB : 2F 6F 00                   eora,r0 arith_work,r3
(1)    12FE : C8 36                      strr,r0 divsi2_sign
(1)    1300 : 0E 6F 01                   loda,r0 arith_work+1,r2
(1)    1303 : C1                         strz    r1
(1)    1304 : 0E 6F 00                   loda,r0 arith_work,r2
(1)    1307 : 3E 11 7A                   bsta,lt negsi1          ; divident=-divident
(1)    130A : CC 12 BD                   stra,r0 udiv16_divident
(1)    130D : 01                         lodz    r1
(1)    130E : CC 12 BE                   stra,r0 udiv16_divident+1
(1)    1311 : 0F 6F 01                   loda,r0 arith_work+1,r3
(1)    1314 : C1                         strz    r1
(1)    1315 : 0F 6F 00                   loda,r0 arith_work,r3
(1)    1318 : 3E 11 7A                   bsta,lt negsi1          ; divisor=-divisor
(1)    131B : CC 12 BF                   stra,r0 udiv16_divisor
(1)    131E : 01                         lodz    r1
(1)    131F : CC 12 C0                   stra,r0 udiv16_divisor+1
(1)    1322 : 3F 12 61                   bsta,un udiv16          ; r0:r1=quotient
(1)    1325 : CA 10                      strr,r2 divsi2_r2
(1)    1327 : 0A 0D                      lodr,r2 divsi2_sign
(1)    1329 : 3E 11 7A                   bsta,lt negsi1          ; quotient=-quotient
(1)    132C : 0A 09                      lodr,r2 divsi2_r2
(1)    132E : CE 6F 00                   stra,r0 arith_work,r2
(1)    1331 : 01                         lodz    r1
(1)    1332 : CE 6F 01                   stra,r0 arith_work+1,r2
(1)    1335 : 17                         retc,un
(1)    1336 :                    divsi2_sign:
(1)    1336 :                            res     1
(1)    1337 :                    divsi2_r2
(1)    1337 :                            res     1
(1)    1338 :
(1)    1338 :                    ;;; Local Variables:
(1)    1338 :                    ;;; mode: asm
(1)    1338 :                    ;;; End:
(1)    1338 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       1338 :
       1338 :                            end

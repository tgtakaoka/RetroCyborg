          0 :                            cpu     ins8070
          0 :                            include "ins8070.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; INS8070
(1)       0 :                    ;;; Status Register
(1)       0 : =80                S_CY:   equ     0x80            ; Carry bit
(1)       0 : =80                S_L:    equ     0x80            ; Link bit
(1)       0 : =40                S_OV:   equ     0x40            ; Overflow bit
(1)       0 : =20                S_SB:   equ     0x20            ; Sense B bit
(1)       0 : =10                S_SA:   equ     0x10            ; Sense A bit
(1)       0 : =8                 S_F3:   equ     0x08            ; Flag 3 bit
(1)       0 : =4                 S_F2:   equ     0x04            ; Flag 2 bit
(1)       0 : =2                 S_F1:   equ     0x02            ; Flag 1 bit
(1)       0 : =1                 S_IE:   equ     0x01            ; Interrupt Enable bit
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =1                 ORG_RESTART:    equ     0x0001  ; Restart transfer location
(1)       0 : =4                 ORG_INTA:       equ     0x0004  ; Interrupt A transfer location
(1)       0 : =7                 ORG_INTB:       equ     0x0007  ; Interrupt B transfer location
(1)       0 : =A                 ORG_END:        equ     0x000A
(1)       0 :
(1)       0 :                    ;;; Call vectors
(1)       0 : =20                VEC_CALL0:      equ     0x0020  ; Call 0 vector
(1)       0 : =22                VEC_CALL1:      equ     0x0022  ; Call 0 vector
(1)       0 : =24                VEC_CALL2:      equ     0x0024  ; Call 0 vector
(1)       0 : =26                VEC_CALL3:      equ     0x0026  ; Call 0 vector
(1)       0 : =28                VEC_CALL4:      equ     0x0028  ; Call 0 vector
(1)       0 : =2A                VEC_CALL5:      equ     0x002A  ; Call 0 vector
(1)       0 : =2C                VEC_CALL6:      equ     0x002C  ; Call 0 vector
(1)       0 : =2E                VEC_CALL7:      equ     0x002E  ; Call 0 vector
(1)       0 : =30                VEC_CALL8:      equ     0x0030  ; Call 0 vector
(1)       0 : =32                VEC_CALL9:      equ     0x0032  ; Call 0 vector
(1)       0 : =34                VEC_CALL10:     equ     0x0034  ; Call 0 vector
(1)       0 : =36                VEC_CALL11:     equ     0x0036  ; Call 0 vector
(1)       0 : =38                VEC_CALL12:     equ     0x0038  ; Call 0 vector
(1)       0 : =3A                VEC_CALL13:     equ     0x003A  ; Call 0 vector
(1)       0 : =3C                VEC_CALL14:     equ     0x003C  ; Call 0 vector
(1)       0 : =3E                VEC_CALL15:     equ     0x003E  ; Call 0 vector
(1)       0 : =40                VEC_END:        equ     0x0040
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     0xDF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     0b11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     0b00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     0b00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     0b00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     0b00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     0b00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     0b00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     0b00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     0b00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     0b00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     0b00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     0b00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     0b00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     0b00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     0b01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     0b00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     0b00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     0b01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     0b01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     0b10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     0b00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     0b00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     0b00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     0b00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     0b00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     0b00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     0b01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     0b10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 : =0                 ACIA_C: equ     0               ; ACIA control offset
          0 : =0                 ACIA_S: equ     0               ; ACIA status offset
          0 : =1                 ACIA_D: equ     1               ; ACIA data register offset
          0 :
       1000 :                            org     0x1000
       1000 :                    stack:
       1000 :                    initialize:
       1000 : 25 00 10                   ld      sp, =stack
       1003 : 26 00 DF                   ld      p2, =ACIA
       1006 : C4 03                      ld      a, =CDS_RESET_gc        ; Master reset
       1008 : CA 00                      st      a, ACIA_C, p2
       100A : C4 14                      ld      a, =WSB_8N1_gc  ; 8 bits + No Parity + 1 Stop Bits
       100C :                                                    ; Transmit, Receive interrupts disabled
       100C : CA 00                      st      a, ACIA_C, p2
       100E :
       100E :                    receive_loop:
       100E : C2 00                      ld      a, ACIA_S, p2
       1010 : D4 01                      and     a, =RDRF_bm
       1012 : 6C FA                      bz      receive_loop
       1014 :                    receive_data:
       1014 : C2 01                      ld      a, ACIA_D, p2
       1016 : 01                         xch     a, e            ; E=data
       1017 :                    transmit_loop:
       1017 : C2 00                      ld      a, ACIA_S, p2
       1019 : D4 02                      and     a, =TDRE_bm
       101B : 6C FA                      bz      transmit_loop
       101D :                    transmit_data:
       101D : 01                         xch     a, e            ; A=data
       101E : CA 01                      st      a, ACIA_D, p2
       1020 : E4 0D                      xor     a, =0x0d
       1022 : 7C EA                      bnz     receive_loop
       1024 : C4 0A                      ld      a, =0x0a
       1026 : 01                         xch     a, e            ; E=data
       1027 : 74 EE                      bra     transmit_loop
       1029 :
          1 :                            org     ORG_RESTART
          1 : 24 FF 0F                   jmp     initialize

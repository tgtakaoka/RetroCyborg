          0 :                            cpu     ins8070
          0 :                            include "ins8070.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; INS8070
(1)       0 :                    ;;; Status Register
(1)       0 : =80                S_CY:   equ     0x80            ; Carry bit
(1)       0 : =80                S_L:    equ     0x80            ; Link bit
(1)       0 : =40                S_OV:   equ     0x40            ; Overflow bit
(1)       0 : =20                S_SB:   equ     0x20            ; Sense B bit
(1)       0 : =10                S_SA:   equ     0x10            ; Sense A bit
(1)       0 : =8                 S_F3:   equ     0x08            ; Flag 3 bit
(1)       0 : =4                 S_F2:   equ     0x04            ; Flag 2 bit
(1)       0 : =2                 S_F1:   equ     0x02            ; Flag 1 bit
(1)       0 : =1                 S_IE:   equ     0x01            ; Interrupt Enable bit
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =1                 ORG_RESTART:    equ     0x0001  ; Restart transfer location
(1)       0 : =4                 ORG_INTA:       equ     0x0004  ; Interrupt A transfer location
(1)       0 : =7                 ORG_INTB:       equ     0x0007  ; Interrupt B transfer location
(1)       0 : =A                 ORG_END:        equ     0x000A
(1)       0 :
(1)       0 :                    ;;; Call vectors
(1)       0 : =20                VEC_CALL0:      equ     0x0020  ; Call 0 vector
(1)       0 : =22                VEC_CALL1:      equ     0x0022  ; Call 0 vector
(1)       0 : =24                VEC_CALL2:      equ     0x0024  ; Call 0 vector
(1)       0 : =26                VEC_CALL3:      equ     0x0026  ; Call 0 vector
(1)       0 : =28                VEC_CALL4:      equ     0x0028  ; Call 0 vector
(1)       0 : =2A                VEC_CALL5:      equ     0x002A  ; Call 0 vector
(1)       0 : =2C                VEC_CALL6:      equ     0x002C  ; Call 0 vector
(1)       0 : =2E                VEC_CALL7:      equ     0x002E  ; Call 0 vector
(1)       0 : =30                VEC_CALL8:      equ     0x0030  ; Call 0 vector
(1)       0 : =32                VEC_CALL9:      equ     0x0032  ; Call 0 vector
(1)       0 : =34                VEC_CALL10:     equ     0x0034  ; Call 0 vector
(1)       0 : =36                VEC_CALL11:     equ     0x0036  ; Call 0 vector
(1)       0 : =38                VEC_CALL12:     equ     0x0038  ; Call 0 vector
(1)       0 : =3A                VEC_CALL13:     equ     0x003A  ; Call 0 vector
(1)       0 : =3C                VEC_CALL14:     equ     0x003C  ; Call 0 vector
(1)       0 : =3E                VEC_CALL15:     equ     0x003E  ; Call 0 vector
(1)       0 : =40                VEC_END:        equ     0x0040
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     0xDF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     0b11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     0b00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     0b00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     0b00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     0b00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     0b00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     0b00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     0b00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     0b00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     0b00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     0b00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     0b00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     0b00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     0b00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     0b01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     0b00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     0b00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     0b01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     0b01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     0b10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     0b00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     0b00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     0b00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     0b00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     0b00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     0b00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     0b01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     0b10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 : =0                 ACIA_C: equ     0               ; ACIA control offset
          0 : =0                 ACIA_S: equ     0               ; ACIA status offset
          0 : =1                 ACIA_D: equ     1               ; ACIA data register offset
          0 :
          0 : =10                rx_queue_size:  equ     16
          0 : =30                tx_queue_size:  equ     48
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
       2000 :                            org     0x2000
       2000 :                    rx_queue:
       2000 :                            ds      rx_queue_size
       2010 :                    tx_queue:
       2010 :                            ds      tx_queue_size
       2040 :
       FF00 :                            org     0xFF00
       FF00 :                    tx_int_control:
       FF00 :                            ds      1
       FF01 :
       1000 :                            org     0x1000
       1000 :                    stack:
       1000 :                    initialize:
       1000 : 25 00 10                   ld      sp, =stack
       1003 :                            ;; initialize queues
       1003 : 26 00 20                   ld      p2, =rx_queue
       1006 : C4 10                      ld      a, =rx_queue_size
       1008 : 20 D1 10                   jsr     queue_init
       100B : 26 10 20                   ld      p2, =tx_queue
       100E : C4 30                      ld      a, =tx_queue_size
       1010 : 20 D1 10                   jsr     queue_init
       1013 :
       1013 :                            ;; initialize ACIA
       1013 : 26 00 DF                   ld      p2, =ACIA
       1016 : C4 03                      ld      a, =CDS_RESET_gc ; master reset
       1018 : CA 00                      st      a, ACIA_C, p2
       101A : C4 94                      ld      a, =RX_INT_TX_NO
       101C : CA 00                      st      a, ACIA_C, p2
       101E : C4 00                      ld      a, =0
       1020 : CD 00                      st      a, tx_int_control ; disable Tx interrupt
       1022 : 3B 01                      or      s, =S_IE          ; enable IRQ
       1024 :
       1024 :                    loop:
       1024 : 20 A4 10                   jsr     getchar
       1027 : 6C FB                      bz      loop
       1029 : 40                         ld      a, e
       102A : 20 AF 10                   jsr     putchar         ; echo
       102D : C4 20                      ld      a, =' '         ; space
       102F : 20 AF 10                   jsr     putchar
       1032 : 40                         ld      a, e
       1033 : 20 4D 10                   jsr     put_hex8        ; print in hex
       1036 : C4 20                      ld      a, =' '         ; space
       1038 : 20 AF 10                   jsr     putchar
       103B : 40                         ld      a, e
       103C : 20 78 10                   jsr     put_bin8        ; print in binary
       103F : 20 43 10                   jsr     newline
       1042 : 74 E0                      bra     loop
       1044 :
       1044 :                    ;;; Put newline
       1044 :                    ;;; @clobber A
       1044 :                    newline:
       1044 : C4 0D                      ld      a, =X'0D
       1046 : 20 AF 10                   jsr     putchar
       1049 : C4 0A                      ld      a, =X'0A
       104B : 24 AF 10                   jmp     putchar
       104E :
       104E :                    ;;; Print uint8_t in hex
       104E :                    ;;; @param A uint8_t value to be printed in hex.
       104E :                    put_hex8:
       104E : 08                         push    ea
       104F : C4 30                      ld      a, ='0'
       1051 : 20 AF 10                   jsr     putchar
       1054 : C4 78                      ld      a, ='x'
       1056 : 20 AF 10                   jsr     putchar
       1059 : C1 00                      ld      a, 0, sp
       105B : 3C                         sr      a
       105C : 3C                         sr      a
       105D : 3C                         sr      a
       105E : 3C                         sr      a
       105F : 20 68 10                   jsr     put_hex4
       1062 : C1 00                      ld      a, 0, sp
       1064 : 20 68 10                   jsr     put_hex4
       1067 : 3A                         pop     ea
       1068 : 5C                         ret
       1069 :                    put_hex4:
       1069 : D4 0F                      and     a, =0x0f
       106B : FC 0A                      sub     a, =10
       106D : 64 05                      bp      put_hex4_hex
       106F : F4 3A                      add     a, ='0'+10
       1071 : 24 AF 10                   jmp     putchar
       1074 :                    put_hex4_hex:
       1074 : F4 41                      add     a, ='A'
       1076 : 24 AF 10                   jmp     putchar
       1079 :
       1079 :                    ;;; Print uint8_t in binary
       1079 :                    ;;; @param A(save_a) uint8_t value to be printed in binary.
       1079 :                    put_bin8:
       1079 : 08                         push    ea
       107A : C4 30                      ld      a, ='0'
       107C : 20 AF 10                   jsr     putchar
       107F : C4 62                      ld      a, ='b'
       1081 : 20 AF 10                   jsr     putchar
       1084 : C1 00                      ld      a, 0, sp
       1086 : 48                         ld      e, a
       1087 : 20 8E 10                   jsr     put_bin4
       108A : 20 8E 10                   jsr     put_bin4
       108D : 3A                         pop     ea
       108E : 5C                         ret
       108F :                    put_bin4:
       108F : 20 91 10                   jsr     put_bin2
       1092 :                    put_bin2:
       1092 : 20 94 10                   jsr     put_bin1
       1095 :                    put_bin1:
       1095 : 40                         ld      a, e
       1096 : 70                         add     a, e
       1097 : 48                         ld      e, a            ; E<<=1
       1098 : 06                         ld      a, s
       1099 : 64 05                      bp      put_bin0        ; A:7=CY
       109B : C4 31                      ld      a, ='1'
       109D : 24 AF 10                   jmp     putchar
       10A0 :                    put_bin0:
       10A0 : C4 30                      ld      a, ='0'
       10A2 : 24 AF 10                   jmp     putchar
       10A5 :
       10A5 :                    ;;; Get character
       10A5 :                    ;;; @clobber P2
       10A5 :                    ;;; @return E char
       10A5 :                    ;;; @return A 0 if no char received
       10A5 :                    getchar:
       10A5 : 26 00 20                   ld      p2, =rx_queue
       10A8 : 39 FE                      and     s, =~S_IE       ; disable IRQ
       10AA : 20 16 11                   jsr     queue_remove
       10AD : 3B 01                      or      s, =S_IE        ; enable IRQ
       10AF : 5C                         ret
       10B0 :
       10B0 :                    ;;; Put character
       10B0 :                    ;;; @param A char
       10B0 :                    ;;; @clobber P2
       10B0 :                    putchar:
       10B0 : 08                         push    ea
       10B1 : 48                         ld      e, a
       10B2 :                    putchar_retry:
       10B2 : 40                         ld      a, e
       10B3 : 26 10 20                   ld      p2, =tx_queue
       10B6 : 39 FE                      and     s, =~S_IE       ; disable IRQ
       10B8 : 20 F8 10                   jsr     queue_add
       10BB : 3B 01                      or      s, =S_IE        ; enable IRQ
       10BD : 6C F3                      bz      putchar_retry   ; queue is full
       10BF : 39 FE                      and     s, =~S_IE       ; disable IRQ
       10C1 : C5 00                      ld      a, tx_int_control
       10C3 : 7C 09                      bnz     putchar_exit
       10C5 : 26 00 DF                   ld      p2, =ACIA
       10C8 : C4 B4                      ld      a, =RX_INT_TX_INT ; enable Tx interrupt
       10CA : CA 00                      st      a, ACIA_C, p2
       10CC : CD 00                      st      a, tx_int_control
       10CE :                    putchar_exit:
       10CE : 3A                         pop     ea
       10CF : 3B 01                      or      s, =S_IE        ; enable IRQ
       10D1 : 5C                         ret
       10D2 :
       10D2 :                            include "queue.inc"
(1)    10D2 :                    ;;; [queue] queue structure
(1)    10D2 : =0                 queue_len:      equ     0       ; queue length
(1)    10D2 : =1                 queue_size:     equ     1       ; buffer size
(1)    10D2 : =2                 queue_put:      equ     2       ; queue put index
(1)    10D2 : =3                 queue_get:      equ     3       ; queue get index
(1)    10D2 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    10D2 :
(1)    10D2 :                    ;;; [queue] Initialize queue
(1)    10D2 :                    ;;; @param P2 queue work space pointer
(1)    10D2 :                    ;;; @param A queue work space size
(1)    10D2 :                    ;;; @clobber A
(1)    10D2 :                    queue_init:
(1)    10D2 : 48                         ld      e, a
(1)    10D3 : C4 00                      ld      a, =0
(1)    10D5 : CA 00                      st      a, queue_len, p2
(1)    10D7 : CA 02                      st      a, queue_put, p2
(1)    10D9 : CA 03                      st      a, queue_get, p2
(1)    10DB : 01                         xch     a, e            ; E=0, A=space size
(1)    10DC : FC 04                      sub     a, =queue_buf
(1)    10DE : CA 01                      st      a, queue_size, p2
(1)    10E0 : 0A                         push    a               ; 0,SP=counter
(1)    10E1 : C6 04                      ld      a, @queue_buf, p2
(1)    10E3 :                    queue_init_loop:
(1)    10E3 : 40                         ld      a, e            ; E=0
(1)    10E4 : CE 01                      st      a, @1, p2
(1)    10E6 : 99 00                      dld     a, 0, sp
(1)    10E8 : 7C F9                      bnz     queue_init_loop
(1)    10EA : 38                         pop     a               ; discard counter
(1)    10EB : 5C                         ret
(1)    10EC :
(1)    10EC :                    ;;; [add_p2_a] Add A to P2
(1)    10EC :                    ;;; @param P2
(1)    10EC :                    ;;; @param A
(1)    10EC :                    ;;; @return P3=P2+A
(1)    10EC :                    add_p2_a:
(1)    10EC : 08                         push    ea              ; save EA
(1)    10ED : 01                         xch     a, e
(1)    10EE : C4 00                      ld      a, =0
(1)    10F0 : 01                         xch     a, e
(1)    10F1 : 08                         push    ea              ; 0:E
(1)    10F2 : 32                         ld      ea, p2
(1)    10F3 : B1 00                      add     ea, 0, sp       ; EA=P2+E
(1)    10F5 : 47                         ld      p3, ea
(1)    10F6 : 3A                         pop     ea
(1)    10F7 : 3A                         pop     ea              ; restore EA
(1)    10F8 : 5C                         ret
(1)    10F9 :
(1)    10F9 :                    ;;; [queue] Add an element to queue
(1)    10F9 :                    ;;; @param P2 queue work space pointer
(1)    10F9 :                    ;;; @param A an element
(1)    10F9 :                    ;;; @return E an element
(1)    10F9 :                    ;;; @return A 0 if queue is full
(1)    10F9 :                    queue_add:
(1)    10F9 : 57                         push    p3
(1)    10FA : 48                         ld      e, a            ; save element in E
(1)    10FB : C2 00                      ld      a, queue_len, p2
(1)    10FD : FA 01                      sub     a, queue_size, p2
(1)    10FF : 6C 14                      bz      queue_add_return ; A=0
(1)    1101 : C2 02                      ld      a, queue_put, p2 ; 8 bits offset
(1)    1103 : 20 EB 10                   jsr     add_p2_a
(1)    1106 : 40                         ld      a, e
(1)    1107 : CB 04                      st      a, queue_buf, p3 ; store an element
(1)    1109 : 92 00                      ild     a, queue_len, p2
(1)    110B : 92 02                      ild     a, queue_put, p2
(1)    110D : FA 01                      sub     a, queue_size, p2
(1)    110F : 7C 04                      bnz     queue_add_return ; A is not zero
(1)    1111 : CA 02                      st      a, queue_put, p2
(1)    1113 : C4 01                      ld      a, =1           ; A is not zero
(1)    1115 :                    queue_add_return:
(1)    1115 : 5F                         pop     p3
(1)    1116 : 5C                         ret
(1)    1117 :
(1)    1117 :                    ;;; [queue] Remove an element from queue
(1)    1117 :                    ;;; @param P2 queue work space pointer
(1)    1117 :                    ;;; @return E an element
(1)    1117 :                    ;;; @return A 0 if queue is empty
(1)    1117 :                    queue_remove:
(1)    1117 : 57                         push    p3
(1)    1118 : C2 00                      ld      a, queue_len, p2
(1)    111A : 6C 14                      bz      queue_remove_return ; A is zero
(1)    111C :                    queue_remove_elem
(1)    111C : C2 03                      ld      a, queue_get, p2 ; 8 bits offset
(1)    111E : 20 EB 10                   jsr     add_p2_a
(1)    1121 : C3 04                      ld      a, queue_buf, p3 ; read an element
(1)    1123 : 48                         ld      e, a
(1)    1124 : 9A 00                      dld     a, queue_len, p2
(1)    1126 : 92 03                      ild     a, queue_get, p2
(1)    1128 : FA 01                      sub     a, queue_size, p2
(1)    112A : 7C 04                      bnz     queue_remove_return ; A is not zero
(1)    112C : CA 03                      st      a, queue_get, p2 ; A is zero
(1)    112E : C4 01                      ld      a, =1            ; A is not zero
(1)    1130 :                    queue_remove_return:
(1)    1130 : 5F                         pop     p3
(1)    1131 : 5C                         ret
(1)    1132 :
(1)    1132 :                    ;;; Local Variables:
(1)    1132 :                    ;;; mode: asm
(1)    1132 :                    ;;; End:
(1)    1132 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       1132 :
       1132 :                    isr_irq:
       1132 : 08                         push    ea
       1133 : 22 00 DF                   pli     p2, =ACIA
       1136 : C2 00                      ld      a, ACIA_S, p2
       1138 : 48                         ld      e, a            ; save ACIA status in E
       1139 : D4 80                      and     a, =IRQF_bm
       113B : 6C 32                      bz      isr_irq_exit
       113D : 40                         ld      a, e
       113E : D4 70                      and     a, =FERR_bm|OVRN_bm|PERR_bm
       1140 : 6C 02                      bz      isr_irq_receive
       1142 : C2 01                      ld      a, ACIA_D, p2   ; clear errors
       1144 :                    isr_irq_receive:
       1144 : 40                         ld      a, e
       1145 : 0A                         push    a               ; save ACIA status
       1146 : D4 01                      and     a, =RDRF_bm
       1148 : 6C 08                      bz      isr_irq_send
       114A : C2 01                      ld      a, ACIA_D, p2   ; receive character
       114C : 26 00 20                   ld      p2, =rx_queue
       114F : 20 F8 10                   jsr     queue_add
       1152 :                    isr_irq_send:
       1152 : 38                         pop     a               ; restore ACIA status
       1153 : D4 02                      and     a, =TDRE_bm
       1155 : 6C 18                      bz      isr_irq_exit
       1157 : 26 10 20                   ld      p2, =tx_queue
       115A : 20 16 11                   jsr     queue_remove
       115D : 26 00 DF                   ld      p2, =ACIA
       1160 : 6C 05                      bz      isr_irq_send_empty
       1162 : 40                         ld      a, e
       1163 : CA 01                      st      a, ACIA_D, p2   ; send character
       1165 : 74 08                      bra     isr_irq_exit
       1167 :                    isr_irq_send_empty:
       1167 : C4 94                      ld      a, =RX_INT_TX_NO
       1169 : CA 00                      st      a, ACIA_C, p2   ; disable Tx interrupt
       116B : C4 00                      ld      a, =0
       116D : CD 00                      st      a, tx_int_control
       116F :                    isr_irq_exit:
       116F : 5E                         pop     p2
       1170 : 3A                         pop     ea
       1171 : 3B 01                      or      s, =S_IE
       1173 : 5C                         ret
       1174 :
          4 :                            org     ORG_INTA
          4 : 24 31 11                   jmp     isr_irq
          7 :
          1 :                            org     ORG_RESTART
          1 : 24 FF 0F                   jmp     initialize

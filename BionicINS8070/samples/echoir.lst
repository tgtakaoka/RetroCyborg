          0 :                            cpu     ins8070
          0 :                            include "ins8070.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; INS8070
(1)       0 :                    ;;; Status Register
(1)       0 : =80                S_CY:   equ     0x80            ; Carry bit
(1)       0 : =80                S_L:    equ     0x80            ; Link bit
(1)       0 : =40                S_OV:   equ     0x40            ; Overflow bit
(1)       0 : =20                S_SB:   equ     0x20            ; Sense B bit
(1)       0 : =10                S_SA:   equ     0x10            ; Sense A bit
(1)       0 : =8                 S_F3:   equ     0x08            ; Flag 3 bit
(1)       0 : =4                 S_F2:   equ     0x04            ; Flag 2 bit
(1)       0 : =2                 S_F1:   equ     0x02            ; Flag 1 bit
(1)       0 : =1                 S_IE:   equ     0x01            ; Interrupt Enable bit
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =1                 ORG_RESTART:    equ     0x0001  ; Restart transfer location
(1)       0 : =4                 ORG_INTA:       equ     0x0004  ; Interrupt A transfer location
(1)       0 : =7                 ORG_INTB:       equ     0x0007  ; Interrupt B transfer location
(1)       0 : =A                 ORG_END:        equ     0x000A
(1)       0 :
(1)       0 :                    ;;; Call vectors
(1)       0 : =20                VEC_CALL0:      equ     0x0020  ; Call 0 vector
(1)       0 : =22                VEC_CALL1:      equ     0x0022  ; Call 0 vector
(1)       0 : =24                VEC_CALL2:      equ     0x0024  ; Call 0 vector
(1)       0 : =26                VEC_CALL3:      equ     0x0026  ; Call 0 vector
(1)       0 : =28                VEC_CALL4:      equ     0x0028  ; Call 0 vector
(1)       0 : =2A                VEC_CALL5:      equ     0x002A  ; Call 0 vector
(1)       0 : =2C                VEC_CALL6:      equ     0x002C  ; Call 0 vector
(1)       0 : =2E                VEC_CALL7:      equ     0x002E  ; Call 0 vector
(1)       0 : =30                VEC_CALL8:      equ     0x0030  ; Call 0 vector
(1)       0 : =32                VEC_CALL9:      equ     0x0032  ; Call 0 vector
(1)       0 : =34                VEC_CALL10:     equ     0x0034  ; Call 0 vector
(1)       0 : =36                VEC_CALL11:     equ     0x0036  ; Call 0 vector
(1)       0 : =38                VEC_CALL12:     equ     0x0038  ; Call 0 vector
(1)       0 : =3A                VEC_CALL13:     equ     0x003A  ; Call 0 vector
(1)       0 : =3C                VEC_CALL14:     equ     0x003C  ; Call 0 vector
(1)       0 : =3E                VEC_CALL15:     equ     0x003E  ; Call 0 vector
(1)       0 : =40                VEC_END:        equ     0x0040
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     0xDF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     0b11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     0b00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     0b00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     0b00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     0b00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     0b00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     0b00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     0b00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     0b00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     0b00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     0b00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     0b00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     0b00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     0b00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     0b01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     0b00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     0b00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     0b01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     0b01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     0b10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     0b00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     0b00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     0b00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     0b00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     0b00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     0b00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     0b01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     0b10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 : =0                 ACIA_C: equ     0               ; ACIA control offset
          0 : =0                 ACIA_S: equ     0               ; ACIA status offset
          0 : =1                 ACIA_D: equ     1               ; ACIA data register offset
          0 :
          0 : =10                rx_queue_size:  equ     16
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 :
       2000 :                            org     0x2000
       2000 :                    rx_queue:
       2000 :                            ds      rx_queue_size
       2010 :
       1000 :                            org     0x1000
       1000 :                    stack:
       1000 :                    initialize:
       1000 : 25 00 10                   ld      sp, =stack
       1003 :                            ;; initialize receive queue
       1003 : 26 00 20                   ld      p2, =rx_queue
       1006 : C4 10                      ld      a, =rx_queue_size
       1008 : 20 3F 10                   jsr     queue_init
       100B :
       100B :                            ;; initialize ACIA
       100B : 26 00 DF                   ld      p2, =ACIA
       100E : C4 03                      ld      a, =CDS_RESET_gc ; Master reset
       1010 : CA 00                      st      a, ACIA_C, p2
       1012 : C4 94                      ld      a, =RX_INT_TX_NO
       1014 : CA 00                      st      a, ACIA_C, p2
       1016 : 3B 01                      or      s, =S_IE        ; Enable IRQ
       1018 :
       1018 :                    loop:
       1018 : 26 00 20                   ld      p2, =rx_queue
       101B : 39 FE                      and     s, =~S_IE       ; Disable IRQ
       101D : 20 84 10                   jsr     queue_remove
       1020 : 3B 01                      or      s, =S_IE        ; Enable IRQ
       1022 : 6C F4                      bz      loop
       1024 :                    echo:
       1024 : 40                         ld      a, e            ; A=data
       1025 : 20 30 10                   jsr     putchar
       1028 : E4 0D                      xor     a, =0x0D        ; carriage return
       102A : 7C EC                      bnz     loop
       102C : C4 0A                      ld      a, =0x0A
       102E : 48                         ld      e, a            ; E=newline
       102F : 74 F3                      bra     echo
       1031 :
       1031 :                    putchar:
       1031 : 22 00 DF                   pli     p2, =ACIA
       1034 : 0A                         push    a
       1035 :                    transmit_loop:
       1035 : C2 00                      ld      a, ACIA_S, p2
       1037 : D4 02                      and     a, =TDRE_bm
       1039 : 6C FA                      bz      transmit_loop
       103B :                    transmit_data:
       103B : 38                         pop     a
       103C : CA 01                      st      a, ACIA_D, p2
       103E : 5E                         pop     p2
       103F : 5C                         ret
       1040 :
       1040 :                            include "queue.inc"
(1)    1040 :                    ;;; [queue] queue structure
(1)    1040 : =0                 queue_len:      equ     0       ; queue length
(1)    1040 : =1                 queue_size:     equ     1       ; buffer size
(1)    1040 : =2                 queue_put:      equ     2       ; queue put index
(1)    1040 : =3                 queue_get:      equ     3       ; queue get index
(1)    1040 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    1040 :
(1)    1040 :                    ;;; [queue] Initialize queue
(1)    1040 :                    ;;; @param P2 queue work space pointer
(1)    1040 :                    ;;; @param A queue work space size
(1)    1040 :                    ;;; @clobber A
(1)    1040 :                    queue_init:
(1)    1040 : 48                         ld      e, a
(1)    1041 : C4 00                      ld      a, =0
(1)    1043 : CA 00                      st      a, queue_len, p2
(1)    1045 : CA 02                      st      a, queue_put, p2
(1)    1047 : CA 03                      st      a, queue_get, p2
(1)    1049 : 01                         xch     a, e            ; E=0, A=space size
(1)    104A : FC 04                      sub     a, =queue_buf
(1)    104C : CA 01                      st      a, queue_size, p2
(1)    104E : 0A                         push    a               ; 0,SP=counter
(1)    104F : C6 04                      ld      a, @queue_buf, p2
(1)    1051 :                    queue_init_loop:
(1)    1051 : 40                         ld      a, e            ; E=0
(1)    1052 : CE 01                      st      a, @1, p2
(1)    1054 : 99 00                      dld     a, 0, sp
(1)    1056 : 7C F9                      bnz     queue_init_loop
(1)    1058 : 38                         pop     a               ; discard counter
(1)    1059 : 5C                         ret
(1)    105A :
(1)    105A :                    ;;; [add_p2_a] Add A to P2
(1)    105A :                    ;;; @param P2
(1)    105A :                    ;;; @param A
(1)    105A :                    ;;; @return P3=P2+A
(1)    105A :                    add_p2_a:
(1)    105A : 08                         push    ea              ; save EA
(1)    105B : 01                         xch     a, e
(1)    105C : C4 00                      ld      a, =0
(1)    105E : 01                         xch     a, e
(1)    105F : 08                         push    ea              ; 0:E
(1)    1060 : 32                         ld      ea, p2
(1)    1061 : B1 00                      add     ea, 0, sp       ; EA=P2+E
(1)    1063 : 47                         ld      p3, ea
(1)    1064 : 3A                         pop     ea
(1)    1065 : 3A                         pop     ea              ; restore EA
(1)    1066 : 5C                         ret
(1)    1067 :
(1)    1067 :                    ;;; [queue] Add an element to queue
(1)    1067 :                    ;;; @param P2 queue work space pointer
(1)    1067 :                    ;;; @param A an element
(1)    1067 :                    ;;; @return E an element
(1)    1067 :                    ;;; @return A 0 if queue is full
(1)    1067 :                    queue_add:
(1)    1067 : 57                         push    p3
(1)    1068 : 48                         ld      e, a            ; save element in E
(1)    1069 : C2 00                      ld      a, queue_len, p2
(1)    106B : FA 01                      sub     a, queue_size, p2
(1)    106D : 6C 14                      bz      queue_add_return ; A=0
(1)    106F : C2 02                      ld      a, queue_put, p2 ; 8 bits offset
(1)    1071 : 20 59 10                   jsr     add_p2_a
(1)    1074 : 40                         ld      a, e
(1)    1075 : CB 04                      st      a, queue_buf, p3 ; store an element
(1)    1077 : 92 00                      ild     a, queue_len, p2
(1)    1079 : 92 02                      ild     a, queue_put, p2
(1)    107B : FA 01                      sub     a, queue_size, p2
(1)    107D : 7C 04                      bnz     queue_add_return ; A is not zero
(1)    107F : CA 02                      st      a, queue_put, p2
(1)    1081 : C4 01                      ld      a, =1           ; A is not zero
(1)    1083 :                    queue_add_return:
(1)    1083 : 5F                         pop     p3
(1)    1084 : 5C                         ret
(1)    1085 :
(1)    1085 :                    ;;; [queue] Remove an element from queue
(1)    1085 :                    ;;; @param P2 queue work space pointer
(1)    1085 :                    ;;; @return E an element
(1)    1085 :                    ;;; @return A 0 if queue is empty
(1)    1085 :                    queue_remove:
(1)    1085 : 57                         push    p3
(1)    1086 : C2 00                      ld      a, queue_len, p2
(1)    1088 : 6C 14                      bz      queue_remove_return ; A is zero
(1)    108A :                    queue_remove_elem
(1)    108A : C2 03                      ld      a, queue_get, p2 ; 8 bits offset
(1)    108C : 20 59 10                   jsr     add_p2_a
(1)    108F : C3 04                      ld      a, queue_buf, p3 ; read an element
(1)    1091 : 48                         ld      e, a
(1)    1092 : 9A 00                      dld     a, queue_len, p2
(1)    1094 : 92 03                      ild     a, queue_get, p2
(1)    1096 : FA 01                      sub     a, queue_size, p2
(1)    1098 : 7C 04                      bnz     queue_remove_return ; A is not zero
(1)    109A : CA 03                      st      a, queue_get, p2 ; A is zero
(1)    109C : C4 01                      ld      a, =1            ; A is not zero
(1)    109E :                    queue_remove_return:
(1)    109E : 5F                         pop     p3
(1)    109F : 5C                         ret
(1)    10A0 :
(1)    10A0 :                    ;;; Local Variables:
(1)    10A0 :                    ;;; mode: asm
(1)    10A0 :                    ;;; End:
(1)    10A0 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       10A0 :
       10A0 :                    isr_irq:
       10A0 : 08                         push    ea
       10A1 : 22 00 DF                   pli     p2, =ACIA
       10A4 : C2 00                      ld      a, ACIA_S, p2
       10A6 : 48                         ld      e, a
       10A7 : D4 80                      and     a, =IRQF_bm
       10A9 : 6C 14                      bz      isr_irq_exit
       10AB : 40                         ld      a, e
       10AC : D4 70                      and     a, =FERR_bm|OVRN_bm|PERR_bm
       10AE : 6C 02                      bz      isr_irq_receive
       10B0 : C2 01                      ld      a, ACIA_D, p2   ; clear errors
       10B2 :                    isr_irq_receive:
       10B2 : 40                         ld      a, e
       10B3 : D4 01                      and     a, =RDRF_bm
       10B5 : 6C 08                      bz      isr_irq_exit
       10B7 : C2 01                      ld      a, ACIA_D, p2
       10B9 : 26 00 20                   ld      p2, =rx_queue
       10BC : 20 66 10                   jsr     queue_add
       10BF :                    isr_irq_exit:
       10BF : 5E                         pop     p2
       10C0 : 3A                         pop     ea
       10C1 : 3B 01                      or      s, =S_IE
       10C3 : 5C                         ret
       10C4 :
          4 :                            org     ORG_INTA
          4 : 24 9F 10                   jmp     isr_irq
          7 :
          1 :                            org     ORG_RESTART
          1 : 24 FF 0F                   jmp     initialize

          0 :                            cpu     1802
          0 :                            include "cdp1802.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; CDP1802 register alias
(1)       0 : =0                 R0:     equ     0
(1)       0 : =1                 R1:     equ     1
(1)       0 : =2                 R2:     equ     2
(1)       0 : =3                 R3:     equ     3
(1)       0 : =4                 R4:     equ     4
(1)       0 : =5                 R5:     equ     5
(1)       0 : =6                 R6:     equ     6
(1)       0 : =7                 R7:     equ     7
(1)       0 : =8                 R8:     equ     8
(1)       0 : =9                 R9:     equ     9
(1)       0 : =A                 R10:    equ     10
(1)       0 : =B                 R11:    equ     11
(1)       0 : =C                 R12:    equ     12
(1)       0 : =D                 R13:    equ     13
(1)       0 : =E                 R14:    equ     14
(1)       0 : =F                 R15:    equ     15
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =0                 ORG_RESET:      equ     0000H   ; Reset transfer location
(1)       0 :
(1)       0 :                    ;;; Utility function
(1)       0 :                    hi:     function        v, v >> 8
(1)       0 :                    lo:     function        v, v & 0FFH
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     0DF00H
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     11b    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     00000000B ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     00000001B ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     00000010B ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     00000011B ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     00011100B ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     00000000B ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     00000100B ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     00001000B ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     00001100B ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     00010000B ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     00010100B ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     00011000B ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     00011100B ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     01100000B ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     00000000B ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     00100000B ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     01000000B ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     01100000B ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     10000000B ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     00000001B ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     00000010B ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     00000100B ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     00001000B ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     00010000B ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     00100000B ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     01000000B ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     10000000B ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 :
       2000 :                            org     2000H
       2000 :
       2000 : =10                rx_queue_size:  equ     16
       2000 :                    rx_queue:
       2000 :                            ds      rx_queue_size
       2010 :
       2010 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
       2010 :
       2010 :
       2010 : =FFF               stack:  equ     1000H-1
       2010 :
        100 :                            org     0100H
        100 :                    main:
        100 : D4                         sep     R4
        101 : 01 4B                      dw      queue_init      ; call queue_init
        103 : 20 00                      dw      rx_queue
        105 : 10                         db      rx_queue_size
        106 :                            ;; initialize ACIA
        106 : F8 DF                      ldi     hi(ACIA)
        108 : B8                         phi     R8
        109 : F8 00                      ldi     lo(ACIA)
        10B : A8                         plo     R8
        10C : F8 03                      ldi     CDS_RESET_gc    ; Master reset
        10E : 58                         str     R8              ; ACIA_control
        10F : F8 94                      ldi     RX_INT_TX_NO
        111 : 58                         str     R8              ; ACIA_control
        112 : E3                         sex     R3
        113 : 70                         ret
        114 : 33                         db      33h             ; enable interrupt
        115 :
        115 :                    loop:
        115 : E3                         sex     R3
        116 : 71                         dis                     ; disable interrupt
        117 : 33                         db      33h             ; X=3, P=3
        118 : D4                         sep     R4              ; call queue_remove
        119 : 01 A8                      dw      queue_remove
        11B : 20 00                      dw      rx_queue
        11D : E3                         sex     R3
        11E : 70                         ret                     ; enable interrupt
        11F : 33                         db      33h
        120 : 32 15                      bz      loop            ; branch if queue is empty
        122 :                    echo:
        122 : 87                         glo     R7
        123 : D4                         sep     R4              ; call putchar
        124 : 01 30                      dw      putchar
        126 : 87                         glo     R7
        127 : FB 0D                      xri     0DH             ; carriage return
        129 : 3A 15                      bnz     loop
        12B : F8 0A                      ldi     0AH             ; newline
        12D : A7                         plo     R7
        12E : 30 22                      br      echo
        130 :
        130 :                    ;;; @param D char
        130 :                    putchar:
        130 : AF                         plo     R15             ; save D to R15.0
        131 : E2                         sex     R2
        132 : 88                         glo     R8              ; save R8
        133 : 73                         stxd
        134 : 98                         ghi     R8
        135 : 73                         stxd
        136 :                            ;;
        136 : F8 DF                      ldi     hi(ACIA)
        138 : B8                         phi     R8
        139 : F8 00                      ldi     lo(ACIA)
        13B : A8                         plo     R8
        13C :                    putchar_loop:
        13C : 08                         ldn     R8              ; ACIA_status
        13D : FA 02                      ani     TDRE_bm
        13F : 32 3C                      bz      putchar_loop
        141 : 18                         inc     R8
        142 : 8F                         glo     R15             ; restore D
        143 : 58                         str     R8              ; ACIA_data
        144 :                            ;;
        144 : E2                         sex     R2
        145 : 60                         irx
        146 : 72                         ldxa                    ; restore R8
        147 : B8                         phi     R8
        148 : F0                         ldx
        149 : A8                         plo     R8
        14A : D5                         sep     R5              ; return
        14B :
        14B :                            include "queue.inc"
(1)     14B :                    ;;; [queue] queue structure
(1)     14B : =0                 queue_len:      equ     0       ; queue length
(1)     14B : =1                 queue_size:     equ     1       ; buffer size
(1)     14B : =2                 queue_put:      equ     2       ; queue put index
(1)     14B : =3                 queue_get:      equ     3       ; queue get index
(1)     14B : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     14B :
(1)     14B :                    ;;; [queue] Initialize queue
(1)     14B :                    ;;; @param R6+0 queue work space pointer
(1)     14B :                    ;;; @param R6+2 queue work space size
(1)     14B :                    ;;; @clobber D, R15
(1)     14B :                    queue_init:
(1)     14B : E2                         sex     R2
(1)     14C : 8E                         glo     R14             ; save R14.0
(1)     14D : 73                         stxd
(1)     14E :                            ;;
(1)     14E : 46                         lda     R6
(1)     14F : BF                         phi     R15
(1)     150 : 46                         lda     R6
(1)     151 : AF                         plo     R15             ; R15=queue space pointer
(1)     152 : F8 00                      ldi     0
(1)     154 : 5F                         str     R15             ; clear queue_len
(1)     155 : 1F                         inc     R15
(1)     156 : 46                         lda     R6              ; queue space size
(1)     157 : FF 04                      smi     queue_buf       ; calculate queue size
(1)     159 : 5F                         str     R15             ; store queue_size
(1)     15A : FC 02                      adi     2               ; for queue_put and queue_get
(1)     15C : AE                         plo     R14             ; R14.0: byte counter
(1)     15D :                    queue_init_clear:
(1)     15D : F8 00                      ldi     0
(1)     15F : 1F                         inc     R15
(1)     160 : 5F                         str     R15             ; clear memory
(1)     161 : 8E                         glo     R14
(1)     162 : FF 01                      smi     1
(1)     164 : AE                         plo     R14             ; decrement byte counter
(1)     165 : 3A 5D                      bnz     queue_init_clear
(1)     167 :                            ;;
(1)     167 : 60                         irx
(1)     168 : F0                         ldx                     ; restore R14.0
(1)     169 : AE                         plo     R14
(1)     16A : D5                         sep     R5              ; return
(1)     16B :
(1)     16B :                    ;;; [queue] Add an element to queue
(1)     16B :                    ;;; @param R6+0 queue work space pointer
(1)     16B :                    ;;; @param R7.0 an element
(1)     16B :                    ;;; @return D 0 if queue is full
(1)     16B :                    queue_add:
(1)     16B : E2                         sex     R2
(1)     16C : 8E                         glo     R14             ; save R14
(1)     16D : 73                         stxd
(1)     16E : 9E                         ghi     R14
(1)     16F : 73                         stxd
(1)     170 :                            ;;
(1)     170 : 46                         lda     R6
(1)     171 : BF                         phi     R15
(1)     172 : 46                         lda     R6
(1)     173 : AF                         plo     R15             ; R15=queue space pointer
(1)     174 : EF                         sex     R15
(1)     175 : 72                         ldxa                    ; load queue_len
(1)     176 : F3                         xor                     ; queue_len ^ queue_size
(1)     177 : C2 01 9F                   lbz     queue_add_return ; branch if D=0
(1)     17A : 2F                         dec     R15
(1)     17B : 8F                         glo     R15
(1)     17C : FC 04                      adi     queue_buf
(1)     17E : AE                         plo     R14
(1)     17F : 9F                         ghi     R15
(1)     180 : 7C 00                      adci    0
(1)     182 : BE                         phi     R14             ; R14=&queue_buf[0]
(1)     183 : 0F                         ldn     R15
(1)     184 : FC 01                      adi     1
(1)     186 : 5F                         str     R15             ; queue_len++
(1)     187 : 8E                         glo     R14
(1)     188 : 1F                         inc     R15
(1)     189 : 1F                         inc     R15
(1)     18A : EF                         sex     R15
(1)     18B : F4                         add                     ; add queue_put
(1)     18C : AE                         plo     R14
(1)     18D : 9E                         ghi     R14
(1)     18E : 7C 00                      adci    0
(1)     190 : BE                         phi     R14             ; R14=&queue_buf[queue_put]
(1)     191 : 87                         glo     R7              ; R7.0=an element
(1)     192 : 5E                         str     R14             ; store an element
(1)     193 : 0F                         ldn     R15             ; load queue_put
(1)     194 : FC 01                      adi     1
(1)     196 : 5F                         str     R15             ; update queue_put
(1)     197 : 2F                         dec     R15
(1)     198 : F3                         xor                      ; queue_put ^ queue_size
(1)     199 : 3A 9F                      bnz     queue_add_return ; branch if D!=0
(1)     19B : 1F                         inc     R15
(1)     19C : 5F                         str     R15             ; queue_put=0
(1)     19D : F8 01                      ldi     1
(1)     19F :                    queue_add_return:
(1)     19F : AF                         plo     R15             ; return flag
(1)     1A0 : E2                         sex     R2
(1)     1A1 : 60                         irx
(1)     1A2 : 72                         ldxa                    ; restore R14
(1)     1A3 : BE                         phi     R14
(1)     1A4 : F0                         ldx
(1)     1A5 : AE                         plo     R14
(1)     1A6 : 8F                         glo     R15
(1)     1A7 : D5                         sep     R5              ; return
(1)     1A8 :
(1)     1A8 :                    ;;; [queue] Remove an element from queue
(1)     1A8 :                    ;;; @param R6+0 queue work space pointer
(1)     1A8 :                    ;;; @return R7.0 an element
(1)     1A8 :                    ;;; @return D 0 if queue is empty
(1)     1A8 :                    ;;; @clobber R15
(1)     1A8 :                    queue_remove:
(1)     1A8 : E2                         sex     R2
(1)     1A9 : 8E                         glo     R14             ; save R14
(1)     1AA : 73                         stxd
(1)     1AB : 9E                         ghi     R14
(1)     1AC : 73                         stxd
(1)     1AD :                            ;;
(1)     1AD : 46                         lda     R6
(1)     1AE : BF                         phi     R15
(1)     1AF : 46                         lda     R6
(1)     1B0 : AF                         plo     R15             ; R15=queue space pointer
(1)     1B1 : 0F                         ldn     R15             ; load queue_len
(1)     1B2 : 32 DA                      bz      queue_remove_return ; branch if D=0
(1)     1B4 : FF 01                      smi     1
(1)     1B6 : 5F                         str     R15             ; queue_len--
(1)     1B7 : 8F                         glo     R15
(1)     1B8 : FC 04                      adi     queue_buf
(1)     1BA : AE                         plo     R14
(1)     1BB : 9F                         ghi     R15
(1)     1BC : 7C 00                      adci    0
(1)     1BE : BE                         phi     R14             ; R14=&queue_buf[0]
(1)     1BF : 8E                         glo     R14
(1)     1C0 : 1F                         inc     R15
(1)     1C1 : 1F                         inc     R15
(1)     1C2 : 1F                         inc     R15
(1)     1C3 : EF                         sex     R15
(1)     1C4 : F4                         add                     ; add queue_get
(1)     1C5 : AE                         plo     R14
(1)     1C6 : 9E                         ghi     R14
(1)     1C7 : 7C 00                      adci    0
(1)     1C9 : BE                         phi     R14             ; R14=&queue_buf[queue_get]
(1)     1CA : 0E                         ldn     R14             ; load an alement
(1)     1CB : A7                         plo     R7              ; R7.0=an element
(1)     1CC : 0F                         ldn     R15             ; load queue_get
(1)     1CD : FC 01                      adi     1
(1)     1CF : 5F                         str     R15             ; update queue_get
(1)     1D0 : 2F                         dec     R15
(1)     1D1 : 2F                         dec     R15
(1)     1D2 : F3                         xor                     ; queue_get ^ queue_size
(1)     1D3 : 3A DA                      bnz     queue_remove_return ; brnach if D!=0
(1)     1D5 : 1F                         inc     R15
(1)     1D6 : 1F                         inc     R15
(1)     1D7 : 5F                         str     R15             ; queue_get=0
(1)     1D8 : F8 01                      ldi     1
(1)     1DA :                    queue_remove_return:
(1)     1DA : AF                         plo     R15             ; return flag
(1)     1DB : E2                         sex     R2
(1)     1DC : 60                         irx
(1)     1DD : 72                         ldxa                    ; restore R14
(1)     1DE : BE                         phi     R14
(1)     1DF : F0                         ldx
(1)     1E0 : AE                         plo     R14
(1)     1E1 : 8F                         glo     R15             ; return flag
(1)     1E2 : D5                         sep     R5              ; return
(1)     1E3 :
(1)     1E3 :                    ;;; Local Variables:
(1)     1E3 :                    ;;; mode: asm
(1)     1E3 :                    ;;; End:
(1)     1E3 :                    ;;; vim: set ft=asm et ts=4 sw=4:
        1E3 :
        1E3 :                    ;;; From scrt_isr, P=3
        1E3 :                    isr:
        1E3 : 88                         glo     R8              ; save R8
        1E4 : 73                         stxd
        1E5 : 98                         ghi     R8
        1E6 : 73                         stxd
        1E7 : 87                         glo     R7              ; save R7.0
        1E8 : 73                         stxd
        1E9 :                            ;;
        1E9 : F8 DF                      ldi     hi(ACIA)
        1EB : B8                         phi     R8
        1EC : F8 00                      ldi     lo(ACIA)
        1EE : A8                         plo     R8              ; R8=ACIA
        1EF : 08                         ldn     R8              ; ACIA_status
        1F0 : A7                         plo     R7              ; R7.0=status
        1F1 : FA 80                      ani     IRQF_bm
        1F3 : C2 02 05                   lbz     isr_exit        ; no interrupt
        1F6 :                    isr_receive:
        1F6 : 87                         glo     R7
        1F7 : FA 01                      ani     RDRF_bm
        1F9 : C2 02 05                   lbz     isr_exit        ; no data is received
        1FC : 18                         inc     R8
        1FD : 08                         ldn     R8              ; ACIA_data
        1FE : 28                         dec     R8
        1FF : A7                         plo     R7
        200 : D4                         sep     R4              ; call queue_add
        201 : 01 6B                      dw      queue_add
        203 : 20 00                      dw      rx_queue
        205 :                    isr_exit:
        205 : E2                         sex     R2
        206 : 60                         irx
        207 : 72                         ldxa                    ; restore R7.0
        208 : A7                         plo     R7
        209 : 72                         ldxa                    ; restore R8
        20A : B8                         phi     R8
        20B : F0                         ldx
        20C : A8                         plo     R8
        20D : D1                         sep     R1              ; return to scrt_isr
        20E :
          0 :                            org     ORG_RESET
          0 : 71                         dis                     ; disable interrupt
          1 : 00                         db      00h             ; X:P=0:0
          2 : C0 00 05                   lbr     scrt_init
          5 :
          5 :                            include "scrt.inc"
(1)       5 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       5 :
(1)       5 :                    ;;; Standard Call and Return Technique
(1)       5 :                    ;;; R0: DMA pointer
(1)       5 :                    ;;; R1: Program counter for Interrupt routine
(1)       5 :                    ;;; R2: Stack pointer
(1)       5 :                    ;;; R3: Program counter
(1)       5 :                    ;;; R4: Dedicated program counter for CALL routine
(1)       5 :                    ;;; R5: Dedicated program counter for RETURN routine
(1)       5 :                    ;;; R6: Link register, pointer to the return location and arguments
(1)       5 :                    ;;;     passed by the calling program
(1)       5 :
(1)       5 :                    ;;; Call subroutine
(1)       5 :                    ;;;   SEP R4
(1)       5 :                    ;;;   DW  subroutine
(1)       5 :                    ;;;   DB  arguments...
(1)       5 :                    ;;; Subroutine return
(1)       5 :                    ;;;   SEP R5
(1)       5 :                    ;;; Return from interrupt
(1)       5 :                    ;;;   SEP R1
(1)       5 :
(1)       5 :                    ;;; Initialize for SCRT, P=0
(1)       5 :                    ;;; @param P!=3
(1)       5 :                    ;;; @param stack top address of stack
(1)       5 :                    ;;; @param main start address of main routine
(1)       5 :                    ;;; @return P=3
(1)       5 :                    ;;; @return R1=scrt_isr
(1)       5 :                    ;;; @return R2=stack
(1)       5 :                    ;;; @return R3=main
(1)       5 :                    ;;; @return R4=scrt_call
(1)       5 :                    ;;; @return R5=scrt_return
(1)       5 :                    ;;; @clobber D, R15
(1)       5 :                    scrt_init:
(1)       5 : F8 00                      ldi     hi(scrt_start)
(1)       7 : B3                         phi     R3
(1)       8 : F8 0C                      ldi     lo(scrt_start)
(1)       A : A3                         plo     R3
(1)       B : D3                         sep     R3              ; P=3
(1)       C :                    scrt_start:
(1)       C : F8 00                      ldi     hi(scrt_init_tab)
(1)       E : BF                         phi     R15
(1)       F : F8 25                      ldi     lo(scrt_init_tab)
(1)      11 : AF                         plo     R15
(1)      12 : 4F                         lda     R15             ; setup interrupt
(1)      13 : B1                         phi     R1
(1)      14 : 4F                         lda     R15
(1)      15 : A1                         plo     R1
(1)      16 : 4F                         lda     R15             ; setup stack
(1)      17 : B2                         phi     R2
(1)      18 : 4F                         lda     R15
(1)      19 : A2                         plo     R2
(1)      1A : 4F                         lda     R15             ; setup call
(1)      1B : B4                         phi     R4
(1)      1C : 4F                         lda     R15
(1)      1D : A4                         plo     R4
(1)      1E : 4F                         lda     R15             ; setup return
(1)      1F : B5                         phi     R5
(1)      20 : 4F                         lda     R15
(1)      21 : A5                         plo     R5
(1)      22 : C0 01 00                   lbr     main            ; goto main with P=3
(1)      25 :
(1)      25 :                    scrt_init_tab:
(1)      25 : 00 64                      dw      scrt_isr        ; R1
(1)      27 : 0F FF                      dw      stack           ; R2
(1)      29 : 00 2E                      dw      scrt_call       ; R4
(1)      2B : 00 40                      dw      scrt_return     ; R5
(1)      2D :
(1)      2D :                    ;;; Call subroutine, P=4
(1)      2D :                    ;;; @param M(R3):M(R3+1) subroutine address
(1)      2D :                    ;;; @param M(R3+2) optional arguments, depending on a subroutine called.
(1)      2D :                    ;;; @return R6 points optional arguments
(1)      2D :                    ;;; @return M(R2) R6.1, R6.0
(1)      2D :                    ;;; @clobber R15.1, X
(1)      2D :                    ;;; @unchanged D, IE, R0, R1, R7-R14, R15.0
(1)      2D :                    scrt_call_exit:
(1)      2D : D3                         sep     R3              ; go to subroutine
(1)      2E :                    scrt_call:
(1)      2E : BF                         phi     R15             ; save D to R15.1
(1)      2F : E2                         sex     R2              ; select stack
(1)      30 : 86                         glo     R6              ; push old link register R6
(1)      31 : 73                         stxd
(1)      32 : 96                         ghi     R6
(1)      33 : 73                         stxd
(1)      34 : 93                         ghi     R3              ; load link register
(1)      35 : B6                         phi     R6
(1)      36 : 83                         glo     R3
(1)      37 : A6                         plo     R6
(1)      38 : 46                         lda     R6              ; load the address of subroutine
(1)      39 : B3                         phi     R3
(1)      3A : 46                         lda     R6
(1)      3B : A3                         plo     R3              ; R3=subroutine address
(1)      3C : 9F                         ghi     R15             ; restore D
(1)      3D : 30 2D                      br      scrt_call_exit
(1)      3F :
(1)      3F :                    ;;; Return subroutine, P=5
(1)      3F :                    ;;; @param R6 return address
(1)      3F :                    ;;; @oaram M(R2) R6.1, R6.0, X:P(3)
(1)      3F :                    ;;; @clobber R15.1, X
(1)      3F :                    ;;; @unchanged D, R0, R1, R7-R14, R15.0
(1)      3F :                    scrt_return_exit:
(1)      3F : D3                         sep     R3              ; return to subroutine caller
(1)      40 :                    scrt_return:
(1)      40 : BF                         phi     R15             ; save D to R15.1
(1)      41 : 96                         ghi     R6              ; load return address from link register
(1)      42 : B3                         phi     R3
(1)      43 : 86                         glo     R6
(1)      44 : A3                         plo     R3
(1)      45 : E2                         sex     R2              ; select stack
(1)      46 : 60                         irx
(1)      47 : 72                         ldxa                    ; pop link register R6
(1)      48 : B6                         phi     R6
(1)      49 : F0                         ldx
(1)      4A : A6                         plo     R6
(1)      4B : 9F                         ghi     R15             ; restore D
(1)      4C : 30 3F                      br      scrt_return_exit
(1)      4E :
(1)      4E :                    ;;; Interrupt entry P=1
(1)      4E :                    ;;; @unchanged D, DF, X, P, R3, R6, R15
(1)      4E :                    scrt_isr_exit:
(1)      4E : E2                         sex     R2              ; select stack
(1)      4F : 60                         irx
(1)      50 : 72                         ldxa                    ; pop program counter R3
(1)      51 : B3                         phi     R3
(1)      52 : 72                         ldxa
(1)      53 : A3                         plo     R3
(1)      54 : 72                         ldxa                    ; pop call pointer R4
(1)      55 : B4                         phi     R4
(1)      56 : 72                         ldxa
(1)      57 : A4                         plo     R4
(1)      58 : 72                         ldxa                    ; pop return pointer R5
(1)      59 : B5                         phi     R5
(1)      5A : 72                         ldxa
(1)      5B : A5                         plo     R5
(1)      5C : 72                         ldxa                    ; pop scratch pad register R15
(1)      5D : BF                         phi     R15
(1)      5E : 72                         ldxa
(1)      5F : AF                         plo     R15
(1)      60 : 72                         ldxa                    ; pop DF into BSB
(1)      61 : FE                         shl                     ; restore DF
(1)      62 : 72                         ldxa                    ; pop D
(1)      63 : 70                         ret                     ; restore X,P IE=1
(1)      64 :                            ;; P1 points scrt_isr
(1)      64 :                    ;;; CDP1802 interrupt entry, X=2, P=1, IE=0
(1)      64 :                    scrt_isr:
(1)      64 :                            ;; R2[0] must be preserved because it may be in the pop process
(1)      64 : 22                         dec     R2
(1)      65 : 78                         sav                     ; push X,P
(1)      66 : 22                         dec     R2
(1)      67 : 73                         stxd                    ; push D
(1)      68 : 76                         shrc                    ; MSB of D=DF
(1)      69 : 73                         stxd                    ; push DF
(1)      6A : 8F                         glo     R15             ; push scratch pad register R15
(1)      6B : 73                         stxd
(1)      6C : 9F                         ghi     R15
(1)      6D : 73                         stxd
(1)      6E : 85                         glo     R5              ; push return pointer R5
(1)      6F : 73                         stxd
(1)      70 : 95                         ghi     R5
(1)      71 : 73                         stxd
(1)      72 : 84                         glo     R4              ; push call pointer R4
(1)      73 : 73                         stxd
(1)      74 : 94                         ghi     R4
(1)      75 : 73                         stxd
(1)      76 : 83                         glo     R3              ; push program counter R3
(1)      77 : 73                         stxd
(1)      78 : 93                         ghi     R3
(1)      79 : 73                         stxd
(1)      7A :                            ;;
(1)      7A : F8 00                      ldi     hi(scrt_call)  ; initialize call pointer R4
(1)      7C : B4                         phi     R4
(1)      7D : F8 2E                      ldi     lo(scrt_call)
(1)      7F : A4                         plo     R4
(1)      80 : F8 00                      ldi     hi(scrt_return) ; initialize return pointer R5
(1)      82 : B5                         phi     R5
(1)      83 : F8 40                      ldi     lo(scrt_return)
(1)      85 : A5                         plo     R5
(1)      86 :                            ;;
(1)      86 : F8 01                      ldi     hi(isr)
(1)      88 : B3                         phi     R3
(1)      89 : F8 E3                      ldi     lo(isr)
(1)      8B : A3                         plo     R3
(1)      8C : D3                         sep     R3              ; call interrupt service routine with P=3
(1)      8D : 30 4E                      br      scrt_isr_exit   ; return from isr by SEP P1

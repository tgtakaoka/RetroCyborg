   0:                                CPU   6801
   0:                                INCLUDE               "mc6801.inc"
   0:                ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:                ;;; MC6801/MC6803
   0:                ;;; Condition Code Register (CC)
   0: =$1            CC_CARRY        EQU   %00000001       ; set to 1 if carry occurred
   0: =$2            CC_OVERFLOW     EQU   %00000010       ; set to 1 if overflow occurred
   0: =$4            CC_ZERO         EQU   %00000100       ; set to 1 if result is zero
   0: =$8            CC_NEGATIVE     EQU   %00001000       ; set to 1 if result is negative
   0: =$10           CC_IRQ          EQU   %00010000       ; if 1, IRQ is masked
   0: =$20           CC_HALF_CARRY   EQU   %00100000       ; if 1, decimal carry from least digit occurred
   0:
   0:                ;;; Internal Register Area
   0: =$0            DDR1:           EQU   $00             ; $00: Port 1 Data Direction Register
   0: =$1            DDR2:           EQU   $01             ; $01: Port 2 Data Direction Register
   0: =$2            PORT1:          EQU   $02             ; $02: Port 1 Data Register
   0: =$3            PORT2:          EQU   $03             ; $03: Port 2 Data Register
   0: =$4            DDR3:           EQU   $04             ; $04: Port 3 Data Direction Register
   0: =$5            DDR4:           EQU   $05             ; $05: Port 4 Data Direction Register
   0: =$6            PORT3:          EQU   $06             ; $06: Port 3 Data Register
   0: =$7            PORT4:          EQU   $07             ; $07: Port 4 Data Register
   0: =$8            TCSR:           EQU   $08             ; $08: Timer Control and Status Register
   0: =$9            TCNT:           EQU   $09             ; $09: Timer Counter
   0: =$B            TOCR:           EQU   $0B             ; $0B: Output Compare Register
   0: =$D            TCAP:           EQU   $0D             ; $0D: Input Capture Register
   0: =$F            P3CSR:          EQU   $0F             ; $0F: Port 3 Control and Status Register
   0: =$10           RMCR:           EQU   $10             ; $10: Rate and Mode Control Registers
   0: =$11           TRCSR:          EQU   $11             ; $11: Transmit Receive Control and Status Register
   0: =$12           SCRDR:          EQU   $12             ; $12: Receiver Data Register
   0: =$13           SCTDR:          EQU   $13             ; $13: Transmit Data Register
   0: =$14           RAMCR:          EQU   $14             ; $14: RAM Control Register
   0:
   0:                ;;; Port 2 Data Register
   0: =$E0           PC_gm:          EQU   %11100000       ; PC group mask
   0: =$5            PC_gp:          EQU   5               ; PC group position
   0: =$20           PC0_bm:         EQU   %00100000       ; PC0
   0: =$40           PC1_bm:         EQU   %01000000       ; PC1
   0: =$80           PC2_bm:         EQU   %10000000       ; PC2
   0:
   0:                ;;; Port 3 Control and Status Register
   0: =$8            P3_LATCH_bm:    EQU   %00001000       ; Latch Enable
   0: =$10           P3_OSS_bm:      EQU   %00010000       ; Output Strobe Select
   0: =$40           P3_IS3IE_bm:    EQU   %01000000       ; IS3 IRQ1 Enable
   0: =$80           P3_IS3F_bm:     EQU   %10000000       ; IS3 Flag
   0:
   0:                ;;; RAM Control Register
   0: =$40           RAME_bm:        EQU   %01000000       ; RAM Enable
   0: =$80           STBY_PWR_bm:    EQU   %10000000       ; Standby Power status
   0:
   0:                ;;; Timer Control and Status Register
   0: =$1            TCSR_OLVL_bm:   EQU   %00000001       ; Output Level
   0: =$2            TCSR_IEDG_bm:   EQU   %00000010       ; Input Edge. 0=negative/1=positive
   0: =$4            TCSR_ETOI_bm:   EQU   %00000100       ; Enable Timer Overflow Interrupt for IRQ2
   0: =$8            TCSR_EOCI_bm:   EQU   %00001000       ; Enable Output Compare Interrupt for IRQ2
   0: =$10           TCSR_EICI_bm:   EQU   %00010000       ; Enable Input Capture Interrupt for IRQ2
   0: =$20           TCSR_TOF_bm:    EQU   %00100000       ; Timer Overflow Flag
   0: =$40           TCSR_OCF_bm:    EQU   %01000000       ; Output Compare Flag
   0: =$80           TCSR_ICF_bm:    EQU   %10000000       ; Input Capture Flag
   0:
   0:                ;;; Serial Communication Interface
   0:                ;;; Rate and Mode Control Registers
   0:                ;; Speed Select
   0: =$3            SS_gm:          EQU   %00000011       ; Group mask
   0: =$0            SS_DIV16_gc:    EQU   %00000000       ; E/16
   0: =$1            SS_DIV128_gc:   EQU   %00000001       ; E/128
   0: =$2            SS_DIV1024_gc:  EQU   %00000010       ; E/1024
   0: =$3            SS_DIV4096_gc:  EQU   %00000011       ; E/4096
   0:                ;; Clock Control and Format Select
   0: =$C            CCFS_gm:        EQU   %00001100       ; Group mask
   0: =$0            CCFS_BIPH_gc:   EQU   %00000000       ; Bi-Phase
   0: =$4            CCFS_NRZ_gc:    EQU   %00000100       ; NRZ
   0: =$8            CCFS_NRZO_gc:   EQU   %00001000       ; NRZ P22=Clock Output
   0: =$C            CCFS_NRZI_gc:   EQU   %00001100       ; NRZ P22=Clock Input
   0:                ;;; Transmit/Receive Control and Status Register
   0: =$1            TRCSR_WU_bm:    EQU   %00000001       ; Wake-up on idle line
   0: =$2            TRCSR_TE_bm:    EQU   %00000010       ; Transmit Enable; if set, P24 is output
   0: =$4            TRCSR_TIE_bm:   EQU   %00000100       ; Transmit Interrupt Enable for IRQ2
   0: =$8            TRCSR_RE_bm:    EQU   %00001000       ; Receiver Enable; if set, P23 is input
   0: =$10           TRCSR_RIE_bm:   EQU   %00010000       ; Receiver Interrupt Enable for IRQ2
   0: =$20           TRCSR_TDRE_bm:  EQU   %00100000       ; Transmit Data Register Empty
   0: =$40           TRCSR_ORFE_bm:  EQU   %01000000       ; Overrun Framing Error
   0: =$80           TRCSR_RDRF_bm:  EQU   %10000000       ; Receive Data Register Full
   0:
   0:                ;;; Vector
   0: =$FFF0         VEC_SCI:        EQU   $FFF0           ; $FFF0: SCI Interrupt (TDRE+RDRF+ORFE)
   0: =$FFF2         VEC_TOF:        EQU   $FFF2           ; $FFF2: Timer Overflow Interrupt
   0: =$FFF4         VEC_OCF:        EQU   $FFF4           ; $FFF4: Output Compare Interrupt
   0: =$FFF6         VEC_ICF:        EQU   $FFF6           ; $FFF6: Input Capture Interrupt
   0: =$FFF8         VEC_IRQ1:       EQU   $FFF8           ; $FFF8: Maskable Interrupt Request 1
   0: =$FFFA         VEC_SWI:        EQU   $FFFA           ; $FFFA: Software Interrupt
   0: =$FFFC         VEC_NMI:        EQU   $FFFC           ; $FFFC: Non Maskable Interrupt
   0: =$FFFE         VEC_RESET:      EQU   $FFFE           ; $FFFE: Reset
   0:
   0:                ;;; MC6850 Asynchronous Communication Interface Adapter
   0: =$DF00         ACIA:           EQU   $DF00
   0:                                INCLUDE               "mc6850.inc"
   0:                ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:                ;;; MC6850
   0:                ;;; Asynchronous Communication Interface Adapter
   0:
   0:                ;;; Control register
   0: =$DF00         ACIA_control:   EQU   ACIA+0
   0:                ;; Counter Divider Select Bits
   0: =$3            CDS_gm:         EQU   %11             ; Group mask
   0: =$0            CDS_DIV1_gc:    EQU   %00000000       ; /1
   0: =$1            CDS_DIV16_gc:   EQU   %00000001       ; /16
   0: =$2            CDS_DIV64_gc:   EQU   %00000010       ; /64
   0: =$3            CDS_RESET_gc:   EQU   %00000011       ; Master Reset
   0:                ;; Word Select Bits
   0: =$1C           WSB_gm:         EQU   %00011100       ; Group mask
   0: =$0            WSB_7E2_gc:     EQU   %00000000       ; 7 Bits + Even Parity + 2 Stop Bits
   0: =$4            WSB_7O2_gc:     EQU   %00000100       ; 7 bits + Odd Parity  + 2 Stop Bits
   0: =$8            WSB_7E1_gc:     EQU   %00001000       ; 7 bits + Even Parity + 1 Stop Bits
   0: =$C            WSB_7O1_gc:     EQU   %00001100       ; 7 bits + Odd Parity  + 1 Stop Bits
   0: =$10           WSB_8N2_gc:     EQU   %00010000       ; 8 bits + No Parity   + 2 Stop Bits
   0: =$14           WSB_8N1_gc:     EQU   %00010100       ; 8 bits + No Parity   + 1 Stop Bits
   0: =$18           WSB_8E1_gc:     EQU   %00011000       ; 8 bits + Even Parity + 1 Stop Bits
   0: =$1C           WSB_8O1_gc:     EQU   %00011100       ; 8 bits + Odd Parity  + 1 Stop Bits
   0:                ;; Transmit Control Bits
   0: =$60           TCB_gm:         EQU   %01100000       ; Group mask
   0: =$0            TCB_DI_gc:      EQU   %00000000       ; RTS=Low,  Tx Interrupt Disabled
   0: =$20           TCB_EI_gc:      EQU   %00100000       ; RTS=Low,  Tx Interrupt Enabled
   0: =$40           TCB_RTS_gc:     EQU   %01000000       ; RTS=High, Tx Interrupt Disabled
   0: =$60           TCB_BREAK_gc:   EQU   %01100000       ; RTS=Low,  Tx Interrupt Disabled
   0:                ; Transmit Break Level
   0: =$80           RIEB_bm:        EQU   %10000000       ; Receive Interrupt Enable Bit mask
   0:
   0:                ;;; Status register
   0: =$DF00         ACIA_status:    EQU   ACIA+0
   0: =$1            RDRF_bm:        EQU   %00000001       ; Receive Data Register Full
   0: =$2            TDRE_bm:        EQU   %00000010       ; Transmit Data Register Empty
   0: =$4            DCDF_bm:        EQU   %00000100       ; Data Carrier Detect Flag
   0: =$8            CTSF_bm:        EQU   %00001000       ; Clear To Send Flag
   0: =$10           FERR_bm:        EQU   %00010000       ; Frame Error Flag
   0: =$20           OVRN_bm:        EQU   %00100000       ; Receiver Overrun Flag
   0: =$40           PERR_bm:        EQU   %01000000       ; Parity Error Flag
   0: =$80           IRQF_bm:        EQU   %10000000       ; Interrupt Request Flag
   0:
   0:                ;;; Data register
   0: =$DF01         ACIA_data:      EQU   ACIA+1          ; Data register
   0:
2000:                                ORG   $2000
2000:
2000: =$80           rx_queue_size:  EQU   128
2000:                rx_queue:       RMB   rx_queue_size
2080: =$80           tx_queue_size:  EQU   128
2080:                tx_queue:       RMB   tx_queue_size
2100: =$94           RX_INT_TX_NO:   EQU   WSB_8N1_gc|RIEB_bm
2100: =$B4           RX_INT_TX_INT:  EQU   WSB_8N1_gc|RIEB_bm|TCB_EI_gc
2100:                tx_int_control: RMB   1
2101:
1000:                                ORG   $1000
1000: =$FFF          stack:          EQU   *-1             ; MC6801's SP is post-decrement/pre-increment
1000:
1000:                                ORG   $1000
1000:                initialize:
1000: 8E 0F FF                       LDS   #stack
1003: CE 20 00                       LDX   #rx_queue
1006: C6 80                          LDAB  #rx_queue_size
1008: BD 10 B5                       JSR   queue_init
100B: CE 20 80                       LDX   #tx_queue
100E: C6 80                          LDAB  #tx_queue_size
1010: BD 10 B5                       JSR   queue_init
1013:                ;; initialize ACIA
1013: 86 03                          LDAA  #CDS_RESET_gc   ; master reset
1015: B7 DF 00                       STAA  ACIA_control
1018: 86 94                          LDAA  #RX_INT_TX_NO
101A: B7 DF 00                       STAA  ACIA_control
101D: 7F 21 00                       CLR   tx_int_control  ; disable Tx interrupt
1020: 0E                             CLI                   ; enable IRQ
1021:
1021:                receive_loop:
1021: 8D 59                          BSR   getchar
1023: 24 FC                          BCC   receive_loop
1025:                echo_back:
1025: 16                             TAB
1026: 8D 6C                          BSR   putchar         ; echo
1028: 86 20                          LDAA  #' '            ; space
102A: 8D 68                          BSR   putchar
102C: 8D 12                          BSR   put_hex8        ; print in hex
102E: 86 20                          LDAA  #' '            ; space
1030: 8D 62                          BSR   putchar
1032: 8D 2A                          BSR   put_bin8        ; print in binary
1034: 8D 02                          BSR   newline
1036: 20 E9                          BRA   receive_loop
1038:
1038:                ;;; Put newline
1038:                ;;; @clobber A
1038:                newline:
1038: 86 0D                          LDAA  #$0d
103A: 8D 58                          BSR   putchar
103C: 86 0A                          LDAA  #$0a
103E: 20 54                          BRA   putchar
1040:
1040:                ;;; Print uint8_t in hex
1040:                ;;; @param B uint8_t value to be printed in hex.
1040:                ;;; @clobber A
1040:                put_hex8:
1040: 86 30                          LDAA  #'0'
1042: 8D 50                          BSR   putchar
1044: 86 78                          LDAA  #'x'
1046: 8D 4C                          BSR   putchar
1048: 17                             TBA
1049: 44                             LSRA
104A: 44                             LSRA
104B: 44                             LSRA
104C: 44                             LSRA
104D: 8D 01                          BSR   put_hex4
104F: 17                             TBA
1050:                put_hex4:
1050: 84 0F                          ANDA  #$0f
1052: 81 0A                          CMPA  #10
1054: 25 04                          BLO   put_hex8_dec
1056: 8B 37                          ADDA  #'A'-10
1058: 20 3A                          BRA   putchar
105A:                put_hex8_dec:
105A: 8B 30                          ADDA  #'0'
105C: 20 36                          BRA   putchar
105E:
105E:                ;;; Print uint8_t in binary
105E:                ;;; @param B uint8_t value to be printed in binary.
105E:                ;;; @clobber A
105E:                put_bin8:
105E: 37                             PSHB
105F: 86 30                          LDAA  #'0'
1061: 8D 31                          BSR   putchar
1063: 86 62                          LDAA  #'b'
1065: 8D 2D                          BSR   putchar
1067: 8D 05                          BSR   put_bin4
1069: 58                             LSLB
106A: 8D 02                          BSR   put_bin4
106C: 33                             PULB
106D: 39                             RTS
106E:                put_bin4:
106E: 8D 01                          BSR   put_bin2
1070: 58                             LSLB
1071:                put_bin2:
1071: 8D 01                          BSR   put_bin1
1073: 58                             LSLB
1074:                put_bin1:
1074: 86 30                          LDAA  #'0'
1076: 5D                             TSTB                  ; chech MSB
1077: 2A 01                          BPL   put_bin0        ; MSB=0
1079: 4C                             INCA                  ; MSB=1
107A:                put_bin0:
107A: 20 18                          BRA   putchar
107C:
107C:                ;;; Get character
107C:                ;;; @return A
107C:                ;;; @return CC.C 0 if no character
107C:                getchar:
107C: 37                             PSHB
107D: 07                             TPA
107E: 36                             PSHA                  ; save CC
107F: 0F                             SEI                   ; disable IRQ
1080: 3C                             PSHX
1081: CE 20 00                       LDX   #rx_queue
1084: BD 10 E0                       JSR   queue_remove
1087: 38                             PULX
1088: 16                             TAB                   ; char? in B
1089: 32                             PULA                  ; restore CC to A
108A: 25 04                          BCS   getchar_end
108C: 06                             TAP
108D: 0C                             CLC                   ; clear carry
108E: 33                             PULB
108F: 39                             RTS
1090:                getchar_end:
1090: 06                             TAP
1091: 0D                             SEC                   ; set carry
1092: 17                             TBA
1093: 33                             PULB
1094:
1094:                ;;; Put character
1094:                ;;; @param A
1094:                putchar:
1094: 37                             PSHB
1095: 36                             PSHA
1096: 16                             TAB                   ; char in B
1097: 07                             TPA
1098: 36                             PSHA                  ; save CC
1099: 0F                             SEI                   ; disable IRQ
109A: 17                             TBA                   ; char in A
109B: 3C                             PSHX
109C: CE 20 80                       LDX   #tx_queue
109F: BD 10 C4                       JSR   queue_add
10A2: 38                             PULX
10A3: 7D 21 00                       TST   tx_int_control
10A6: 26 08                          BNE   putchar_end
10A8: 86 B4                          LDAA  #RX_INT_TX_INT  ; enable Tx interrupt
10AA: B7 DF 00                       STAA  ACIA_control
10AD: 73 21 00                       COM   tx_int_control
10B0:                putchar_end:
10B0: 32                             PULA                  ; restore CC
10B1: 06                             TAP
10B2: 32                             PULA
10B3: 33                             PULB
10B4: 39                             RTS
10B5:
10B5:                                INCLUDE               "queue.inc"
10B5:                ;;; [queue] queue structure
10B5: =$0            queue_len:      EQU   0               ; queue length
10B5: =$1            queue_size:     EQU   1               ; buffer size
10B5: =$2            queue_put:      EQU   2               ; queue put index
10B5: =$3            queue_get:      EQU   3               ; queue get index
10B5: =$4            queue_buf:      EQU   4               ; buffer start offset
10B5:
10B5:                ;;; [queue] Initialize queue
10B5:                ;;; @param X queue work space pointer
10B5:                ;;; @param B queue work space size
10B5:                ;;; @clobber B
10B5:                queue_init:
10B5: 37                             PSHB
10B6: 3C                             PSHX
10B7:                queue_init_loop:
10B7: 6F 00                          CLR   0,x
10B9: 08                             INX
10BA: 5A                             DECB
10BB: 26 FA                          BNE   queue_init_loop
10BD: 38                             PULX
10BE: 33                             PULB
10BF: C0 04                          SUBB  #queue_buf
10C1: E7 01                          STAB  queue_size,x
10C3: 39                             RTS
10C4:
10C4:                ;;; [queue] Add an element to queue
10C4:                ;;; @param X queue work space pointer
10C4:                ;;; @param A an element
10C4:                ;;; @return CC.C 0 if queue is full
10C4:                queue_add:
10C4: 37                             PSHB
10C5: E6 00                          LDAB  queue_len,x
10C7: E1 01                          CMPB  queue_size,x
10C9: 24 13                          BHS   queue_add_return    ; carry is cleared
10CB: E6 02                          LDAB  queue_put,x     ; 8 bits offset
10CD: 3C                             PSHX
10CE: 3A                             ABX                   ; X+=B
10CF: A7 04                          STAA  queue_buf,x     ; store an element
10D1: 38                             PULX
10D2: 6C 00                          INC   queue_len,x
10D4: 5C                             INCB
10D5: E7 02                          STAB  queue_put,x
10D7: E1 01                          CMPB  queue_size,x
10D9: 25 03                          BLO   queue_add_return    ; carry is set
10DB: 6F 02                          CLR   queue_put,x
10DD: 0D                             SEC                   ; set carry
10DE:                queue_add_return:
10DE: 33                             PULB
10DF: 39                             RTS
10E0:
10E0:                ;;; [queue] Remove an element from queue
10E0:                ;;; @param X queue work space pointer
10E0:                ;;; @return A an element
10E0:                ;;; @return CC.C 0 if queue is empty
10E0:                queue_remove:
10E0: 6D 00                          TST   queue_len,x
10E2: 26 02                          BNE   queue_remove_elem
10E4: 0C                             CLC                   ; clear carry
10E5: 39                             RTS
10E6:                queue_remove_elem
10E6: 37                             PSHB
10E7: E6 03                          LDAB  queue_get,x     ; 8 bits offset
10E9: 3C                             PSHX
10EA: 3A                             ABX                   ; X+=B
10EB: A6 04                          LDAA  queue_buf,x     ; read an element
10ED: 38                             PULX
10EE: 6A 00                          DEC   queue_len,x
10F0: 5C                             INCB
10F1: E7 03                          STAB  queue_get,x
10F3: E1 01                          CMPB  queue_size,x
10F5: 25 03                          BLO   queue_remove_return ; carry is set
10F7: 6F 03                          CLR   queue_get,x
10F9: 0D                             SEC                   ; set carry
10FA:                queue_remove_return:
10FA: 33                             PULB
10FB: 39                             RTS
10FC:
10FC:                ;;; Local Variables:
10FC:                ;;; mode: asm
10FC:                ;;; End:
10FC:                ;;; vim: set ft=asm et ts=4 sw=4:
10FC:
10FC:                isr_irq:
10FC: F6 DF 00                       LDAB  ACIA_status
10FF: C5 80                          BITB  #IRQF_bm
1101: 27 26                          BEQ   isr_irq_return
1103:                isr_irq_receive:
1103: C5 01                          BITB  #RDRF_bm
1105: 27 09                          BEQ   isr_irq_recv_end
1107: B6 DF 01                       LDAA  ACIA_data       ; receive character
110A: CE 20 00                       LDX   #rx_queue
110D: BD 10 C4                       JSR   queue_add
1110:                isr_irq_recv_end:
1110:                isr_irq_send:
1110: C5 02                          BITB  #TDRE_bm
1112: 27 15                          BEQ   isr_irq_send_end
1114: CE 20 80                       LDX   #tx_queue
1117: BD 10 E0                       JSR   queue_remove
111A: 24 05                          BCC   isr_irq_send_empty
111C: B7 DF 01                       STAA  ACIA_data       ; send character
111F: 20 08                          BRA   isr_irq_send_end
1121:                isr_irq_send_empty:
1121: 86 94                          LDAA  #RX_INT_TX_NO
1123: B7 DF 00                       STAA  ACIA_control    ; disable Tx interrupt
1126: 7F 21 00                       CLR   tx_int_control
1129:                isr_irq_send_end:
1129:                isr_irq_return:
1129: 3B                             RTI
112A:
FFF8:                                ORG   VEC_IRQ1
FFF8: 10 FC                          FDB   isr_irq
FFFA:
FFFE:                                ORG   VEC_RESET
FFFE: 10 00                          FDB   initialize

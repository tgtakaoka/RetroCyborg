   0:                          CPU   6805
   0:                          INCLUDE               "mc6805.inc"
   0:          ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:          ;;; MC6805
   0:          ;;; Condition Code Register (CC)
   0: =$1      CC_CARRY        EQU   %00000001       ; set to 1 if carry occurred
   0: =$2      CC_ZERO         EQU   %00000010       ; set to 1 if result is zero
   0: =$4      CC_NEGATIVE     EQU   %00000100       ; set to 1 if result is negative
   0: =$8      CC_IRQ          EQU   %00001000       ; if 1, IRQ is masked
   0: =$10     CC_HALF_CARRY   EQU   %00010000       ; if 1, decimal carry from least digit occurred
   0:
   0:          ;;; Internal Register Area
   0: =$0      PORTA:          EQU   $00             ; $00: Port A Data Register
   0: =$1      PORTB:          EQU   $01             ; $01: Port B Data Register
   0: =$4      DDRA:           EQU   $04             ; $04: Port A Data Direction Register
   0: =$5      DDRB:           EQU   $05             ; $05: Port B Data Direction Register
   0: =$8      TDR:            EQU   $08             ; $08: Timer Data Register
   0: =$9      TCR:            EQU   $09             ; $09: Timer Control Register
   0:
   0:          ;;; Port 2 Data Register
   0:
   0:          ;;; Timer Control Register
   0: =$7      TCR_SCALER_gm:  EQU   %00000111       ; Prescaler
   0: =$0      TCR_DIV1_gc:    EQU   %00000000       ; - 1/1
   0: =$1      TCR_DIV2_gc:    EQU   %00000001       ; - 1/2
   0: =$2      TCR_DIV4_gc:    EQU   %00000010       ; - 1/4
   0: =$3      TCR_DIV8_gc:    EQU   %00000011       ; - 1/8
   0: =$4      TCR_DIV16_gc:   EQU   %00000100       ; - 1/16
   0: =$5      TCR_DIV32_gc:   EQU   %00000101       ; - 1/32
   0: =$6      TCR_DIV64_gc:   EQU   %00000110       ; - 1/64
   0: =$7      TCR_DIV128_gc:  EQU   %00000111       ; - 1/128
   0: =$18     TCR_CS_gm:      EQU   %00011000       ; Timer clock source
   0: =$0      TCR_AS_gc:      EQU   %00000000       ; - Internal Clock (AS)
   0: =$8      TCR_AS_AND_gc:  EQU   %00001000       ; - Internal Clock (AS) AND TIMER input
   0: =$10     TCR_DISABLE_gc: EQU   %00010000       ; - Timer input is disabled
   0: =$18     TCR_TIMER_gc:   EQU   %00011000       ; - TIMER input
   0: =$20     TCR_TOF_bm:     EQU   %00100000       ; Timer Overflow Flag
   0: =$40     TCR_IM_bm:      EQU   %01000000       ; Timer interrupt mask
   0: =$80     TCR_IF_bm:      EQU   %10000000       ; Timer interrupt request flag
   0:
   0:          ;;; Vector
   0: =$1FFA   VEC_IRQ:        EQU   $1FFA           ; $1FFA: Maskable Interrupt Request
   0: =$1FFC   VEC_SWI:        EQU   $1FFC           ; $1FFC: Software Interrupt
   0: =$1FFE   VEC_RESET:      EQU   $1FFE           ; $1FFE: Reset
   0:
   0:          ;;; MC6850 Asynchronous Communication Interface Adapter
   0: =$1F00   ACIA:           EQU   $1F00
   0:                          INCLUDE               "mc6850.inc"
   0:          ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:          ;;; MC6850
   0:          ;;; Asynchronous Communication Interface Adapter
   0:
   0:          ;;; Control register
   0: =$1F00   ACIA_control:   EQU   ACIA+0
   0:          ;; Counter Divider Select Bits
   0: =$3      CDS_gm:         EQU   %11             ; Group mask
   0: =$0      CDS_DIV1_gc:    EQU   %00000000       ; /1
   0: =$1      CDS_DIV16_gc:   EQU   %00000001       ; /16
   0: =$2      CDS_DIV64_gc:   EQU   %00000010       ; /64
   0: =$3      CDS_RESET_gc:   EQU   %00000011       ; Master Reset
   0:          ;; Word Select Bits
   0: =$1C     WSB_gm:         EQU   %00011100       ; Group mask
   0: =$0      WSB_7E2_gc:     EQU   %00000000       ; 7 Bits + Even Parity + 2 Stop Bits
   0: =$4      WSB_7O2_gc:     EQU   %00000100       ; 7 bits + Odd Parity  + 2 Stop Bits
   0: =$8      WSB_7E1_gc:     EQU   %00001000       ; 7 bits + Even Parity + 1 Stop Bits
   0: =$C      WSB_7O1_gc:     EQU   %00001100       ; 7 bits + Odd Parity  + 1 Stop Bits
   0: =$10     WSB_8N2_gc:     EQU   %00010000       ; 8 bits + No Parity   + 2 Stop Bits
   0: =$14     WSB_8N1_gc:     EQU   %00010100       ; 8 bits + No Parity   + 1 Stop Bits
   0: =$18     WSB_8E1_gc:     EQU   %00011000       ; 8 bits + Even Parity + 1 Stop Bits
   0: =$1C     WSB_8O1_gc:     EQU   %00011100       ; 8 bits + Odd Parity  + 1 Stop Bits
   0:          ;; Transmit Control Bits
   0: =$60     TCB_gm:         EQU   %01100000       ; Group mask
   0: =$0      TCB_DI_gc:      EQU   %00000000       ; RTS=Low,  Tx Interrupt Disabled
   0: =$20     TCB_EI_gc:      EQU   %00100000       ; RTS=Low,  Tx Interrupt Enabled
   0: =$40     TCB_RTS_gc:     EQU   %01000000       ; RTS=High, Tx Interrupt Disabled
   0: =$60     TCB_BREAK_gc:   EQU   %01100000       ; RTS=Low,  Tx Interrupt Disabled
   0:          ; Transmit Break Level
   0: =$80     RIEB_bm:        EQU   %10000000       ; Receive Interrupt Enable Bit mask
   0:
   0:          ;;; Status register
   0: =$1F00   ACIA_status:    EQU   ACIA+0
   0: =$1      RDRF_bm:        EQU   %00000001       ; Receive Data Register Full
   0: =$2      TDRE_bm:        EQU   %00000010       ; Transmit Data Register Empty
   0: =$4      DCDF_bm:        EQU   %00000100       ; Data Carrier Detect Flag
   0: =$8      CTSF_bm:        EQU   %00001000       ; Clear To Send Flag
   0: =$10     FERR_bm:        EQU   %00010000       ; Frame Error Flag
   0: =$20     OVRN_bm:        EQU   %00100000       ; Receiver Overrun Flag
   0: =$40     PERR_bm:        EQU   %01000000       ; Parity Error Flag
   0: =$80     IRQF_bm:        EQU   %10000000       ; Interrupt Request Flag
   0:
   0:          ;;; Data register
   0: =$1F01   ACIA_data:      EQU   ACIA+1          ; Data register
   0:
  20:                          ORG   $20
  20:          save_a:         RMB   1
  21:
 100:                          ORG   $0100
 100:          initialize:
 100: A6 03                    LDA   #CDS_RESET_gc   ; Master reset
 102: C7 1F 00                 STA   ACIA_control
 105: A6 14                    LDA   #WSB_8N1_gc     ; 8 bits + No Parity + 1 Stop Bits
 107:          ; Transmit, Receive interrupts disabled
 107: C7 1F 00                 STA   ACIA_control
 10A:
 10A: AD 0A    loop:           BSR   getchar
 10C: AD 13    echo:           BSR   putchar
 10E: A1 0D                    CMP   #$0D            ; Carriage Return
 110: 26 F8                    BNE   loop
 112: A6 0A                    LDA   #$0A            ; Newline
 114: 20 F6                    BRA   echo
 116:
 116:          getchar:
 116: C6 1F 00                 LDA   ACIA_status
 119: A5 01                    BIT   #RDRF_bm
 11B: 27 F9                    BEQ   getchar
 11D:          receive_data:
 11D: C6 1F 01                 LDA   ACIA_data
 120: 81                       RTS
 121:
 121:          putchar:
 121: B7 20                    STA   save_a
 123:          transmit_loop:
 123: C6 1F 00                 LDA   ACIA_status
 126: A5 02                    BIT   #TDRE_bm
 128: 27 F9                    BEQ   transmit_loop
 12A:          transmit_data:
 12A: B6 20                    LDA   save_a
 12C: C7 1F 01                 STA   ACIA_data
 12F: 81                       RTS
 130:
1FFE:                          ORG   VEC_RESET
1FFE: 01 00                    FDB   initialize

          0 :                            cpu     6805
          0 :                            include "mc6805.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6805
(1)       0 :                    ;;; Condition Code Register (CC)
(1)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 CC_ZERO       equ  %00000010   ; set to 1 if result is zero
(1)       0 : =4                 CC_NEGATIVE   equ  %00000100   ; set to 1 if result is negative
(1)       0 : =8                 CC_IRQ        equ  %00001000   ; if 1, IRQ is masked
(1)       0 : =10                CC_HALF_CARRY equ  %00010000   ; if 1, decimal carry from least digit occurred
(1)       0 :
(1)       0 :                    ;;; Internal Register Area
(1)       0 : =0                 PORTA:  equ     $00          ; $00: Port A Data Register
(1)       0 : =1                 PORTB:  equ     $01          ; $01: Port B Data Register
(1)       0 : =4                 DDRA:   equ     $04          ; $04: Port A Data Direction Register
(1)       0 : =5                 DDRB:   equ     $05          ; $05: Port B Data Direction Register
(1)       0 : =8                 TDR:    equ     $08          ; $08: Timer Data Register
(1)       0 : =9                 TCR:    equ     $09          ; $09: Timer Control Register
(1)       0 :
(1)       0 :                    ;;; Port 2 Data Register
(1)       0 :
(1)       0 :                    ;;; Timer Control Register
(1)       0 : =7                 TCR_SCALER_gm:  equ     %00000111 ; Prescaler
(1)       0 : =0                 TCR_DIV1_gc:    equ     %00000000 ; - 1/1
(1)       0 : =1                 TCR_DIV2_gc:    equ     %00000001 ; - 1/2
(1)       0 : =2                 TCR_DIV4_gc:    equ     %00000010 ; - 1/4
(1)       0 : =3                 TCR_DIV8_gc:    equ     %00000011 ; - 1/8
(1)       0 : =4                 TCR_DIV16_gc:   equ     %00000100 ; - 1/16
(1)       0 : =5                 TCR_DIV32_gc:   equ     %00000101 ; - 1/32
(1)       0 : =6                 TCR_DIV64_gc:   equ     %00000110 ; - 1/64
(1)       0 : =7                 TCR_DIV128_gc:  equ     %00000111 ; - 1/128
(1)       0 : =18                TCR_CS_gm:      equ     %00011000 ; Timer clock source
(1)       0 : =0                 TCR_AS_gc:      equ     %00000000 ; - Internal Clock (AS)
(1)       0 : =8                 TCR_AS_AND_gc:  equ     %00001000 ; - Internal Clock (AS) AND TIMER input
(1)       0 : =10                TCR_DISABLE_gc: equ     %00010000 ; - Timer input is disabled
(1)       0 : =18                TCR_TIMER_gc:   equ     %00011000 ; - TIMER input
(1)       0 : =20                TCR_TOF_bm:     equ     %00100000 ; Timer Overflow Flag
(1)       0 : =40                TCR_IM_bm:      equ     %01000000 ; Timer interrupt mask
(1)       0 : =80                TCR_IF_bm:      equ     %10000000 ; Timer interrupt request flag
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =1FFA              VEC_IRQ:        equ     $1FFA  ; $1FFA: Maskable Interrupt Request
(1)       0 : =1FFC              VEC_SWI:        equ     $1FFC  ; $1FFC: Software Interrupt
(1)       0 : =1FFE              VEC_RESET:      equ     $1FFE  ; $1FFE: Reset
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =17F8              ACIA:   equ     $17F8
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =17F8              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =17F8              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =17F9              ACIA_data:      equ     ACIA+1          ; Data register
          0 :
          0 : =10                rx_queue_size:  equ     16
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 :
         20 :                            org     $20
         20 :                    save_a:
         20 :                            rmb     1
         21 :                    rx_queue:
         21 :                            rmb     rx_queue_size
         31 :
        100 :                            org     $0100
        100 :                    initialize:
        100 : AE 21                      ldx     #rx_queue
        102 : A6 10                      lda     #rx_queue_size
        104 : CD 01 34                   jsr     queue_init
        107 :                            ;; initialize ACIA
        107 : A6 03                      lda     #CDS_RESET_gc   ; Master reset
        109 : C7 17 F8                   sta     ACIA_control
        10C : A6 94                      lda     #RX_INT_TX_NO
        10E : C7 17 F8                   sta     ACIA_control
        111 : 9A                         cli                     ; Enable IRQ
        112 :
        112 :                    loop:
        112 : AE 21                      ldx     #rx_queue
        114 : 9B                         sei                     ; Disable IRQ
        115 : CD 01 6B                   jsr     queue_remove
        118 : 9A                         cli                     ; Enable IRQ
        119 : 24 F7                      bcc     loop
        11B :                    echo:
        11B : AD 08                      bsr     putchar
        11D : A1 0D                      cmp     #$0D            ; carriage return
        11F : 26 F1                      bne     loop
        121 : A6 0A                      lda     #$0A            ; newline
        123 : 20 F6                      bra     echo
        125 :
        125 :                    putchar:
        125 : B7 20                      sta     save_a
        127 :                    transmit_loop:
        127 : C6 17 F8                   lda     ACIA_status
        12A : A5 02                      bit     #TDRE_bm
        12C : 27 F9                      beq     transmit_loop
        12E :                    transmit_data:
        12E : B6 20                      lda     save_a
        130 : C7 17 F9                   sta     ACIA_data
        133 : 81                         rts
        134 :
        134 :                            include "queue.inc"
(1)     134 :                    ;;; [queue] queue structure
(1)     134 : =0                 queue_len:      equ     0       ; queue length
(1)     134 : =1                 queue_size:     equ     1       ; buffer size
(1)     134 : =2                 queue_put:      equ     2       ; queue put index
(1)     134 : =3                 queue_get:      equ     3       ; queue get index
(1)     134 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     134 :
(1)     134 :                    ;;; [queue] Initialize queue
(1)     134 :                    ;;; @param X queue work space pointer
(1)     134 :                    ;;; @param A queue work space size
(1)     134 :                    ;;; @clobber A
(1)     134 :                    queue_init:
(1)     134 : 7F                         clr     queue_len,x
(1)     135 : 6F 02                      clr     queue_put,x
(1)     137 : 6F 03                      clr     queue_get,x
(1)     139 : A0 04                      sub     #queue_buf
(1)     13B : E7 01                      sta     queue_size,x
(1)     13D : 81                         rts
(1)     13E :
(1)     13E :                    ;;; [queue] Add an element to queue
(1)     13E :                    ;;; @param X queue work space pointer
(1)     13E :                    ;;; @param A an element
(1)     13E :                    ;;; @return CC.C 0 if queue is full
(1)     13E :                    queue_add_X:
(1)     13E :                            rmb     1               ; save X
(1)     13F :                    queue_add_A:
(1)     13F :                            rmb     1               ; save X
(1)     140 :                    queue_add:
(1)     140 : C7 01 3F                   sta     queue_add_A     ; save A
(1)     143 : F6                         lda     queue_len,x
(1)     144 : E1 01                      cmp     queue_size,x
(1)     146 : 24 1E                      bhs     queue_add_return ; carry is cleared
(1)     148 : 7C                         inc     queue_len,x      ; increment queue length
(1)     149 : E6 02                      lda     queue_put,x      ; 8 bits offset
(1)     14B : 4C                         inca
(1)     14C : E7 02                      sta     queue_put,x     ; update put pointer
(1)     14E : E1 01                      cmp     queue_size,x
(1)     150 : 25 02                      blo     queue_add_elem
(1)     152 : 6F 02                      clr     queue_put,x
(1)     154 :                    queue_add_elem:
(1)     154 : 4A                         deca                    ; restore put pointer
(1)     155 : AB 04                      add     #queue_buf
(1)     157 : CF 01 3E                   stx     queue_add_X     ; save X
(1)     15A : CB 01 3E                   add     queue_add_X
(1)     15D : 97                         tax
(1)     15E : C6 01 3F                   lda     queue_add_A
(1)     161 : F7                         sta     ,x              ; put element
(1)     162 : CE 01 3E                   ldx     queue_add_X     ; restore X
(1)     165 : 99                         sec                     ; set carry
(1)     166 :                    queue_add_return:
(1)     166 : C6 01 3F                   lda     queue_add_A     ; restore A
(1)     169 : 81                         rts
(1)     16A :
(1)     16A :                    ;;; [queue] Remove an element from queue
(1)     16A :                    ;;; @param X queue work space pointer
(1)     16A :                    ;;; @return A an element
(1)     16A :                    ;;; @return CC.C 0 if queue is empty
(1)     16A :                    queue_remove_X:
(1)     16A :                            rmb     1
(1)     16B :                    queue_remove:
(1)     16B : 7D                         tst     queue_len,x
(1)     16C : 26 02                      bne     queue_remove_has_elem
(1)     16E : 98                         clc                     ; clear carry
(1)     16F : 81                         rts
(1)     170 :                    queue_remove_has_elem:
(1)     170 : 7A                         dec     queue_len,x     ; decrement queue length
(1)     171 : E6 03                      lda     queue_get,x     ; 8 bits offset
(1)     173 : 4C                         inca
(1)     174 : E7 03                      sta     queue_get,x     ; update get pointer
(1)     176 : E1 01                      cmp     queue_size,x
(1)     178 : 25 02                      blo     queue_remove_elem
(1)     17A : 6F 03                      clr     queue_get,x
(1)     17C :                    queue_remove_elem:
(1)     17C : 4A                         deca                    ; restore get pointer
(1)     17D : AB 04                      add     #queue_buf
(1)     17F : CF 01 6A                   stx     queue_remove_X  ; save X
(1)     182 : CB 01 6A                   add     queue_remove_X
(1)     185 : 97                         tax
(1)     186 : F6                         lda     ,x              ; get element
(1)     187 : CE 01 6A                   ldx     queue_remove_X  ; restore X
(1)     18A : 99                         sec                     ; set carry
(1)     18B :                    queue_remove_return:
(1)     18B : 81                         rts
(1)     18C :
(1)     18C :                    ;;; Local Variables:
(1)     18C :                    ;;; mode: asm
(1)     18C :                    ;;; End:
(1)     18C :                    ;;; vim: set ft=asm et ts=4 sw=4:
        18C :
        18C :                    isr_irq:
        18C : C6 17 F8                   lda     ACIA_status
        18F : A5 80                      bit     #IRQF_bm
        191 : 27 0C                      beq     isr_irq_return
        193 :                    isr_irq_receive:
        193 : A5 01                      bit     #RDRF_bm
        195 : 27 08                      beq     isr_irq_recv_end
        197 : C6 17 F9                   lda     ACIA_data
        19A : AE 21                      ldx     #rx_queue
        19C : CD 01 40                   jsr     queue_add
        19F :                    isr_irq_recv_end:
        19F :                    isr_irq_return:
        19F : 80                         rti
        1A0 :
       1FFA :                            org     VEC_IRQ
       1FFA : 01 8C                      fdb     isr_irq
       1FFC :
       1FFE :                            org     VEC_RESET
       1FFE : 01 00                      fdb     initialize

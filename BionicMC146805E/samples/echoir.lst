   0:                          CPU   6805
   0:                          INCLUDE               "mc6805.inc"
   0:          ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:          ;;; MC6805
   0:          ;;; Condition Code Register (CC)
   0: =$1      CC_CARRY        EQU   %00000001       ; set to 1 if carry occurred
   0: =$2      CC_ZERO         EQU   %00000010       ; set to 1 if result is zero
   0: =$4      CC_NEGATIVE     EQU   %00000100       ; set to 1 if result is negative
   0: =$8      CC_IRQ          EQU   %00001000       ; if 1, IRQ is masked
   0: =$10     CC_HALF_CARRY   EQU   %00010000       ; if 1, decimal carry from least digit occurred
   0:
   0:          ;;; Internal Register Area
   0: =$0      PORTA:          EQU   $00             ; $00: Port A Data Register
   0: =$1      PORTB:          EQU   $01             ; $01: Port B Data Register
   0: =$4      DDRA:           EQU   $04             ; $04: Port A Data Direction Register
   0: =$5      DDRB:           EQU   $05             ; $05: Port B Data Direction Register
   0: =$8      TDR:            EQU   $08             ; $08: Timer Data Register
   0: =$9      TCR:            EQU   $09             ; $09: Timer Control Register
   0:
   0:          ;;; Port 2 Data Register
   0:
   0:          ;;; Timer Control Register
   0: =$7      TCR_SCALER_gm:  EQU   %00000111       ; Prescaler
   0: =$0      TCR_DIV1_gc:    EQU   %00000000       ; - 1/1
   0: =$1      TCR_DIV2_gc:    EQU   %00000001       ; - 1/2
   0: =$2      TCR_DIV4_gc:    EQU   %00000010       ; - 1/4
   0: =$3      TCR_DIV8_gc:    EQU   %00000011       ; - 1/8
   0: =$4      TCR_DIV16_gc:   EQU   %00000100       ; - 1/16
   0: =$5      TCR_DIV32_gc:   EQU   %00000101       ; - 1/32
   0: =$6      TCR_DIV64_gc:   EQU   %00000110       ; - 1/64
   0: =$7      TCR_DIV128_gc:  EQU   %00000111       ; - 1/128
   0: =$18     TCR_CS_gm:      EQU   %00011000       ; Timer clock source
   0: =$0      TCR_AS_gc:      EQU   %00000000       ; - Internal Clock (AS)
   0: =$8      TCR_AS_AND_gc:  EQU   %00001000       ; - Internal Clock (AS) AND TIMER input
   0: =$10     TCR_DISABLE_gc: EQU   %00010000       ; - Timer input is disabled
   0: =$18     TCR_TIMER_gc:   EQU   %00011000       ; - TIMER input
   0: =$20     TCR_TOF_bm:     EQU   %00100000       ; Timer Overflow Flag
   0: =$40     TCR_IM_bm:      EQU   %01000000       ; Timer interrupt mask
   0: =$80     TCR_IF_bm:      EQU   %10000000       ; Timer interrupt request flag
   0:
   0:          ;;; Vector
   0: =$1FFA   VEC_IRQ:        EQU   $1FFA           ; $1FFA: Maskable Interrupt Request
   0: =$1FFC   VEC_SWI:        EQU   $1FFC           ; $1FFC: Software Interrupt
   0: =$1FFE   VEC_RESET:      EQU   $1FFE           ; $1FFE: Reset
   0:
   0:          ;;; MC6850 Asynchronous Communication Interface Adapter
   0: =$1F00   ACIA:           EQU   $1F00
   0:                          INCLUDE               "mc6850.inc"
   0:          ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:          ;;; MC6850
   0:          ;;; Asynchronous Communication Interface Adapter
   0:
   0:          ;;; Control register
   0: =$1F00   ACIA_control:   EQU   ACIA+0
   0:          ;; Counter Divider Select Bits
   0: =$3      CDS_gm:         EQU   %11             ; Group mask
   0: =$0      CDS_DIV1_gc:    EQU   %00000000       ; /1
   0: =$1      CDS_DIV16_gc:   EQU   %00000001       ; /16
   0: =$2      CDS_DIV64_gc:   EQU   %00000010       ; /64
   0: =$3      CDS_RESET_gc:   EQU   %00000011       ; Master Reset
   0:          ;; Word Select Bits
   0: =$1C     WSB_gm:         EQU   %00011100       ; Group mask
   0: =$0      WSB_7E2_gc:     EQU   %00000000       ; 7 Bits + Even Parity + 2 Stop Bits
   0: =$4      WSB_7O2_gc:     EQU   %00000100       ; 7 bits + Odd Parity  + 2 Stop Bits
   0: =$8      WSB_7E1_gc:     EQU   %00001000       ; 7 bits + Even Parity + 1 Stop Bits
   0: =$C      WSB_7O1_gc:     EQU   %00001100       ; 7 bits + Odd Parity  + 1 Stop Bits
   0: =$10     WSB_8N2_gc:     EQU   %00010000       ; 8 bits + No Parity   + 2 Stop Bits
   0: =$14     WSB_8N1_gc:     EQU   %00010100       ; 8 bits + No Parity   + 1 Stop Bits
   0: =$18     WSB_8E1_gc:     EQU   %00011000       ; 8 bits + Even Parity + 1 Stop Bits
   0: =$1C     WSB_8O1_gc:     EQU   %00011100       ; 8 bits + Odd Parity  + 1 Stop Bits
   0:          ;; Transmit Control Bits
   0: =$60     TCB_gm:         EQU   %01100000       ; Group mask
   0: =$0      TCB_DI_gc:      EQU   %00000000       ; RTS=Low,  Tx Interrupt Disabled
   0: =$20     TCB_EI_gc:      EQU   %00100000       ; RTS=Low,  Tx Interrupt Enabled
   0: =$40     TCB_RTS_gc:     EQU   %01000000       ; RTS=High, Tx Interrupt Disabled
   0: =$60     TCB_BREAK_gc:   EQU   %01100000       ; RTS=Low,  Tx Interrupt Disabled
   0:          ; Transmit Break Level
   0: =$80     RIEB_bm:        EQU   %10000000       ; Receive Interrupt Enable Bit mask
   0:
   0:          ;;; Status register
   0: =$1F00   ACIA_status:    EQU   ACIA+0
   0: =$1      RDRF_bm:        EQU   %00000001       ; Receive Data Register Full
   0: =$2      TDRE_bm:        EQU   %00000010       ; Transmit Data Register Empty
   0: =$4      DCDF_bm:        EQU   %00000100       ; Data Carrier Detect Flag
   0: =$8      CTSF_bm:        EQU   %00001000       ; Clear To Send Flag
   0: =$10     FERR_bm:        EQU   %00010000       ; Frame Error Flag
   0: =$20     OVRN_bm:        EQU   %00100000       ; Receiver Overrun Flag
   0: =$40     PERR_bm:        EQU   %01000000       ; Parity Error Flag
   0: =$80     IRQF_bm:        EQU   %10000000       ; Interrupt Request Flag
   0:
   0:          ;;; Data register
   0: =$1F01   ACIA_data:      EQU   ACIA+1          ; Data register
   0:
2000:                          ORG   $2000
2000:
2000: =$10     rx_queue_size:  EQU   16
2000: =$94     RX_INT_TX_NO:   EQU   WSB_8N1_gc|RIEB_bm
2000:
  20:                          ORG   $20
  20:          save_a:
  20:                          RMB   1
  21:          rx_queue:
  21:                          RMB   rx_queue_size
  31:
 100:                          ORG   $0100
 100:          initialize:
 100: AE 21                    LDX   #rx_queue
 102: A6 10                    LDA   #rx_queue_size
 104: CD 01 34                 JSR   queue_init
 107:          ;; initialize ACIA
 107: A6 03                    LDA   #CDS_RESET_gc   ; Master reset
 109: C7 1F 00                 STA   ACIA_control
 10C: A6 94                    LDA   #RX_INT_TX_NO
 10E: C7 1F 00                 STA   ACIA_control
 111: 9A                       CLI                   ; Enable IRQ
 112:
 112:          loop:
 112: AE 21                    LDX   #rx_queue
 114: 9B                       SEI                   ; Disable IRQ
 115: CD 01 6B                 JSR   queue_remove
 118: 9A                       CLI                   ; Enable IRQ
 119: 24 F7                    BCC   loop
 11B:          echo:
 11B: AD 08                    BSR   putchar
 11D: A1 0D                    CMP   #$0D            ; carriage return
 11F: 26 F1                    BNE   loop
 121: A6 0A                    LDA   #$0A            ; newline
 123: 20 F6                    BRA   echo
 125:
 125:          putchar:
 125: B7 20                    STA   save_a
 127:          transmit_loop:
 127: C6 1F 00                 LDA   ACIA_status
 12A: A5 02                    BIT   #TDRE_bm
 12C: 27 F9                    BEQ   transmit_loop
 12E:          transmit_data:
 12E: B6 20                    LDA   save_a
 130: C7 1F 01                 STA   ACIA_data
 133: 81                       RTS
 134:
 134:                          INCLUDE               "queue.inc"
 134:          ;;; [queue] queue structure
 134: =$0      queue_len:      EQU   0               ; queue length
 134: =$1      queue_size:     EQU   1               ; buffer size
 134: =$2      queue_put:      EQU   2               ; queue put index
 134: =$3      queue_get:      EQU   3               ; queue get index
 134: =$4      queue_buf:      EQU   4               ; buffer start offset
 134:
 134:          ;;; [queue] Initialize queue
 134:          ;;; @param X queue work space pointer
 134:          ;;; @param A queue work space size
 134:          ;;; @clobber A
 134:          queue_init:
 134: 7F                       CLR   queue_len,x
 135: 6F 02                    CLR   queue_put,x
 137: 6F 03                    CLR   queue_get,x
 139: A0 04                    SUB   #queue_buf
 13B: E7 01                    STA   queue_size,x
 13D: 81                       RTS
 13E:
 13E:          ;;; [queue] Add an element to queue
 13E:          ;;; @param X queue work space pointer
 13E:          ;;; @param A an element
 13E:          ;;; @return CC.C 0 if queue is full
 13E:          queue_add_X:
 13E:                          RMB   1               ; save X
 13F:          queue_add_A:
 13F:                          RMB   1               ; save X
 140:          queue_add:
 140: C7 01 3F                 STA   queue_add_A     ; save A
 143: F6                       LDA   queue_len,x
 144: E1 01                    CMP   queue_size,x
 146: 24 1E                    BHS   queue_add_return    ; carry is cleared
 148: 7C                       INC   queue_len,x     ; increment queue length
 149: E6 02                    LDA   queue_put,x     ; 8 bits offset
 14B: 4C                       INCA
 14C: E7 02                    STA   queue_put,x     ; update put pointer
 14E: E1 01                    CMP   queue_size,x
 150: 25 02                    BLO   queue_add_elem
 152: 6F 02                    CLR   queue_put,x
 154:          queue_add_elem:
 154: 4A                       DECA                  ; restore put pointer
 155: AB 04                    ADD   #queue_buf
 157: CF 01 3E                 STX   queue_add_X     ; save X
 15A: CB 01 3E                 ADD   queue_add_X
 15D: 97                       TAX
 15E: C6 01 3F                 LDA   queue_add_A
 161: F7                       STA   ,x              ; put element
 162: CE 01 3E                 LDX   queue_add_X     ; restore X
 165: 99                       SEC                   ; set carry
 166:          queue_add_return:
 166: C6 01 3F                 LDA   queue_add_A     ; restore A
 169: 81                       RTS
 16A:
 16A:          ;;; [queue] Remove an element from queue
 16A:          ;;; @param X queue work space pointer
 16A:          ;;; @return A an element
 16A:          ;;; @return CC.C 0 if queue is empty
 16A:          queue_remove_X:
 16A:                          RMB   1
 16B:          queue_remove:
 16B: 7D                       TST   queue_len,x
 16C: 26 02                    BNE   queue_remove_has_elem
 16E: 98                       CLC                   ; clear carry
 16F: 81                       RTS
 170:          queue_remove_has_elem:
 170: 7A                       DEC   queue_len,x     ; decrement queue length
 171: E6 03                    LDA   queue_get,x     ; 8 bits offset
 173: 4C                       INCA
 174: E7 03                    STA   queue_get,x     ; update get pointer
 176: E1 01                    CMP   queue_size,x
 178: 25 02                    BLO   queue_remove_elem
 17A: 6F 03                    CLR   queue_get,x
 17C:          queue_remove_elem:
 17C: 4A                       DECA                  ; restore get pointer
 17D: AB 04                    ADD   #queue_buf
 17F: CF 01 6A                 STX   queue_remove_X  ; save X
 182: CB 01 6A                 ADD   queue_remove_X
 185: 97                       TAX
 186: F6                       LDA   ,x              ; get element
 187: CE 01 6A                 LDX   queue_remove_X  ; restore X
 18A: 99                       SEC                   ; set carry
 18B:          queue_remove_return:
 18B: 81                       RTS
 18C:
 18C:          ;;; Local Variables:
 18C:          ;;; mode: asm
 18C:          ;;; End:
 18C:          ;;; vim: set ft=asm et ts=4 sw=4:
 18C:
 18C:          isr_irq:
 18C: C6 1F 00                 LDA   ACIA_status
 18F: A5 80                    BIT   #IRQF_bm
 191: 27 0C                    BEQ   isr_irq_return
 193:          isr_irq_receive:
 193: A5 01                    BIT   #RDRF_bm
 195: 27 08                    BEQ   isr_irq_recv_end
 197: C6 1F 01                 LDA   ACIA_data
 19A: AE 21                    LDX   #rx_queue
 19C: CD 01 40                 JSR   queue_add
 19F:          isr_irq_recv_end:
 19F:          isr_irq_return:
 19F: 80                       RTI
 1A0:
1FFA:                          ORG   VEC_IRQ
1FFA: 01 8C                    FDB   isr_irq
1FFC:
1FFE:                          ORG   VEC_RESET
1FFE: 01 00                    FDB   initialize

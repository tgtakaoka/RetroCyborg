   0:                          CPU   6805
   0:                          INCLUDE               "mc6805.inc"
   0:          ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:          ;;; MC6805
   0:          ;;; Condition Code Register (CC)
   0: =$1      CC_CARRY        EQU   %00000001       ; set to 1 if carry occurred
   0: =$2      CC_ZERO         EQU   %00000010       ; set to 1 if result is zero
   0: =$4      CC_NEGATIVE     EQU   %00000100       ; set to 1 if result is negative
   0: =$8      CC_IRQ          EQU   %00001000       ; if 1, IRQ is masked
   0: =$10     CC_HALF_CARRY   EQU   %00010000       ; if 1, decimal carry from least digit occurred
   0:
   0:          ;;; Internal Register Area
   0: =$0      PORTA:          EQU   $00             ; $00: Port A Data Register
   0: =$1      PORTB:          EQU   $01             ; $01: Port B Data Register
   0: =$4      DDRA:           EQU   $04             ; $04: Port A Data Direction Register
   0: =$5      DDRB:           EQU   $05             ; $05: Port B Data Direction Register
   0: =$8      TDR:            EQU   $08             ; $08: Timer Data Register
   0: =$9      TCR:            EQU   $09             ; $09: Timer Control Register
   0:
   0:          ;;; Port 2 Data Register
   0:
   0:          ;;; Timer Control Register
   0: =$7      TCR_SCALER_gm:  EQU   %00000111       ; Prescaler
   0: =$0      TCR_DIV1_gc:    EQU   %00000000       ; - 1/1
   0: =$1      TCR_DIV2_gc:    EQU   %00000001       ; - 1/2
   0: =$2      TCR_DIV4_gc:    EQU   %00000010       ; - 1/4
   0: =$3      TCR_DIV8_gc:    EQU   %00000011       ; - 1/8
   0: =$4      TCR_DIV16_gc:   EQU   %00000100       ; - 1/16
   0: =$5      TCR_DIV32_gc:   EQU   %00000101       ; - 1/32
   0: =$6      TCR_DIV64_gc:   EQU   %00000110       ; - 1/64
   0: =$7      TCR_DIV128_gc:  EQU   %00000111       ; - 1/128
   0: =$18     TCR_CS_gm:      EQU   %00011000       ; Timer clock source
   0: =$0      TCR_AS_gc:      EQU   %00000000       ; - Internal Clock (AS)
   0: =$8      TCR_AS_AND_gc:  EQU   %00001000       ; - Internal Clock (AS) AND TIMER input
   0: =$10     TCR_DISABLE_gc: EQU   %00010000       ; - Timer input is disabled
   0: =$18     TCR_TIMER_gc:   EQU   %00011000       ; - TIMER input
   0: =$20     TCR_TOF_bm:     EQU   %00100000       ; Timer Overflow Flag
   0: =$40     TCR_IM_bm:      EQU   %01000000       ; Timer interrupt mask
   0: =$80     TCR_IF_bm:      EQU   %10000000       ; Timer interrupt request flag
   0:
   0:          ;;; Vector
   0: =$1FFA   VEC_IRQ:        EQU   $1FFA           ; $1FFA: Maskable Interrupt Request
   0: =$1FFC   VEC_SWI:        EQU   $1FFC           ; $1FFC: Software Interrupt
   0: =$1FFE   VEC_RESET:      EQU   $1FFE           ; $1FFE: Reset
   0:
   0:          ;;; MC6850 Asynchronous Communication Interface Adapter
   0: =$17F8   ACIA:           EQU   $17F8
   0:                          INCLUDE               "mc6850.inc"
   0:          ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:          ;;; MC6850
   0:          ;;; Asynchronous Communication Interface Adapter
   0:
   0:          ;;; Control register
   0: =$17F8   ACIA_control:   EQU   ACIA+0
   0:          ;; Counter Divider Select Bits
   0: =$3      CDS_gm:         EQU   %11             ; Group mask
   0: =$0      CDS_DIV1_gc:    EQU   %00000000       ; /1
   0: =$1      CDS_DIV16_gc:   EQU   %00000001       ; /16
   0: =$2      CDS_DIV64_gc:   EQU   %00000010       ; /64
   0: =$3      CDS_RESET_gc:   EQU   %00000011       ; Master Reset
   0:          ;; Word Select Bits
   0: =$1C     WSB_gm:         EQU   %00011100       ; Group mask
   0: =$0      WSB_7E2_gc:     EQU   %00000000       ; 7 Bits + Even Parity + 2 Stop Bits
   0: =$4      WSB_7O2_gc:     EQU   %00000100       ; 7 bits + Odd Parity  + 2 Stop Bits
   0: =$8      WSB_7E1_gc:     EQU   %00001000       ; 7 bits + Even Parity + 1 Stop Bits
   0: =$C      WSB_7O1_gc:     EQU   %00001100       ; 7 bits + Odd Parity  + 1 Stop Bits
   0: =$10     WSB_8N2_gc:     EQU   %00010000       ; 8 bits + No Parity   + 2 Stop Bits
   0: =$14     WSB_8N1_gc:     EQU   %00010100       ; 8 bits + No Parity   + 1 Stop Bits
   0: =$18     WSB_8E1_gc:     EQU   %00011000       ; 8 bits + Even Parity + 1 Stop Bits
   0: =$1C     WSB_8O1_gc:     EQU   %00011100       ; 8 bits + Odd Parity  + 1 Stop Bits
   0:          ;; Transmit Control Bits
   0: =$60     TCB_gm:         EQU   %01100000       ; Group mask
   0: =$0      TCB_DI_gc:      EQU   %00000000       ; RTS=Low,  Tx Interrupt Disabled
   0: =$20     TCB_EI_gc:      EQU   %00100000       ; RTS=Low,  Tx Interrupt Enabled
   0: =$40     TCB_RTS_gc:     EQU   %01000000       ; RTS=High, Tx Interrupt Disabled
   0: =$60     TCB_BREAK_gc:   EQU   %01100000       ; RTS=Low,  Tx Interrupt Disabled
   0:          ; Transmit Break Level
   0: =$80     RIEB_bm:        EQU   %10000000       ; Receive Interrupt Enable Bit mask
   0:
   0:          ;;; Status register
   0: =$17F8   ACIA_status:    EQU   ACIA+0
   0: =$1      RDRF_bm:        EQU   %00000001       ; Receive Data Register Full
   0: =$2      TDRE_bm:        EQU   %00000010       ; Transmit Data Register Empty
   0: =$4      DCDF_bm:        EQU   %00000100       ; Data Carrier Detect Flag
   0: =$8      CTSF_bm:        EQU   %00001000       ; Clear To Send Flag
   0: =$10     FERR_bm:        EQU   %00010000       ; Frame Error Flag
   0: =$20     OVRN_bm:        EQU   %00100000       ; Receiver Overrun Flag
   0: =$40     PERR_bm:        EQU   %01000000       ; Parity Error Flag
   0: =$80     IRQF_bm:        EQU   %10000000       ; Interrupt Request Flag
   0:
   0:          ;;; Data register
   0: =$17F9   ACIA_data:      EQU   ACIA+1          ; Data register
   0:
   0: =$10     rx_queue_size:  EQU   16
   0: =$20     tx_queue_size:  EQU   32
   0: =$94     RX_INT_TX_NO:   EQU   WSB_8N1_gc|RIEB_bm
   0: =$B4     RX_INT_TX_INT:  EQU   WSB_8N1_gc|RIEB_bm|TCB_EI_gc
   0:
  20:                          ORG   $20
  20:          save_a:
  20:                          RMB   1
  21:          rx_queue:
  21:                          RMB   rx_queue_size
  31:          tx_queue:
  31:                          RMB   tx_queue_size
  51:          tx_int_control:
  51:                          RMB   1
  52:
 100:                          ORG   $0100
 100:          initialize:
 100: AE 21                    LDX   #rx_queue
 102: A6 10                    LDA   #rx_queue_size
 104: CD 01 A1                 JSR   queue_init
 107: AE 31                    LDX   #tx_queue
 109: A6 20                    LDA   #tx_queue_size
 10B: CD 01 A1                 JSR   queue_init
 10E:          ;; initialize ACIA
 10E: A6 03                    LDA   #CDS_RESET_gc   ; master reset
 110: C7 17 F8                 STA   ACIA_control
 113: A6 94                    LDA   #RX_INT_TX_NO
 115: C7 17 F8                 STA   ACIA_control
 118: 3F 51                    CLR   tx_int_control  ; disable Tx interrupt
 11A: 9A                       CLI                   ; enable IRQ
 11B:
 11B:          loop:
 11B: AD 65                    BSR   getchar
 11D: 24 FC                    BCC   loop
 11F: B7 20                    STA   save_a
 121: AD 67                    BSR   putchar         ; echo
 123: A6 20                    LDA   #' '            ; space
 125: AD 63                    BSR   putchar
 127: B6 20                    LDA   save_a
 129: AD 14                    BSR   put_hex8        ; print in hex
 12B: A6 20                    LDA   #' '            ; space
 12D: AD 5B                    BSR   putchar
 12F: B6 20                    LDA   save_a
 131: AD 2E                    BSR   put_bin8        ; print in binary
 133: AD 02                    BSR   newline
 135: 20 E4                    BRA   loop
 137:
 137:          ;;; Put newline
 137:          ;;; @clobber A
 137:          newline:
 137: A6 0D                    LDA   #$0D
 139: AD 4F                    BSR   putchar
 13B: A6 0A                    LDA   #$0A
 13D: 20 4B                    BRA   putchar
 13F:
 13F:          ;;; Print uint8_t in hex
 13F:          ;;; @param A(save_a) uint8_t value to be printed in hex.
 13F:          put_hex8:
 13F: B7 20                    STA   save_a
 141: A6 30                    LDA   #'0'
 143: AD 45                    BSR   putchar
 145: A6 78                    LDA   #'x'
 147: AD 41                    BSR   putchar
 149: B6 20                    LDA   save_a
 14B: 44                       LSRA
 14C: 44                       LSRA
 14D: 44                       LSRA
 14E: 44                       LSRA
 14F: AD 02                    BSR   put_hex4
 151: B6 20                    LDA   save_a
 153:          put_hex4:
 153: A4 0F                    AND   #$0f
 155: A1 0A                    CMP   #10
 157: 25 04                    BLO   put_hex8_dec
 159: AB 37                    ADD   #'A'-10
 15B: 20 2D                    BRA   putchar
 15D:          put_hex8_dec:
 15D: AB 30                    ADD   #'0'
 15F: 20 29                    BRA   putchar
 161:
 161:          ;;; Print uint8_t in binary
 161:          ;;; @param A(save_a) uint8_t value to be printed in binary.
 161:          put_bin8:
 161: B7 20                    STA   save_a
 163: A6 30                    LDA   #'0'
 165: AD 23                    BSR   putchar
 167: A6 62                    LDA   #'b'
 169: AD 1F                    BSR   putchar
 16B: AD 05                    BSR   put_bin4
 16D: AD 03                    BSR   put_bin4
 16F: B6 20                    LDA   save_a
 171: 81                       RTS
 172:          put_bin4:
 172: AD 00                    BSR   put_bin2
 174:          put_bin2:
 174: AD 00                    BSR   put_bin1
 176:          put_bin1:
 176: 98                       CLC
 177: A6 30                    LDA   #'0'
 179: 38 20                    LSL   save_a
 17B: 24 03                    BCC   put_bin0
 17D: 3C 20                    INC   save_a          ; rotate save_a
 17F: 4C                       INCA
 180:          put_bin0:
 180: 20 08                    BRA   putchar
 182:
 182:          ;;; Get character
 182:          ;;; @clobber X
 182:          ;;; @return A
 182:          ;;; @return CC.C 0 if no char received
 182:          getchar:
 182: AE 21                    LDX   #rx_queue
 184: 9B                       SEI                   ; disable IRQ
 185: CD 01 D8                 JSR   queue_remove
 188: 9A                       CLI                   ; enable IRQ
 189: 81                       RTS
 18A:
 18A:          ;;; Put character
 18A:          ;;; @param A
 18A:          ;;; @clobber A,X
 18A:          putchar:
 18A: AE 31                    LDX   #tx_queue
 18C: 9B                       SEI                   ; disable IRQ
 18D: CD 01 AD                 JSR   queue_add
 190: 9A                       CLI                   ; enable IRQ
 191: 24 F7                    BCC   putchar         ; queue is full
 193: 9B                       SEI                   ; disable IRQ
 194: 3D 51                    TST   tx_int_control
 196: 26 07                    BNE   putchar_return
 198: A6 B4                    LDA   #RX_INT_TX_INT  ; enable Tx interrupt
 19A: C7 17 F8                 STA   ACIA_control
 19D: 33 51                    COM   tx_int_control
 19F:          putchar_return:
 19F: 9A                       CLI                   ; enable IRQ
 1A0: 81                       RTS
 1A1:
 1A1:                          INCLUDE               "queue.inc"
 1A1:          ;;; [queue] queue structure
 1A1: =$0      queue_len:      EQU   0               ; queue length
 1A1: =$1      queue_size:     EQU   1               ; buffer size
 1A1: =$2      queue_put:      EQU   2               ; queue put index
 1A1: =$3      queue_get:      EQU   3               ; queue get index
 1A1: =$4      queue_buf:      EQU   4               ; buffer start offset
 1A1:
 1A1:          ;;; [queue] Initialize queue
 1A1:          ;;; @param X queue work space pointer
 1A1:          ;;; @param A queue work space size
 1A1:          ;;; @clobber A
 1A1:          queue_init:
 1A1: 7F                       CLR   queue_len,x
 1A2: 6F 02                    CLR   queue_put,x
 1A4: 6F 03                    CLR   queue_get,x
 1A6: A0 04                    SUB   #queue_buf
 1A8: E7 01                    STA   queue_size,x
 1AA: 81                       RTS
 1AB:
 1AB:          ;;; [queue] Add an element to queue
 1AB:          ;;; @param X queue work space pointer
 1AB:          ;;; @param A an element
 1AB:          ;;; @return CC.C 0 if queue is full
 1AB:          queue_add_X:
 1AB:                          RMB   1               ; save X
 1AC:          queue_add_A:
 1AC:                          RMB   1               ; save X
 1AD:          queue_add:
 1AD: C7 01 AC                 STA   queue_add_A     ; save A
 1B0: F6                       LDA   queue_len,x
 1B1: E1 01                    CMP   queue_size,x
 1B3: 24 1E                    BHS   queue_add_return    ; carry is cleared
 1B5: 7C                       INC   queue_len,x     ; increment queue length
 1B6: E6 02                    LDA   queue_put,x     ; 8 bits offset
 1B8: 4C                       INCA
 1B9: E7 02                    STA   queue_put,x     ; update put pointer
 1BB: E1 01                    CMP   queue_size,x
 1BD: 25 02                    BLO   queue_add_elem
 1BF: 6F 02                    CLR   queue_put,x
 1C1:          queue_add_elem:
 1C1: 4A                       DECA                  ; restore put pointer
 1C2: AB 04                    ADD   #queue_buf
 1C4: CF 01 AB                 STX   queue_add_X     ; save X
 1C7: CB 01 AB                 ADD   queue_add_X
 1CA: 97                       TAX
 1CB: C6 01 AC                 LDA   queue_add_A
 1CE: F7                       STA   ,x              ; put element
 1CF: CE 01 AB                 LDX   queue_add_X     ; restore X
 1D2: 99                       SEC                   ; set carry
 1D3:          queue_add_return:
 1D3: C6 01 AC                 LDA   queue_add_A     ; restore A
 1D6: 81                       RTS
 1D7:
 1D7:          ;;; [queue] Remove an element from queue
 1D7:          ;;; @param X queue work space pointer
 1D7:          ;;; @return A an element
 1D7:          ;;; @return CC.C 0 if queue is empty
 1D7:          queue_remove_X:
 1D7:                          RMB   1
 1D8:          queue_remove:
 1D8: 7D                       TST   queue_len,x
 1D9: 26 02                    BNE   queue_remove_has_elem
 1DB: 98                       CLC                   ; clear carry
 1DC: 81                       RTS
 1DD:          queue_remove_has_elem:
 1DD: 7A                       DEC   queue_len,x     ; decrement queue length
 1DE: E6 03                    LDA   queue_get,x     ; 8 bits offset
 1E0: 4C                       INCA
 1E1: E7 03                    STA   queue_get,x     ; update get pointer
 1E3: E1 01                    CMP   queue_size,x
 1E5: 25 02                    BLO   queue_remove_elem
 1E7: 6F 03                    CLR   queue_get,x
 1E9:          queue_remove_elem:
 1E9: 4A                       DECA                  ; restore get pointer
 1EA: AB 04                    ADD   #queue_buf
 1EC: CF 01 D7                 STX   queue_remove_X  ; save X
 1EF: CB 01 D7                 ADD   queue_remove_X
 1F2: 97                       TAX
 1F3: F6                       LDA   ,x              ; get element
 1F4: CE 01 D7                 LDX   queue_remove_X  ; restore X
 1F7: 99                       SEC                   ; set carry
 1F8:          queue_remove_return:
 1F8: 81                       RTS
 1F9:
 1F9:          ;;; Local Variables:
 1F9:          ;;; mode: asm
 1F9:          ;;; End:
 1F9:          ;;; vim: set ft=asm et ts=4 sw=4:
 1F9:
 1F9:          isr_irq:
 1F9: C6 17 F8                 LDA   ACIA_status
 1FC: A5 80                    BIT   #IRQF_bm
 1FE: 27 23                    BEQ   isr_irq_return
 200:          isr_irq_receive:
 200: A5 01                    BIT   #RDRF_bm
 202: 27 08                    BEQ   isr_irq_recv_end
 204: C6 17 F9                 LDA   ACIA_data       ; receive character
 207: AE 21                    LDX   #rx_queue
 209: CD 01 AD                 JSR   queue_add
 20C:          isr_irq_recv_end:
 20C:          isr_irq_send:
 20C: A5 02                    BIT   #TDRE_bm
 20E: 27 13                    BEQ   isr_irq_send_end
 210: AE 31                    LDX   #tx_queue
 212: CD 01 D8                 JSR   queue_remove
 215: 24 05                    BCC   isr_irq_send_empty
 217: C7 17 F9                 STA   ACIA_data       ; send character
 21A: 20 07                    BRA   isr_irq_send_end
 21C:          isr_irq_send_empty:
 21C: A6 94                    LDA   #RX_INT_TX_NO
 21E: C7 17 F8                 STA   ACIA_control    ; disable Tx interrupt
 221: 3F 51                    CLR   tx_int_control
 223:          isr_irq_send_end:
 223:          isr_irq_return:
 223: 80                       RTI
 224:
1FFA:                          ORG   VEC_IRQ
1FFA: 01 F9                    FDB   isr_irq
1FFC:
1FFE:                          ORG   VEC_RESET
1FFE: 01 00                    FDB   initialize

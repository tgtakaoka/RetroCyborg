          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     6502
          0 :                            .include "mos6502.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MOS6502
(1)       0 :                    ;;; Processor Status Register P
(1)       0 : =1                 P_CARRY         =       %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 P_ZERO          =       %00000010   ; set to 1 if result is zero
(1)       0 : =4                 P_IRQ           =       %00000100   ; if 1, IRQ is disabled
(1)       0 : =8                 P_DECIMAL       =       %00001000   ; if 1, decimal mode
(1)       0 : =10                P_BRK           =       %00010000   ; if 1, BRK command
(1)       0 : =2                 P_OVERFLOW      =       %00000010   ; set to 1 if overflow occurred
(1)       0 : =8                 P_NEGATIVE      =       %00001000   ; set to 1 if result is negative
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =FFFA              VEC_NMI         =       $FFFA  ; $FFFA: Non Maskable Interrupt
(1)       0 : =FFFC              VEC_RESET       =       $FFFC  ; $FFFE: Reset
(1)       0 : =FFFE              VEC_IRQ         =       $FFFE  ; $FFFE: Interrupt Request and BRK command
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA    =       $DF00
          0 :                            .include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control    =       ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm          =       %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc     =       %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc    =       %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc    =       %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc    =       %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm          =       %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc      =       %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc      =       %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc      =       %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc      =       %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc      =       %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc      =       %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc      =       %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc      =       %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm          =       %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc       =       %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc       =       %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc      =       %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc    =       %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm         =       %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status     =       ACIA+0
(1)       0 : =1                 RDRF_bm         =       %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm         =       %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm         =       %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm         =       %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm         =       %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm         =       %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm         =       %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm         =       %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data       =       ACIA+1          ; Data register
          0 :
       FFFC :                            *=      VEC_RESET
       FFFC : 00 10                      .word   initialize
       FFFE :
       FFFE :                    ;;; Work area for arith.inc
         10 :                            *=      $10
         10 :                    R0:
         10 : 00                 R0L:    .byte   0
         11 : 00                 R0H:    .byte   0
         12 :                    R1:
         12 : 00                 R1L:    .byte   0
         13 : 00                 R1H:    .byte   0
         14 :                    R2:
         14 : 00                 R2L:    .byte   0
         15 : 00                 R2H:    .byte   0
         16 :                    arith_work:
         16 : 00 00                      .word   0
         18 :
       1000 :                            *=      $1000
       1000 : =1FF               stack   =       $01ff
       1000 :                    initialize:
       1000 : A2 FF                      ldx     #stack & 0xFF
       1002 : 9A                         txs
       1003 : D8                         cld                     ; clear decimal flag
       1004 : A9 03                      lda     #CDS_RESET_gc   ; Master reset
       1006 : 8D 00 DF                   sta     ACIA_control
       1009 : A9 14                      lda     #WSB_8N1_gc     ; 8 bits + No Parity + 1 Stop Bits
       100B :                                                    ; Transmit, Receive interrupts disabled
       100B : 8D 00 DF                   sta     ACIA_control
       100E :
       100E : 20 7E 10                   jsr     arith
       1011 : 00                         brk
       1012 : 00                         .byte   0               ; halt to system
       1013 :
       1013 :                    ;;; Print out char
       1013 :                    ;;; @param A char
       1013 :                    ;;; @clobber A
       1013 :                    putchar:
       1013 : 48                         pha                     ; save A
       1014 :                    putchar_loop:
       1014 : AD 00 DF                   lda     ACIA_status
       1017 : 29 02                      and     #TDRE_bm
       1019 : F0 F9                      beq     putchar_loop
       101B : 68                         pla                     ; restore A
       101C : 8D 01 DF                   sta     ACIA_data
       101F : 60                         rts
       1020 :
       1020 :                    newline:
       1020 : A9 0D                      lda     #$0D
       1022 : 20 13 10                   jsr     putchar
       1025 : A9 0A                      lda     #$0A
       1027 : D0 EA                      bne     putchar         ; always branch
       1029 :
       1029 :                    putspace:
       1029 : A9 20                      lda     #' '
       102B : D0 E6                      bne     putchar         ; always branch
       102D :
       102D :                    ;;; Print "R1 op R2"
       102D :                    ;;; @params A op letter
       102D :                    ;;; @clobber R0
       102D :                    expr:
       102D : 48                         pha                     ; save op letter
       102E : A5 13                      lda     R1H
       1030 : A6 12                      ldx     R1L
       1032 : 85 11                      sta     R0H
       1034 : 86 10                      stx     R0L
       1036 : 20 A7 12                   jsr     print_int16
       1039 : 20 29 10                   jsr     putspace
       103C : 68                         pla                     ; restore op letter
       103D : 20 13 10                   jsr     putchar
       1040 : 20 29 10                   jsr     putspace
       1043 : A5 15                      lda     R2H
       1045 : A6 14                      ldx     R2L
       1047 : 85 11                      sta     R0H
       1049 : 86 10                      stx     R0L
       104B : 4C A7 12                   jmp     print_int16
       104E :
       104E :                    ;;; Print " = R0\n"
       104E :                    answer:
       104E : 20 29 10                   jsr     putspace
       1051 : A9 3D                      lda     #'='
       1053 : 20 13 10                   jsr     putchar
       1056 : 20 29 10                   jsr     putspace
       1059 : 20 A7 12                   jsr     print_int16
       105C : 4C 20 10                   jmp     newline
       105F :
       105F :                    ;;; Print "R1 rel R2"
       105F :                    ;;; @clobber R0 R1 R2
       105F :                    comp:
       105F : 20 65 13                   jsr     cmpsi2
       1062 : A5 10                      lda     R0L
       1064 : F0 0C                      beq     comp_eq
       1066 : 30 0E                      bmi     comp_lt
       1068 : 10 04                      bpl     comp_gt
       106A : A9 3F                      lda     #'?'
       106C : D0 0A                      bne     comp_out        ; always branch
       106E :                    comp_gt:
       106E : A9 3E                      lda     #'>'
       1070 : D0 06                      bne     comp_out
       1072 :                    comp_eq:
       1072 : A9 3D                      lda     #'='
       1074 : D0 02                      bne     comp_out
       1076 :                    comp_lt:
       1076 : A9 3C                      lda     #'<'
       1078 :                    comp_out:
       1078 : 20 2D 10                   jsr     expr
       107B : 4C 20 10                   jmp     newline
       107E :
       107E :                    arith:
       107E : 20 D1 12                   jsr     set_R1
       1081 : 50 46                      .word   18000
       1083 : 20 D6 12                   jsr     set_R2
       1086 : 60 6D                      .word   28000
       1088 : A9 2B                      lda     #'+'
       108A : 20 2D 10                   jsr     expr
       108D : 20 49 13                   jsr     addsi2
       1090 : 20 4E 10                   jsr     answer          ; -19536
       1093 :
       1093 : 20 D1 12                   jsr     set_R1
       1096 : 50 46                      .word   18000
       1098 : 20 D6 12                   jsr     set_R2
       109B : B0 B9                      .word   -18000
       109D : A9 2B                      lda     #'+'
       109F : 20 2D 10                   jsr     expr
       10A2 : 20 49 13                   jsr     addsi2
       10A5 : 20 4E 10                   jsr     answer          ; 0
       10A8 :
       10A8 : 20 D1 12                   jsr     set_R1
       10AB : B0 B9                      .word   -18000
       10AD : 20 D6 12                   jsr     set_R2
       10B0 : B0 B9                      .word   -18000
       10B2 : A9 2B                      lda     #'+'
       10B4 : 20 2D 10                   jsr     expr
       10B7 : 20 49 13                   jsr     addsi2
       10BA : 20 4E 10                   jsr     answer          ; 29536
       10BD :
       10BD : 20 D1 12                   jsr     set_R1
       10C0 : B0 B9                      .word   -18000
       10C2 : 20 D6 12                   jsr     set_R2
       10C5 : A0 92                      .word   -28000
       10C7 : A9 2D                      lda     #'-'
       10C9 : 20 2D 10                   jsr     expr
       10CC : 20 57 13                   jsr     subsi2
       10CF : 20 4E 10                   jsr     answer          ; -19536
       10D2 :
       10D2 : 20 D1 12                   jsr     set_R1
       10D5 : 50 46                      .word   18000
       10D7 : 20 D6 12                   jsr     set_R2
       10DA : B0 B9                      .word   -18000
       10DC : A9 2D                      lda     #'-'
       10DE : 20 2D 10                   jsr     expr
       10E1 : 20 57 13                   jsr     subsi2
       10E4 : 20 4E 10                   jsr     answer          ; 29536
       10E7 :
       10E7 : 20 D1 12                   jsr     set_R1
       10EA : A0 92                      .word   -28000
       10EC : 20 D6 12                   jsr     set_R2
       10EF : B0 B9                      .word   -18000
       10F1 : A9 2D                      lda     #'-'
       10F3 : 20 2D 10                   jsr     expr
       10F6 : 20 57 13                   jsr     subsi2
       10F9 : 20 4E 10                   jsr     answer          ; -10000
       10FC :
       10FC : 20 D1 12                   jsr     set_R1
       10FF : 64 00                      .word   100
       1101 : 20 D6 12                   jsr     set_R2
       1104 : 2C 01                      .word   300
       1106 : A9 2A                      lda     #'*'
       1108 : 20 2D 10                   jsr     expr
       110B : 20 B8 13                   jsr     mulsi2
       110E : 20 4E 10                   jsr     answer          ; 30000
       1111 :
       1111 : 20 D1 12                   jsr     set_R1
       1114 : C8 00                      .word   200
       1116 : 20 D6 12                   jsr     set_R2
       1119 : 64 00                      .word   100
       111B : A9 2A                      lda     #'*'
       111D : 20 2D 10                   jsr     expr
       1120 : 20 B8 13                   jsr     mulsi2
       1123 : 20 4E 10                   jsr     answer          ; 20000
       1126 :
       1126 : 20 D1 12                   jsr     set_R1
       1129 : 2C 01                      .word   300
       112B : 20 D6 12                   jsr     set_R2
       112E : 38 FF                      .word   -200
       1130 : A9 2A                      lda     #'*'
       1132 : 20 2D 10                   jsr     expr
       1135 : 20 B8 13                   jsr     mulsi2
       1138 : 20 4E 10                   jsr     answer          ; 5536
       113B :
       113B : 20 D1 12                   jsr     set_R1
       113E : 64 00                      .word   100
       1140 : 20 D6 12                   jsr     set_R2
       1143 : D4 FE                      .word   -300
       1145 : A9 2A                      lda     #'*'
       1147 : 20 2D 10                   jsr     expr
       114A : 20 B8 13                   jsr     mulsi2
       114D : 20 4E 10                   jsr     answer          ; -30000
       1150 :
       1150 : 20 D1 12                   jsr     set_R1
       1153 : 38 FF                      .word   -200
       1155 : 20 D6 12                   jsr     set_R2
       1158 : 9C FF                      .word   -100
       115A : A9 2A                      lda     #'*'
       115C : 20 2D 10                   jsr     expr
       115F : 20 B8 13                   jsr     mulsi2
       1162 : 20 4E 10                   jsr     answer          ; 20000
       1165 :
       1165 : 20 D1 12                   jsr     set_R1
       1168 : 30 75                      .word   30000
       116A : 20 D6 12                   jsr     set_R2
       116D : 64 00                      .word   100
       116F : A9 2F                      lda     #'/'
       1171 : 20 2D 10                   jsr     expr
       1174 : 20 2C 14                   jsr     divsi2
       1177 : 20 4E 10                   jsr     answer          ; 300
       117A :
       117A : 20 D1 12                   jsr     set_R1
       117D : 38 FF                      .word   -200
       117F : 20 D6 12                   jsr     set_R2
       1182 : 64 00                      .word   100
       1184 : A9 2F                      lda     #'/'
       1186 : 20 2D 10                   jsr     expr
       1189 : 20 2C 14                   jsr     divsi2
       118C : 20 4E 10                   jsr     answer          ; -2
       118F :
       118F : 20 D1 12                   jsr     set_R1
       1192 : D0 8A                      .word   -30000
       1194 : 20 D6 12                   jsr     set_R2
       1197 : 38 FF                      .word   -200
       1199 : A9 2F                      lda     #'/'
       119B : 20 2D 10                   jsr     expr
       119E : 20 2C 14                   jsr     divsi2
       11A1 : 20 4E 10                   jsr     answer          ; 150
       11A4 :
       11A4 : 20 D1 12                   jsr     set_R1
       11A7 : D0 8A                      .word   -30000
       11A9 : 20 D6 12                   jsr     set_R2
       11AC : 4E 00                      .word   78
       11AE : A9 2F                      lda     #'/'
       11B0 : 20 2D 10                   jsr     expr
       11B3 : 20 2C 14                   jsr     divsi2
       11B6 : 20 4E 10                   jsr     answer          ; -384
       11B9 :
       11B9 : 20 D1 12                   jsr     set_R1
       11BC : 88 13                      .word   5000
       11BE : 20 D6 12                   jsr     set_R2
       11C1 : A0 0F                      .word   4000
       11C3 : 20 5F 10                   jsr     comp
       11C6 :
       11C6 : 20 D1 12                   jsr     set_R1
       11C9 : 88 13                      .word   5000
       11CB : 20 D6 12                   jsr     set_R2
       11CE : 88 13                      .word   5000
       11D0 : 20 5F 10                   jsr     comp
       11D3 :
       11D3 : 20 D1 12                   jsr     set_R1
       11D6 : A0 0F                      .word   4000
       11D8 : 20 D6 12                   jsr     set_R2
       11DB : 88 13                      .word   5000
       11DD : 20 5F 10                   jsr     comp
       11E0 :
       11E0 : 20 D1 12                   jsr     set_R1
       11E3 : 78 EC                      .word   -5000
       11E5 : 20 D6 12                   jsr     set_R2
       11E8 : 60 F0                      .word   -4000
       11EA : 20 5F 10                   jsr     comp
       11ED :
       11ED : 20 D1 12                   jsr     set_R1
       11F0 : 78 EC                      .word   -5000
       11F2 : 20 D6 12                   jsr     set_R2
       11F5 : 78 EC                      .word   -5000
       11F7 : 20 5F 10                   jsr     comp
       11FA :
       11FA : 20 D1 12                   jsr     set_R1
       11FD : 60 F0                      .word   -4000
       11FF : 20 D6 12                   jsr     set_R2
       1202 : 78 EC                      .word   -5000
       1204 : 20 5F 10                   jsr     comp
       1207 :
       1207 : 20 D1 12                   jsr     set_R1
       120A : BC 7F                      .word   32700
       120C : 20 D6 12                   jsr     set_R2
       120F : 58 7F                      .word   32600
       1211 : 20 5F 10                   jsr     comp
       1214 :
       1214 : 20 D1 12                   jsr     set_R1
       1217 : BC 7F                      .word   32700
       1219 : 20 D6 12                   jsr     set_R2
       121C : BC 7F                      .word   32700
       121E : 20 5F 10                   jsr     comp
       1221 :
       1221 : 20 D1 12                   jsr     set_R1
       1224 : 58 7F                      .word   32600
       1226 : 20 D6 12                   jsr     set_R2
       1229 : BC 7F                      .word   32700
       122B : 20 5F 10                   jsr     comp
       122E :
       122E : 20 D1 12                   jsr     set_R1
       1231 : 44 80                      .word   -32700
       1233 : 20 D6 12                   jsr     set_R2
       1236 : A8 80                      .word   -32600
       1238 : 20 5F 10                   jsr     comp
       123B :
       123B : 20 D1 12                   jsr     set_R1
       123E : 44 80                      .word   -32700
       1240 : 20 D6 12                   jsr     set_R2
       1243 : 44 80                      .word   -32700
       1245 : 20 5F 10                   jsr     comp
       1248 :
       1248 : 20 D1 12                   jsr     set_R1
       124B : A8 80                      .word   -32600
       124D : 20 D6 12                   jsr     set_R2
       1250 : 44 80                      .word   -32700
       1252 : 20 5F 10                   jsr     comp
       1255 :
       1255 : 20 D1 12                   jsr     set_R1
       1258 : 50 46                      .word   18000
       125A : 20 D6 12                   jsr     set_R2
       125D : A0 92                      .word   -28000
       125F : 20 5F 10                   jsr     comp
       1262 :
       1262 : 20 D1 12                   jsr     set_R1
       1265 : A0 92                      .word   -28000
       1267 : 20 D6 12                   jsr     set_R2
       126A : A0 92                      .word   -28000
       126C : 20 5F 10                   jsr     comp
       126F :
       126F : 20 D1 12                   jsr     set_R1
       1272 : A0 92                      .word   -28000
       1274 : 20 D6 12                   jsr     set_R2
       1277 : 50 46                      .word   18000
       1279 : 20 5F 10                   jsr     comp
       127C :
       127C : 60                         rts
       127D :
       127D :                            .include "arith.inc"
(1)    127D :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    127D :                            cpu     6502
(1)    127D :
(1)    127D :                    ;;; Print unsigned 16-bit integer as decimal
(1)    127D :                    ;;; @param R0 value
(1)    127D :                    ;;; @clobber R0 R1 R2
(1)    127D :                    print_uint16:
(1)    127D : A5 11                      lda     R0H
(1)    127F : 05 10                      ora     R0L
(1)    1281 : F0 1E                      beq     print_uint16_digit ; branch if value==0
(1)    1283 :                    print_uint16_inner:
(1)    1283 : A5 11                      lda     R0H
(1)    1285 : A6 10                      ldx     R0L
(1)    1287 : 85 13                      sta     R1H
(1)    1289 : 86 12                      stx     R1L
(1)    128B : 05 10                      ora     R0L
(1)    128D : F0 17                      beq     print_uint16_exit
(1)    128F : A9 00                      lda     #0
(1)    1291 : A2 0A                      ldx     #10
(1)    1293 : 85 15                      sta     R2H
(1)    1295 : 86 14                      stx     R2L             ; divisor=10
(1)    1297 : 20 DB 13                   jsr     udiv16          ; R0=value/10
(1)    129A : A5 12                      lda     R1L
(1)    129C : 48                         pha                     ; push reminder
(1)    129D : 20 83 12                   jsr     print_uint16_inner
(1)    12A0 : 68                         pla                     ; pop reminder
(1)    12A1 :                    print_uint16_digit:
(1)    12A1 : 09 30                      ora     #'0'
(1)    12A3 : 4C 13 10                   jmp     putchar
(1)    12A6 :                    print_uint16_exit:
(1)    12A6 : 60                         rts
(1)    12A7 :
(1)    12A7 :                    ;;; Print signed 16-bit integer as decimal
(1)    12A7 :                    ;;; @param R0 value
(1)    12A7 :                    ;;; @clobber R0
(1)    12A7 :                    print_int16:
(1)    12A7 : A5 13                      lda     R1H
(1)    12A9 : 48                         pha
(1)    12AA : A5 12                      lda     R1L
(1)    12AC : 48                         pha
(1)    12AD : A5 15                      lda     R2H
(1)    12AF : 48                         pha
(1)    12B0 : A5 14                      lda     R2L
(1)    12B2 : 48                         pha
(1)    12B3 : A5 11                      lda     R0H
(1)    12B5 : 10 0A                      bpl     print_value
(1)    12B7 : A9 2D                      lda     #'-'
(1)    12B9 : 20 13 10                   jsr     putchar
(1)    12BC : A2 10                      ldx     #R0
(1)    12BE : 20 3B 13                   jsr     neg16           ; negate R0
(1)    12C1 :                    print_value:
(1)    12C1 : 20 7D 12                   jsr     print_uint16
(1)    12C4 : 68                         pla
(1)    12C5 : 85 14                      sta     R2L
(1)    12C7 : 68                         pla
(1)    12C8 : 85 15                      sta     R2H
(1)    12CA : 68                         pla
(1)    12CB : 85 12                      sta     R1L
(1)    12CD : 68                         pla
(1)    12CE : 85 13                      sta     R1H
(1)    12D0 : 60                         rts
(1)    12D1 :
(1)    12D1 :                    ;;; Set constant to R1
(1)    12D1 :                    ;;;     jsr     set_R1
(1)    12D1 :                    ;;;     .word   constant
(1)    12D1 :                    ;;; @clobber A Y
(1)    12D1 :                    set_R1:
(1)    12D1 : A2 12                      ldx     #R1
(1)    12D3 : 4C DB 12                   jmp     set_RX
(1)    12D6 :
(1)    12D6 :                    ;;; Set constant to R2
(1)    12D6 :                    ;;;     jsr     set_R2
(1)    12D6 :                    ;;;     .word   constant
(1)    12D6 :                    ;;; @clobber A Y
(1)    12D6 :                    set_R2:
(1)    12D6 : A2 14                      ldx     #R2
(1)    12D8 : 4C DB 12                   jmp     set_RX
(1)    12DB :
(1)    12DB :                    ;;; Set constant to RX
(1)    12DB :                    ;;;     ldx     #Rx
(1)    12DB :                    ;;;     jsr     set_RX
(1)    12DB :                    ;;;     .word   constant
(1)    12DB :                    ;;; @clobber A Y
(1)    12DB :                    set_RX:
(1)    12DB : 68                         pla
(1)    12DC : 85 16                      sta     arith_work
(1)    12DE : 68                         pla
(1)    12DF : 85 17                      sta     arith_work+1
(1)    12E1 : A0 01                      ldy     #1
(1)    12E3 : B1 16                      lda     (arith_work),Y
(1)    12E5 : 95 00                      sta     0,X
(1)    12E7 : C8                         iny
(1)    12E8 : B1 16                      lda     (arith_work),Y
(1)    12EA : 95 01                      sta     1,X
(1)    12EC : 18                         clc
(1)    12ED : A5 16                      lda     arith_work
(1)    12EF : 69 03                      adc     #3
(1)    12F1 : 85 16                      sta     arith_work
(1)    12F3 : A5 17                      lda     arith_work+1
(1)    12F5 : 69 00                      adc     #0
(1)    12F7 : 85 17                      sta     arith_work+1
(1)    12F9 : 6C 16 00                   jmp     (arith_work)
(1)    12FC :
(1)    12FC :                    ;;; Store R0 to R1
(1)    12FC :                    store_R1:
(1)    12FC : A5 10                      lda     R0L
(1)    12FE : 85 12                      sta     R1L
(1)    1300 : A5 11                      lda     R0H
(1)    1302 : 85 13                      sta     R1H
(1)    1304 : 60                         rts
(1)    1305 :
(1)    1305 :                    ;;; Store R0 to R2
(1)    1305 :                    store_R2:       
(1)    1305 : A5 10                      lda     R0L
(1)    1307 : 85 14                      sta     R2L
(1)    1309 : A5 11                      lda     R0H
(1)    130B : 85 15                      sta     R2H
(1)    130D : 60                         rts
(1)    130E :
(1)    130E :                    ;;; Store R0 to variable
(1)    130E :                    ;;; @param R0
(1)    130E :                    ;;; @param X &variable
(1)    130E :                    store_RX:
(1)    130E : A5 10                      lda     R0L
(1)    1310 : 95 00                      sta     0,X
(1)    1312 : A5 11                      lda     R0H
(1)    1314 : 95 01                      sta     1,X
(1)    1316 : 60                         rts
(1)    1317 :
(1)    1317 :                    ;;; Load variable to R0
(1)    1317 :                    ;;; @param X &variable
(1)    1317 :                    ;;; @return R0 variable
(1)    1317 :                    load_R0:
(1)    1317 : B5 00                      lda     0,X
(1)    1319 : 85 10                      sta     R0L
(1)    131B : B5 01                      lda     1,X
(1)    131D : 85 11                      sta     R0H
(1)    131F : 60                         rts
(1)    1320 :
(1)    1320 :                    ;;; Load variable to R1
(1)    1320 :                    ;;; @param X &variable
(1)    1320 :                    ;;; @return R1 variable
(1)    1320 :                    load_R1:
(1)    1320 : B5 00                      lda     0,X
(1)    1322 : 85 12                      sta     R1L
(1)    1324 : B5 01                      lda     1,X
(1)    1326 : 85 13                      sta     R1H
(1)    1328 : 60                         rts
(1)    1329 :
(1)    1329 :                    ;;; Load variable to R2
(1)    1329 :                    ;;; @param X &variable
(1)    1329 :                    ;;; @return R2 variable
(1)    1329 :                    load_R2:
(1)    1329 : B5 00                      lda     0,X
(1)    132B : 85 14                      sta     R2L
(1)    132D : B5 01                      lda     1,X
(1)    132F : 85 15                      sta     R2H
(1)    1331 : 60                         rts
(1)    1332 :
(1)    1332 :                    ;;; Sign extend A into X
(1)    1332 :                    ;;; @param A 8-bit value
(1)    1332 :                    ;;; @return X:A sign extended 16-bit value
(1)    1332 :                    sex_A:  
(1)    1332 : A2 00                      ldx     #0
(1)    1334 : 09 00                      ora     #0
(1)    1336 : 10 02                      bpl     sex_A_return
(1)    1338 : A2 FF                      ldx     #-1
(1)    133A :                    sex_A_return:
(1)    133A : 60                         rts
(1)    133B :
(1)    133B :                    ;;; Negate
(1)    133B :                    ;;; @param X point to value
(1)    133B :                    ;;; @clobber A
(1)    133B :                    neg16:
(1)    133B : 38                         sec
(1)    133C : A9 00                      lda     #0
(1)    133E : F5 00                      sbc     0,x
(1)    1340 : 95 00                      sta     0,x
(1)    1342 : A9 00                      lda     #0
(1)    1344 : F5 01                      sbc     1,x
(1)    1346 : 95 01                      sta     1,x
(1)    1348 : 60                         rts
(1)    1349 :
(1)    1349 :                    ;;; Addition
(1)    1349 :                    ;;; @param R1 summand
(1)    1349 :                    ;;; @param R2 addend
(1)    1349 :                    ;;; @return R0 R1+R2
(1)    1349 :                    addsi2:
(1)    1349 : 18                         clc
(1)    134A : A5 12                      lda     R1L
(1)    134C : 65 14                      adc     R2L
(1)    134E : 85 10                      sta     R0L
(1)    1350 : A5 13                      lda     R1H
(1)    1352 : 65 15                      adc     R2H
(1)    1354 : 85 11                      sta     R0H
(1)    1356 : 60                         rts
(1)    1357 :
(1)    1357 :                    ;;; Subtraction
(1)    1357 :                    ;;; @param R1 minuend
(1)    1357 :                    ;;; @param R2 subtrahend
(1)    1357 :                    ;;; @return R0 R1+R2
(1)    1357 :                    subsi2:
(1)    1357 : 38                         sec
(1)    1358 : A5 12                      lda     R1L
(1)    135A : E5 14                      sbc     R2L
(1)    135C : 85 10                      sta     R0L
(1)    135E : A5 13                      lda     R1H
(1)    1360 : E5 15                      sbc     R2H
(1)    1362 : 85 11                      sta     R0H
(1)    1364 : 60                         rts
(1)    1365 :
(1)    1365 :                    ;;; Signed compare helper
(1)    1365 :                    ;;; @param R0 minuend-subtrahend
(1)    1365 :                    ;;; @param R1 minuend
(1)    1365 :                    ;;; @param R2 subtrahend
(1)    1365 :                    ;;; @return R0=0;  BZ (minuend == subtrahend)
(1)    1365 :                    ;;;         R0=1;  BP (minuend > subtrahend)
(1)    1365 :                    ;;;         R0=-1; BM (minuend < subtrahend)
(1)    1365 :                    cmpsi2:
(1)    1365 : 38                         sec
(1)    1366 : A5 12                      lda     R1L
(1)    1368 : E5 14                      sbc     R2L
(1)    136A : 85 10                      sta     R0L
(1)    136C : A5 13                      lda     R1H
(1)    136E : E5 15                      sbc     R2H
(1)    1370 : 85 11                      sta     R0H             ; R0=R1-R2
(1)    1372 : 05 10                      ora     R0L
(1)    1374 : F0 17                      beq     cmpsi2_return   ; return with R0=0
(1)    1376 : A5 11                      lda     R0H
(1)    1378 : 70 0B                      bvs     cmpsi2_ov       ; branch if V=1
(1)    137A : 30 0B                      bmi     cmpsi2_lt       ; branch if V=0, N=1
(1)    137C :                    cmpsi2_gt:
(1)    137C : A9 00                      lda     #0              ; N^V=0
(1)    137E : 85 11                      sta     R0H
(1)    1380 : A9 01                      lda     #1
(1)    1382 : 85 10                      sta     R0L
(1)    1384 : 60                         rts
(1)    1385 :                    cmpsi2_ov:
(1)    1385 : 30 F5                      bmi     cmpsi2_gt       ; branch if V=1, N=1
(1)    1387 :                    cmpsi2_lt:
(1)    1387 : A9 FF                      lda     #-1             ; N^V=1
(1)    1389 : 85 11                      sta     R0H
(1)    138B : 85 10                      sta     R0L             ; R0=-1
(1)    138D :                    cmpsi2_return:
(1)    138D : 60                         rts
(1)    138E :
(1)    138E :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    138E :                    ;;; @param R1 multiplicand
(1)    138E :                    ;;; @param R2 multiplier
(1)    138E :                    ;;; @return R0 result
(1)    138E :                    ;;; @clobber R0 R1 R2
(1)    138E :                    umul16:
(1)    138E : A9 00                      lda     #0
(1)    1390 : 85 11                      sta     R0H
(1)    1392 : 85 10                      sta     R0L
(1)    1394 : F0 1B                      beq     umul16_check    ; always branch
(1)    1396 :                    umul16_loop:
(1)    1396 : A5 14                      lda     R2L
(1)    1398 : 29 01                      and     #1
(1)    139A : F0 0D                      beq     umul16_sr
(1)    139C : A5 12                      lda     R1L
(1)    139E : 18                         clc
(1)    139F : 65 10                      adc     R0L
(1)    13A1 : 85 10                      sta     R0L
(1)    13A3 : A5 13                      lda     R1H
(1)    13A5 : 65 11                      adc     R0H
(1)    13A7 : 85 11                      sta     R0H             ; result += multiplicand
(1)    13A9 :                    umul16_sr:
(1)    13A9 : 46 15                      lsr     R2H
(1)    13AB : 66 14                      ror     R2L             ; multiplier >>= 1
(1)    13AD : 06 12                      asl     R1L
(1)    13AF : 26 13                      rol     R1H             ; multilplicand <<= 1
(1)    13B1 :                    umul16_check:
(1)    13B1 : A5 15                      lda     R2H
(1)    13B3 : 05 14                      ora     R2L
(1)    13B5 : D0 DF                      bne     umul16_loop     ; while multiplier != 0
(1)    13B7 :                    umul16_end:
(1)    13B7 : 60                         rts
(1)    13B8 :
(1)    13B8 :                    ;;; Multiply helper
(1)    13B8 :                    ;;; @param R1 multiplicand
(1)    13B8 :                    ;;; @param R2 multiplier
(1)    13B8 :                    ;;; @return R0 multiplicand * multiplier
(1)    13B8 :                    ;;; @clobber R1 R2
(1)    13B8 :                    mulsi2:
(1)    13B8 : A5 13                      lda     R1H
(1)    13BA : 45 15                      eor     R2H
(1)    13BC : 48                         pha                     ; save hi(multiplicand^multiplier)
(1)    13BD : A5 15                      lda     R2H             ; A=hi(multiplier)
(1)    13BF : 10 05                      bpl     mulsi2_multiplicand
(1)    13C1 : A2 14                      ldx     #R2
(1)    13C3 : 20 3B 13                   jsr     neg16           ; negate multiplier
(1)    13C6 :                    mulsi2_multiplicand:
(1)    13C6 : A5 13                      lda     R1H             ; A=hi(multiplicand)
(1)    13C8 : 10 05                      bpl     mulsi2_multiply
(1)    13CA : A2 12                      ldx     #R1
(1)    13CC : 20 3B 13                   jsr     neg16           ; negate multiplicand
(1)    13CF :                    mulsi2_multiply:
(1)    13CF : 20 8E 13                   jsr     umul16          ; R0=result
(1)    13D2 : 68                         pla                     ; A=(multiplicand^multiplier)
(1)    13D3 : 10 05                      bpl     mulsi2_return
(1)    13D5 : A2 10                      ldx     #R0
(1)    13D7 : 20 3B 13                   jsr     neg16           ; negate result
(1)    13DA :                    mulsi2_return:
(1)    13DA : 60                         rts
(1)    13DB :
(1)    13DB :                    ;;; Unsigned division: dividend / divisor = quotient ... reminder
(1)    13DB :                    ;;; @praram R1 dividend
(1)    13DB :                    ;;; @praram R2 divisor
(1)    13DB :                    ;;; @return R0 quotient
(1)    13DB :                    ;;; @return R1 reminder
(1)    13DB :                    ;;; @clobber R2
(1)    13DB :                    udiv16:
(1)    13DB : A5 15                      lda     R2H
(1)    13DD : 05 14                      ora     R2L
(1)    13DF : F0 4A                      beq     udiv16_return   ; branch if R2==0
(1)    13E1 : A9 01                      lda     #1              ; A=bits
(1)    13E3 : 85 10                      sta     R0L             ; save bits
(1)    13E5 : D0 06                      bne     udiv16_prep     ; always branch
(1)    13E7 :                    udiv16_prep_loop:
(1)    13E7 : 06 14                      asl     R2L
(1)    13E9 : 26 15                      rol     R2H             ; divisor <<= 1
(1)    13EB : E6 10                      inc     R0L             ; ++bits
(1)    13ED :                    udiv16_prep:
(1)    13ED : A5 15                      lda     R2H
(1)    13EF : 10 F6                      bpl     udiv16_prep_loop ; while msb(divisor) == 0
(1)    13F1 : A5 10                      lda     R0L
(1)    13F3 : 48                         pha                     ; push bits
(1)    13F4 : A9 00                      lda     #0
(1)    13F6 : 85 11                      sta     R0H
(1)    13F8 : 85 10                      sta     R0L             ; quotient=0
(1)    13FA : F0 09                      beq     udiv16_enter_loop ; always branch
(1)    13FC :                    udiv16_loop:
(1)    13FC : 48                         pha                     ; save bits
(1)    13FD : 46 15                      lsr     R2H
(1)    13FF : 66 14                      ror     R2L             ; divisor >>= 1
(1)    1401 : 06 10                      asl     R0L
(1)    1403 : 26 11                      rol     R0H             ; quotient <<= 1
(1)    1405 :                    udiv16_enter_loop:
(1)    1405 : A5 12                      lda     R1L
(1)    1407 : 38                         sec
(1)    1408 : E5 14                      sbc     R2L
(1)    140A : 85 12                      sta     R1L
(1)    140C : A5 13                      lda     R1H
(1)    140E : E5 15                      sbc     R2H
(1)    1410 : 85 13                      sta     R1H             ; dividend -= divisor
(1)    1412 : 90 04                      bcc     udiv16_readd
(1)    1414 : E6 10                      inc     R0L             ; quotient |= 1
(1)    1416 : D0 0D                      bne     udiv16_next     ; always branch
(1)    1418 :                    udiv16_readd:
(1)    1418 : A5 12                      lda     R1L
(1)    141A : 18                         clc
(1)    141B : 65 14                      adc     R2L
(1)    141D : 85 12                      sta     R1L
(1)    141F : A5 13                      lda     R1H
(1)    1421 : 65 15                      adc     R2H
(1)    1423 : 85 13                      sta     R1H             ; dividend += divisor
(1)    1425 :                    udiv16_next:
(1)    1425 : 68                         pla
(1)    1426 : 38                         sec
(1)    1427 : E9 01                      sbc     #1              ; --bits
(1)    1429 : D0 D1                      bne     udiv16_loop     ; while bits != 0
(1)    142B :                    udiv16_return:
(1)    142B : 60                         rts
(1)    142C :
(1)    142C :                    ;;; Division helper
(1)    142C :                    ;;; @param R1 dividend
(1)    142C :                    ;;; @param R2 divisor
(1)    142C :                    ;;; @return R0 quotient
(1)    142C :                    ;;; @return R1 reminder
(1)    142C :                    ;;; @clobber R2
(1)    142C :                    divsi2:
(1)    142C : A5 13                      lda     R1H
(1)    142E : 45 15                      eor     R2H
(1)    1430 : 48                         pha                     ; save hi(dividend^divisor)
(1)    1431 : A5 15                      lda     R2H             ; A=hi(divisor)
(1)    1433 : 10 05                      bpl     divsi2_dividend
(1)    1435 : A2 14                      ldx     #R2
(1)    1437 : 20 3B 13                   jsr     neg16           ; negate divisor
(1)    143A :                    divsi2_dividend:
(1)    143A : A5 13                      lda     R1H             ; A=hi(dividend)
(1)    143C : 10 05                      bpl     divsi2_divide
(1)    143E : A2 12                      ldx     #R1
(1)    1440 : 20 3B 13                   jsr     neg16           ; negate dividend
(1)    1443 :                    divsi2_divide:
(1)    1443 : 20 DB 13                   jsr     udiv16          ; R0=result
(1)    1446 : 68                         pla                     ; A=(dividend^divisor)
(1)    1447 : 10 05                      bpl     divsi2_return
(1)    1449 : A2 10                      ldx     #R0L
(1)    144B : 20 3B 13                   jsr     neg16           ; negate result
(1)    144E :                    divsi2_return:
(1)    144E : 60                         rts

          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     6502
          0 :                            .include "mos6502.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MOS6502
(1)       0 :                    ;;; Processor Status Register P
(1)       0 : =1                 P_CARRY         =       %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 P_ZERO          =       %00000010   ; set to 1 if result is zero
(1)       0 : =4                 P_IRQ           =       %00000100   ; if 1, IRQ is disabled
(1)       0 : =8                 P_DECIMAL       =       %00001000   ; if 1, decimal mode
(1)       0 : =10                P_BRK           =       %00010000   ; if 1, BRK command
(1)       0 : =2                 P_OVERFLOW      =       %00000010   ; set to 1 if overflow occurred
(1)       0 : =8                 P_NEGATIVE      =       %00001000   ; set to 1 if result is negative
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =FFFA              VEC_NMI         =       $FFFA  ; $FFFA: Non Maskable Interrupt
(1)       0 : =FFFC              VEC_RESET       =       $FFFC  ; $FFFE: Reset
(1)       0 : =FFFE              VEC_IRQ         =       $FFFE  ; $FFFE: Interrupt Request and BRK command
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA    =       $DF00
          0 :                            .include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control    =       ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm          =       %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc     =       %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc    =       %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc    =       %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc    =       %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm          =       %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc      =       %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc      =       %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc      =       %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc      =       %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc      =       %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc      =       %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc      =       %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc      =       %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm          =       %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc       =       %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc       =       %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc      =       %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc    =       %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm         =       %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status     =       ACIA+0
(1)       0 : =1                 RDRF_bm         =       %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm         =       %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm         =       %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm         =       %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm         =       %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm         =       %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm         =       %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm         =       %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data       =       ACIA+1          ; Data register
          0 : =94                RX_INT_TX_NO    =       WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT   =       WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
       FFFE :                            *=      VEC_IRQ
       FFFE : 67 14                      .word   isr_irq
      10000 :
       FFFC :                            *=      VEC_RESET
       FFFC : 00 10                      .word   initialize
       FFFE :
         80 :                            *=      $80
         80 :                    queue_tmp:
         82 :                            *=      *+2
         82 :                    rx_queue:
         86 :                            *=      *+queue_buf
         86 : 00 20                      .word   $2000
         88 : =80                rx_queue_size   =       128
         88 :                    tx_queue:
         8C :                            *=      *+queue_buf
         8C : 80 20                      .word   $2000 + rx_queue_size
         8E : =80                tx_queue_size   =       128
         8E :
         8E :                    ;;; Work area for arith.inc
         10 :                            *=      $10
         10 :                    R0:
         10 : 00                 R0L:    .byte   0
         11 : 00                 R0H:    .byte   0
         12 :                    R1:
         12 : 00                 R1L:    .byte   0
         13 : 00                 R1H:    .byte   0
         14 :                    R2:
         14 : 00                 R2L:    .byte   0
         15 : 00                 R2H:    .byte   0
         16 :                    arith_work:
         16 : 00 00                      .word   0
         18 :                    ;;; Work area for mandelbrot.inc
         18 : =32                F       =       50
         18 : 00                 vY:     .byte   0
         19 : 00                 vX:     .byte   0
         1A : 00 00              vC:     .word   0
         1C : 00 00              vD:     .word   0
         1E : 00 00              vA:     .word   0
         20 : 00 00              vB:     .word   0
         22 : 00 00              vS:     .word   0
         24 : 00 00              vP:     .word   0
         26 : 00 00              vQ:     .word   0
         28 : 00 00              vT:     .word   0
         2A : 00                 vI:     .byte   0
         2B :
       1000 :                            *=      $1000
       1000 : =1FF               stack   =       $01FF
       1000 :                    initialize:
       1000 : A2 FF                      ldx     #stack & $FF
       1002 : 9A                         txs
       1003 : D8                         cld                     ; clear decimal flag
       1004 : A2 82                      ldx     #rx_queue
       1006 : A9 80                      lda     #rx_queue_size
       1008 : 20 0A 14                   jsr     queue_init
       100B : A2 88                      ldx     #tx_queue
       100D : A9 80                      lda     #tx_queue_size
       100F : 20 0A 14                   jsr     queue_init
       1012 :                            ;; initialize ACIA
       1012 : A9 03                      lda     #CDS_RESET_gc   ; master reset
       1014 : 8D 00 DF                   sta     ACIA_control
       1017 : A9 94                      lda     #RX_INT_TX_NO
       1019 : 8D 00 DF                   sta     ACIA_control
       101C : 58                         cli                     ; enable IRQ
       101D :
       101D : 20 7B 10                   jsr     mandelbrot
       1020 : 00                         brk
       1021 : 00                         .byte   0               ; halt to system
       1022 :
       1022 :                    ;;; Get character
       1022 :                    ;;; @return A
       1022 :                    ;;; @return P.C 1 if no character
       1022 :                    ;;; @clobber X
       1022 :                    getchar:
       1022 : A2 82                      ldx     #rx_queue
       1024 : 78                         sei                     ; disable IRQ
       1025 : 20 48 14                   jsr     queue_remove
       1028 : 58                         cli
       1029 : 60                         rts
       102A :
       102A :                    ;;; Put character
       102A :                    ;;; @param A
       102A :                    ;;; @clobber X
       102A :                    putchar:
       102A : 48                         pha
       102B :                    putchar_retry:
       102B : A2 88                      ldx     #tx_queue
       102D : 78                         sei                     ; disable IRQ
       102E : 20 27 14                   jsr     queue_add
       1031 : 58                         cli                     ; enable IRQ
       1032 : B0 F7                      bcs     putchar_retry   ; queue is full
       1034 : A9 B4                      lda     #RX_INT_TX_INT  ; enable Tx interrupt
       1036 : 8D 00 DF                   sta     ACIA_control
       1039 : 68                         pla
       103A : 60                         rts
       103B :
       103B :                    ;;; Put newline
       103B :                    ;;; @clobber A
       103B :                    newline:
       103B : A9 0D                      lda     #$0D
       103D : 20 2A 10                   jsr     putchar
       1040 : A9 0A                      lda     #$0A
       1042 : 4C 2A 10                   jmp     putchar
       1045 :
       1045 :                    ;;; Put space
       1045 :                    ;;; @clobber A
       1045 :                    putspace:
       1045 : A9 20                      lda     #' '
       1047 : 4C 2A 10                   jmp     putchar
       104A :
       104A :                            .include "mandelbrot.inc"
(1)    104A :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    104A :                            cpu     6502
(1)    104A :
(1)    104A :                    ;;; Print variable: "A=variable "
(1)    104A :                    ;;; @param X &variable
(1)    104A :                    ;;; @param A variable letter
(1)    104A :                    ;;; @clobber R0
(1)    104A :                    print:
(1)    104A : 48                         pha
(1)    104B : B5 00                      lda     0,X
(1)    104D : 85 10                      sta     R0L
(1)    104F : B5 01                      lda     1,X
(1)    1051 : 85 11                      sta     R0H
(1)    1053 : 68                         pla
(1)    1054 : 20 2A 10                   jsr     putchar         ; print variable letter
(1)    1057 : A9 3D                      lda     #'='
(1)    1059 : 20 2A 10                   jsr     putchar         ; '='
(1)    105C : 20 62 12                   jsr     print_int16
(1)    105F : 4C 45 10                   jmp     putspace
(1)    1062 :
(1)    1062 :                    ;;; Print variable: "A=X "
(1)    1062 :                    ;;; @param X variable
(1)    1062 :                    ;;; @param A variable letter
(1)    1062 :                    ;;; @clobber R0
(1)    1062 :                    print_X:
(1)    1062 : 86 10                      stx     R0L
(1)    1064 : 20 2A 10                   jsr     putchar         ; print variable letter
(1)    1067 : A9 3D                      lda     #'='
(1)    1069 : 20 2A 10                   jsr     putchar         ; '='
(1)    106C : A5 10                      lda     R0L
(1)    106E : 20 ED 12                   jsr     sex_A
(1)    1071 : 86 11                      stx     R0H
(1)    1073 : 85 10                      sta     R0L
(1)    1075 : 20 62 12                   jsr     print_int16
(1)    1078 : 4C 45 10                   jmp     putspace
(1)    107B :
(1)    107B :                    mandelbrot:
(1)    107B : A9 F4                      lda     #-12
(1)    107D : 85 18                      sta     vY
(1)    107F :                    loop_y:
(1)    107F : A9 CF                      lda     #-49
(1)    1081 : 85 19                      sta     vX
(1)    1083 :                    loop_x:
(1)    1083 : A5 19                      lda     vX
(1)    1085 : 20 ED 12                   jsr     sex_A
(1)    1088 : 86 13                      stx     R1H
(1)    108A : 85 12                      sta     R1L             ; R1=X
(1)    108C : 20 91 12                   jsr     set_R2
(1)    108F : E5 00                      .word   229             ; R2=229
(1)    1091 : 20 73 13                   jsr     mulsi2          ; R0=X*229
(1)    1094 : 20 B7 12                   jsr     store_R1
(1)    1097 : 20 91 12                   jsr     set_R2
(1)    109A : 64 00                      .word   100
(1)    109C : 20 E7 13                   jsr     divsi2          ; R0=X*229/100
(1)    109F : A2 1A                      ldx     #vC
(1)    10A1 : 20 C9 12                   jsr     store_RX        ; C=X*229/100
(1)    10A4 : A2 1E                      ldx     #vA
(1)    10A6 : 20 C9 12                   jsr     store_RX        ; A=C
(1)    10A9 : A5 18                      lda     vY
(1)    10AB : 20 ED 12                   jsr     sex_A
(1)    10AE : 86 13                      stx     R1H
(1)    10B0 : 85 12                      sta     R1L             ; R1=Y
(1)    10B2 : 20 91 12                   jsr     set_R2
(1)    10B5 : A0 01                      .word   416
(1)    10B7 : 20 73 13                   jsr     mulsi2          ; R0=Y*416
(1)    10BA : 20 B7 12                   jsr     store_R1
(1)    10BD : 20 91 12                   jsr     set_R2
(1)    10C0 : 64 00                      .word   100
(1)    10C2 : 20 E7 13                   jsr     divsi2          ; R0=Y*416/100
(1)    10C5 : A2 1C                      ldx     #vD
(1)    10C7 : 20 C9 12                   jsr     store_RX        ; D=Y*416/100
(1)    10CA : A2 20                      ldx     #vB
(1)    10CC : 20 C9 12                   jsr     store_RX        ; B=D
(1)    10CF : A9 00                      lda     #0
(1)    10D1 : 85 2A                      sta     vI              ; I=0
(1)    10D3 :                            
(1)    10D3 :                            ;; ldx     vY
(1)    10D3 :                            ;; lda     #'Y'
(1)    10D3 :                            ;; jsr     print_X
(1)    10D3 :                            ;; ldx     vX
(1)    10D3 :                            ;; lda     #'X'
(1)    10D3 :                            ;; jsr     print_X
(1)    10D3 :                            ;; ldx     #vC
(1)    10D3 :                            ;; lda     #'C'
(1)    10D3 :                            ;; jsr     print
(1)    10D3 :                            ;; ldx     #vD
(1)    10D3 :                            ;; lda     #'D'
(1)    10D3 :                            ;; jsr     print
(1)    10D3 :                            ;; jsr     newline
(1)    10D3 :
(1)    10D3 :                    loop_i:
(1)    10D3 : A2 20                      ldx     #vB
(1)    10D5 : 20 DB 12                   jsr     load_R1         ; R1=B
(1)    10D8 : 20 91 12                   jsr     set_R2
(1)    10DB : 32 00                      .word   F
(1)    10DD : 20 E7 13                   jsr     divsi2          ; R0=B/F
(1)    10E0 : A2 26                      ldx     #vQ
(1)    10E2 : 20 C9 12                   jsr     store_RX        ; Q=B/F
(1)    10E5 : 20 B7 12                   jsr     store_R1        ; R1=B/F
(1)    10E8 : 20 91 12                   jsr     set_R2
(1)    10EB : 32 00                      .word   F
(1)    10ED : 20 73 13                   jsr     mulsi2          ; R0=Q*F
(1)    10F0 : 20 C0 12                   jsr     store_R2
(1)    10F3 : A2 20                      ldx     #vB
(1)    10F5 : 20 DB 12                   jsr     load_R1         ; R1=B
(1)    10F8 : 20 12 13                   jsr     subsi2          ; R0=B-Q*F
(1)    10FB : A2 22                      ldx     #vS
(1)    10FD : 20 C9 12                   jsr     store_RX        ; S=B-Q*F
(1)    1100 : A2 1E                      ldx     #vA 
(1)    1102 : 20 DB 12                   jsr     load_R1         ; R1=A
(1)    1105 : 20 E4 12                   jsr     load_R2         ; R2=A
(1)    1108 : 20 73 13                   jsr     mulsi2          ; R0=A*A
(1)    110B : A2 28                      ldx     #vT
(1)    110D : 20 C9 12                   jsr     store_RX        ; T=A*A
(1)    1110 : A2 20                      ldx     #vB
(1)    1112 : 20 DB 12                   jsr     load_R1         ; R1=B
(1)    1115 : 20 E4 12                   jsr     load_R2         ; R2=B
(1)    1118 : 20 73 13                   jsr     mulsi2          ; R0=B*B
(1)    111B : 20 C0 12                   jsr     store_R2        ; R2=B*B
(1)    111E : A2 28                      ldx     #vT
(1)    1120 : 20 DB 12                   jsr     load_R1         ; R1=A*A
(1)    1123 : 20 12 13                   jsr     subsi2          ; R0=A*A-B*B
(1)    1126 : 20 B7 12                   jsr     store_R1
(1)    1129 : 20 91 12                   jsr     set_R2
(1)    112C : 32 00                      .word   F
(1)    112E : 20 E7 13                   jsr     divsi2          ; R0=(A*A-B*B)/F
(1)    1131 : 20 B7 12                   jsr     store_R1        ; R1=(A*A-B*B)/F
(1)    1134 : A2 1A                      ldx     #vC
(1)    1136 : 20 E4 12                   jsr     load_R2         ; R2=C
(1)    1139 : 20 04 13                   jsr     addsi2          ; R0=(A*A-B*B)/F+C
(1)    113C : A2 28                      ldx     #vT
(1)    113E : 20 C9 12                   jsr     store_RX        ; T=(A*A-B*B)/F+C
(1)    1141 :
(1)    1141 : A2 1E                      ldx     #vA
(1)    1143 : 20 DB 12                   jsr     load_R1         ; R1=A
(1)    1146 : A2 26                      ldx     #vQ
(1)    1148 : 20 E4 12                   jsr     load_R2         ; R2=Q
(1)    114B : 20 73 13                   jsr     mulsi2          ; R0=A*Q
(1)    114E : A5 11                      lda     R0H
(1)    1150 : 48                         pha
(1)    1151 : A5 10                      lda     R0L
(1)    1153 : 48                         pha                     ; push A*Q
(1)    1154 : A2 1E                      ldx     #vA
(1)    1156 : 20 DB 12                   jsr     load_R1         ; R1=A
(1)    1159 : A2 22                      ldx     #vS
(1)    115B : 20 E4 12                   jsr     load_R2         ; R2=S
(1)    115E : 20 73 13                   jsr     mulsi2          ; R0=A*S
(1)    1161 : 20 B7 12                   jsr     store_R1
(1)    1164 : 20 91 12                   jsr     set_R2
(1)    1167 : 32 00                      .word   F
(1)    1169 : 20 E7 13                   jsr     divsi2          ; R0=A*S/F
(1)    116C : 20 B7 12                   jsr     store_R1        ; R1=A*S/F
(1)    116F : 68                         pla
(1)    1170 : 85 14                      sta     R2L
(1)    1172 : 68                         pla
(1)    1173 : 85 15                      sta     R2H             ; R2=pop A*Q
(1)    1175 : 20 04 13                   jsr     addsi2          ; R0=A*Q+A*S/F
(1)    1178 : 20 B7 12                   jsr     store_R1
(1)    117B : 20 C0 12                   jsr     store_R2
(1)    117E : 20 04 13                   jsr     addsi2          ; R0=2*(A*Q+A*S/F)
(1)    1181 : 20 B7 12                   jsr     store_R1        ; R1=2*(A*Q+A*S/F)
(1)    1184 : A2 1C                      ldx     #vD
(1)    1186 : 20 E4 12                   jsr     load_R2         ; R2=D
(1)    1189 : 20 04 13                   jsr     addsi2          ; R0=2*(A*Q+A*S/F)+D
(1)    118C : A2 20                      ldx     #vB
(1)    118E : 20 C9 12                   jsr     store_RX        ; B=2*(A*Q+A*S/F)+D
(1)    1191 : A6 28                      ldx     vT
(1)    1193 : A5 29                      lda     vT+1
(1)    1195 : 86 1E                      stx     vA
(1)    1197 : 85 1F                      sta     vA+1            ; A=T
(1)    1199 : A2 1E                      ldx     #vA
(1)    119B : 20 DB 12                   jsr     load_R1         ; R1=A
(1)    119E : 20 91 12                   jsr     set_R2
(1)    11A1 : 32 00                      .word   F
(1)    11A3 : 20 E7 13                   jsr     divsi2          ; R0=A/F
(1)    11A6 : A2 24                      ldx     #vP
(1)    11A8 : 20 C9 12                   jsr     store_RX        ; P=A/F
(1)    11AB : A2 20                      ldx     #vB
(1)    11AD : 20 DB 12                   jsr     load_R1         ; R1=B
(1)    11B0 : 20 91 12                   jsr     set_R2
(1)    11B3 : 32 00                      .word   F
(1)    11B5 : 20 E7 13                   jsr     divsi2          ; R0=B/F
(1)    11B8 : A2 26                      ldx     #vQ
(1)    11BA : 20 C9 12                   jsr     store_RX        ; Q=B/F
(1)    11BD :
(1)    11BD :                            ;; jsr     putspace
(1)    11BD :                            ;; ldx     vI
(1)    11BD :                            ;; lda     #'I'
(1)    11BD :                            ;; jsr     print_X
(1)    11BD :                            ;; ldx     #vA
(1)    11BD :                            ;; lda     #'A'
(1)    11BD :                            ;; jsr     print
(1)    11BD :                            ;; ldx     #vB
(1)    11BD :                            ;; lda     #'B'
(1)    11BD :                            ;; jsr     print
(1)    11BD :                            ;; ldx     #vP
(1)    11BD :                            ;; lda     #'P'
(1)    11BD :                            ;; jsr     print
(1)    11BD :                            ;; ldx     #vQ
(1)    11BD :                            ;; lda     #'Q'
(1)    11BD :                            ;; jsr     print
(1)    11BD :                            ;; jsr     newline
(1)    11BD :
(1)    11BD : A2 24                      ldx     #vP
(1)    11BF : 20 DB 12                   jsr     load_R1
(1)    11C2 : 20 E4 12                   jsr     load_R2
(1)    11C5 : 20 73 13                   jsr     mulsi2          ; R0=P*P
(1)    11C8 : A5 11                      lda     R0H
(1)    11CA : 48                         pha
(1)    11CB : A5 10                      lda     R0L
(1)    11CD : 48                         pha                     ; push P*P
(1)    11CE : A2 26                      ldx     #vQ
(1)    11D0 : 20 DB 12                   jsr     load_R1
(1)    11D3 : 20 E4 12                   jsr     load_R2
(1)    11D6 : 20 73 13                   jsr     mulsi2          ; R0=Q*Q
(1)    11D9 : 20 B7 12                   jsr     store_R1
(1)    11DC : 68                         pla
(1)    11DD : 85 14                      sta     R2L
(1)    11DF : 68                         pla
(1)    11E0 : 85 15                      sta     R2H             ; R2=pop P*P
(1)    11E2 : 20 04 13                   jsr     addsi2          ; R0=Q*Q+P*P
(1)    11E5 : 20 C0 12                   jsr     store_R2        ; R2=Q*Q+P*P
(1)    11E8 : 20 8C 12                   jsr     set_R1          ; R1=4
(1)    11EB : 04 00                      .word   4
(1)    11ED : 20 20 13                   jsr     cmpsi2          ; 4-P*P+Q*Q
(1)    11F0 : A5 10                      lda     R0L
(1)    11F2 : 30 0F                      bmi     print_i         ; if 4<P*P+Q*Q
(1)    11F4 : E6 2A                      inc     vI              ; I+=1
(1)    11F6 : A5 2A                      lda     vI
(1)    11F8 : C9 10                      cmp     #16
(1)    11FA : 10 03                      bpl     print_space
(1)    11FC : 4C D3 10                   jmp     loop_i          ; if I<16 loop_i
(1)    11FF :                    print_space:    
(1)    11FF : A9 20                      lda     #' '
(1)    1201 : D0 0F                      bne     print_char      ; always branch
(1)    1203 :                    print_i:
(1)    1203 : A5 2A                      lda     vI
(1)    1205 : 38                         sec
(1)    1206 : E9 0A                      sbc     #10
(1)    1208 : 10 05                      bpl     print_hex
(1)    120A : 18                         clc
(1)    120B : 69 3A                      adc     #10+'0'
(1)    120D : D0 03                      bne     print_char      ; always branch
(1)    120F :                    print_hex:      
(1)    120F : 18                         clc
(1)    1210 : 69 41                      adc     #'A'
(1)    1212 :                    print_char:
(1)    1212 : 20 2A 10                   jsr     putchar
(1)    1215 :
(1)    1215 :                            ;; pha
(1)    1215 :                            ;; lda     #'@'
(1)    1215 :                            ;; jsr     putchar
(1)    1215 :                            ;; lda     #'='
(1)    1215 :                            ;; jsr     putchar
(1)    1215 :                            ;; pla
(1)    1215 :                            ;; jsr     putchar
(1)    1215 :                            ;; jsr     newline
(1)    1215 :
(1)    1215 : 20 22 10                   jsr     getchar
(1)    1218 : B0 04                      bcs     next_x
(1)    121A : 09 00                      ora     #0
(1)    121C : F0 19                      beq     mandelbrot_end  ; break
(1)    121E :                    next_x:
(1)    121E : E6 19                      inc     vX              ; X+=1
(1)    1220 : A5 19                      lda     vX
(1)    1222 : C9 1E                      cmp     #30
(1)    1224 : 10 03                      bpl     next_y          ; if X>=30
(1)    1226 : 4C 83 10                   jmp     loop_x
(1)    1229 :                    next_y: 
(1)    1229 : 20 3B 10                   jsr     newline
(1)    122C : E6 18                      inc     vY              ; Y+=1
(1)    122E : A5 18                      lda     vY
(1)    1230 : C9 0D                      cmp     #13
(1)    1232 : 10 03                      bpl     mandelbrot_end  ; if Y>=13
(1)    1234 : 4C 7F 10                   jmp     loop_y
(1)    1237 :                    mandelbrot_end:
(1)    1237 : 60                         rts
       1238 :                            .include "arith.inc"
(1)    1238 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    1238 :                            cpu     6502
(1)    1238 :
(1)    1238 :                    ;;; Print unsigned 16-bit integer as decimal
(1)    1238 :                    ;;; @param R0 value
(1)    1238 :                    ;;; @clobber R0 R1 R2
(1)    1238 :                    print_uint16:
(1)    1238 : A5 11                      lda     R0H
(1)    123A : 05 10                      ora     R0L
(1)    123C : F0 1E                      beq     print_uint16_digit ; branch if value==0
(1)    123E :                    print_uint16_inner:
(1)    123E : A5 11                      lda     R0H
(1)    1240 : A6 10                      ldx     R0L
(1)    1242 : 85 13                      sta     R1H
(1)    1244 : 86 12                      stx     R1L
(1)    1246 : 05 10                      ora     R0L
(1)    1248 : F0 17                      beq     print_uint16_exit
(1)    124A : A9 00                      lda     #0
(1)    124C : A2 0A                      ldx     #10
(1)    124E : 85 15                      sta     R2H
(1)    1250 : 86 14                      stx     R2L             ; divisor=10
(1)    1252 : 20 96 13                   jsr     udiv16          ; R0=value/10
(1)    1255 : A5 12                      lda     R1L
(1)    1257 : 48                         pha                     ; push reminder
(1)    1258 : 20 3E 12                   jsr     print_uint16_inner
(1)    125B : 68                         pla                     ; pop reminder
(1)    125C :                    print_uint16_digit:
(1)    125C : 09 30                      ora     #'0'
(1)    125E : 4C 2A 10                   jmp     putchar
(1)    1261 :                    print_uint16_exit:
(1)    1261 : 60                         rts
(1)    1262 :
(1)    1262 :                    ;;; Print signed 16-bit integer as decimal
(1)    1262 :                    ;;; @param R0 value
(1)    1262 :                    ;;; @clobber R0
(1)    1262 :                    print_int16:
(1)    1262 : A5 13                      lda     R1H
(1)    1264 : 48                         pha
(1)    1265 : A5 12                      lda     R1L
(1)    1267 : 48                         pha
(1)    1268 : A5 15                      lda     R2H
(1)    126A : 48                         pha
(1)    126B : A5 14                      lda     R2L
(1)    126D : 48                         pha
(1)    126E : A5 11                      lda     R0H
(1)    1270 : 10 0A                      bpl     print_value
(1)    1272 : A9 2D                      lda     #'-'
(1)    1274 : 20 2A 10                   jsr     putchar
(1)    1277 : A2 10                      ldx     #R0
(1)    1279 : 20 F6 12                   jsr     neg16           ; negate R0
(1)    127C :                    print_value:
(1)    127C : 20 38 12                   jsr     print_uint16
(1)    127F : 68                         pla
(1)    1280 : 85 14                      sta     R2L
(1)    1282 : 68                         pla
(1)    1283 : 85 15                      sta     R2H
(1)    1285 : 68                         pla
(1)    1286 : 85 12                      sta     R1L
(1)    1288 : 68                         pla
(1)    1289 : 85 13                      sta     R1H
(1)    128B : 60                         rts
(1)    128C :
(1)    128C :                    ;;; Set constant to R1
(1)    128C :                    ;;;     jsr     set_R1
(1)    128C :                    ;;;     .word   constant
(1)    128C :                    ;;; @clobber A Y
(1)    128C :                    set_R1:
(1)    128C : A2 12                      ldx     #R1
(1)    128E : 4C 96 12                   jmp     set_RX
(1)    1291 :
(1)    1291 :                    ;;; Set constant to R2
(1)    1291 :                    ;;;     jsr     set_R2
(1)    1291 :                    ;;;     .word   constant
(1)    1291 :                    ;;; @clobber A Y
(1)    1291 :                    set_R2:
(1)    1291 : A2 14                      ldx     #R2
(1)    1293 : 4C 96 12                   jmp     set_RX
(1)    1296 :
(1)    1296 :                    ;;; Set constant to RX
(1)    1296 :                    ;;;     ldx     #Rx
(1)    1296 :                    ;;;     jsr     set_RX
(1)    1296 :                    ;;;     .word   constant
(1)    1296 :                    ;;; @clobber A Y
(1)    1296 :                    set_RX:
(1)    1296 : 68                         pla
(1)    1297 : 85 16                      sta     arith_work
(1)    1299 : 68                         pla
(1)    129A : 85 17                      sta     arith_work+1
(1)    129C : A0 01                      ldy     #1
(1)    129E : B1 16                      lda     (arith_work),Y
(1)    12A0 : 95 00                      sta     0,X
(1)    12A2 : C8                         iny
(1)    12A3 : B1 16                      lda     (arith_work),Y
(1)    12A5 : 95 01                      sta     1,X
(1)    12A7 : 18                         clc
(1)    12A8 : A5 16                      lda     arith_work
(1)    12AA : 69 03                      adc     #3
(1)    12AC : 85 16                      sta     arith_work
(1)    12AE : A5 17                      lda     arith_work+1
(1)    12B0 : 69 00                      adc     #0
(1)    12B2 : 85 17                      sta     arith_work+1
(1)    12B4 : 6C 16 00                   jmp     (arith_work)
(1)    12B7 :
(1)    12B7 :                    ;;; Store R0 to R1
(1)    12B7 :                    store_R1:
(1)    12B7 : A5 10                      lda     R0L
(1)    12B9 : 85 12                      sta     R1L
(1)    12BB : A5 11                      lda     R0H
(1)    12BD : 85 13                      sta     R1H
(1)    12BF : 60                         rts
(1)    12C0 :
(1)    12C0 :                    ;;; Store R0 to R2
(1)    12C0 :                    store_R2:       
(1)    12C0 : A5 10                      lda     R0L
(1)    12C2 : 85 14                      sta     R2L
(1)    12C4 : A5 11                      lda     R0H
(1)    12C6 : 85 15                      sta     R2H
(1)    12C8 : 60                         rts
(1)    12C9 :
(1)    12C9 :                    ;;; Store R0 to variable
(1)    12C9 :                    ;;; @param R0
(1)    12C9 :                    ;;; @param X &variable
(1)    12C9 :                    store_RX:
(1)    12C9 : A5 10                      lda     R0L
(1)    12CB : 95 00                      sta     0,X
(1)    12CD : A5 11                      lda     R0H
(1)    12CF : 95 01                      sta     1,X
(1)    12D1 : 60                         rts
(1)    12D2 :
(1)    12D2 :                    ;;; Load variable to R0
(1)    12D2 :                    ;;; @param X &variable
(1)    12D2 :                    ;;; @return R0 variable
(1)    12D2 :                    load_R0:
(1)    12D2 : B5 00                      lda     0,X
(1)    12D4 : 85 10                      sta     R0L
(1)    12D6 : B5 01                      lda     1,X
(1)    12D8 : 85 11                      sta     R0H
(1)    12DA : 60                         rts
(1)    12DB :
(1)    12DB :                    ;;; Load variable to R1
(1)    12DB :                    ;;; @param X &variable
(1)    12DB :                    ;;; @return R1 variable
(1)    12DB :                    load_R1:
(1)    12DB : B5 00                      lda     0,X
(1)    12DD : 85 12                      sta     R1L
(1)    12DF : B5 01                      lda     1,X
(1)    12E1 : 85 13                      sta     R1H
(1)    12E3 : 60                         rts
(1)    12E4 :
(1)    12E4 :                    ;;; Load variable to R2
(1)    12E4 :                    ;;; @param X &variable
(1)    12E4 :                    ;;; @return R2 variable
(1)    12E4 :                    load_R2:
(1)    12E4 : B5 00                      lda     0,X
(1)    12E6 : 85 14                      sta     R2L
(1)    12E8 : B5 01                      lda     1,X
(1)    12EA : 85 15                      sta     R2H
(1)    12EC : 60                         rts
(1)    12ED :
(1)    12ED :                    ;;; Sign extend A into X
(1)    12ED :                    ;;; @param A 8-bit value
(1)    12ED :                    ;;; @return X:A sign extended 16-bit value
(1)    12ED :                    sex_A:  
(1)    12ED : A2 00                      ldx     #0
(1)    12EF : 09 00                      ora     #0
(1)    12F1 : 10 02                      bpl     sex_A_return
(1)    12F3 : A2 FF                      ldx     #-1
(1)    12F5 :                    sex_A_return:
(1)    12F5 : 60                         rts
(1)    12F6 :
(1)    12F6 :                    ;;; Negate
(1)    12F6 :                    ;;; @param X point to value
(1)    12F6 :                    ;;; @clobber A
(1)    12F6 :                    neg16:
(1)    12F6 : 38                         sec
(1)    12F7 : A9 00                      lda     #0
(1)    12F9 : F5 00                      sbc     0,x
(1)    12FB : 95 00                      sta     0,x
(1)    12FD : A9 00                      lda     #0
(1)    12FF : F5 01                      sbc     1,x
(1)    1301 : 95 01                      sta     1,x
(1)    1303 : 60                         rts
(1)    1304 :
(1)    1304 :                    ;;; Addition
(1)    1304 :                    ;;; @param R1 summand
(1)    1304 :                    ;;; @param R2 addend
(1)    1304 :                    ;;; @return R0 R1+R2
(1)    1304 :                    addsi2:
(1)    1304 : 18                         clc
(1)    1305 : A5 12                      lda     R1L
(1)    1307 : 65 14                      adc     R2L
(1)    1309 : 85 10                      sta     R0L
(1)    130B : A5 13                      lda     R1H
(1)    130D : 65 15                      adc     R2H
(1)    130F : 85 11                      sta     R0H
(1)    1311 : 60                         rts
(1)    1312 :
(1)    1312 :                    ;;; Subtraction
(1)    1312 :                    ;;; @param R1 minuend
(1)    1312 :                    ;;; @param R2 subtrahend
(1)    1312 :                    ;;; @return R0 R1+R2
(1)    1312 :                    subsi2:
(1)    1312 : 38                         sec
(1)    1313 : A5 12                      lda     R1L
(1)    1315 : E5 14                      sbc     R2L
(1)    1317 : 85 10                      sta     R0L
(1)    1319 : A5 13                      lda     R1H
(1)    131B : E5 15                      sbc     R2H
(1)    131D : 85 11                      sta     R0H
(1)    131F : 60                         rts
(1)    1320 :
(1)    1320 :                    ;;; Signed compare helper
(1)    1320 :                    ;;; @param R0 minuend-subtrahend
(1)    1320 :                    ;;; @param R1 minuend
(1)    1320 :                    ;;; @param R2 subtrahend
(1)    1320 :                    ;;; @return R0=0;  BZ (minuend == subtrahend)
(1)    1320 :                    ;;;         R0=1;  BP (minuend > subtrahend)
(1)    1320 :                    ;;;         R0=-1; BM (minuend < subtrahend)
(1)    1320 :                    cmpsi2:
(1)    1320 : 38                         sec
(1)    1321 : A5 12                      lda     R1L
(1)    1323 : E5 14                      sbc     R2L
(1)    1325 : 85 10                      sta     R0L
(1)    1327 : A5 13                      lda     R1H
(1)    1329 : E5 15                      sbc     R2H
(1)    132B : 85 11                      sta     R0H             ; R0=R1-R2
(1)    132D : 05 10                      ora     R0L
(1)    132F : F0 17                      beq     cmpsi2_return   ; return with R0=0
(1)    1331 : A5 11                      lda     R0H
(1)    1333 : 70 0B                      bvs     cmpsi2_ov       ; branch if V=1
(1)    1335 : 30 0B                      bmi     cmpsi2_lt       ; branch if V=0, N=1
(1)    1337 :                    cmpsi2_gt:
(1)    1337 : A9 00                      lda     #0              ; N^V=0
(1)    1339 : 85 11                      sta     R0H
(1)    133B : A9 01                      lda     #1
(1)    133D : 85 10                      sta     R0L
(1)    133F : 60                         rts
(1)    1340 :                    cmpsi2_ov:
(1)    1340 : 30 F5                      bmi     cmpsi2_gt       ; branch if V=1, N=1
(1)    1342 :                    cmpsi2_lt:
(1)    1342 : A9 FF                      lda     #-1             ; N^V=1
(1)    1344 : 85 11                      sta     R0H
(1)    1346 : 85 10                      sta     R0L             ; R0=-1
(1)    1348 :                    cmpsi2_return:
(1)    1348 : 60                         rts
(1)    1349 :
(1)    1349 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    1349 :                    ;;; @param R1 multiplicand
(1)    1349 :                    ;;; @param R2 multiplier
(1)    1349 :                    ;;; @return R0 result
(1)    1349 :                    ;;; @clobber R0 R1 R2
(1)    1349 :                    umul16:
(1)    1349 : A9 00                      lda     #0
(1)    134B : 85 11                      sta     R0H
(1)    134D : 85 10                      sta     R0L
(1)    134F : F0 1B                      beq     umul16_check    ; always branch
(1)    1351 :                    umul16_loop:
(1)    1351 : A5 14                      lda     R2L
(1)    1353 : 29 01                      and     #1
(1)    1355 : F0 0D                      beq     umul16_sr
(1)    1357 : A5 12                      lda     R1L
(1)    1359 : 18                         clc
(1)    135A : 65 10                      adc     R0L
(1)    135C : 85 10                      sta     R0L
(1)    135E : A5 13                      lda     R1H
(1)    1360 : 65 11                      adc     R0H
(1)    1362 : 85 11                      sta     R0H             ; result += multiplicand
(1)    1364 :                    umul16_sr:
(1)    1364 : 46 15                      lsr     R2H
(1)    1366 : 66 14                      ror     R2L             ; multiplier >>= 1
(1)    1368 : 06 12                      asl     R1L
(1)    136A : 26 13                      rol     R1H             ; multilplicand <<= 1
(1)    136C :                    umul16_check:
(1)    136C : A5 15                      lda     R2H
(1)    136E : 05 14                      ora     R2L
(1)    1370 : D0 DF                      bne     umul16_loop     ; while multiplier != 0
(1)    1372 :                    umul16_end:
(1)    1372 : 60                         rts
(1)    1373 :
(1)    1373 :                    ;;; Multiply helper
(1)    1373 :                    ;;; @param R1 multiplicand
(1)    1373 :                    ;;; @param R2 multiplier
(1)    1373 :                    ;;; @return R0 multiplicand * multiplier
(1)    1373 :                    ;;; @clobber R1 R2
(1)    1373 :                    mulsi2:
(1)    1373 : A5 13                      lda     R1H
(1)    1375 : 45 15                      eor     R2H
(1)    1377 : 48                         pha                     ; save hi(multiplicand^multiplier)
(1)    1378 : A5 15                      lda     R2H             ; A=hi(multiplier)
(1)    137A : 10 05                      bpl     mulsi2_multiplicand
(1)    137C : A2 14                      ldx     #R2
(1)    137E : 20 F6 12                   jsr     neg16           ; negate multiplier
(1)    1381 :                    mulsi2_multiplicand:
(1)    1381 : A5 13                      lda     R1H             ; A=hi(multiplicand)
(1)    1383 : 10 05                      bpl     mulsi2_multiply
(1)    1385 : A2 12                      ldx     #R1
(1)    1387 : 20 F6 12                   jsr     neg16           ; negate multiplicand
(1)    138A :                    mulsi2_multiply:
(1)    138A : 20 49 13                   jsr     umul16          ; R0=result
(1)    138D : 68                         pla                     ; A=(multiplicand^multiplier)
(1)    138E : 10 05                      bpl     mulsi2_return
(1)    1390 : A2 10                      ldx     #R0
(1)    1392 : 20 F6 12                   jsr     neg16           ; negate result
(1)    1395 :                    mulsi2_return:
(1)    1395 : 60                         rts
(1)    1396 :
(1)    1396 :                    ;;; Unsigned division: dividend / divisor = quotient ... reminder
(1)    1396 :                    ;;; @praram R1 dividend
(1)    1396 :                    ;;; @praram R2 divisor
(1)    1396 :                    ;;; @return R0 quotient
(1)    1396 :                    ;;; @return R1 reminder
(1)    1396 :                    ;;; @clobber R2
(1)    1396 :                    udiv16:
(1)    1396 : A5 15                      lda     R2H
(1)    1398 : 05 14                      ora     R2L
(1)    139A : F0 4A                      beq     udiv16_return   ; branch if R2==0
(1)    139C : A9 01                      lda     #1              ; A=bits
(1)    139E : 85 10                      sta     R0L             ; save bits
(1)    13A0 : D0 06                      bne     udiv16_prep     ; always branch
(1)    13A2 :                    udiv16_prep_loop:
(1)    13A2 : 06 14                      asl     R2L
(1)    13A4 : 26 15                      rol     R2H             ; divisor <<= 1
(1)    13A6 : E6 10                      inc     R0L             ; ++bits
(1)    13A8 :                    udiv16_prep:
(1)    13A8 : A5 15                      lda     R2H
(1)    13AA : 10 F6                      bpl     udiv16_prep_loop ; while msb(divisor) == 0
(1)    13AC : A5 10                      lda     R0L
(1)    13AE : 48                         pha                     ; push bits
(1)    13AF : A9 00                      lda     #0
(1)    13B1 : 85 11                      sta     R0H
(1)    13B3 : 85 10                      sta     R0L             ; quotient=0
(1)    13B5 : F0 09                      beq     udiv16_enter_loop ; always branch
(1)    13B7 :                    udiv16_loop:
(1)    13B7 : 48                         pha                     ; save bits
(1)    13B8 : 46 15                      lsr     R2H
(1)    13BA : 66 14                      ror     R2L             ; divisor >>= 1
(1)    13BC : 06 10                      asl     R0L
(1)    13BE : 26 11                      rol     R0H             ; quotient <<= 1
(1)    13C0 :                    udiv16_enter_loop:
(1)    13C0 : A5 12                      lda     R1L
(1)    13C2 : 38                         sec
(1)    13C3 : E5 14                      sbc     R2L
(1)    13C5 : 85 12                      sta     R1L
(1)    13C7 : A5 13                      lda     R1H
(1)    13C9 : E5 15                      sbc     R2H
(1)    13CB : 85 13                      sta     R1H             ; dividend -= divisor
(1)    13CD : 90 04                      bcc     udiv16_readd
(1)    13CF : E6 10                      inc     R0L             ; quotient |= 1
(1)    13D1 : D0 0D                      bne     udiv16_next     ; always branch
(1)    13D3 :                    udiv16_readd:
(1)    13D3 : A5 12                      lda     R1L
(1)    13D5 : 18                         clc
(1)    13D6 : 65 14                      adc     R2L
(1)    13D8 : 85 12                      sta     R1L
(1)    13DA : A5 13                      lda     R1H
(1)    13DC : 65 15                      adc     R2H
(1)    13DE : 85 13                      sta     R1H             ; dividend += divisor
(1)    13E0 :                    udiv16_next:
(1)    13E0 : 68                         pla
(1)    13E1 : 38                         sec
(1)    13E2 : E9 01                      sbc     #1              ; --bits
(1)    13E4 : D0 D1                      bne     udiv16_loop     ; while bits != 0
(1)    13E6 :                    udiv16_return:
(1)    13E6 : 60                         rts
(1)    13E7 :
(1)    13E7 :                    ;;; Division helper
(1)    13E7 :                    ;;; @param R1 dividend
(1)    13E7 :                    ;;; @param R2 divisor
(1)    13E7 :                    ;;; @return R0 quotient
(1)    13E7 :                    ;;; @return R1 reminder
(1)    13E7 :                    ;;; @clobber R2
(1)    13E7 :                    divsi2:
(1)    13E7 : A5 13                      lda     R1H
(1)    13E9 : 45 15                      eor     R2H
(1)    13EB : 48                         pha                     ; save hi(dividend^divisor)
(1)    13EC : A5 15                      lda     R2H             ; A=hi(divisor)
(1)    13EE : 10 05                      bpl     divsi2_dividend
(1)    13F0 : A2 14                      ldx     #R2
(1)    13F2 : 20 F6 12                   jsr     neg16           ; negate divisor
(1)    13F5 :                    divsi2_dividend:
(1)    13F5 : A5 13                      lda     R1H             ; A=hi(dividend)
(1)    13F7 : 10 05                      bpl     divsi2_divide
(1)    13F9 : A2 12                      ldx     #R1
(1)    13FB : 20 F6 12                   jsr     neg16           ; negate dividend
(1)    13FE :                    divsi2_divide:
(1)    13FE : 20 96 13                   jsr     udiv16          ; R0=result
(1)    1401 : 68                         pla                     ; A=(dividend^divisor)
(1)    1402 : 10 05                      bpl     divsi2_return
(1)    1404 : A2 10                      ldx     #R0L
(1)    1406 : 20 F6 12                   jsr     neg16           ; negate result
(1)    1409 :                    divsi2_return:
(1)    1409 : 60                         rts
       140A :                            .include "queue.inc"
(1)    140A :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    140A :                    ;;; [queue_tmp] must be allocated 2 bytes on zero page
(1)    140A :                    ;;; [queue] queue structure
(1)    140A : =0                 queue_len       =       0       ; queue length
(1)    140A : =1                 queue_size      =       1       ; buffer size
(1)    140A : =2                 queue_put       =       2       ; queue put index
(1)    140A : =3                 queue_get       =       3       ; queue get index
(1)    140A : =4                 queue_buf       =       4       ; buffer start address
(1)    140A :
(1)    140A :                    ;;; [queue] Initialize queue
(1)    140A :                    ;;; @param X queue work space pointer
(1)    140A :                    ;;; @param A queue work space size
(1)    140A :                    ;;; @clobber A, Y
(1)    140A :                    queue_init:
(1)    140A : 95 01                      sta     queue_size,x
(1)    140C : 20 1E 14                   jsr     init_queue_tmp
(1)    140F : A8                         tay                     ; Y is queue size
(1)    1410 : A9 00                      lda     #0
(1)    1412 : 95 00                      sta     queue_len,x
(1)    1414 : 95 02                      sta     queue_put,x
(1)    1416 : 95 03                      sta     queue_get,x
(1)    1418 :                    queue_init_loop:
(1)    1418 : 91 80                      sta     (queue_tmp),y
(1)    141A : 88                         dey
(1)    141B : D0 FB                      bne     queue_init_loop
(1)    141D : 60                         rts
(1)    141E :
(1)    141E :                    ;;; init_tmp
(1)    141E :                    ;;; @param X queue work space pointer
(1)    141E :                    ;;; store [queue_buf,x] to queue_tmp
(1)    141E :                    ;;; @clobber Y
(1)    141E :                    init_queue_tmp:
(1)    141E : B4 04                      ldy     queue_buf,x
(1)    1420 : 84 80                      sty     queue_tmp
(1)    1422 : B4 05                      ldy     queue_buf+1,x
(1)    1424 : 84 81                      sty     queue_tmp+1
(1)    1426 : 60                         rts
(1)    1427 :
(1)    1427 :                    ;;; [queue] Add an element to queue
(1)    1427 :                    ;;; @param X queue work space pointer
(1)    1427 :                    ;;; @param A an element
(1)    1427 :                    ;;; @return P.C 1 if queue is full
(1)    1427 :                    queue_add:
(1)    1427 : 48                         pha                     ; save an element
(1)    1428 : 20 1E 14                   jsr     init_queue_tmp
(1)    142B : B5 00                      lda     queue_len,x
(1)    142D : D5 01                      cmp     queue_size,x
(1)    142F : B0 15                      bcs     queue_add_return  ; queue_len >= queue_size
(1)    1431 : B4 02                      ldy     queue_put,x
(1)    1433 : 68                         pla
(1)    1434 : 48                         pha
(1)    1435 : 91 80                      sta     (queue_tmp),y   ; store an element
(1)    1437 : F6 00                      inc     queue_len,x
(1)    1439 : C8                         iny
(1)    143A : 94 02                      sty     queue_put,x
(1)    143C : 98                         tya
(1)    143D : D5 01                      cmp     queue_size,x
(1)    143F : 90 05                      bcc     queue_add_return ; queue_put < queue_size
(1)    1441 : A9 00                      lda     #0
(1)    1443 : 95 02                      sta     queue_put,x
(1)    1445 : 18                         clc                     ;  C=0
(1)    1446 :                    queue_add_return:
(1)    1446 : 68                         pla
(1)    1447 : 60                         rts
(1)    1448 :
(1)    1448 :                    ;;; [queue] Remove an element from queue
(1)    1448 :                    ;;; @param X queue work space pointer
(1)    1448 :                    ;;; @return A an element
(1)    1448 :                    ;;; @return P.C 1 if queue is empty
(1)    1448 :                    ;;; @clobber Y
(1)    1448 :                    queue_remove:
(1)    1448 : B5 00                      lda     queue_len,x
(1)    144A : D0 02                      bne     queue_remove_elem
(1)    144C : 38                         sec                     ; C=1
(1)    144D : 60                         rts
(1)    144E :                    queue_remove_elem
(1)    144E : 20 1E 14                   jsr     init_queue_tmp
(1)    1451 : B4 03                      ldy     queue_get,x     ; 8 bits offset
(1)    1453 : B1 80                      lda     (queue_tmp),y   ; read an element
(1)    1455 : 48                         pha                     ; save an element
(1)    1456 : D6 00                      dec     queue_len,x
(1)    1458 : C8                         iny
(1)    1459 : 94 03                      sty     queue_get,x
(1)    145B : 98                         tya
(1)    145C : D5 01                      cmp     queue_size,x
(1)    145E : 90 05                      bcc     queue_remove_return ; queue_get < queue_size
(1)    1460 : A9 00                      lda     #0
(1)    1462 : 95 03                      sta     queue_get,x
(1)    1464 : 18                         clc                     ; C=0
(1)    1465 :                    queue_remove_return:
(1)    1465 : 68                         pla                     ; restore an element
(1)    1466 : 60                         rts
       1467 :
       1467 :                    isr_irq:
       1467 : D8                         cld                     ; clear decimal flag
       1468 : 48                         pha                     ; save A
       1469 : 8A                         txa
       146A : 48                         pha                     ; save X
       146B : 98                         tya
       146C : 48                         pha                     ; save Y
       146D : AD 00 DF                   lda     ACIA_status
       1470 : 29 80                      and     #IRQF_bm
       1472 : F0 20                      beq     isr_irq_exit
       1474 : AD 00 DF                   lda     ACIA_status
       1477 : 29 01                      and     #RDRF_bm
       1479 : F0 08                      beq     isr_irq_send
       147B : AD 01 DF                   lda     ACIA_data       ; receive character
       147E : A2 82                      ldx     #rx_queue
       1480 : 20 27 14                   jsr     queue_add
       1483 :                    isr_irq_send:
       1483 : AD 00 DF                   lda     ACIA_status
       1486 : 29 02                      and     #TDRE_bm
       1488 : F0 0A                      beq     isr_irq_exit
       148A : A2 88                      ldx     #tx_queue
       148C : 20 48 14                   jsr     queue_remove
       148F : B0 09                      bcs     isr_irq_send_empty
       1491 : 8D 01 DF                   sta     ACIA_data       ; send character
       1494 :                    isr_irq_exit:
       1494 : 68                         pla                     ; restore Y
       1495 : A8                         tay
       1496 : 68                         pla                     ; restore X
       1497 : AA                         tax
       1498 : 68                         pla                     ; restore Y
       1499 : 40                         rti                     ; restore P and PC
       149A :                    isr_irq_send_empty:
       149A : A9 94                      lda     #RX_INT_TX_NO
       149C : 8D 00 DF                   sta     ACIA_control    ; disable Tx interrupt
       149F : D0 F3                      bne     isr_irq_exit    ; always branch

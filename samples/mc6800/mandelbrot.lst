          0 :                            cpu     6800
          0 :                            include "mc6800.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6800/MC6802/MC6808
(1)       0 :                    ;;; Condition Code Register (CC)
(1)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 CC_OVERFLOW   equ  %00000010   ; set to 1 if overflow occurred
(1)       0 : =4                 CC_ZERO       equ  %00000100   ; set to 1 if result is zero
(1)       0 : =8                 CC_NEGATIVE   equ  %00001000   ; set to 1 if result is negative
(1)       0 : =10                CC_IRQ        equ  %00010000   ; if 1, IRQ is masked
(1)       0 : =20                CC_HALF_CARRY equ  %00100000   ; if 1, decimal carry from least digit occurred
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =FFF8              VEC_IRQ:        equ     $FFF8  ; $FFF8: Maskable Interrupt Request
(1)       0 : =FFFA              VEC_SWI:        equ     $FFFA  ; $FFFA: Software Interrupt
(1)       0 : =FFFC              VEC_NMI:        equ     $FFFC  ; $FFFC: Non Maskable Interrupt
(1)       0 : =FFFE              VEC_RESET:      equ     $FFFE  ; $FFFE: Reset
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     $DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
         20 :                            org     $20
         20 :                    ;;; Working space for mandelbrot.inc
         20 : =32                F:      equ     50
         20 :                    vC:     rmb     2
         22 :                    vD:     rmb     2
         24 :                    vA:     rmb     2
         26 :                    vB:     rmb     2
         28 :                    vS:     rmb     2
         2A :                    vP:     rmb     2
         2C :                    vQ:     rmb     2
         2E :                    vY:     rmb     1
         2F :                    vX:     rmb     1
         30 :                    vI:     rmb     1
         31 :                            
         31 :                    ;;; Working space for arith.inc
         31 :                    R0:
         31 :                    R0H:    rmb     1
         32 :                    R0L:    rmb     1
         33 :                    R1:
         33 :                    R1H:    rmb     1
         34 :                    R1L:    rmb     1
         35 :                    R2:
         35 :                    R2H:    rmb     1
         36 :                    R2L:    rmb     1
         37 :                    arith_work:
         37 :                            rmb     2
         39 :
       2000 :                            org     $2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       rmb     rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       rmb     tx_queue_size
       2100 :
       1000 :                            org     $1000
       1000 : =FFF               stack:  equ     *-1             ; MC6800's SP is post-decrement/pre-increment
       1000 :
       FFF8 :                            org     VEC_IRQ
       FFF8 : 05 10                      fdb     isr_irq
       FFFA :
       FFFA :                            org     VEC_SWI
       FFFA : FF FA                      fdb     VEC_SWI         ; for halt to system
       FFFC :
       FFFE :                            org     VEC_RESET
       FFFE : 01 00                      fdb     initialize
      10000 :
        100 :                            org     $0100
        100 :                    initialize:
        100 : 8E 0F FF                   lds     #stack
        103 : CE 20 00                   ldx     #rx_queue
        106 : C6 80                      ldab    #rx_queue_size
        108 : BD 04 9F                   jsr     queue_init
        10B : CE 20 80                   ldx     #tx_queue
        10E : C6 80                      ldab    #tx_queue_size
        110 : BD 04 9F                   jsr     queue_init
        113 :                            ;; initialize ACIA
        113 : 86 03                      ldaa    #CDS_RESET_gc   ; master reset
        115 : B7 DF 00                   staa    ACIA_control
        118 : 86 94                      ldaa    #RX_INT_TX_NO
        11A : B7 DF 00                   staa    ACIA_control
        11D : 0E                         cli                     ; enable IRQ
        11E :
        11E : BD 01 64                   jsr     mandelbrot
        121 : 3F                         swi
        122 :
        122 :                    ;;; Get character
        122 :                    ;;; @return A
        122 :                    ;;; @return CC.C 0 if no character
        122 :                    ;;; @clobber X
        122 :                    getchar:
        122 : 0F                         sei                     ; disable IRQ
        123 : CE 20 00                   ldx     #rx_queue
        126 : BD 04 EF                   jsr     queue_remove
        129 : 0E                         cli                     ; enable IRQ
        12A : 39                         rts
        12B :
        12B :                    ;;; Put character
        12B :                    ;;; @param A
        12B :                    ;;; @clobber X
        12B :                    putspace:
        12B : 86 20                      ldaa    #' '
        12D : 20 06                      bra     putchar
        12F :                    newline:
        12F : 86 0D                      ldaa    #$0D
        131 : 8D 02                      bsr     putchar
        133 : 86 0A                      ldaa    #$0A
        135 :                    putchar:
        135 : 36                         psha
        136 : CE 20 80                   ldx     #tx_queue
        139 :                    putchar_retry:
        139 : 0F                         sei                     ; disable IRQ
        13A : BD 04 CC                   jsr     queue_add
        13D : 0E                         cli                     ; enable IRQ
        13E : 24 F9                      bcc     putchar_retry   ; branch if queue is full
        140 : 86 B4                      ldaa    #RX_INT_TX_INT  ; enable Tx interrupt
        142 : B7 DF 00                   staa    ACIA_control
        145 : 32                         pula
        146 : 39                         rts
        147 :
        147 :                            include "mandelbrot.inc"
(1)     147 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     147 :                            cpu     6800
(1)     147 :
(1)     147 :                    ;;; Print variable: "A=variable "
(1)     147 :                    ;;; @param X variable
(1)     147 :                    ;;; @param A variable letter
(1)     147 :                    ;;; @clobber R0
(1)     147 :                    print:
(1)     147 : DF 31                      stx     R0
(1)     149 : BD 01 35                   jsr     putchar         ; print variable letter
(1)     14C : 86 3D                      ldaa    #'='
(1)     14E : BD 01 35                   jsr     putchar         ; '='
(1)     151 : BD 03 19                   jsr     print_int16
(1)     154 : 7E 01 2B                   jmp     putspace
(1)     157 :
(1)     157 :                    ;;; Sign extend A into X
(1)     157 :                    ;;; @param A
(1)     157 :                    ;;; @return X sign extended A
(1)     157 :                    sex_A:
(1)     157 : 7F 00 37                   clr     arith_work
(1)     15A : 97 38                      staa    arith_work+1
(1)     15C : 2A 03                      bpl     load_8bit_plus
(1)     15E : 73 00 37                   com     arith_work
(1)     161 :                    load_8bit_plus:
(1)     161 : DE 37                      ldx     arith_work
(1)     163 : 39                         rts
(1)     164 :
(1)     164 :                    mandelbrot:
(1)     164 : 86 F4                      ldaa    #-12
(1)     166 : 97 2E                      staa    vY              ; Y=-12
(1)     168 :                    loop_y:
(1)     168 : 86 CF                      ldaa    #-49
(1)     16A : 97 2F                      staa    vX              ; X=-49
(1)     16C :                    loop_x:
(1)     16C : 96 2F                      ldaa    vX
(1)     16E : 8D E7                      bsr     sex_A
(1)     170 : DF 33                      stx     R1              ; R1=X
(1)     172 : CE 00 E5                   ldx     #229
(1)     175 : DF 35                      stx     R2
(1)     177 : BD 03 EE                   jsr     mul16           ; R0=X*229
(1)     17A : DE 31                      ldx     R0
(1)     17C : DF 33                      stx     R1
(1)     17E : CE 00 64                   ldx     #100
(1)     181 : DF 35                      stx     R2
(1)     183 : BD 04 6B                   jsr     div16           ; R0=X*229/100
(1)     186 : DE 31                      ldx     R0
(1)     188 : DF 20                      stx     vC              ; C=X*229/100
(1)     18A : DF 24                      stx     vA              ; A=C
(1)     18C : 96 2E                      ldaa    vY
(1)     18E : 8D C7                      bsr     sex_A
(1)     190 : DF 33                      stx     R1              ; R1=Y
(1)     192 : CE 01 A0                   ldx     #416
(1)     195 : DF 35                      stx     R2
(1)     197 : BD 03 EE                   jsr     mul16           ; R0=Y*416
(1)     19A : DE 31                      ldx     R0
(1)     19C : DF 33                      stx     R1
(1)     19E : CE 00 64                   ldx     #100
(1)     1A1 : DF 35                      stx     R2
(1)     1A3 : BD 04 6B                   jsr     div16           ; R0=Y*416/100
(1)     1A6 : DE 31                      ldx     R0
(1)     1A8 : DF 22                      stx     vD              ; D=Y*416/100
(1)     1AA : DF 26                      stx     vB              ; B=D
(1)     1AC : 7F 00 30                   clr     vI              ; I=0
(1)     1AF :
(1)     1AF :                            ;; ldaa    vY              ; Y
(1)     1AF :                            ;; jsr     sex_A
(1)     1AF :                            ;; ldaa    #'Y'
(1)     1AF :                            ;; jsr     print
(1)     1AF :                            ;; ldaa    vX              ; X
(1)     1AF :                            ;; jsr     sex_A
(1)     1AF :                            ;; ldaa    #'X'
(1)     1AF :                            ;; jsr     print
(1)     1AF :                            ;; ldx     vC              ; C
(1)     1AF :                            ;; ldaa    #'C'
(1)     1AF :                            ;; jsr     print
(1)     1AF :                            ;; ldx     vD              ; D
(1)     1AF :                            ;; ldaa    #'D'
(1)     1AF :                            ;; jsr     print
(1)     1AF :                            ;; jsr     newline
(1)     1AF :
(1)     1AF :                    loop_i:
(1)     1AF : DE 26                      ldx     vB
(1)     1B1 : DF 33                      stx     R1              ; R1=B
(1)     1B3 : CE 00 32                   ldx     #F
(1)     1B6 : DF 35                      stx     R2              ; R2=F
(1)     1B8 : BD 04 6B                   jsr     div16           ; R0=B/F
(1)     1BB : DE 31                      ldx     R0
(1)     1BD : DF 2C                      stx     vQ              ; Q=B/F
(1)     1BF : DF 33                      stx     R1              ; R1=Q
(1)     1C1 : CE 00 32                   ldx     #F
(1)     1C4 : DF 35                      stx     R2              ; R2=F
(1)     1C6 : BD 03 EE                   jsr     mul16           ; R0=Q*F
(1)     1C9 : DE 31                      ldx     R0
(1)     1CB : DF 35                      stx     R2              ; R2=Q*F
(1)     1CD : DE 26                      ldx     vB
(1)     1CF : DF 33                      stx     R1              ; R1=B
(1)     1D1 : BD 03 92                   jsr     sub16           ; R0=B-Q*F
(1)     1D4 : DE 31                      ldx     R0
(1)     1D6 : DF 28                      stx     vS              ; S=B-Q*F
(1)     1D8 : DE 24                      ldx     vA
(1)     1DA : DF 33                      stx     R1              ; R1=A
(1)     1DC : DF 35                      stx     R2              ; R2=A
(1)     1DE : BD 03 EE                   jsr     mul16           ; R0=A*A
(1)     1E1 : DE 31                      ldx     R0
(1)     1E3 : BD 03 3B                   jsr     push_X          ; push A*A
(1)     1E6 : DE 26                      ldx     vB
(1)     1E8 : DF 33                      stx     R1              ; R1=B
(1)     1EA : DF 35                      stx     R2              ; R2=B
(1)     1EC : BD 03 EE                   jsr     mul16           ; R0=B*B
(1)     1EF : DE 31                      ldx     R0
(1)     1F1 : DF 35                      stx     R2              ; R2=B*B
(1)     1F3 : BD 03 59                   jsr     pop_X
(1)     1F6 : DF 33                      stx     R1              ; R1=A*A
(1)     1F8 : BD 03 92                   jsr     sub16           ; R0=A*A-B*B
(1)     1FB : DE 31                      ldx     R0
(1)     1FD : DF 33                      stx     R1              ; R1=A*A-B*B
(1)     1FF : CE 00 32                   ldx     #F
(1)     202 : DF 35                      stx     R2
(1)     204 : BD 04 6B                   jsr     div16           ; R0=(A*A-B*B)/F
(1)     207 : DE 31                      ldx     R0
(1)     209 : DF 33                      stx     R1              ; R1=(A*A-B*B)/F
(1)     20B : DE 20                      ldx     vC
(1)     20D : DF 35                      stx     R2              ; R2=C
(1)     20F : BD 03 85                   jsr     add16           ; R0=(A*A-B*B)/F+C
(1)     212 : DE 31                      ldx     R0
(1)     214 : BD 03 3B                   jsr     push_X          ; push (A*A-B*B)/F+C
(1)     217 : DE 24                      ldx     vA
(1)     219 : DF 33                      stx     R1              ; R1=A
(1)     21B : DE 2C                      ldx     vQ
(1)     21D : DF 35                      stx     R2              ; R2=Q
(1)     21F : BD 03 EE                   jsr     mul16           ; R0=A*Q
(1)     222 : DE 31                      ldx     R0
(1)     224 : BD 03 3B                   jsr     push_X          ; push A*Q
(1)     227 : DE 24                      ldx     vA
(1)     229 : DF 33                      stx     R1              ; R1=A
(1)     22B : DE 28                      ldx     vS
(1)     22D : DF 35                      stx     R2              ; R2=S
(1)     22F : BD 03 EE                   jsr     mul16           ; R0=A*S
(1)     232 : DE 31                      ldx     R0
(1)     234 : DF 33                      stx     R1              ; R1=A*S
(1)     236 : CE 00 32                   ldx     #F
(1)     239 : DF 35                      stx     R2
(1)     23B : BD 04 6B                   jsr     div16           ; R0=A*S/F
(1)     23E : DE 31                      ldx     R0
(1)     240 : DF 35                      stx     R2              ; R2=A*S/F
(1)     242 : BD 03 59                   jsr     pop_X
(1)     245 : DF 33                      stx     R1              ; R1=A*Q
(1)     247 : BD 03 85                   jsr     add16           ; R0=A*Q+A*S/F
(1)     24A : DE 31                      ldx     R0
(1)     24C : DF 33                      stx     R1              ; R1=A*Q+A*S/F
(1)     24E : DF 35                      stx     R2              ; R2=A*Q+A*S/F
(1)     250 : BD 03 85                   jsr     add16           ; R0=2*(A*Q+A*S/F)
(1)     253 : DE 31                      ldx     R0
(1)     255 : DF 33                      stx     R1              ; R1=2*(A*Q+A*S/F)
(1)     257 : DE 22                      ldx     vD
(1)     259 : DF 35                      stx     R2              ; R2=D
(1)     25B : BD 03 85                   jsr     add16           ; R0=2*(A*Q+A*S/F)+D
(1)     25E : DE 31                      ldx     R0
(1)     260 : DF 26                      stx     vB              ; B=2*(A*Q+A*S/F)+D
(1)     262 : BD 03 59                   jsr     pop_X           ; pop (A*A-B*B)/F+C
(1)     265 : DF 24                      stx     vA              ; A=(A*A-B*B)/F+C
(1)     267 : DF 33                      stx     R1              ; R1=A
(1)     269 : CE 00 32                   ldx     #F
(1)     26C : DF 35                      stx     R2              ; R2=F
(1)     26E : BD 04 6B                   jsr     div16           ; R0=A/F
(1)     271 : DE 31                      ldx     R0
(1)     273 : DF 2A                      stx     vP              ; P=A/F
(1)     275 : DE 26                      ldx     vB
(1)     277 : DF 33                      stx     R1              ; R1=B
(1)     279 : CE 00 32                   ldx     #F
(1)     27C : DF 35                      stx     R2              ; R2=F
(1)     27E : BD 04 6B                   jsr     div16           ; R0=B/F
(1)     281 : DE 31                      ldx     R0
(1)     283 : DF 2C                      stx     vQ              ; Q=B/F
(1)     285 :
(1)     285 :                            ;; jsr     putspace
(1)     285 :                            ;; ldaa    vI              ; I
(1)     285 :                            ;; jsr     sex_A
(1)     285 :                            ;; ldaa    #'I'
(1)     285 :                            ;; jsr     print
(1)     285 :                            ;; ldx     vA              ; A
(1)     285 :                            ;; ldaa    #'A'
(1)     285 :                            ;; jsr     print
(1)     285 :                            ;; ldx     vB              ; B
(1)     285 :                            ;; ldaa    #'B'
(1)     285 :                            ;; jsr     print
(1)     285 :                            ;; ldx     vP              ; P
(1)     285 :                            ;; ldaa    #'P'
(1)     285 :                            ;; jsr     print
(1)     285 :                            ;; ldx     vQ              ; Q
(1)     285 :                            ;; ldaa    #'Q'
(1)     285 :                            ;; jsr     print
(1)     285 :                            ;; jsr     newline
(1)     285 :
(1)     285 : DE 2A                      ldx     vP
(1)     287 : DF 33                      stx     R1              ; R1=P
(1)     289 : DF 35                      stx     R2              ; R2=P
(1)     28B : BD 03 EE                   jsr     mul16           ; R0=P*P
(1)     28E : DE 31                      ldx     R0
(1)     290 : BD 03 3B                   jsr     push_X          ; push P*P
(1)     293 : DE 2C                      ldx     vQ
(1)     295 : DF 33                      stx     R1              ; R1=Q
(1)     297 : DF 35                      stx     R2              ; R2=Q
(1)     299 : BD 03 EE                   jsr     mul16           ; R0=Q*Q
(1)     29C : DE 31                      ldx     R0
(1)     29E : DF 33                      stx     R1              ; R1=Q*Q
(1)     2A0 : BD 03 59                   jsr     pop_X           ; pop P*P
(1)     2A3 : DF 35                      stx     R2              ; R2=P*P
(1)     2A5 : BD 03 85                   jsr     add16           ; R0=Q*Q+P*P
(1)     2A8 : DE 31                      ldx     R0
(1)     2AA : DF 35                      stx     R2              ; R2=Q*Q+P*P
(1)     2AC : CE 00 04                   ldx     #4
(1)     2AF : DF 33                      stx     R1              ; R1=4
(1)     2B1 : BD 03 9F                   jsr     cmp16           ; compare 4 and Q*Q+P*P
(1)     2B4 : 2B 10                      bmi     print_i         ; if 4<P*P+Q*Q
(1)     2B6 : 7C 00 30                   inc     vI              ; I+=1
(1)     2B9 : 96 30                      ldaa    vI
(1)     2BB : 81 10                      cmpa    #16
(1)     2BD : 2A 03                      bpl     print_space
(1)     2BF : 7E 01 AF                   jmp     loop_i          ; if I<16
(1)     2C2 :                    print_space:
(1)     2C2 : 86 20                      ldaa    #' '
(1)     2C4 : 20 0C                      bra     print_char
(1)     2C6 :                    print_i:
(1)     2C6 : 96 30                      ldaa    vI
(1)     2C8 : 80 0A                      suba    #10
(1)     2CA : 2A 04                      bpl     print_i2       ; if I>=10
(1)     2CC : 8B 3A                      adda    #10+'0'
(1)     2CE : 20 02                      bra     print_char
(1)     2D0 :                    print_i2:
(1)     2D0 : 8B 41                      adda    #'A'
(1)     2D2 :                    print_char:
(1)     2D2 :                            ;; psha
(1)     2D2 :                            ;; ldaa    #'@'
(1)     2D2 :                            ;; jsr     putchar
(1)     2D2 :                            ;; ldaa    #'='
(1)     2D2 :                            ;; jsr     putchar
(1)     2D2 :                            ;; pula
(1)     2D2 :                            ;; jsr     putchar
(1)     2D2 :                            ;; jsr     newline
(1)     2D2 :
(1)     2D2 : BD 01 35                   jsr     putchar
(1)     2D5 : BD 01 22                   jsr     getchar
(1)     2D8 : 24 03                      bcc     next_x
(1)     2DA : 4D                         tsta
(1)     2DB : 27 1B                      beq     mandelbrot_end  ; break
(1)     2DD :                    next_x:
(1)     2DD : 7C 00 2F                   inc     vX              ; X+=1
(1)     2E0 : 96 2F                      ldaa    vX
(1)     2E2 : 81 1E                      cmpa    #30
(1)     2E4 : 2A 03                      bpl     next_y
(1)     2E6 : 7E 01 6C                   jmp     loop_x          ; if X<30
(1)     2E9 :                    next_y:
(1)     2E9 : BD 01 2F                   jsr     newline
(1)     2EC : 7C 00 2E                   inc     vY              ; Y+=1
(1)     2EF : 96 2E                      ldaa    vY
(1)     2F1 : 81 0D                      cmpa    #13
(1)     2F3 : 2A 03                      bpl     mandelbrot_end
(1)     2F5 : 7E 01 68                   jmp     loop_y          ; if Y<13
(1)     2F8 :                    mandelbrot_end:
(1)     2F8 : 39                         rts
        2F9 :                            include "arith.inc"
(1)     2F9 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     2F9 :                            cpu     6800
(1)     2F9 :
(1)     2F9 :                    ;;; Print unsigned 16-bit integer as decimal
(1)     2F9 :                    ;;; @param R0 value
(1)     2F9 :                    ;;; @clobber A X R0 R1 R2
(1)     2F9 :                    print_uint16:
(1)     2F9 : 96 31                      ldaa    R0H
(1)     2FB : 9A 32                      oraa    R0L
(1)     2FD : 27 14                      beq     print_uint16_zero
(1)     2FF :                    print_uint16_loop:
(1)     2FF : DE 31                      ldx     R0
(1)     301 : DF 33                      stx     R1               ; R1=value
(1)     303 : 27 13                      beq     print_uint16_end ; branch if value == 0
(1)     305 : CE 00 0A                   ldx     #10
(1)     308 : DF 35                      stx     R2              ; R2=10
(1)     30A : BD 04 1F                   jsr     udiv16          ; R0=value/10
(1)     30D : 96 34                      ldaa    R1L
(1)     30F : 36                         psha                    ; push reminder
(1)     310 : 8D ED                      bsr     print_uint16_loop
(1)     312 : 32                         pula
(1)     313 :                    print_uint16_zero:
(1)     313 : 8A 30                      oraa    #'0'
(1)     315 : 7E 01 35                   jmp     putchar
(1)     318 :                    print_uint16_end:
(1)     318 : 39                         rts   
(1)     319 :
(1)     319 :                    ;;; Print signed 16-bit integer as decimal
(1)     319 :                    ;;; @param R0 value
(1)     319 :                    ;;; @clobber A X R0
(1)     319 :                    print_int16:
(1)     319 : DE 33                      ldx     R1
(1)     31B : 8D 1E                      bsr     push_X          ; push R1
(1)     31D : DE 35                      ldx     R2
(1)     31F : 8D 1A                      bsr     push_X          ; push R2
(1)     321 : 96 31                      ldaa    R0H
(1)     323 : 2A 0B                      bpl     print_int16_print
(1)     325 : 86 2D                      ldaa    #'-'
(1)     327 : BD 01 35                   jsr     putchar
(1)     32A : DE 31                      ldx     R0
(1)     32C : 8D 4B                      bsr     neg_X
(1)     32E : DF 31                      stx     R0
(1)     330 :                    print_int16_print:
(1)     330 : 8D C7                      bsr     print_uint16
(1)     332 : 8D 25                      bsr     pop_X           ; pop R2
(1)     334 : DF 35                      stx     R2
(1)     336 : 8D 21                      bsr     pop_X           ; pop R1
(1)     338 : DF 33                      stx     R1
(1)     33A : 39                         rts
(1)     33B :
(1)     33B :                    ;;; Push X register
(1)     33B :                    push_X:
(1)     33B : 34                         des
(1)     33C : 34                         des                     ; for return address
(1)     33D : 36                         psha
(1)     33E : 07                         tpa
(1)     33F : 36                         psha                    ; save CC
(1)     340 : DF 37                      stx     arith_work      ; save X
(1)     342 : 30                         tsx                     ; X=SP+1
(1)     343 : A6 04                      ldaa    4,X
(1)     345 : A7 02                      staa    2,X
(1)     347 : A6 05                      ldaa    5,X
(1)     349 : A7 03                      staa    3,X             ; move return address
(1)     34B : 96 37                      ldaa    arith_work      ; high(X)
(1)     34D : A7 04                      staa    4,X
(1)     34F : 96 38                      ldaa    arith_work+1    ; low(X)
(1)     351 : A7 05                      staa    5,X
(1)     353 : DE 37                      ldx     arith_work      ; restore X
(1)     355 : 32                         pula                    ; restore CC X[0]
(1)     356 : 06                         tap
(1)     357 : 32                         pula                    ; restore A  X[1]
(1)     358 : 39                         rts                     ;            X[2:3]
(1)     359 :
(1)     359 :                    ;;; Pop X register
(1)     359 :                    pop_X:
(1)     359 : 36                         psha                    ; save A
(1)     35A : 07                         tpa
(1)     35B : 36                         psha                    ; save CC
(1)     35C : 30                         tsx                     ; X=SP+1
(1)     35D : EE 04                      ldx     4,X             ; pop X
(1)     35F : DF 37                      stx     arith_work
(1)     361 : 30                         tsx                     ; X=SP+1
(1)     362 : A6 02                      ldaa    2,X
(1)     364 : A7 04                      staa    4,X
(1)     366 : A6 03                      ldaa    3,X
(1)     368 : A7 05                      staa    5,X
(1)     36A : DE 37                      ldx     arith_work
(1)     36C : 32                         pula                    ; restore CC
(1)     36D : 06                         tap
(1)     36E : 32                         pula                    ; restore A
(1)     36F : 31                         ins
(1)     370 : 31                         ins                     ; adjust stack
(1)     371 : 39                         rts
(1)     372 :
(1)     372 :                    ;;; Negate D
(1)     372 :                    ;;; @param D register
(1)     372 :                    neg_D:
(1)     372 : 43                         coma
(1)     373 : 53                         comb
(1)     374 : CB 01                      addb    #1
(1)     376 : 89 00                      adca    #0
(1)     378 : 39                         rts
(1)     379 :
(1)     379 :                    ;;; Negate RX
(1)     379 :                    ;;; @param X register
(1)     379 :                    neg_X:
(1)     379 : DF 37                      stx     arith_work
(1)     37B : 73 00 37                   com     arith_work
(1)     37E : 73 00 38                   com     arith_work+1
(1)     381 : DE 37                      ldx     arith_work
(1)     383 : 08                         inx
(1)     384 : 39                         rts
(1)     385 :
(1)     385 :                    ;;; Addition: R0 = R1 + R2
(1)     385 :                    ;;; @clobber A
(1)     385 :                    add16:
(1)     385 : 96 34                      ldaa    R1L
(1)     387 : 9B 36                      adda    R2L
(1)     389 : 97 32                      staa    R0L
(1)     38B : 96 33                      ldaa    R1H
(1)     38D : 99 35                      adca    R2H
(1)     38F : 97 31                      staa    R0H
(1)     391 : 39                         rts
(1)     392 :
(1)     392 :                    ;;; Subtraction: R0 = R1 + R2
(1)     392 :                    ;;; @clobber A
(1)     392 :                    sub16:
(1)     392 : 96 34                      ldaa    R1L
(1)     394 : 90 36                      suba    R2L
(1)     396 : 97 32                      staa    R0L
(1)     398 : 96 33                      ldaa    R1H
(1)     39A : 92 35                      sbca    R2H
(1)     39C : 97 31                      staa    R0H
(1)     39E : 39                         rts
(1)     39F :
(1)     39F :                    ;;; Signed compare R0=sign(R1-R2)
(1)     39F :                    ;;; @return R0=A=0;  BEQ (minuend == subtrahend)
(1)     39F :                    ;;;         R0=A=1;  BPL (minuend > subtrahend)
(1)     39F :                    ;;;         R0=A=-1; BMI (minuend < subtrahend)
(1)     39F :                    ;;; @clobber A
(1)     39F :                    cmp16:
(1)     39F : 8D F1                      bsr     sub16
(1)     3A1 : 96 31                      ldaa    R0H
(1)     3A3 : 9A 32                      oraa    R0L
(1)     3A5 : 27 1B                      beq     cmp16_end       ; return with R0=0
(1)     3A7 : 96 31                      ldaa    R0H
(1)     3A9 : 98 33                      eora    R1H
(1)     3AB : 97 32                      staa    R0L             ; R0L=(minuend-subtrahend)^minuend
(1)     3AD : 96 33                      ldaa    R1H
(1)     3AF : 98 35                      eora    R2H             ; minuend^subtrahend
(1)     3B1 : 94 32                      anda    R0L             ; overflow flag
(1)     3B3 : 98 31                      eora    R0H
(1)     3B5 : 2B 07                      bmi     cmp16_lt
(1)     3B7 :                    cmp16_gt:
(1)     3B7 : 7F 00 31                   clr     R0H
(1)     3BA : 86 01                      ldaa    #1
(1)     3BC : 20 04                      bra     cmp16_end
(1)     3BE :                    cmp16_lt:
(1)     3BE : 86 FF                      ldaa    #-1
(1)     3C0 : 97 31                      staa    R0H
(1)     3C2 :                    cmp16_end:
(1)     3C2 : 97 32                      staa    R0L
(1)     3C4 : 39                         rts
(1)     3C5 :
(1)     3C5 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)     3C5 :                    ;;; @param R1 multiplicand
(1)     3C5 :                    ;;; @param R2 multiplier
(1)     3C5 :                    ;;; @return R0 result
(1)     3C5 :                    ;;; @clobber R0 R1 R2
(1)     3C5 :                    umul16:
(1)     3C5 : 7F 00 31                   clr     R0H
(1)     3C8 : 7F 00 32                   clr     R0L
(1)     3CB : 20 1A                      bra     umul16_check
(1)     3CD :                    umul16_loop:
(1)     3CD : 74 00 35                   lsr     R2H
(1)     3D0 : 76 00 36                   ror     R2L             ; multiplier >>=1
(1)     3D3 : 24 0C                      bcc     umul16_next     ; if lsb(multiplier) == 0
(1)     3D5 : 96 34                      ldaa    R1L
(1)     3D7 : 9B 32                      adda    R0L
(1)     3D9 : 97 32                      staa    R0L
(1)     3DB : 96 33                      ldaa    R1H
(1)     3DD : 99 31                      adca    R0H
(1)     3DF : 97 31                      staa    R0H             ; result += multiplicand
(1)     3E1 :                    umul16_next:
(1)     3E1 : 78 00 34                   lsl     R1L
(1)     3E4 : 79 00 33                   rol     R1H             ; multiplicand <<= 1
(1)     3E7 :                    umul16_check:
(1)     3E7 : 96 35                      ldaa    R2H
(1)     3E9 : 9A 36                      oraa    R2L
(1)     3EB : 26 E0                      bne     umul16_loop     ; while multiplier != 0
(1)     3ED :                    umul16_end:
(1)     3ED : 39                         rts
(1)     3EE :
(1)     3EE :                    ;;; Multiply; result = multiplicand * multiplier
(1)     3EE :                    ;;; @param R1 multiplicand
(1)     3EE :                    ;;; @param R2 multiplier
(1)     3EE :                    ;;; @return R0 result
(1)     3EE :                    ;;; @clobber R1 R2
(1)     3EE :                    mul16:
(1)     3EE : 96 33                      ldaa    R1H
(1)     3F0 : 98 35                      eora    R2H
(1)     3F2 : 36                         psha                    ; save hi(multiplicand^multiplier)
(1)     3F3 : D6 36                      ldab    R2L
(1)     3F5 : 96 35                      ldaa    R2H             ; A=hi(multiplier)
(1)     3F7 : 2A 03                      bpl     mul16_multiplicand
(1)     3F9 : BD 03 72                   jsr     neg_D           ; negate multiplier
(1)     3FC :                    mul16_multiplicand:
(1)     3FC : 97 35                      staa    R2H
(1)     3FE : D7 36                      stab    R2L
(1)     400 : D6 34                      ldab    R1L
(1)     402 : 96 33                      ldaa    R1H             ; A=hi(multiplicand)
(1)     404 : 2A 03                      bpl     mul16_multiply
(1)     406 : BD 03 72                   jsr     neg_D           ; negate multiplicand
(1)     409 :                    mul16_multiply:
(1)     409 : 97 33                      staa    R1H
(1)     40B : D7 34                      stab    R1L
(1)     40D : 8D B6                      bsr     umul16          ; R0=result
(1)     40F : 32                         pula                    ; A=(multiplicand^multiplier)
(1)     410 : 4D                         tsta
(1)     411 : 2A 0B                      bpl     mul16_end
(1)     413 : 96 31                      ldaa    R0H
(1)     415 : D6 32                      ldab    R0L
(1)     417 : BD 03 72                   jsr     neg_D           ; negate result
(1)     41A : 97 31                      staa    R0H
(1)     41C : D7 32                      stab    R0L
(1)     41E :                    mul16_end:
(1)     41E : 39                         rts
(1)     41F :
(1)     41F :                    ;;; Unsigned division: dividend / divisor = quotient ... reminder
(1)     41F :                    ;;; @praram R1 dividend
(1)     41F :                    ;;; @praram R2 divisor
(1)     41F :                    ;;; @return R0 quotient
(1)     41F :                    ;;; @return R1 reminder
(1)     41F :                    ;;; @clobber R2
(1)     41F :                    udiv16:
(1)     41F : 96 35                      ldaa    R2H
(1)     421 : 9A 36                      oraa    R2L
(1)     423 : 27 45                      beq     udiv16_end      ; branch if R2==0
(1)     425 : C6 01                      ldab    #1              ; B=bits
(1)     427 : 20 07                      bra     udiv16_prep
(1)     429 :                    udiv16_prep_loop:
(1)     429 : 78 00 36                   lsl     R2L
(1)     42C : 79 00 35                   rol     R2H             ; divisor <<= 1
(1)     42F : 5C                         incb                    ; ++bits
(1)     430 :                    udiv16_prep:
(1)     430 : 96 35                      ldaa    R2H
(1)     432 : 2A F5                      bpl     udiv16_prep_loop ; while msb(divisor) == 0
(1)     434 : 7F 00 31                   clr     R0H
(1)     437 : 7F 00 32                   clr     R0L             ; quotient=0
(1)     43A : 20 0C                      bra     udiv16_enter_loop
(1)     43C :                    udiv16_loop:
(1)     43C : 74 00 35                   lsr     R2H
(1)     43F : 76 00 36                   ror     R2L             ; divisor >>= 1
(1)     442 : 78 00 32                   lsl     R0L
(1)     445 : 79 00 31                   rol     R0H             ; quotient <<= 1
(1)     448 :                    udiv16_enter_loop:
(1)     448 : 96 34                      ldaa    R1L
(1)     44A : 90 36                      suba    R2L
(1)     44C : 97 34                      staa    R1L
(1)     44E : 96 33                      ldaa    R1H
(1)     450 : 92 35                      sbca    R2H
(1)     452 : 97 33                      staa    R1H             ; dividend -= divisor
(1)     454 : 25 05                      bcs     udiv16_readd
(1)     456 : 7C 00 32                   inc     R0L             ; quotient |= 1
(1)     459 : 20 0C                      bra     udiv16_next
(1)     45B :                    udiv16_readd:
(1)     45B : 96 34                      ldaa    R1L
(1)     45D : 9B 36                      adda    R2L
(1)     45F : 97 34                      staa    R1L
(1)     461 : 96 33                      ldaa    R1H
(1)     463 : 99 35                      adca    R2H
(1)     465 : 97 33                      staa    R1H             ; dividend += divisor
(1)     467 :                    udiv16_next:
(1)     467 : 5A                         decb                    ; --bits
(1)     468 : 26 D2                      bne     udiv16_loop     ; while bits != 0
(1)     46A :                    udiv16_end:
(1)     46A : 39                         rts
(1)     46B :
(1)     46B :                    ;;; Division; dividend / divisor = quotient ... reminder
(1)     46B :                    ;;; @param R1 dividend
(1)     46B :                    ;;; @param R2 divisor
(1)     46B :                    ;;; @return R0 quotient
(1)     46B :                    ;;; @return R1 reminder
(1)     46B :                    ;;; @clobber R2
(1)     46B :                    div16:
(1)     46B : 96 33                      ldaa    R1H
(1)     46D : 98 35                      eora    R2H
(1)     46F : 36                         psha                    ; save hi(dividend^divisor)
(1)     470 : D6 36                      ldab    R2L
(1)     472 : 96 35                      ldaa    R2H             ; A=hi(divisor)
(1)     474 : 2A 03                      bpl     div16_dividend
(1)     476 : BD 03 72                   jsr     neg_D           ; negate divisor
(1)     479 :                    div16_dividend:
(1)     479 : 97 35                      staa    R2H
(1)     47B : D7 36                      stab    R2L
(1)     47D : D6 34                      ldab    R1L
(1)     47F : 96 33                      ldaa    R1H             ; A=hi(dividend)
(1)     481 : 2A 03                      bpl     div16_divide
(1)     483 : BD 03 72                   jsr     neg_D           ; negate dividend
(1)     486 :                    div16_divide:
(1)     486 : 97 33                      staa    R1H
(1)     488 : D7 34                      stab    R1L
(1)     48A : BD 04 1F                   jsr     udiv16          ; R0=quotient
(1)     48D : 32                         pula                    ; A=(dividend^divisor)
(1)     48E : 4D                         tsta
(1)     48F : 2A 0B                      bpl     div16_end
(1)     491 : 96 31                      ldaa    R0H
(1)     493 : D6 32                      ldab    R0L
(1)     495 : BD 03 72                   jsr     neg_D           ; negate result
(1)     498 : 97 31                      staa    R0H
(1)     49A : D7 32                      stab    R0L
(1)     49C :                    div16_end:
(1)     49C : 39                         rts
        49D :                            include "queue.inc"
(1)     49D :                    ;;; [queue] queue structure
(1)     49D : =0                 queue_len:      equ     0       ; queue length
(1)     49D : =1                 queue_size:     equ     1       ; buffer size
(1)     49D : =2                 queue_put:      equ     2       ; queue put index
(1)     49D : =3                 queue_get:      equ     3       ; queue get index
(1)     49D : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     49D :
(1)     49D :                    ;;; [queue] Initialize queue
(1)     49D :                    ;;; @param X queue work space pointer
(1)     49D :                    ;;; @param B queue work space size
(1)     49D :                    ;;; @clobber B
(1)     49D :                    queue_init_tmp:
(1)     49D :                            rmb     2
(1)     49F :                    queue_init:
(1)     49F : FF 04 9D                   stx     queue_init_tmp  ; save X
(1)     4A2 : 37                         pshb
(1)     4A3 :                    queue_init_loop:
(1)     4A3 : 6F 00                      clr     0,x
(1)     4A5 : 08                         inx
(1)     4A6 : 5A                         decb
(1)     4A7 : 26 FA                      bne     queue_init_loop
(1)     4A9 : FE 04 9D                   ldx     queue_init_tmp  ; restore X
(1)     4AC : 33                         pulb
(1)     4AD : C0 04                      subb    #queue_buf
(1)     4AF : E7 01                      stab    queue_size,x
(1)     4B1 : 39                         rts
(1)     4B2 :
(1)     4B2 :                    ;;; [abx] Add B to X
(1)     4B2 :                    ;;; @return X X+B
(1)     4B2 :                    abx_tmp:
(1)     4B2 :                            rmb     2
(1)     4B4 :                    abx:
(1)     4B4 : 37                 	pshb
(1)     4B5 : FF 04 B2                   stx     abx_tmp
(1)     4B8 : FB 04 B3                   addb    abx_tmp+1
(1)     4BB : F7 04 B3                   stab    abx_tmp+1
(1)     4BE : 5F                         clrb
(1)     4BF : F9 04 B2                   adcb    abx_tmp
(1)     4C2 : F7 04 B2                   stab    abx_tmp
(1)     4C5 : FE 04 B2                   ldx     abx_tmp
(1)     4C8 : 33                         pulb
(1)     4C9 : 39                         rts
(1)     4CA :
(1)     4CA :                    ;;; [queue] Add an element to queue
(1)     4CA :                    ;;; @param X queue work space pointer
(1)     4CA :                    ;;; @param A an element
(1)     4CA :                    ;;; @return CC.C 0 if queue is full
(1)     4CA :                    queue_add_tmp:
(1)     4CA :                            rmb     2
(1)     4CC :                    queue_add:
(1)     4CC : 37                 	pshb
(1)     4CD : E6 00                      ldab    queue_len,x
(1)     4CF : E1 01                      cmpb    queue_size,x
(1)     4D1 : 24 18                      bhs     queue_add_return ; carry is cleared
(1)     4D3 : E6 02                      ldab    queue_put,x     ; 8 bits offset
(1)     4D5 : FF 04 CA                   stx     queue_add_tmp   ; save X
(1)     4D8 : 8D DA                      bsr     abx
(1)     4DA : A7 04                      staa    queue_buf,x     ; store an element
(1)     4DC : FE 04 CA                   ldx     queue_add_tmp   ; restore X
(1)     4DF : 6C 00                      inc     queue_len,x
(1)     4E1 : 5C                         incb
(1)     4E2 : E7 02                      stab    queue_put,x
(1)     4E4 : E1 01                      cmpb    queue_size,x
(1)     4E6 : 25 03                      blo     queue_add_return ; carry is set
(1)     4E8 : 6F 02                      clr     queue_put,x
(1)     4EA : 0D                         sec                     ; set carry
(1)     4EB :                    queue_add_return:
(1)     4EB : 33                 	pulb
(1)     4EC : 39                         rts
(1)     4ED :
(1)     4ED :                    ;;; [queue] Remove an element from queue
(1)     4ED :                    ;;; @param X queue work space pointer
(1)     4ED :                    ;;; @return A an element
(1)     4ED :                    ;;; @return CC.C 0 if queue is empty
(1)     4ED :                    queue_remove_tmp:
(1)     4ED :                            rmb     2
(1)     4EF :                    queue_remove:
(1)     4EF : 6D 00                      tst     queue_len,x
(1)     4F1 : 26 02                      bne     queue_remove_elem
(1)     4F3 : 0C                         clc                     ; clear carry
(1)     4F4 : 39                         rts
(1)     4F5 :                    queue_remove_elem
(1)     4F5 : 37                 	pshb
(1)     4F6 : E6 03                      ldab    queue_get,x     ; 8 bits offset
(1)     4F8 : FF 04 ED                   stx     queue_remove_tmp ;save X
(1)     4FB : 8D B7                      bsr     abx
(1)     4FD : A6 04                      ldaa    queue_buf,x     ; read an element
(1)     4FF : FE 04 ED                   ldx     queue_remove_tmp ; restore X
(1)     502 : 6A 00                      dec     queue_len,x
(1)     504 : 5C                         incb
(1)     505 : E7 03                      stab    queue_get,x
(1)     507 : E1 01                      cmpb    queue_size,x
(1)     509 : 25 03                      blo     queue_remove_return ; carry is set
(1)     50B : 6F 03                      clr     queue_get,x
(1)     50D : 0D                         sec                     ; set carry
(1)     50E :                    queue_remove_return:
(1)     50E : 33                         pulb
(1)     50F : 39                         rts
(1)     510 :
(1)     510 :                    ;;; Local Variables:
(1)     510 :                    ;;; mode: asm
(1)     510 :                    ;;; End:
(1)     510 :                    ;;; vim: set ft=asm et ts=4 sw=4:
        510 :
        510 :                    isr_irq:
        510 : F6 DF 00                   ldab    ACIA_status
        513 : C5 80                      bitb    #IRQF_bm
        515 : 27 1C                      beq     isr_irq_exit
        517 : C5 01                      bitb    #RDRF_bm
        519 : 27 09                      beq     isr_irq_send
        51B : B6 DF 01                   ldaa    ACIA_data       ; receive character
        51E : CE 20 00                   ldx     #rx_queue
        521 : BD 04 CC                   jsr     queue_add
        524 :                    isr_irq_send:
        524 : C5 02                      bitb    #TDRE_bm
        526 : 27 0B                      beq     isr_irq_exit
        528 : CE 20 80                   ldx     #tx_queue
        52B : BD 04 EF                   jsr     queue_remove
        52E : 24 04                      bcc     isr_irq_send_empty
        530 : B7 DF 01                   staa    ACIA_data       ; send character
        533 :                    isr_irq_exit:
        533 : 3B                         rti
        534 :                    isr_irq_send_empty:
        534 : 86 94                      ldaa    #RX_INT_TX_NO
        536 : B7 DF 00                   staa    ACIA_control    ; disable Tx interrupt
        539 : 3B                         rti

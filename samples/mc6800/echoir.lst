          0 :                            cpu     6800
          0 :                            include "mc6800.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6800/MC6802/MC6808
(1)       0 :                    ;;; Condition Code Register (CC)
(1)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 CC_OVERFLOW   equ  %00000010   ; set to 1 if overflow occurred
(1)       0 : =4                 CC_ZERO       equ  %00000100   ; set to 1 if result is zero
(1)       0 : =8                 CC_NEGATIVE   equ  %00001000   ; set to 1 if result is negative
(1)       0 : =10                CC_IRQ        equ  %00010000   ; if 1, IRQ is masked
(1)       0 : =20                CC_HALF_CARRY equ  %00100000   ; if 1, decimal carry from least digit occurred
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =FFF8              VEC_IRQ:        equ     $FFF8  ; $FFF8: Maskable Interrupt Request
(1)       0 : =FFFA              VEC_SWI:        equ     $FFFA  ; $FFFA: Software Interrupt
(1)       0 : =FFFC              VEC_NMI:        equ     $FFFC  ; $FFFC: Non Maskable Interrupt
(1)       0 : =FFFE              VEC_RESET:      equ     $FFFE  ; $FFFE: Reset
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     $DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 :
       2000 :                            org     $2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       rmb     rx_queue_size
       2080 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
       2080 :
       1000 :                            org     $1000
       1000 : =FFF               stack:  equ     *-1             ; MC6800's SP is post-decrement/pre-increment
       1000 :
       FFF8 :                            org     VEC_IRQ
       FFF8 : 01 B1                      fdb     isr_irq
       FFFA :
       FFFA :                            org     VEC_SWI
       FFFA : FF FA                      fdb     VEC_SWI         ; for halt to system
       FFFC :
       FFFE :                            org     VEC_RESET
       FFFE : 01 00                      fdb     initialize
      10000 :
        100 :                            org     $0100
        100 :                    initialize:
        100 : 8E 0F FF                   lds     #stack
        103 : CE 20 00                   ldx     #rx_queue
        106 : C6 80                      ldab    #rx_queue_size
        108 : BD 01 40                   jsr     queue_init
        10B :                            ;; initialize ACIA
        10B : 86 03                      ldaa    #CDS_RESET_gc   ; Master reset
        10D : B7 DF 00                   staa    ACIA_control
        110 : 86 94                      ldaa    #RX_INT_TX_NO
        112 : B7 DF 00                   staa    ACIA_control
        115 : 0E                         cli                     ; Enable IRQ
        116 : CE 20 00                   ldx     #rx_queue
        119 : 20 01                      bra     loop
        11B :
        11B :                    wait:
        11B : 3E                         wai
        11C :                    loop:
        11C : 0F                         sei                     ; Disable IRQ
        11D : BD 01 90                   jsr     queue_remove
        120 : 0E                         cli                     ; Enable IRQ
        121 : 24 F8                      bcc     wait
        123 : 4D                         tsta
        124 : 27 0C                      beq     halt_to_system
        126 : 8D 0B                      bsr     putchar
        128 : 81 0D                      cmpa    #$0D
        12A : 26 F0                      bne     loop
        12C : 86 0A                      ldaa    #$0A
        12E : 8D 03                      bsr     putchar
        130 : 20 EA                      bra     loop
        132 :                    halt_to_system:
        132 : 3F                         swi                     ; halt to system
        133 :
        133 :                    putchar:
        133 : F6 DF 00                   ldab    ACIA_status
        136 : C5 02                      bitb    #TDRE_bm
        138 : 27 F9                      beq     putchar
        13A : B7 DF 01                   staa    ACIA_data
        13D : 39                         rts
        13E :
        13E :                            include "queue.inc"
(1)     13E :                    ;;; [queue] queue structure
(1)     13E : =0                 queue_len:      equ     0       ; queue length
(1)     13E : =1                 queue_size:     equ     1       ; buffer size
(1)     13E : =2                 queue_put:      equ     2       ; queue put index
(1)     13E : =3                 queue_get:      equ     3       ; queue get index
(1)     13E : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     13E :
(1)     13E :                    ;;; [queue] Initialize queue
(1)     13E :                    ;;; @param X queue work space pointer
(1)     13E :                    ;;; @param B queue work space size
(1)     13E :                    ;;; @clobber B
(1)     13E :                    queue_init_tmp:
(1)     13E :                            rmb     2
(1)     140 :                    queue_init:
(1)     140 : FF 01 3E                   stx     queue_init_tmp  ; save X
(1)     143 : 37                         pshb
(1)     144 :                    queue_init_loop:
(1)     144 : 6F 00                      clr     0,x
(1)     146 : 08                         inx
(1)     147 : 5A                         decb
(1)     148 : 26 FA                      bne     queue_init_loop
(1)     14A : FE 01 3E                   ldx     queue_init_tmp  ; restore X
(1)     14D : 33                         pulb
(1)     14E : C0 04                      subb    #queue_buf
(1)     150 : E7 01                      stab    queue_size,x
(1)     152 : 39                         rts
(1)     153 :
(1)     153 :                    ;;; [abx] Add B to X
(1)     153 :                    ;;; @return X X+B
(1)     153 :                    abx_tmp:
(1)     153 :                            rmb     2
(1)     155 :                    abx:
(1)     155 : 37                 	pshb
(1)     156 : FF 01 53                   stx     abx_tmp
(1)     159 : FB 01 54                   addb    abx_tmp+1
(1)     15C : F7 01 54                   stab    abx_tmp+1
(1)     15F : 5F                         clrb
(1)     160 : F9 01 53                   adcb    abx_tmp
(1)     163 : F7 01 53                   stab    abx_tmp
(1)     166 : FE 01 53                   ldx     abx_tmp
(1)     169 : 33                         pulb
(1)     16A : 39                         rts
(1)     16B :
(1)     16B :                    ;;; [queue] Add an element to queue
(1)     16B :                    ;;; @param X queue work space pointer
(1)     16B :                    ;;; @param A an element
(1)     16B :                    ;;; @return CC.C 0 if queue is full
(1)     16B :                    queue_add_tmp:
(1)     16B :                            rmb     2
(1)     16D :                    queue_add:
(1)     16D : 37                 	pshb
(1)     16E : E6 00                      ldab    queue_len,x
(1)     170 : E1 01                      cmpb    queue_size,x
(1)     172 : 24 18                      bhs     queue_add_return ; carry is cleared
(1)     174 : E6 02                      ldab    queue_put,x     ; 8 bits offset
(1)     176 : FF 01 6B                   stx     queue_add_tmp   ; save X
(1)     179 : 8D DA                      bsr     abx
(1)     17B : A7 04                      staa    queue_buf,x     ; store an element
(1)     17D : FE 01 6B                   ldx     queue_add_tmp   ; restore X
(1)     180 : 6C 00                      inc     queue_len,x
(1)     182 : 5C                         incb
(1)     183 : E7 02                      stab    queue_put,x
(1)     185 : E1 01                      cmpb    queue_size,x
(1)     187 : 25 03                      blo     queue_add_return ; carry is set
(1)     189 : 6F 02                      clr     queue_put,x
(1)     18B : 0D                         sec                     ; set carry
(1)     18C :                    queue_add_return:
(1)     18C : 33                 	pulb
(1)     18D : 39                         rts
(1)     18E :
(1)     18E :                    ;;; [queue] Remove an element from queue
(1)     18E :                    ;;; @param X queue work space pointer
(1)     18E :                    ;;; @return A an element
(1)     18E :                    ;;; @return CC.C 0 if queue is empty
(1)     18E :                    queue_remove_tmp:
(1)     18E :                            rmb     2
(1)     190 :                    queue_remove:
(1)     190 : 6D 00                      tst     queue_len,x
(1)     192 : 26 02                      bne     queue_remove_elem
(1)     194 : 0C                         clc                     ; clear carry
(1)     195 : 39                         rts
(1)     196 :                    queue_remove_elem
(1)     196 : 37                 	pshb
(1)     197 : E6 03                      ldab    queue_get,x     ; 8 bits offset
(1)     199 : FF 01 8E                   stx     queue_remove_tmp ;save X
(1)     19C : 8D B7                      bsr     abx
(1)     19E : A6 04                      ldaa    queue_buf,x     ; read an element
(1)     1A0 : FE 01 8E                   ldx     queue_remove_tmp ; restore X
(1)     1A3 : 6A 00                      dec     queue_len,x
(1)     1A5 : 5C                         incb
(1)     1A6 : E7 03                      stab    queue_get,x
(1)     1A8 : E1 01                      cmpb    queue_size,x
(1)     1AA : 25 03                      blo     queue_remove_return ; carry is set
(1)     1AC : 6F 03                      clr     queue_get,x
(1)     1AE : 0D                         sec                     ; set carry
(1)     1AF :                    queue_remove_return:
(1)     1AF : 33                         pulb
(1)     1B0 : 39                         rts
(1)     1B1 :
(1)     1B1 :                    ;;; Local Variables:
(1)     1B1 :                    ;;; mode: asm
(1)     1B1 :                    ;;; End:
(1)     1B1 :                    ;;; vim: set ft=asm et ts=4 sw=4:
        1B1 :
        1B1 :                    isr_irq:
        1B1 : F6 DF 00                   ldab    ACIA_status
        1B4 : C5 80                      bitb    #IRQF_bm
        1B6 : 27 0D                      beq     isr_irq_return
        1B8 :                    isr_irq_receive:
        1B8 : C5 01                      bitb    #RDRF_bm
        1BA : 27 09                      beq     isr_irq_return
        1BC : B6 DF 01                   ldaa    ACIA_data
        1BF : CE 20 00                   ldx     #rx_queue
        1C2 : BD 01 6D                   jsr     queue_add
        1C5 :                    isr_irq_return:
        1C5 : 3B                         rti

          0 :                            cpu     ins8070
          0 :                            include "ins8070.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; INS8070
(1)       0 :                    ;;; Status Register
(1)       0 : =80                S_CY    =       X'80            ; Carry bit
(1)       0 : =80                S_L     =       X'80            ; Link bit
(1)       0 : =40                S_OV    =       X'40            ; Overflow bit
(1)       0 : =20                S_SB    =       X'20            ; Sense B bit
(1)       0 : =10                S_SA    =       X'10            ; Sense A bit
(1)       0 : =8                 S_F3    =       X'08            ; Flag 3 bit
(1)       0 : =4                 S_F2    =       X'04            ; Flag 2 bit
(1)       0 : =2                 S_F1    =       X'02            ; Flag 1 bit
(1)       0 : =1                 S_IE    =       X'01            ; Interrupt Enable bit
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =1                 ORG_RESTART     =       X'0001  ; Restart transfer location
(1)       0 : =4                 ORG_INTA        =       X'0004  ; Interrupt A transfer location
(1)       0 : =7                 ORG_INTB        =       X'0007  ; Interrupt B transfer location
(1)       0 : =A                 ORG_END         =       X'000A
(1)       0 :
(1)       0 :                    ;;; Call vectors
(1)       0 : =20                VEC_CALL0       =       X'0020  ; Call 0 vector
(1)       0 : =22                VEC_CALL1       =       X'0022  ; Call 0 vector
(1)       0 : =24                VEC_CALL2       =       X'0024  ; Call 0 vector
(1)       0 : =26                VEC_CALL3       =       X'0026  ; Call 0 vector
(1)       0 : =28                VEC_CALL4       =       X'0028  ; Call 0 vector
(1)       0 : =2A                VEC_CALL5       =       X'002A  ; Call 0 vector
(1)       0 : =2C                VEC_CALL6       =       X'002C  ; Call 0 vector
(1)       0 : =2E                VEC_CALL7       =       X'002E  ; Call 0 vector
(1)       0 : =30                VEC_CALL8       =       X'0030  ; Call 0 vector
(1)       0 : =32                VEC_CALL9       =       X'0032  ; Call 0 vector
(1)       0 : =34                VEC_CALL10      =       X'0034  ; Call 0 vector
(1)       0 : =36                VEC_CALL11      =       X'0036  ; Call 0 vector
(1)       0 : =38                VEC_CALL12      =       X'0038  ; Call 0 vector
(1)       0 : =3A                VEC_CALL13      =       X'003A  ; Call 0 vector
(1)       0 : =3C                VEC_CALL14      =       X'003C  ; Call 0 vector
(1)       0 : =3E                VEC_CALL15      =       X'003E  ; Call 0 vector
(1)       0 : =40                VEC_END         =       X'0040
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA    =       X'DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control    =       ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm          =       X'03   ; Group mask
(1)       0 : =0                 CDS_DIV1_gc     =       X'00   ; /1
(1)       0 : =1                 CDS_DIV16_gc    =       X'01   ; /16
(1)       0 : =2                 CDS_DIV64_gc    =       X'02   ; /64
(1)       0 : =3                 CDS_RESET_gc    =       X'03   ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm          =       X'1C   ; Group mask
(1)       0 : =0                 WSB_7E2_gc      =       X'00   ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc      =       X'04   ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc      =       X'08   ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc      =       X'0C   ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc      =       X'10   ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc      =       X'14   ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc      =       X'18   ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc      =       X'1C   ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm          =       X'60   ; Group mask
(1)       0 : =0                 TCB_DI_gc       =       X'00   ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc       =       X'20   ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc      =       X'40   ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc    =       X'60   ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                    ; Transmit Break Level
(1)       0 : =80                RIEB_bm         =       X'80   ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status     =       ACIA+0
(1)       0 : =1                 RDRF_bm         =       X'01   ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm         =       X'02   ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm         =       X'04   ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm         =       X'08   ; Clear To Send Flag
(1)       0 : =10                FERR_bm         =       X'10   ; Frame Error Flag
(1)       0 : =20                OVRN_bm         =       X'20   ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm         =       X'40   ; Parity Error Flag
(1)       0 : =80                IRQF_bm         =       X'80   ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data       =       ACIA+1  ; Data register
          0 : =0                 ACIA_C  =       0               ; ACIA control offset
          0 : =0                 ACIA_S  =       0               ; ACIA status offset
          0 : =1                 ACIA_D  =       1               ; ACIA data register offset
          0 :
          0 : =10                rx_queue_size   =       16
          0 : =30                tx_queue_size   =       48
          0 : =94                RX_INT_TX_NO    =       WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT   =       WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
       2000 :                            .=      X'2000
       2000 :                    rx_queue:
       2010 :                            .=      .+rx_queue_size
       2010 :                    tx_queue:
       2040 :                            .=      .+tx_queue_size
       2040 :
          1 :                            .=      ORG_RESTART
          1 : 24 FF 0F                   jmp     initialize
          4 :
          4 :                            .=      ORG_INTA
          4 : 24 30 11                   jmp     isr_irq
          7 :
         3E :                            .=      VEC_CALL15
         3E : 00 00                      .dbyte  0               ; halt to system
         40 :
       1000 :                            .=      X'1000
       1000 :                    stack:
       1000 :                    initialize:
       1000 : 25 00 10                   ld      SP, =stack
       1003 :                            ;; initialize queues
       1003 : 26 00 20                   ld      P2, =rx_queue
       1006 : C4 10                      ld      A, =rx_queue_size
       1008 : 20 D0 10                   jsr     queue_init
       100B : 26 10 20                   ld      P2, =tx_queue
       100E : C4 30                      ld      A, =tx_queue_size
       1010 : 20 D0 10                   jsr     queue_init
       1013 :
       1013 :                            ;; initialize ACIA
       1013 : 26 00 DF                   ld      P2, =ACIA
       1016 : C4 03                      ld      A, =CDS_RESET_gc ; master reset
       1018 : CA 00                      st      A, ACIA_C, P2
       101A : C4 94                      ld      A, =RX_INT_TX_NO
       101C : CA 00                      st      A, ACIA_C, P2
       101E : 3B 01                      or      S, =S_IE          ; enable IRQ
       1020 :
       1020 :                    loop:
       1020 : 20 A3 10                   jsr     getchar
       1023 : 6C FB                      bz      loop
       1025 : 40                         ld      A, E
       1026 : 6C 1A                      bz      halt_to_system
       1028 : 20 AE 10                   jsr     putchar         ; echo
       102B : C4 20                      ld      A, =' '         ; space
       102D : 20 AE 10                   jsr     putchar
       1030 : 40                         ld      A, E
       1031 : 20 4C 10                   jsr     put_hex8        ; print in hex
       1034 : C4 20                      ld      A, =' '         ; space
       1036 : 20 AE 10                   jsr     putchar
       1039 : 40                         ld      A, E
       103A : 20 77 10                   jsr     put_bin8        ; print in binary
       103D : 20 42 10                   jsr     newline
       1040 : 74 DE                      bra     loop
       1042 :                    halt_to_system:
       1042 : 1F                         call    15
       1043 :
       1043 :                    ;;; Put newline
       1043 :                    ;;; @clobber A
       1043 :                    newline:
       1043 : C4 0D                      ld      A, =X'0D
       1045 : 20 AE 10                   jsr     putchar
       1048 : C4 0A                      ld      A, =X'0A
       104A : 24 AE 10                   jmp     putchar
       104D :
       104D :                    ;;; Print uint8_t in hex
       104D :                    ;;; @param A uint8_t value to be printed in hex.
       104D :                    put_hex8:
       104D : 08                         push    ea
       104E : C4 30                      ld      A, ='0'
       1050 : 20 AE 10                   jsr     putchar
       1053 : C4 78                      ld      A, ='x'
       1055 : 20 AE 10                   jsr     putchar
       1058 : C1 00                      ld      A, 0, SP
       105A : 3C                         sr      A
       105B : 3C                         sr      A
       105C : 3C                         sr      A
       105D : 3C                         sr      A
       105E : 20 67 10                   jsr     put_hex4
       1061 : C1 00                      ld      A, 0, SP
       1063 : 20 67 10                   jsr     put_hex4
       1066 : 3A                         pop     ea
       1067 : 5C                         ret
       1068 :                    put_hex4:
       1068 : D4 0F                      and     A, =X'0F
       106A : FC 0A                      sub     A, =10
       106C : 64 05                      bp      put_hex4_hex
       106E : F4 3A                      add     A, ='0'+10
       1070 : 24 AE 10                   jmp     putchar
       1073 :                    put_hex4_hex:
       1073 : F4 41                      add     A, ='A'
       1075 : 24 AE 10                   jmp     putchar
       1078 :
       1078 :                    ;;; Print uint8_t in binary
       1078 :                    ;;; @param A(save_a) uint8_t value to be printed in binary.
       1078 :                    put_bin8:
       1078 : 08                         push    ea
       1079 : C4 30                      ld      A, ='0'
       107B : 20 AE 10                   jsr     putchar
       107E : C4 62                      ld      A, ='b'
       1080 : 20 AE 10                   jsr     putchar
       1083 : C1 00                      ld      A, 0, SP
       1085 : 48                         ld      E, A
       1086 : 20 8D 10                   jsr     put_bin4
       1089 : 20 8D 10                   jsr     put_bin4
       108C : 3A                         pop     ea
       108D : 5C                         ret
       108E :                    put_bin4:
       108E : 20 90 10                   jsr     put_bin2
       1091 :                    put_bin2:
       1091 : 20 93 10                   jsr     put_bin1
       1094 :                    put_bin1:
       1094 : 40                         ld      A, E
       1095 : 70                         add     A, E
       1096 : 48                         ld      E, A            ; E<<=1
       1097 : 06                         ld      A, S
       1098 : 64 05                      bp      put_bin0        ; A:7=CY
       109A : C4 31                      ld      A, ='1'
       109C : 24 AE 10                   jmp     putchar
       109F :                    put_bin0:
       109F : C4 30                      ld      A, ='0'
       10A1 : 24 AE 10                   jmp     putchar
       10A4 :
       10A4 :                    ;;; Get character
       10A4 :                    ;;; @clobber P2
       10A4 :                    ;;; @return E char
       10A4 :                    ;;; @return A 0 if no char received
       10A4 :                    getchar:
       10A4 : 26 00 20                   ld      P2, =rx_queue
       10A7 : 39 FE                      and     S, =~S_IE       ; disable IRQ
       10A9 : 20 15 11                   jsr     queue_remove
       10AC : 3B 01                      or      S, =S_IE        ; enable IRQ
       10AE : 5C                         ret
       10AF :
       10AF :                    ;;; Put character
       10AF :                    ;;; @param A char
       10AF :                    ;;; @clobber P2
       10AF :                    putchar:
       10AF : 08                         push    ea
       10B0 : 48                         ld      E, A
       10B1 :                    putchar_retry:
       10B1 : 40                         ld      A, E
       10B2 : 26 10 20                   ld      P2, =tx_queue
       10B5 : 39 FE                      and     S, =~S_IE       ; disable IRQ
       10B7 : 20 F7 10                   jsr     queue_add
       10BA : 3B 01                      or      S, =S_IE        ; enable IRQ
       10BC : 6C F3                      bz      putchar_retry   ; queue is full
       10BE : 39 FE                      and     S, =~S_IE       ; disable IRQ
       10C0 : 26 00 DF                   ld      P2, =ACIA
       10C3 : C2 00                      ld      A, ACIA_C, P2
       10C5 : D4 20                      and     A, =TCB_EI_gc
       10C7 : 7C 04                      bnz     putchar_exit
       10C9 : C4 B4                      ld      A, =RX_INT_TX_INT ; enable Tx interrupt
       10CB : CA 00                      st      A, ACIA_C, P2
       10CD :                    putchar_exit:
       10CD : 3A                         pop     ea
       10CE : 3B 01                      or      S, =S_IE        ; enable IRQ
       10D0 : 5C                         ret
       10D1 :
       10D1 :                            include "queue.inc"
(1)    10D1 :                    ;;; [queue] queue structure
(1)    10D1 : =0                 queue_len       =       0       ; queue length
(1)    10D1 : =1                 queue_size      =       1       ; buffer size
(1)    10D1 : =2                 queue_put       =       2       ; queue put index
(1)    10D1 : =3                 queue_get       =       3       ; queue get index
(1)    10D1 : =4                 queue_buf       =       4       ; buffer start offset
(1)    10D1 :
(1)    10D1 :                    ;;; [queue] Initialize queue
(1)    10D1 :                    ;;; @param P2 queue work space pointer
(1)    10D1 :                    ;;; @param A queue work space size
(1)    10D1 :                    ;;; @clobber A
(1)    10D1 :                    queue_init:
(1)    10D1 : 48                         ld      E, A
(1)    10D2 : C4 00                      ld      A, =0
(1)    10D4 : CA 00                      st      A, queue_len, P2
(1)    10D6 : CA 02                      st      A, queue_put, P2
(1)    10D8 : CA 03                      st      A, queue_get, P2
(1)    10DA : 01                         xch     A, E            ; E=0, A=space size
(1)    10DB : FC 04                      sub     A, =queue_buf
(1)    10DD : CA 01                      st      A, queue_size, P2
(1)    10DF : 0A                         push    A               ; 0,SP=counter
(1)    10E0 : C6 04                      ld      A, @queue_buf, P2
(1)    10E2 :                    queue_init_loop:
(1)    10E2 : 40                         ld      A, E            ; E=0
(1)    10E3 : CE 01                      st      A, @1, P2
(1)    10E5 : 99 00                      dld     A, 0, SP
(1)    10E7 : 7C F9                      bnz     queue_init_loop
(1)    10E9 : 38                         pop     A               ; discard counter
(1)    10EA : 5C                         ret
(1)    10EB :
(1)    10EB :                    ;;; [add_p2_a] Add A to P2
(1)    10EB :                    ;;; @param P2
(1)    10EB :                    ;;; @param A
(1)    10EB :                    ;;; @return P3=P2+A
(1)    10EB :                    add_p2_a:
(1)    10EB : 08                         push    ea              ; save EA
(1)    10EC : 01                         xch     A, E
(1)    10ED : C4 00                      ld      A, =0
(1)    10EF : 01                         xch     A, E
(1)    10F0 : 08                         push    ea              ; 0:E
(1)    10F1 : 32                         ld      ea, P2
(1)    10F2 : B1 00                      add     ea, 0, SP       ; EA=P2+E
(1)    10F4 : 47                         ld      P3, ea
(1)    10F5 : 3A                         pop     ea
(1)    10F6 : 3A                         pop     ea              ; restore EA
(1)    10F7 : 5C                         ret
(1)    10F8 :
(1)    10F8 :                    ;;; [queue] Add an element to queue
(1)    10F8 :                    ;;; @param P2 queue work space pointer
(1)    10F8 :                    ;;; @param A an element
(1)    10F8 :                    ;;; @return E an element
(1)    10F8 :                    ;;; @return A 0 if queue is full
(1)    10F8 :                    queue_add:
(1)    10F8 : 57                         push    P3
(1)    10F9 : 48                         ld      E, A            ; save element in E
(1)    10FA : C2 00                      ld      A, queue_len, P2
(1)    10FC : FA 01                      sub     A, queue_size, P2
(1)    10FE : 6C 14                      bz      queue_add_return ; A=0
(1)    1100 : C2 02                      ld      A, queue_put, P2 ; 8 bits offset
(1)    1102 : 20 EA 10                   jsr     add_p2_a
(1)    1105 : 40                         ld      A, E
(1)    1106 : CB 04                      st      A, queue_buf, P3 ; store an element
(1)    1108 : 92 00                      ild     A, queue_len, P2
(1)    110A : 92 02                      ild     A, queue_put, P2
(1)    110C : FA 01                      sub     A, queue_size, P2
(1)    110E : 7C 04                      bnz     queue_add_return ; A is not zero
(1)    1110 : CA 02                      st      A, queue_put, P2
(1)    1112 : C4 01                      ld      A, =1           ; A is not zero
(1)    1114 :                    queue_add_return:
(1)    1114 : 5F                         pop     P3
(1)    1115 : 5C                         ret
(1)    1116 :
(1)    1116 :                    ;;; [queue] Remove an element from queue
(1)    1116 :                    ;;; @param P2 queue work space pointer
(1)    1116 :                    ;;; @return E an element
(1)    1116 :                    ;;; @return A 0 if queue is empty
(1)    1116 :                    queue_remove:
(1)    1116 : 57                         push    P3
(1)    1117 : C2 00                      ld      A, queue_len, P2
(1)    1119 : 6C 14                      bz      queue_remove_return ; A is zero
(1)    111B :                    queue_remove_elem
(1)    111B : C2 03                      ld      A, queue_get, P2 ; 8 bits offset
(1)    111D : 20 EA 10                   jsr     add_p2_a
(1)    1120 : C3 04                      ld      A, queue_buf, P3 ; read an element
(1)    1122 : 48                         ld      E, A
(1)    1123 : 9A 00                      dld     A, queue_len, P2
(1)    1125 : 92 03                      ild     A, queue_get, P2
(1)    1127 : FA 01                      sub     A, queue_size, P2
(1)    1129 : 7C 04                      bnz     queue_remove_return ; A is not zero
(1)    112B : CA 03                      st      A, queue_get, P2 ; A is zero
(1)    112D : C4 01                      ld      A, =1            ; A is not zero
(1)    112F :                    queue_remove_return:
(1)    112F : 5F                         pop     P3
(1)    1130 : 5C                         ret
(1)    1131 :
(1)    1131 :                    ;;; Local Variables:
(1)    1131 :                    ;;; mode: asm
(1)    1131 :                    ;;; End:
(1)    1131 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       1131 :
       1131 :                    isr_irq:
       1131 : 08                         push    ea
       1132 : 22 00 DF                   pli     P2, =ACIA
       1135 : C2 00                      ld      A, ACIA_S, P2
       1137 : 48                         ld      E, A            ; save ACIA status in E
       1138 : D4 80                      and     A, =IRQF_bm
       113A : 6C 2E                      bz      isr_irq_exit
       113C : 40                         ld      A, E
       113D : D4 70                      and     A, =FERR_bm|OVRN_bm|PERR_bm
       113F : 6C 02                      bz      isr_irq_receive
       1141 : C2 01                      ld      A, ACIA_D, P2   ; clear errors
       1143 :                    isr_irq_receive:
       1143 : 40                         ld      A, E
       1144 : 0A                         push    A               ; save ACIA status
       1145 : D4 01                      and     A, =RDRF_bm
       1147 : 6C 08                      bz      isr_irq_send
       1149 : C2 01                      ld      A, ACIA_D, P2   ; receive character
       114B : 26 00 20                   ld      P2, =rx_queue
       114E : 20 F7 10                   jsr     queue_add
       1151 :                    isr_irq_send:
       1151 : 38                         pop     A               ; restore ACIA status
       1152 : D4 02                      and     A, =TDRE_bm
       1154 : 6C 14                      bz      isr_irq_exit
       1156 : 26 10 20                   ld      P2, =tx_queue
       1159 : 20 15 11                   jsr     queue_remove
       115C : 26 00 DF                   ld      P2, =ACIA
       115F : 6C 05                      bz      isr_irq_send_empty
       1161 : 40                         ld      A, E
       1162 : CA 01                      st      A, ACIA_D, P2   ; send character
       1164 : 74 04                      bra     isr_irq_exit
       1166 :                    isr_irq_send_empty:
       1166 : C4 94                      ld      A, =RX_INT_TX_NO
       1168 : CA 00                      st      A, ACIA_C, P2   ; disable Tx interrupt
       116A :                    isr_irq_exit:
       116A : 5E                         pop     P2
       116B : 3A                         pop     ea
       116C : 3B 01                      or      S, =S_IE
       116E : 5C                         ret
       116F :
       116F :                            end

          0 :                            cpu     ins8070
          0 :                            include "ins8070.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; INS8070
(1)       0 :                    ;;; Status Register
(1)       0 : =80                S_CY    =       X'80            ; Carry bit
(1)       0 : =80                S_L     =       X'80            ; Link bit
(1)       0 : =40                S_OV    =       X'40            ; Overflow bit
(1)       0 : =20                S_SB    =       X'20            ; Sense B bit
(1)       0 : =10                S_SA    =       X'10            ; Sense A bit
(1)       0 : =8                 S_F3    =       X'08            ; Flag 3 bit
(1)       0 : =4                 S_F2    =       X'04            ; Flag 2 bit
(1)       0 : =2                 S_F1    =       X'02            ; Flag 1 bit
(1)       0 : =1                 S_IE    =       X'01            ; Interrupt Enable bit
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =1                 ORG_RESTART     =       X'0001  ; Restart transfer location
(1)       0 : =4                 ORG_INTA        =       X'0004  ; Interrupt A transfer location
(1)       0 : =7                 ORG_INTB        =       X'0007  ; Interrupt B transfer location
(1)       0 : =A                 ORG_END         =       X'000A
(1)       0 :
(1)       0 :                    ;;; Call vectors
(1)       0 : =20                VEC_CALL0       =       X'0020  ; Call 0 vector
(1)       0 : =22                VEC_CALL1       =       X'0022  ; Call 0 vector
(1)       0 : =24                VEC_CALL2       =       X'0024  ; Call 0 vector
(1)       0 : =26                VEC_CALL3       =       X'0026  ; Call 0 vector
(1)       0 : =28                VEC_CALL4       =       X'0028  ; Call 0 vector
(1)       0 : =2A                VEC_CALL5       =       X'002A  ; Call 0 vector
(1)       0 : =2C                VEC_CALL6       =       X'002C  ; Call 0 vector
(1)       0 : =2E                VEC_CALL7       =       X'002E  ; Call 0 vector
(1)       0 : =30                VEC_CALL8       =       X'0030  ; Call 0 vector
(1)       0 : =32                VEC_CALL9       =       X'0032  ; Call 0 vector
(1)       0 : =34                VEC_CALL10      =       X'0034  ; Call 0 vector
(1)       0 : =36                VEC_CALL11      =       X'0036  ; Call 0 vector
(1)       0 : =38                VEC_CALL12      =       X'0038  ; Call 0 vector
(1)       0 : =3A                VEC_CALL13      =       X'003A  ; Call 0 vector
(1)       0 : =3C                VEC_CALL14      =       X'003C  ; Call 0 vector
(1)       0 : =3E                VEC_CALL15      =       X'003E  ; Call 0 vector
(1)       0 : =40                VEC_END         =       X'0040
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA    =       X'DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control    =       ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm          =       X'03   ; Group mask
(1)       0 : =0                 CDS_DIV1_gc     =       X'00   ; /1
(1)       0 : =1                 CDS_DIV16_gc    =       X'01   ; /16
(1)       0 : =2                 CDS_DIV64_gc    =       X'02   ; /64
(1)       0 : =3                 CDS_RESET_gc    =       X'03   ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm          =       X'1C   ; Group mask
(1)       0 : =0                 WSB_7E2_gc      =       X'00   ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc      =       X'04   ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc      =       X'08   ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc      =       X'0C   ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc      =       X'10   ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc      =       X'14   ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc      =       X'18   ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc      =       X'1C   ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm          =       X'60   ; Group mask
(1)       0 : =0                 TCB_DI_gc       =       X'00   ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc       =       X'20   ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc      =       X'40   ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc    =       X'60   ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                    ; Transmit Break Level
(1)       0 : =80                RIEB_bm         =       X'80   ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status     =       ACIA+0
(1)       0 : =1                 RDRF_bm         =       X'01   ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm         =       X'02   ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm         =       X'04   ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm         =       X'08   ; Clear To Send Flag
(1)       0 : =10                FERR_bm         =       X'10   ; Frame Error Flag
(1)       0 : =20                OVRN_bm         =       X'20   ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm         =       X'40   ; Parity Error Flag
(1)       0 : =80                IRQF_bm         =       X'80   ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data       =       ACIA+1  ; Data register
          0 : =0                 ACIA_C  =       0               ; ACIA control offset
          0 : =0                 ACIA_S  =       0               ; ACIA status offset
          0 : =1                 ACIA_D  =       1               ; ACIA data register offset
          0 :
          0 : =10                rx_queue_size   =       16
          0 : =94                RX_INT_TX_NO    =       WSB_8N1_gc|RIEB_bm
          0 :
       2000 :                            .=      X'2000
       2000 :                    rx_queue:
       2010 :                            .=      .+rx_queue_size
       2010 :
          1 :                            .=      ORG_RESTART
          1 : 24 FF 0F                   jmp     initialize
          4 :
          4 :                            .=      ORG_INTA
          4 : 24 A1 10                   jmp     isr_irq
          7 :
         3E :                            .=      VEC_CALL15
         3E : 00 00                      .dbyte  0               ; halt to system
         40 :
       1000 :                            .=      X'1000
       1000 :                    stack:
       1000 :                    initialize:
       1000 : 25 00 10                   ld      SP, =stack
       1003 :                            ;; initialize receive queue
       1003 : 26 00 20                   ld      P2, =rx_queue
       1006 : C4 10                      ld      A, =rx_queue_size
       1008 : 20 41 10                   jsr     queue_init
       100B :
       100B :                            ;; initialize ACIA
       100B : 26 00 DF                   ld      P2, =ACIA
       100E : C4 03                      ld      A, =CDS_RESET_gc ; Master reset
       1010 : CA 00                      st      A, ACIA_C, P2
       1012 : C4 94                      ld      A, =RX_INT_TX_NO
       1014 : CA 00                      st      A, ACIA_C, P2
       1016 : 3B 01                      or      S, =S_IE        ; Enable IRQ
       1018 :
       1018 :                    loop:
       1018 : 26 00 20                   ld      P2, =rx_queue
       101B : 39 FE                      and     S, =~S_IE       ; Disable IRQ
       101D : 20 86 10                   jsr     queue_remove
       1020 : 3B 01                      or      S, =S_IE        ; Enable IRQ
       1022 : 6C F4                      bz      loop
       1024 : 40                         ld      A, E            ; A=data
       1025 : 6C 0B                      bz      halt_to_system
       1027 :                    echo:
       1027 : 20 32 10                   jsr     putchar
       102A : E4 0D                      xor     A, =X'0D       ; carriage return
       102C : 7C EA                      bnz     loop
       102E : C4 0A                      ld      A, =X'0A
       1030 : 74 F5                      bra     echo
       1032 :                    halt_to_system:
       1032 : 1F                         call    15
       1033 :
       1033 :                    putchar:
       1033 : 22 00 DF                   pli     P2, =ACIA
       1036 : 0A                         push    A
       1037 :                    putchar_loop:
       1037 : C2 00                      ld      A, ACIA_S, P2
       1039 : D4 02                      and     A, =TDRE_bm
       103B : 6C FA                      bz      putchar_loop
       103D :                    putchar_data:
       103D : 38                         pop     A
       103E : CA 01                      st      A, ACIA_D, P2
       1040 : 5E                         pop     P2
       1041 : 5C                         ret
       1042 :
       1042 :                            include "queue.inc"
(1)    1042 :                    ;;; [queue] queue structure
(1)    1042 : =0                 queue_len       =       0       ; queue length
(1)    1042 : =1                 queue_size      =       1       ; buffer size
(1)    1042 : =2                 queue_put       =       2       ; queue put index
(1)    1042 : =3                 queue_get       =       3       ; queue get index
(1)    1042 : =4                 queue_buf       =       4       ; buffer start offset
(1)    1042 :
(1)    1042 :                    ;;; [queue] Initialize queue
(1)    1042 :                    ;;; @param P2 queue work space pointer
(1)    1042 :                    ;;; @param A queue work space size
(1)    1042 :                    ;;; @clobber A
(1)    1042 :                    queue_init:
(1)    1042 : 48                         ld      E, A
(1)    1043 : C4 00                      ld      A, =0
(1)    1045 : CA 00                      st      A, queue_len, P2
(1)    1047 : CA 02                      st      A, queue_put, P2
(1)    1049 : CA 03                      st      A, queue_get, P2
(1)    104B : 01                         xch     A, E            ; E=0, A=space size
(1)    104C : FC 04                      sub     A, =queue_buf
(1)    104E : CA 01                      st      A, queue_size, P2
(1)    1050 : 0A                         push    A               ; 0,SP=counter
(1)    1051 : C6 04                      ld      A, @queue_buf, P2
(1)    1053 :                    queue_init_loop:
(1)    1053 : 40                         ld      A, E            ; E=0
(1)    1054 : CE 01                      st      A, @1, P2
(1)    1056 : 99 00                      dld     A, 0, SP
(1)    1058 : 7C F9                      bnz     queue_init_loop
(1)    105A : 38                         pop     A               ; discard counter
(1)    105B : 5C                         ret
(1)    105C :
(1)    105C :                    ;;; [add_p2_a] Add A to P2
(1)    105C :                    ;;; @param P2
(1)    105C :                    ;;; @param A
(1)    105C :                    ;;; @return P3=P2+A
(1)    105C :                    add_p2_a:
(1)    105C : 08                         push    ea              ; save EA
(1)    105D : 01                         xch     A, E
(1)    105E : C4 00                      ld      A, =0
(1)    1060 : 01                         xch     A, E
(1)    1061 : 08                         push    ea              ; 0:E
(1)    1062 : 32                         ld      ea, P2
(1)    1063 : B1 00                      add     ea, 0, SP       ; EA=P2+E
(1)    1065 : 47                         ld      P3, ea
(1)    1066 : 3A                         pop     ea
(1)    1067 : 3A                         pop     ea              ; restore EA
(1)    1068 : 5C                         ret
(1)    1069 :
(1)    1069 :                    ;;; [queue] Add an element to queue
(1)    1069 :                    ;;; @param P2 queue work space pointer
(1)    1069 :                    ;;; @param A an element
(1)    1069 :                    ;;; @return E an element
(1)    1069 :                    ;;; @return A 0 if queue is full
(1)    1069 :                    queue_add:
(1)    1069 : 57                         push    P3
(1)    106A : 48                         ld      E, A            ; save element in E
(1)    106B : C2 00                      ld      A, queue_len, P2
(1)    106D : FA 01                      sub     A, queue_size, P2
(1)    106F : 6C 14                      bz      queue_add_return ; A=0
(1)    1071 : C2 02                      ld      A, queue_put, P2 ; 8 bits offset
(1)    1073 : 20 5B 10                   jsr     add_p2_a
(1)    1076 : 40                         ld      A, E
(1)    1077 : CB 04                      st      A, queue_buf, P3 ; store an element
(1)    1079 : 92 00                      ild     A, queue_len, P2
(1)    107B : 92 02                      ild     A, queue_put, P2
(1)    107D : FA 01                      sub     A, queue_size, P2
(1)    107F : 7C 04                      bnz     queue_add_return ; A is not zero
(1)    1081 : CA 02                      st      A, queue_put, P2
(1)    1083 : C4 01                      ld      A, =1           ; A is not zero
(1)    1085 :                    queue_add_return:
(1)    1085 : 5F                         pop     P3
(1)    1086 : 5C                         ret
(1)    1087 :
(1)    1087 :                    ;;; [queue] Remove an element from queue
(1)    1087 :                    ;;; @param P2 queue work space pointer
(1)    1087 :                    ;;; @return E an element
(1)    1087 :                    ;;; @return A 0 if queue is empty
(1)    1087 :                    queue_remove:
(1)    1087 : 57                         push    P3
(1)    1088 : C2 00                      ld      A, queue_len, P2
(1)    108A : 6C 14                      bz      queue_remove_return ; A is zero
(1)    108C :                    queue_remove_elem
(1)    108C : C2 03                      ld      A, queue_get, P2 ; 8 bits offset
(1)    108E : 20 5B 10                   jsr     add_p2_a
(1)    1091 : C3 04                      ld      A, queue_buf, P3 ; read an element
(1)    1093 : 48                         ld      E, A
(1)    1094 : 9A 00                      dld     A, queue_len, P2
(1)    1096 : 92 03                      ild     A, queue_get, P2
(1)    1098 : FA 01                      sub     A, queue_size, P2
(1)    109A : 7C 04                      bnz     queue_remove_return ; A is not zero
(1)    109C : CA 03                      st      A, queue_get, P2 ; A is zero
(1)    109E : C4 01                      ld      A, =1            ; A is not zero
(1)    10A0 :                    queue_remove_return:
(1)    10A0 : 5F                         pop     P3
(1)    10A1 : 5C                         ret
(1)    10A2 :
(1)    10A2 :                    ;;; Local Variables:
(1)    10A2 :                    ;;; mode: asm
(1)    10A2 :                    ;;; End:
(1)    10A2 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       10A2 :
       10A2 :                    isr_irq:
       10A2 : 08                         push    ea
       10A3 : 22 00 DF                   pli     P2, =ACIA
       10A6 : C2 00                      ld      A, ACIA_S, P2
       10A8 : 48                         ld      E, A
       10A9 : D4 80                      and     A, =IRQF_bm
       10AB : 6C 14                      bz      isr_irq_exit
       10AD : 40                         ld      A, E
       10AE : D4 70                      and     A, =FERR_bm|OVRN_bm|PERR_bm
       10B0 : 6C 02                      bz      isr_irq_receive
       10B2 : C2 01                      ld      A, ACIA_D, P2   ; clear errors
       10B4 :                    isr_irq_receive:
       10B4 : 40                         ld      A, E
       10B5 : D4 01                      and     A, =RDRF_bm
       10B7 : 6C 08                      bz      isr_irq_exit
       10B9 : C2 01                      ld      A, ACIA_D, P2
       10BB : 26 00 20                   ld      P2, =rx_queue
       10BE : 20 68 10                   jsr     queue_add
       10C1 :                    isr_irq_exit:
       10C1 : 5E                         pop     P2
       10C2 : 3A                         pop     ea
       10C3 : 3B 01                      or      S, =S_IE
       10C5 : 5C                         ret
       10C6 :
       10C6 :                            end

          0 :                            cpu     ins8070
          0 :                            include "ins8070.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; INS8070
(1)       0 :                    ;;; Status Register
(1)       0 : =80                S_CY    =       X'80            ; Carry bit
(1)       0 : =80                S_L     =       X'80            ; Link bit
(1)       0 : =40                S_OV    =       X'40            ; Overflow bit
(1)       0 : =20                S_SB    =       X'20            ; Sense B bit
(1)       0 : =10                S_SA    =       X'10            ; Sense A bit
(1)       0 : =8                 S_F3    =       X'08            ; Flag 3 bit
(1)       0 : =4                 S_F2    =       X'04            ; Flag 2 bit
(1)       0 : =2                 S_F1    =       X'02            ; Flag 1 bit
(1)       0 : =1                 S_IE    =       X'01            ; Interrupt Enable bit
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =1                 ORG_RESTART     =       X'0001  ; Restart transfer location
(1)       0 : =4                 ORG_INTA        =       X'0004  ; Interrupt A transfer location
(1)       0 : =7                 ORG_INTB        =       X'0007  ; Interrupt B transfer location
(1)       0 : =A                 ORG_END         =       X'000A
(1)       0 :
(1)       0 :                    ;;; Call vectors
(1)       0 : =20                VEC_CALL0       =       X'0020  ; Call 0 vector
(1)       0 : =22                VEC_CALL1       =       X'0022  ; Call 0 vector
(1)       0 : =24                VEC_CALL2       =       X'0024  ; Call 0 vector
(1)       0 : =26                VEC_CALL3       =       X'0026  ; Call 0 vector
(1)       0 : =28                VEC_CALL4       =       X'0028  ; Call 0 vector
(1)       0 : =2A                VEC_CALL5       =       X'002A  ; Call 0 vector
(1)       0 : =2C                VEC_CALL6       =       X'002C  ; Call 0 vector
(1)       0 : =2E                VEC_CALL7       =       X'002E  ; Call 0 vector
(1)       0 : =30                VEC_CALL8       =       X'0030  ; Call 0 vector
(1)       0 : =32                VEC_CALL9       =       X'0032  ; Call 0 vector
(1)       0 : =34                VEC_CALL10      =       X'0034  ; Call 0 vector
(1)       0 : =36                VEC_CALL11      =       X'0036  ; Call 0 vector
(1)       0 : =38                VEC_CALL12      =       X'0038  ; Call 0 vector
(1)       0 : =3A                VEC_CALL13      =       X'003A  ; Call 0 vector
(1)       0 : =3C                VEC_CALL14      =       X'003C  ; Call 0 vector
(1)       0 : =3E                VEC_CALL15      =       X'003E  ; Call 0 vector
(1)       0 : =40                VEC_END         =       X'0040
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA    =       X'DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control    =       ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm          =       X'03   ; Group mask
(1)       0 : =0                 CDS_DIV1_gc     =       X'00   ; /1
(1)       0 : =1                 CDS_DIV16_gc    =       X'01   ; /16
(1)       0 : =2                 CDS_DIV64_gc    =       X'02   ; /64
(1)       0 : =3                 CDS_RESET_gc    =       X'03   ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm          =       X'1C   ; Group mask
(1)       0 : =0                 WSB_7E2_gc      =       X'00   ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc      =       X'04   ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc      =       X'08   ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc      =       X'0C   ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc      =       X'10   ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc      =       X'14   ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc      =       X'18   ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc      =       X'1C   ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm          =       X'60   ; Group mask
(1)       0 : =0                 TCB_DI_gc       =       X'00   ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc       =       X'20   ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc      =       X'40   ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc    =       X'60   ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                    ; Transmit Break Level
(1)       0 : =80                RIEB_bm         =       X'80   ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status     =       ACIA+0
(1)       0 : =1                 RDRF_bm         =       X'01   ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm         =       X'02   ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm         =       X'04   ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm         =       X'08   ; Clear To Send Flag
(1)       0 : =10                FERR_bm         =       X'10   ; Frame Error Flag
(1)       0 : =20                OVRN_bm         =       X'20   ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm         =       X'40   ; Parity Error Flag
(1)       0 : =80                IRQF_bm         =       X'80   ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data       =       ACIA+1  ; Data register
          0 : =0                 ACIA_C  =       0               ; ACIA control offset
          0 : =0                 ACIA_S  =       0               ; ACIA status offset
          0 : =1                 ACIA_D  =       1               ; ACIA data register offset
          0 :
          1 :                            .=      ORG_RESTART
          1 : 24 FF 0F                   jmp     initialize
          4 :
         3E :                            .=      VEC_CALL15
         3E : 00 00                      .dbyte  0               ; halt to system
         40 :
       1000 :                            .=      X'1000
       1000 :                    stack:
       1000 :                    initialize:
       1000 : 25 00 10                   ld      SP, =stack
       1003 : 26 00 DF                   ld      P2, =ACIA
       1006 : C4 03                      ld      A, =CDS_RESET_gc        ; Master reset
       1008 : CA 00                      st      A, ACIA_C, P2
       100A : C4 14                      ld      A, =WSB_8N1_gc  ; 8 bits + No Parity + 1 Stop Bits
       100C :                                                    ; Transmit, Receive interrupts disabled
       100C : CA 00                      st      A, ACIA_C, P2
       100E :
       100E : 20 72 10                   jsr     arith
       1011 : 1F                         call    15              ; halt to system
       1012 :
       1012 :                    putchar:
       1012 : 22 00 DF                   pli     P2, =ACIA
       1015 : 0A                         push    A
       1016 :                    putchar_loop:
       1016 : C2 00                      ld      A, ACIA_S, P2
       1018 : D4 02                      and     A, =TDRE_bm
       101A : 6C FA                      bz      putchar_loop
       101C :                    putchar_data:
       101C : 38                         pop     A
       101D : CA 01                      st      A, ACIA_D, P2
       101F : 5E                         pop     P2
       1020 : 5C                         ret
       1021 :
       1021 :                    newline:
       1021 : C4 0D                      ld      A, =X'0D
       1023 : 20 11 10                   jsr     putchar
       1026 : C4 0A                      ld      A, =X'0A
       1028 : 74 E8                      bra     putchar
       102A :
       102A :                    putspace:
       102A : C4 20                      ld      A, =' '
       102C : 74 E4                      bra     putchar
       102E :
       102E :                    ;;; Print "v1 op v2"
       102E :                    ;;; @param P2 v1
       102E :                    ;;; @param P3 v2
       102E :                    ;;; @param A op
       102E :                    ;;; @return EA v1
       102E :                    ;;; @return T v2
       102E :                    expr:
       102E : 0A                         push    A
       102F : 32                         ld      EA, P2
       1030 : 20 00 12                   jsr     print_int16
       1033 : 20 29 10                   jsr     putspace
       1036 : 38                         pop     A
       1037 : 20 11 10                   jsr     putchar
       103A : 20 29 10                   jsr     putspace
       103D : 33                         ld      EA, P3
       103E : 20 00 12                   jsr     print_int16
       1041 : 09                         ld      T, EA
       1042 : 32                         ld      EA, P2
       1043 : 5C                         ret
       1044 :
       1044 :                    ;;; Print " = EA"
       1044 :                    answer:
       1044 : 08                         push    EA
       1045 : 20 29 10                   jsr     putspace
       1048 : C4 3D                      ld      A, ='='
       104A : 20 11 10                   jsr     putchar
       104D : 20 29 10                   jsr     putspace
       1050 : 3A                         pop     EA
       1051 : 20 00 12                   jsr     print_int16
       1054 : 74 CB                      bra     newline
       1056 :
       1056 :                    ;;; Print "v1 rel v2"
       1056 :                    ;;; @param EA v1
       1056 :                    ;;; @param T v2
       1056 :                    comp:
       1056 : 46                         ld      P2, EA          ; P2=EA
       1057 : 0B                         ld      EA, T
       1058 : 47                         ld      P3, EA          ; P3=T
       1059 : 32                         ld      EA, P2
       105A : 20 3F 12                   jsr     cmpsi2
       105D : 6C 0A                      bz      comp_eq
       105F : 64 04                      bp      comp_gt
       1061 :                    comp_lt:
       1061 : C4 3C                      ld      A, ='<'
       1063 : 74 08                      bra     comp_out
       1065 :                    comp_gt:
       1065 : C4 3E                      ld      A, ='>'
       1067 : 74 04                      bra     comp_out
       1069 :                    comp_eq:
       1069 : C4 3D                      ld      A, ='='
       106B : 74 00                      bra     comp_out
       106D :                    comp_out:
       106D : 20 2D 10                   jsr     expr
       1070 : 24 20 10                   jmp     newline
       1073 :
       1073 :                    arith:
       1073 : 26 00 00                   ld      P2, =0
       1076 : 27 A0 92                   ld      P3, =-28000
       1079 : C4 2D                      ld      A, ='-'
       107B : 20 2D 10                   jsr     expr
       107E : 57                         push    P3
       107F : B9 00                      sub     EA, 0, SP
       1081 : 5F                         pop     P3
       1082 : 20 43 10                   jsr     answer          ; 28000
       1085 :
       1085 : 26 00 00                   ld      P2, =0
       1088 : 27 60 6D                   ld      P3, =28000
       108B : C4 2D                      ld      A, ='-'
       108D : 20 2D 10                   jsr     expr
       1090 : 57                         push    P3
       1091 : B9 00                      sub     EA, 0, SP
       1093 : 5F                         pop     P3
       1094 : 20 43 10                   jsr     answer          ; -28000
       1097 :
       1097 : 26 50 46                   ld      P2, =18000
       109A : 27 60 6D                   ld      P3, =28000
       109D : C4 2B                      ld      A, ='+'
       109F : 20 2D 10                   jsr     expr
       10A2 : 57                         push    P3
       10A3 : B1 00                      add     EA, 0, SP
       10A5 : 5F                         pop     P3
       10A6 : 20 43 10                   jsr     answer          ; -19536
       10A9 :
       10A9 : 26 50 46                   ld      P2, =18000
       10AC : 27 B0 B9                   ld      P3, =-18000
       10AF : C4 2B                      ld      A, ='+'
       10B1 : 20 2D 10                   jsr     expr
       10B4 : 57                         push    P3
       10B5 : B1 00                      add     EA, 0, SP
       10B7 : 5F                         pop     P3
       10B8 : 20 43 10                   jsr     answer          ; 0
       10BB :
       10BB : 26 B0 B9                   ld      P2, =-18000
       10BE : 27 B0 B9                   ld      P3, =-18000
       10C1 : C4 2B                      ld      A, ='+'
       10C3 : 20 2D 10                   jsr     expr
       10C6 : 57                         push    P3
       10C7 : B1 00                      add     EA, 0, SP
       10C9 : 5F                         pop     P3
       10CA : 20 43 10                   jsr     answer          ; 29536
       10CD :
       10CD : 26 B0 B9                   ld      P2, =-18000
       10D0 : 27 A0 92                   ld      P3, =-28000
       10D3 : C4 2D                      ld      A, ='-'
       10D5 : 20 2D 10                   jsr     expr
       10D8 : 57                         push    P3
       10D9 : B9 00                      sub     EA, 0, SP
       10DB : 5F                         pop     P3
       10DC : 20 43 10                   jsr     answer          ; 10000
       10DF :
       10DF : 26 64 00                   ld      P2, =100
       10E2 : 27 2C 01                   ld      P3, =300
       10E5 : C4 2A                      ld      A, ='*'
       10E7 : 20 2D 10                   jsr     expr
       10EA : 20 62 12                   jsr     mulsi2
       10ED : 20 43 10                   jsr     answer          ; 30000
       10F0 :
       10F0 : 26 2C 01                   ld      P2, =300
       10F3 : 27 38 FF                   ld      P3, =-200
       10F6 : C4 2A                      ld      A, ='*'
       10F8 : 20 2D 10                   jsr     expr
       10FB : 20 62 12                   jsr     mulsi2
       10FE : 20 43 10                   jsr     answer          ; 5536
       1101 :
       1101 : 26 64 00                   ld      P2, =100
       1104 : 27 D4 FE                   ld      P3, =-300
       1107 : C4 2A                      ld      A, ='*'
       1109 : 20 2D 10                   jsr     expr
       110C : 20 62 12                   jsr     mulsi2
       110F : 20 43 10                   jsr     answer          ; -30000
       1112 :
       1112 : 26 38 FF                   ld      P2, =-200
       1115 : 27 9C FF                   ld      P3, =-100
       1118 : C4 2A                      ld      A, ='*'
       111A : 20 2D 10                   jsr     expr
       111D : 20 62 12                   jsr     mulsi2
       1120 : 20 43 10                   jsr     answer          ; 20000
       1123 :
       1123 : 26 30 75                   ld      P2, =30000
       1126 : 27 64 00                   ld      P3, =100
       1129 : C4 2F                      ld      A, ='/'
       112B : 20 2D 10                   jsr     expr
       112E : 20 95 12                   jsr     divsi2
       1131 : 20 43 10                   jsr     answer          ; 300
       1134 :
       1134 : 26 38 FF                   ld      P2, =-200
       1137 : 27 64 00                   ld      P3, =100
       113A : C4 2F                      ld      A, ='/'
       113C : 20 2D 10                   jsr     expr
       113F : 20 95 12                   jsr     divsi2
       1142 : 20 43 10                   jsr     answer          ; -2
       1145 :
       1145 : 26 D0 8A                   ld      P2, =-30000
       1148 : 27 38 FF                   ld      P3, =-200
       114B : C4 2F                      ld      A, ='/'
       114D : 20 2D 10                   jsr     expr
       1150 : 20 95 12                   jsr     divsi2
       1153 : 20 43 10                   jsr     answer          ; 150
       1156 :
       1156 : 26 D0 8A                   ld      P2, =-30000
       1159 : 27 4E 00                   ld      P3, =78
       115C : C4 2F                      ld      A, ='/'
       115E : 20 2D 10                   jsr     expr
       1161 : 20 95 12                   jsr     divsi2
       1164 : 20 43 10                   jsr     answer          ; -384
       1167 :
       1167 : 84 D0 FF                   ld      EA, =-48
       116A : A4 1E 00                   ld      T, =30
       116D : 20 55 10                   jsr     comp
       1170 :
       1170 : 84 1E 00                   ld      EA, =30
       1173 : A4 D0 FF                   ld      T, =-48
       1176 : 20 55 10                   jsr     comp
       1179 :
       1179 : 84 88 13                   ld      EA, =5000
       117C : A4 A0 0F                   ld      T, =4000
       117F : 20 55 10                   jsr     comp
       1182 :
       1182 : 84 88 13                   ld      EA, =5000
       1185 : A4 88 13                   ld      T, =5000
       1188 : 20 55 10                   jsr     comp
       118B :
       118B : 84 A0 0F                   ld      EA, =4000
       118E : A4 88 13                   ld      T, =5000
       1191 : 20 55 10                   jsr     comp
       1194 :
       1194 : 84 78 EC                   ld      EA, =-5000
       1197 : A4 60 F0                   ld      T, =-4000
       119A : 20 55 10                   jsr     comp
       119D :
       119D : 84 78 EC                   ld      EA, =-5000
       11A0 : A4 78 EC                   ld      T, =-5000
       11A3 : 20 55 10                   jsr     comp
       11A6 :
       11A6 : 84 60 F0                   ld      EA, =-4000
       11A9 : A4 78 EC                   ld      T, =-5000
       11AC : 20 55 10                   jsr     comp
       11AF :
       11AF : 84 BC 7F                   ld      EA, =32700
       11B2 : A4 58 7F                   ld      T, =32600
       11B5 : 20 55 10                   jsr     comp
       11B8 :
       11B8 : 84 BC 7F                   ld      EA, =32700
       11BB : A4 BC 7F                   ld      T, =32700
       11BE : 20 55 10                   jsr     comp
       11C1 :
       11C1 : 84 58 7F                   ld      EA, =32600
       11C4 : A4 BC 7F                   ld      T, =32700
       11C7 : 20 55 10                   jsr     comp
       11CA :
       11CA : 84 44 80                   ld      EA, =-32700
       11CD : A4 A8 80                   ld      T, =-32600
       11D0 : 20 55 10                   jsr     comp
       11D3 :
       11D3 : 84 44 80                   ld      EA, =-32700
       11D6 : A4 44 80                   ld      T, =-32700
       11D9 : 20 55 10                   jsr     comp
       11DC :
       11DC : 84 A8 80                   ld      EA, =-32600
       11DF : A4 44 80                   ld      T, =-32700
       11E2 : 20 55 10                   jsr     comp
       11E5 :
       11E5 : 84 50 46                   ld      EA, =18000
       11E8 : A4 A0 92                   ld      T, =-28000
       11EB : 20 55 10                   jsr     comp
       11EE :
       11EE : 84 50 46                   ld      EA, =18000
       11F1 : A4 50 46                   ld      T, =18000
       11F4 : 20 55 10                   jsr     comp
       11F7 :
       11F7 : 84 A0 92                   ld      EA, =-28000
       11FA : A4 50 46                   ld      T, =18000
       11FD : 20 55 10                   jsr     comp
       1200 :
       1200 : 5C                         ret
       1201 :
       1201 :                            include "arith.inc"
(1)    1201 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    1201 :
(1)    1201 :                    ;;; Print signed 16-bit integer as decimal
(1)    1201 :                    ;;; @param EA: value
(1)    1201 :                    print_int16:
(1)    1201 : 57                         push    P3
(1)    1202 : 08                         push    EA
(1)    1203 : 47                         ld      P3, EA          ; P3=value
(1)    1204 : 40                         ld      A, E            ; A=high(value)
(1)    1205 : 64 0B                      bp      print_int16_plus
(1)    1207 : C4 2D                      ld      A, ='-'
(1)    1209 : 20 11 10                   jsr     putchar         ; print '-'
(1)    120C : 84 00 00                   ld      EA, =0
(1)    120F : B9 00                      sub     EA, 0, SP       ; negate value
(1)    1211 : 47                         ld      P3, EA          ; P3=|value|
(1)    1212 :                    print_int16_plus:
(1)    1212 : 20 17 12                   jsr     print_uint16
(1)    1215 : 3A                         pop     EA
(1)    1216 : 5F                         pop     P3
(1)    1217 : 5C                         ret
(1)    1218 :                    ;;; Print unsigned 16-bit integer
(1)    1218 :                    ;;; @param P3 value
(1)    1218 :                    print_uint16:
(1)    1218 : 33                         ld      EA, P3
(1)    1219 : 58                         or      A, E
(1)    121A : 6C 0C                      bz      print_uint16_zero
(1)    121C :                    print_uint16_loop:
(1)    121C : 33                         ld      EA, P3
(1)    121D : 58                         or      A, E
(1)    121E : 6C 0D                      bz      print_uint16_end
(1)    1220 : 20 2D 12                   jsr     divmod10        ; P3=value/10, EA=value%10
(1)    1223 : 0A                         push    A               ; push reminder
(1)    1224 : 20 1B 12                   jsr     print_uint16_loop
(1)    1227 : 38                         pop     A
(1)    1228 :                    print_uint16_zero:
(1)    1228 : DC 30                      or      A, ='0'
(1)    122A : 20 11 10                   jsr     putchar
(1)    122D :                    print_uint16_end:
(1)    122D : 5C                         ret
(1)    122E :
(1)    122E :                    ;;; Divide by 10
(1)    122E :                    ;;; @param P3 value
(1)    122E :                    ;;; @return P3 value/10
(1)    122E :                    ;;; @return EA value%10
(1)    122E :                    divmod10:
(1)    122E : 33                         ld      EA, P3
(1)    122F : A4 0A 00                   ld      T, =10
(1)    1232 : 0D                         div     EA, T
(1)    1233 : 08                         push    EA              ; save value/10
(1)    1234 : A4 0A 00                   ld      T, =10
(1)    1237 : 2C                         mpy     EA, T           ; T=(value/10)*10
(1)    1238 : 0B                         ld      EA, T
(1)    1239 : 08                         push    EA              ; local variable
(1)    123A : 33                         ld      EA, P3          ; EA=value
(1)    123B : B9 00                      sub     EA, 0, SP       ; EA=value-(value/10)*10
(1)    123D : 5F                         pop     P3              ; discard local
(1)    123E : 5F                         pop     P3              ; restore value/10
(1)    123F : 5C                         ret
(1)    1240 :
(1)    1240 :                    ;;; Signed comparison: minuend - subtrahend
(1)    1240 :                    ;;; @param EA minuend
(1)    1240 :                    ;;; @param T  subtrahend
(1)    1240 :                    ;;; @return A=0  BZ (minuend == subtrahend)
(1)    1240 :                    ;;;         A=1  BP (minuend > subtrahend)
(1)    1240 :                    ;;;         A=-1    (minuend < subtrahend)
(1)    1240 :                    ;;; @clobber EA
(1)    1240 :                    cmpsi2:
(1)    1240 : 08                         push    EA              ; S[1:0]=minuend
(1)    1241 : 0B                         ld      EA, T           ; EA=subtrahend
(1)    1242 : B9 00                      sub     EA, 0, SP       ; EA=subtrahend-minuend
(1)    1244 : 89 00                      st      EA, 0, SP
(1)    1246 : 58                         or      A, E
(1)    1247 : 6C 16                      bz      cmpsi2_equal    ; branch if A=0
(1)    1249 : C1 01                      ld      A, 1, SP
(1)    124B : 64 09                      bp      cmpsi2_plus     ; branch if A>0 (N=0)
(1)    124D :                    cmpsi2_minus:                   ; A<0 (N=1)
(1)    124D : 06                         ld      A, S
(1)    124E : D4 40                      and     A, =S_OV
(1)    1250 : 7C 09                      bnz     cmpsi2_less     ; branch if V=1
(1)    1252 :                            ;; V=0, N=1
(1)    1252 :                    cmpsi2_great:                   ; N^V=1
(1)    1252 : 3A                         pop     EA
(1)    1253 : C4 01                      ld      A, =1
(1)    1255 : 5C                         ret
(1)    1256 :                    cmpsi2_plus:                    ; N=0
(1)    1256 : 06                         ld      A, S
(1)    1257 : D4 40                      and     A, =S_OV
(1)    1259 : 7C F7                      bnz     cmpsi2_great    ; branch if V=1, N=0
(1)    125B :                            ;; V=0, N=0
(1)    125B :                    cmpsi2_less:                    ; N^V=0
(1)    125B : 3A                         pop     EA
(1)    125C : C4 FF                      ld      A, =-1
(1)    125E : 5C                         ret
(1)    125F :                    cmpsi2_equal:
(1)    125F : 3A                         pop     EA
(1)    1260 : C4 00                      ld      A, =0
(1)    1262 : 5C                         ret
(1)    1263 :
(1)    1263 :                    ;;; Signed multiplication: product = multiplicand * multiplier
(1)    1263 :                    ;;; @param EA: multiplicand
(1)    1263 :                    ;;; @param T: multiplier
(1)    1263 :                    ;;; @return EA: product
(1)    1263 :                    ;;; @local SP[4:3] multiplicand
(1)    1263 :                    ;;; @local SP[2:1] multiplier
(1)    1263 :                    ;;; @local SP[0] sign(product)
(1)    1263 :                    ;;; @discard T
(1)    1263 :                    mulsi2:
(1)    1263 : 08                         push    EA             ; save multiplicand
(1)    1264 : 0B                         ld      EA, T          ; EA=multiplier
(1)    1265 : 08                         push    EA             ; save multiplier
(1)    1266 : 40                         ld      A, E           ; A=high(multiplier)
(1)    1267 : E1 03                      xor     A, 3, SP       ; A=sign(product)
(1)    1269 : 0A                         push    A              ; save sign(product)
(1)    126A : C1 02                      ld      A, 2, SP       ; A=high(multiplier)
(1)    126C : 64 07                      bp      mulsi2_multiplicand
(1)    126E : 84 00 00                   ld      EA, =0
(1)    1271 : B9 01                      sub     EA, 1, SP
(1)    1273 : 89 01                      st      EA, 1, SP       ; negate multiplier
(1)    1275 :                    mulsi2_multiplicand:
(1)    1275 : C1 04                      ld      A, 4, SP        ; A=high(multiplicand)
(1)    1277 : 64 07                      bp      mulsi2_multiply
(1)    1279 : 84 00 00                   ld      EA, =0
(1)    127C : B9 03                      sub     EA, 3, SP
(1)    127E : 89 03                      st      EA, 3, SP       ; negate multiplicand
(1)    1280 :                    mulsi2_multiply:
(1)    1280 : 81 03                      ld      EA, 3, SP       ; EA=|multiplicand|
(1)    1282 : A1 01                      ld      T, 1, SP        ; T=|multiplier|
(1)    1284 : 2C                         mpy     EA, T           ; T=product
(1)    1285 : 0B                         ld      EA, T
(1)    1286 : 89 03                      st      EA, 3, SP       ; store product
(1)    1288 : 38                         pop     A               ; A=high(multiplicand^multiplier)
(1)    1289 : 64 07                      bp      mulsi2_exit
(1)    128B : 84 00 00                   ld      EA, =0
(1)    128E : B9 02                      sub     EA, 2, SP       ; negate product
(1)    1290 : 89 02                      st      EA, 2, SP       ; store product
(1)    1292 :                    mulsi2_exit:
(1)    1292 : 3A                         pop     EA
(1)    1293 : 09                         ld      T, EA           ; T=multiplier
(1)    1294 : 3A                         pop     EA              ; EA=product
(1)    1295 : 5C                         ret
(1)    1296 :
(1)    1296 :                    ;;; Signed division: quotient = dividend * divisor
(1)    1296 :                    ;;; @param EA: dividend
(1)    1296 :                    ;;; @param T: divisor
(1)    1296 :                    ;;; @return EA: quotient
(1)    1296 :                    ;;; @discard T
(1)    1296 :                    ;;; @local SP[4:3] dividend
(1)    1296 :                    ;;; @local SP[2:1] divisor
(1)    1296 :                    ;;; @local SP[0] sign(quotient)
(1)    1296 :                    divsi2:
(1)    1296 : 08                         push    EA              ; save dividend
(1)    1297 : 0B                         ld      EA, T           ; EA=divisor
(1)    1298 : 08                         push    EA              ; save divisor
(1)    1299 : 40                         ld      A, E            ; A=high(divisor)
(1)    129A : E1 03                      xor     A, 3, SP        ; A=sign(quotient)
(1)    129C : 0A                         push    A               ; save sign(quotient)
(1)    129D : C1 02                      ld      A, 2, SP        ; A=high(divisor)
(1)    129F : 64 07                      bp      divsi2_dividend
(1)    12A1 : 84 00 00                   ld      EA, =0
(1)    12A4 : B9 01                      sub     EA, 1, SP
(1)    12A6 : 89 01                      st      EA, 1, SP       ; negate divisor
(1)    12A8 :                    divsi2_dividend:
(1)    12A8 : C1 04                      ld      A, 4, SP        ; A=high(dividend)
(1)    12AA : 64 07                      bp      divsi2_divide
(1)    12AC : 84 00 00                   ld      EA, =0
(1)    12AF : B9 03                      sub     EA, 3, SP
(1)    12B1 : 89 03                      st      EA, 3, SP       ; negate dividend
(1)    12B3 :                    divsi2_divide:
(1)    12B3 : 81 03                      ld      EA, 3, SP       ; EA=|dividend|
(1)    12B5 : A1 01                      ld      T, 1, SP        ; T=|divisor|
(1)    12B7 : 0D                         div     EA, T           ; EA=quotient
(1)    12B8 : 89 03                      st      EA, 3, SP       ; store quotient
(1)    12BA : 38                         pop     A               ; A=sign(quotient)
(1)    12BB : 64 07                      bp      divsi2_exit
(1)    12BD : 84 00 00                   ld      EA, =0
(1)    12C0 : B9 02                      sub     EA, 2, SP       ; negate quotient
(1)    12C2 : 89 02                      st      EA, 2, SP       ; store quotient
(1)    12C4 :                    divsi2_exit:
(1)    12C4 : 3A                         pop     EA
(1)    12C5 : 09                         ld      T, EA           ; T=divisor
(1)    12C6 : 3A                         pop     EA              ; EA=quotient
(1)    12C7 : 5C                         ret
       12C8 :
       12C8 :                            end

          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     65816
          0 :                            .include "w65c816.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                            .include "mos6502.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :
(2)       0 :                    ;;; MOS6502
(2)       0 :                    ;;; Processor Status Register P
(2)       0 : =1                 P_CARRY         =       %00000001   ; set to 1 if carry occurred
(2)       0 : =2                 P_ZERO          =       %00000010   ; set to 1 if result is zero
(2)       0 : =4                 P_IRQ           =       %00000100   ; if 1, IRQ is disabled
(2)       0 : =8                 P_DECIMAL       =       %00001000   ; if 1, decimal mode
(2)       0 : =10                P_BRK           =       %00010000   ; if 1, BRK command
(2)       0 : =2                 P_OVERFLOW      =       %00000010   ; set to 1 if overflow occurred
(2)       0 : =8                 P_NEGATIVE      =       %00001000   ; set to 1 if result is negative
(2)       0 :
(2)       0 :                    ;;; Vector
(2)       0 : =FFFA              VEC_NMI         =       $FFFA  ; $FFFA: Non Maskable Interrupt
(2)       0 : =FFFC              VEC_RESET       =       $FFFC  ; $FFFE: Reset
(2)       0 : =FFFE              VEC_IRQ         =       $FFFE  ; $FFFE: Interrupt Request and BRK command
(1)       0 :
(1)       0 :                    ;;; W65C816S
(1)       0 :                    ;;; Processor Status Register P
(1)       0 : =10                P_X     =       %00010000       ; if 0, X and Y are 16 bit.
(1)       0 : =20                P_M     =       %00100000       ; if 0, A is 16 bit.
(1)       0 :
(1)       0 :                    ;;; Emulation Mode Vector Locations
(1)       0 : =FFF8              VEC_ABORT       =       $FFF8   ; $FFF8: Abort
(1)       0 : =FFF4              VEC_COP         =       $FFF4   ; $FFF4: COP command
(1)       0 :
(1)       0 :                    ;;; Native Mode Vector Locations
(1)       0 : =FFEE              NVEC_IRQ        =       $FFEE   ; $FFEE: Interrupt Request
(1)       0 : =FFEA              NVEC_NMI        =       $FFEA   ; $FFEA: Non Maskable Interrupt
(1)       0 : =FFE8              NVEC_ABORT      =       $FFE8   ; $FFE8: Abort
(1)       0 : =FFE6              NVEC_BRK        =       $FFE6   ; $FFE6: BRK command
(1)       0 : =FFE4              NVEC_COP        =       $FFE4   ; $FFE4: COP command
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA    =       $DF00
          0 :                            .include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control    =       ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm          =       %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc     =       %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc    =       %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc    =       %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc    =       %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm          =       %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc      =       %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc      =       %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc      =       %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc      =       %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc      =       %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc      =       %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc      =       %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc      =       %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm          =       %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc       =       %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc       =       %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc      =       %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc    =       %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm         =       %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status     =       ACIA+0
(1)       0 : =1                 RDRF_bm         =       %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm         =       %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm         =       %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm         =       %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm         =       %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm         =       %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm         =       %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm         =       %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data       =       ACIA+1          ; Data register
          0 : =94                RX_INT_TX_NO    =       WSB_8N1_gc|RIEB_bm
          0 :
       FFEE :                            *=      NVEC_IRQ        ; native vector
       FFEE : CC 10                      .word   isr_irq
       FFF0 :
       FFFC :                            *=      VEC_RESET
       FFFC : 00 10                      .word   initialize
       FFFE :
       2000 :                            *=      $2000
       2000 : =80                rx_queue_size   =       128
       2000 :                    rx_queue:
       2080 :                            *=      *+rx_queue_size
       2080 :
       1000 :                            *=      $1000
       1000 : =FFF               stack   =       *-1
       1000 :                    initialize:
       1000 : 18                         clc
       1001 : FB                         xce                     ; native mode
       1002 : C2 10                      rep     #P_X            ; 16-bit index
       1004 :                            longi   on
       1004 : A2 FF 0F                   ldx     #stack
       1007 : 9A                         txs
       1008 : D8                         cld                     ; clear decimal flag
       1009 : A2 00 20                   ldx     #rx_queue
       100C : A9 80                      lda     #rx_queue_size
       100E : 20 4C 10                   jsr     queue_init
       1011 :                            ;; initialize ACIA
       1011 : A9 03                      lda     #CDS_RESET_gc   ; Master reset
       1013 : 8D 00 DF                   sta     ACIA_control
       1016 : A9 94                      lda     #RX_INT_TX_NO
       1018 : 8D 00 DF                   sta     ACIA_control
       101B : 58                         cli                     ; Enable IRQ
       101C :
       101C :                    loop:
       101C : 20 36 10                   jsr     getchar
       101F : B0 FB                      bcs     loop
       1021 : 09 00                      ora     #0
       1023 : F0 0F                      beq     halt_to_system
       1025 : 20 3F 10                   jsr     putchar
       1028 : C9 0D                      cmp     #$0D
       102A : D0 F0                      bne     loop
       102C : A9 0A                      lda     #$0A
       102E : 20 3F 10                   jsr     putchar
       1031 : 4C 1C 10                   jmp     loop
       1034 :                    halt_to_system:
       1034 : 00                         brk
       1035 : 00                         .byte   0               ; halt to system
       1036 :
       1036 :                    getchar:
       1036 : A2 00 20                   ldx     #rx_queue
       1039 : 78                         sei                     ; Disable IRQ
       103A : 20 9B 10                   jsr     queue_remove
       103D : 58                         cli                     ; Enable IRQ
       103E : 60                         rts
       103F :
       103F :                    putchar:
       103F : 48                         pha
       1040 :                    putchar_loop:
       1040 : AD 00 DF                   lda     ACIA_status
       1043 : 29 02                      and     #TDRE_bm
       1045 : F0 F9                      beq     putchar_loop
       1047 : 68                         pla
       1048 : 8D 01 DF                   sta     ACIA_data
       104B : 60                         rts
       104C :
       104C :                            .include "queue.inc"
(1)    104C :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    104C :                    ;;; [queue] queue structure
(1)    104C : =0                 queue_len       =       0       ; queue length
(1)    104C : =1                 queue_size      =       1       ; buffer size
(1)    104C : =2                 queue_put       =       2       ; queue put index
(1)    104C : =3                 queue_get       =       3       ; queue get index
(1)    104C : =4                 queue_buf       =       4       ; buffer start address
(1)    104C :
(1)    104C :                    ;;; [queue] Initialize queue
(1)    104C :                    ;;; @param X queue pointer
(1)    104C :                    ;;; @param A queue size
(1)    104C :                    ;;; @clobber A B X
(1)    104C :                    queue_init:
(1)    104C : 08                         php
(1)    104D : E2 20                      sep     #P_M            ; 8-bit memory
(1)    104F :                            longa   off
(1)    104F : 38                         sec
(1)    1050 : E9 04                      sbc     #queue_buf
(1)    1052 : 95 01                      sta     queue_size,X
(1)    1054 : EB                         xba
(1)    1055 : 74 00                      stz     queue_len,X
(1)    1057 : 74 02                      stz     queue_put,X
(1)    1059 : 74 03                      stz     queue_get,X
(1)    105B :                    queue_init_loop:
(1)    105B : 74 04                      stz     queue_buf,X
(1)    105D : E8                         inx
(1)    105E : 3A                         dec     A
(1)    105F : D0 FA                      bne     queue_init_loop
(1)    1061 : 28                         plp
(1)    1062 : 60                         rts
(1)    1063 :
(1)    1063 :                    ;;; [queue] Add an element to queue
(1)    1063 :                    ;;; @param X queue pointer
(1)    1063 :                    ;;; @param A an element
(1)    1063 :                    ;;; @return P.C 1 if queue is full
(1)    1063 :                    queue_add:
(1)    1063 : 08                         php
(1)    1064 : E2 20                      sep     #P_M            ; 8-bit memory
(1)    1066 :                            longa   off
(1)    1066 : 48                         pha                     ; save an element
(1)    1067 : B5 00                      lda     queue_len,X
(1)    1069 : D5 01                      cmp     queue_size,X
(1)    106B : 90 04                      bcc     queue_add_element  ; queue_len < queue_size
(1)    106D : 68                         pla
(1)    106E : 28                         plp
(1)    106F : 38                         sec                     ; C=1
(1)    1070 : 60                         rts
(1)    1071 :                    queue_add_element:      
(1)    1071 : 1A                         inc     A
(1)    1072 : 95 00                      sta     queue_len,X
(1)    1074 : 5A                         phy                     ; save Y
(1)    1075 : DA                         phx                     ; save queue pointer
(1)    1076 : B5 02                      lda     queue_put,X
(1)    1078 : 18                         clc
(1)    1079 : 63 01                      adc     1,S             ; lo(queue pointer)
(1)    107B : 83 01                      sta     1,S
(1)    107D : A3 02                      lda     2,S             ; hi(queue pointer)
(1)    107F : 69 00                      adc     #0
(1)    1081 : 83 02                      sta     2,S
(1)    1083 : A3 02                      lda     2,S
(1)    1085 : 7A                         ply
(1)    1086 : A3 03                      lda     3,S             ; restore an element
(1)    1088 : 99 04 00                   sta     queue_buf,Y     ; store an element
(1)    108B : 7A                         ply                     ; restore Y
(1)    108C : B5 02                      lda     queue_put,X
(1)    108E : 1A                         inc     A
(1)    108F : D5 01                      cmp     queue_size,X
(1)    1091 : 90 02                      bcc     queue_add_return ; queue_put < queue_size
(1)    1093 : A9 00                      lda     #0
(1)    1095 :                    queue_add_return:
(1)    1095 : 95 02                      sta     queue_put,X
(1)    1097 : 68                         pla
(1)    1098 : 28                         plp
(1)    1099 : 18                         clc                     ;  C=0
(1)    109A : 60                         rts
(1)    109B :
(1)    109B :                    ;;; [queue] Remove an element from queue
(1)    109B :                    ;;; @param X queue pointer
(1)    109B :                    ;;; @return A an element
(1)    109B :                    ;;; @return P.C 1 if queue is empty
(1)    109B :                    queue_remove:
(1)    109B : 08                         php
(1)    109C : E2 20                      sep     #P_M            ; 8-bit memory
(1)    109E :                            longa   off
(1)    109E : B5 00                      lda     queue_len,X
(1)    10A0 : D0 03                      bne     queue_remove_elem
(1)    10A2 : 28                         plp
(1)    10A3 : 38                         sec                     ; C=1
(1)    10A4 : 60                         rts
(1)    10A5 :                    queue_remove_elem:
(1)    10A5 : 3A                         dec     A
(1)    10A6 : 95 00                      sta     queue_len,X
(1)    10A8 : 5A                         phy                     ; save Y
(1)    10A9 : DA                         phx                     ; save queue pointer
(1)    10AA : B5 03                      lda     queue_get,X
(1)    10AC : 18                         clc
(1)    10AD : 63 01                      adc     1,S             ; lo(queue pointer)
(1)    10AF : 83 01                      sta     1,S
(1)    10B1 : A3 02                      lda     2,S             ; hi(queue pointer)
(1)    10B3 : 69 00                      adc     #0
(1)    10B5 : 83 02                      sta     2,S
(1)    10B7 : 7A                         ply
(1)    10B8 : B9 04 00                   lda     queue_buf,Y     ; read an element
(1)    10BB : 7A                         ply                     ; restore Y
(1)    10BC : 48                         pha                     ; save an element
(1)    10BD : B5 03                      lda     queue_get,X
(1)    10BF : 1A                         inc     A
(1)    10C0 : D5 01                      cmp     queue_size,X
(1)    10C2 : 90 02                      bcc     queue_remove_return ; queue_get < queue_size
(1)    10C4 : A9 00                      lda     #0
(1)    10C6 :                    queue_remove_return:
(1)    10C6 : 95 03                      sta     queue_get,X
(1)    10C8 : 68                         pla                     ; restore an element
(1)    10C9 : 28                         plp
(1)    10CA : 18                         clc                     ; C=0
(1)    10CB : 60                         rts
       10CC :
       10CC :                    isr_irq:
       10CC :                            ;; P_D is cleared on interrupt
       10CC : E2 20                      sep     #P_M            ; 8-bit memory
       10CE : 48                         pha                     ; save A
       10CF : DA                         phx                     ; save X
       10D0 : AD 00 DF                   lda     ACIA_status
       10D3 : 29 80                      and     #IRQF_bm
       10D5 : F0 10                      beq     isr_irq_return
       10D7 :                    isr_irq_receive:
       10D7 : AD 00 DF                   lda     ACIA_status
       10DA : 29 01                      and     #RDRF_bm
       10DC : F0 09                      beq     isr_irq_return
       10DE : AD 01 DF                   lda     ACIA_data
       10E1 : A2 00 20                   ldx     #rx_queue
       10E4 : 20 63 10                   jsr     queue_add
       10E7 :                    isr_irq_return:
       10E7 : FA                         plx                     ; restore X
       10E8 : 68                         pla                     ; restore A
       10E9 : 40                         rti                     ; restore P and PC

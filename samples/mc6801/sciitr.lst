          0 :                            cpu     6801
          0 :                            include "mc6801.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6801/MC6803
(1)       0 :                    ;;; Condition Code Register (CC)
(1)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 CC_OVERFLOW   equ  %00000010   ; set to 1 if overflow occurred
(1)       0 : =4                 CC_ZERO       equ  %00000100   ; set to 1 if result is zero
(1)       0 : =8                 CC_NEGATIVE   equ  %00001000   ; set to 1 if result is negative
(1)       0 : =10                CC_IRQ        equ  %00010000   ; if 1, IRQ is masked
(1)       0 : =20                CC_HALF_CARRY equ  %00100000   ; if 1, decimal carry from least digit occurred
(1)       0 :
(1)       0 :                    ;;; Internal Register Area
(1)       0 : =0                 DDR1:   equ     $00          ; $00: Port 1 Data Direction Register
(1)       0 : =1                 DDR2:   equ     $01          ; $01: Port 2 Data Direction Register
(1)       0 : =2                 PORT1:  equ     $02          ; $02: Port 1 Data Register
(1)       0 : =3                 PORT2:  equ     $03          ; $03: Port 2 Data Register
(1)       0 : =4                 DDR3:   equ     $04          ; $04: Port 3 Data Direction Register
(1)       0 : =5                 DDR4:   equ     $05          ; $05: Port 4 Data Direction Register
(1)       0 : =6                 PORT3:  equ     $06          ; $06: Port 3 Data Register
(1)       0 : =7                 PORT4:  equ     $07          ; $07: Port 4 Data Register
(1)       0 : =8                 TCSR:   equ     $08          ; $08: Timer Control and Status Register
(1)       0 : =9                 TCNT:   equ     $09          ; $09: Timer Counter
(1)       0 : =B                 TOCR:   equ     $0B          ; $0B: Output Compare Register
(1)       0 : =D                 TCAP:   equ     $0D          ; $0D: Input Capture Register
(1)       0 : =F                 P3CSR:  equ     $0F          ; $0F: Port 3 Control and Status Register
(1)       0 : =10                RMCR:   equ     $10          ; $10: Rate and Mode Control Registers
(1)       0 : =11                TRCSR:  equ     $11          ; $11: Transmit Receive Control and Status Register
(1)       0 : =12                SCRDR:  equ     $12          ; $12: Receiver Data Register
(1)       0 : =13                SCTDR:  equ     $13          ; $13: Transmit Data Register
(1)       0 : =14                RAMCR:  equ     $14          ; $14: RAM Control Register
(1)       0 :
(1)       0 :                    ;;; Port 2 Data Register
(1)       0 : =E0                PC_gm:  equ     %11100000       ; PC group mask
(1)       0 : =5                 PC_gp:  equ     5               ; PC group position
(1)       0 : =20                PC0_bm: equ     %00100000       ; PC0
(1)       0 : =40                PC1_bm: equ     %01000000       ; PC1
(1)       0 : =80                PC2_bm: equ     %10000000       ; PC2
(1)       0 :
(1)       0 :                    ;;; Port 3 Control and Status Register
(1)       0 : =8                 P3_LATCH_bm:    equ     %00001000 ; Latch Enable
(1)       0 : =10                P3_OSS_bm:      equ     %00010000 ; Output Strobe Select
(1)       0 : =40                P3_IS3IE_bm:    equ     %01000000 ; IS3 IRQ1 Enable
(1)       0 : =80                P3_IS3F_bm:     equ     %10000000 ; IS3 Flag
(1)       0 :
(1)       0 :                    ;;; RAM Control Register
(1)       0 : =40                RAME_bm:        equ     %01000000 ; RAM Enable
(1)       0 : =80                STBY_PWR_bm:    equ     %10000000 ; Standby Power status
(1)       0 :
(1)       0 :                    ;;; Timer Control and Status Register
(1)       0 : =1                 TCSR_OLVL_bm:   equ     %00000001 ; Output Level
(1)       0 : =2                 TCSR_IEDG_bm:   equ     %00000010 ; Input Edge. 0=negative/1=positive
(1)       0 : =4                 TCSR_ETOI_bm:   equ     %00000100 ; Enable Timer Overflow Interrupt for IRQ2
(1)       0 : =8                 TCSR_EOCI_bm:   equ     %00001000 ; Enable Output Compare Interrupt for IRQ2
(1)       0 : =10                TCSR_EICI_bm:   equ     %00010000 ; Enable Input Capture Interrupt for IRQ2
(1)       0 : =20                TCSR_TOF_bm:    equ     %00100000 ; Timer Overflow Flag
(1)       0 : =40                TCSR_OCF_bm:    equ     %01000000 ; Output Compare Flag
(1)       0 : =80                TCSR_ICF_bm:    equ     %10000000 ; Input Capture Flag
(1)       0 :
(1)       0 :                    ;;; Serial Communication Interface
(1)       0 :                    ;;; Rate and Mode Control Registers
(1)       0 :                            ;; Speed Select
(1)       0 : =3                 SS_gm:          equ     %00000011 ; Group mask
(1)       0 : =0                 SS_DIV16_gc:    equ     %00000000 ; E/16
(1)       0 : =1                 SS_DIV128_gc:   equ     %00000001 ; E/128
(1)       0 : =2                 SS_DIV1024_gc:  equ     %00000010 ; E/1024
(1)       0 : =3                 SS_DIV4096_gc:  equ     %00000011 ; E/4096
(1)       0 :                            ;; Clock Control and Format Select
(1)       0 : =C                 CCFS_gm:        equ     %00001100 ; Group mask
(1)       0 : =0                 CCFS_BIPH_gc:   equ     %00000000 ; Bi-Phase
(1)       0 : =4                 CCFS_NRZ_gc:    equ     %00000100 ; NRZ
(1)       0 : =8                 CCFS_NRZO_gc:   equ     %00001000 ; NRZ P22=Clock Output
(1)       0 : =C                 CCFS_NRZI_gc:   equ     %00001100 ; NRZ P22=Clock Input
(1)       0 :                    ;;; Transmit/Receive Control and Status Register
(1)       0 : =1                 TRCSR_WU_bm:    equ     %00000001 ; Wake-up on idle line
(1)       0 : =2                 TRCSR_TE_bm:    equ     %00000010 ; Transmit Enable; if set, P24 is output
(1)       0 : =4                 TRCSR_TIE_bm:   equ     %00000100 ; Transmit Interrupt Enable for IRQ2
(1)       0 : =8                 TRCSR_RE_bm:    equ     %00001000 ; Receiver Enable; if set, P23 is input
(1)       0 : =10                TRCSR_RIE_bm:   equ     %00010000 ; Receiver Interrupt Enable for IRQ2
(1)       0 : =20                TRCSR_TDRE_bm:  equ     %00100000 ; Transmit Data Register Empty
(1)       0 : =40                TRCSR_ORFE_bm:  equ     %01000000 ; Overrun Framing Error
(1)       0 : =80                TRCSR_RDRF_bm:  equ     %10000000 ; Receive Data Register Full
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =FFF0              VEC_SCI:        equ     $FFF0  ; $FFF0: SCI Interrupt (TDRE+RDRF+ORFE)
(1)       0 : =FFF2              VEC_TOF:        equ     $FFF2  ; $FFF2: Timer Overflow Interrupt
(1)       0 : =FFF4              VEC_OCF:        equ     $FFF4  ; $FFF4: Output Compare Interrupt
(1)       0 : =FFF6              VEC_ICF:        equ     $FFF6  ; $FFF6: Input Capture Interrupt
(1)       0 : =FFF8              VEC_IRQ1:       equ     $FFF8  ; $FFF8: Maskable Interrupt Request 1
(1)       0 : =FFFA              VEC_SWI:        equ     $FFFA  ; $FFFA: Software Interrupt
(1)       0 : =FFFC              VEC_NMI:        equ     $FFFC  ; $FFFC: Non Maskable Interrupt
(1)       0 : =FFFE              VEC_RESET:      equ     $FFFE  ; $FFFE: Reset
          0 :
       2000 :                            org     $2000
       2000 :
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       rmb     rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       rmb     tx_queue_size
       2100 :
       2100 :                    ;;; SCI: Enable Rx interrupt
       2100 : =1A                RX_INT_TX_NO:   equ     TRCSR_RE_bm|TRCSR_RIE_bm|TRCSR_TE_bm
       2100 : =1E                RX_INT_TX_INT:  equ     TRCSR_RE_bm|TRCSR_RIE_bm|TRCSR_TE_bm|TRCSR_TIE_bm
       2100 :
       1000 :                            org     $1000
       1000 : =FFF               stack:  equ     *-1             ; MC6801's SP is post-decrement/pre-increment
       1000 :
       FFF0 :                            org     VEC_SCI
       FFF0 : 01 E3                      fdb     isr_sci
       FFF2 :
       FFFA :                            org     VEC_SWI
       FFFA : FF FA                      fdb     VEC_SWI         ; for halt to system
       FFFC :
       FFFE :                            org     VEC_RESET
       FFFE : 01 00                      fdb     initialize
      10000 :
        100 :                            org     $0100
        100 :                    initialize:
        100 : 8E 0F FF                   lds     #stack
        103 : CE 20 00                   ldx     #rx_queue
        106 : C6 80                      ldab    #rx_queue_size
        108 : BD 01 9C                   jsr     queue_init
        10B : CE 20 80                   ldx     #tx_queue
        10E : C6 80                      ldab    #tx_queue_size
        110 : BD 01 9C                   jsr     queue_init
        113 :                            ;; Initialize SCI
        113 : 86 05                      ldaa    #CCFS_NRZ_gc|SS_DIV128_gc
        115 : 97 10                      staa    RMCR            ; set NRZ and E/128
        117 : 86 1A                      ldaa    #RX_INT_TX_NO
        119 : 97 11                      staa    TRCSR
        11B : 0E                         cli                     ; enable IRQ
        11C : 20 01                      bra     loop
        11E :
        11E : 3E                 wait:   wai
        11F : 8D 5D              loop:   bsr     getchar
        121 : 24 FB                      bcc     wait
        123 : 4D                         tsta
        124 : 27 13                      beq     halt_to_system
        126 : 16                         tab
        127 : 8D 60                      bsr     putchar         ; echo
        129 : 86 20                      ldaa    #' '            ; space
        12B : 8D 5C                      bsr     putchar
        12D : 8D 13                      bsr     put_hex8        ; print in hex
        12F : 86 20                      ldaa    #' '            ; space
        131 : 8D 56                      bsr     putchar
        133 : 8D 2B                      bsr     put_bin8        ; print in binary
        135 : 8D 03                      bsr     newline
        137 : 20 E6                      bra     loop
        139 :                    halt_to_system:
        139 : 3F                         swi
        13A :
        13A :                    ;;; Put newline
        13A :                    ;;; @clobber A
        13A :                    newline:
        13A : 86 0D                      ldaa    #$0d
        13C : 8D 4B                      bsr     putchar
        13E : 86 0A                      ldaa    #$0a
        140 : 20 47                      bra     putchar
        142 :
        142 :                    ;;; Print uint8_t in hex
        142 :                    ;;; @param B uint8_t value to be printed in hex.
        142 :                    ;;; @clobber A
        142 :                    put_hex8:
        142 : 86 30                      ldaa    #'0'
        144 : 8D 43                      bsr     putchar
        146 : 86 78                      ldaa    #'x'
        148 : 8D 3F                      bsr     putchar
        14A : 17                         tba
        14B : 44                         lsra
        14C : 44                         lsra
        14D : 44                         lsra
        14E : 44                         lsra
        14F : 8D 01                      bsr     put_hex4
        151 : 17                         tba
        152 :                    put_hex4:
        152 : 84 0F                      anda    #$0f
        154 : 81 0A                      cmpa    #10
        156 : 25 04                      blo     put_hex8_dec
        158 : 8B 37                      adda    #'A'-10
        15A : 20 2D                      bra     putchar
        15C :                    put_hex8_dec:
        15C : 8B 30                      adda    #'0'
        15E : 20 29                      bra     putchar
        160 :
        160 :                    ;;; Print uint8_t in binary
        160 :                    ;;; @param B uint8_t value to be printed in binary.
        160 :                    ;;; @clobber A
        160 :                    put_bin8:
        160 : 37                         pshb
        161 : 86 30                      ldaa    #'0'
        163 : 8D 24                      bsr     putchar
        165 : 86 62                      ldaa    #'b'
        167 : 8D 20                      bsr     putchar
        169 : 8D 05                      bsr     put_bin4
        16B : 58                         lslb
        16C : 8D 02                      bsr     put_bin4
        16E : 33                         pulb
        16F : 39                         rts
        170 :                    put_bin4:
        170 : 8D 01                      bsr     put_bin2
        172 : 58                         lslb
        173 :                    put_bin2:
        173 : 8D 01                      bsr     put_bin1
        175 : 58                         lslb
        176 :                    put_bin1:
        176 : 86 30                      ldaa    #'0'
        178 : 5D                         tstb                    ; chech MSB
        179 : 2A 01                      bpl     put_bin0        ; MSB=0
        17B : 4C                         inca                    ; MSB=1
        17C :                    put_bin0:
        17C : 20 0B                      bra     putchar
        17E :
        17E :                    ;;; Get character
        17E :                    ;;; @return A
        17E :                    ;;; @return CC.C 0 if no character
        17E :                    getchar:
        17E : 3C                         pshx
        17F : CE 20 00                   ldx     #rx_queue
        182 : 0F                         sei
        183 : BD 01 C7                   jsr     queue_remove
        186 : 0E                         cli
        187 : 38                         pulx
        188 : 39                         rts
        189 :
        189 :                    ;;; Put character
        189 :                    ;;; @param A
        189 :                    putchar:
        189 : 36                         psha
        18A : 3C                         pshx
        18B : CE 20 80                   ldx     #tx_queue
        18E :                    putchar_retry:
        18E : 0E                         cli                     ; disable IRQ
        18F : BD 01 AB                   jsr     queue_add
        192 : 0F                         sei                     ; enable IRQ
        193 : 24 F9                      bcc     putchar_retry   ; branch if queue is full
        195 : 86 1E                      ldaa    #RX_INT_TX_INT
        197 : 97 11                      staa    TRCSR           ; enable Tx interrupt
        199 : 38                         pulx
        19A : 32                         pula
        19B : 39                         rts
        19C :
        19C :                            include "queue.inc"
(1)     19C :                    ;;; [queue] queue structure
(1)     19C : =0                 queue_len:      equ     0       ; queue length
(1)     19C : =1                 queue_size:     equ     1       ; buffer size
(1)     19C : =2                 queue_put:      equ     2       ; queue put index
(1)     19C : =3                 queue_get:      equ     3       ; queue get index
(1)     19C : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     19C :
(1)     19C :                    ;;; [queue] Initialize queue
(1)     19C :                    ;;; @param X queue work space pointer
(1)     19C :                    ;;; @param B queue work space size
(1)     19C :                    ;;; @clobber B
(1)     19C :                    queue_init:
(1)     19C : 37                         pshb
(1)     19D : 3C                         pshx
(1)     19E :                    queue_init_loop:
(1)     19E : 6F 00                      clr     0,x
(1)     1A0 : 08                         inx
(1)     1A1 : 5A                         decb
(1)     1A2 : 26 FA                      bne     queue_init_loop
(1)     1A4 : 38                         pulx
(1)     1A5 : 33                         pulb
(1)     1A6 : C0 04                      subb    #queue_buf
(1)     1A8 : E7 01                      stab    queue_size,x
(1)     1AA : 39                         rts
(1)     1AB :
(1)     1AB :                    ;;; [queue] Add an element to queue
(1)     1AB :                    ;;; @param X queue work space pointer
(1)     1AB :                    ;;; @param A an element
(1)     1AB :                    ;;; @return CC.C 0 if queue is full
(1)     1AB :                    queue_add:
(1)     1AB : 37                 	pshb
(1)     1AC : E6 00                      ldab    queue_len,x
(1)     1AE : E1 01                      cmpb    queue_size,x
(1)     1B0 : 24 13                      bhs     queue_add_return ; carry is cleared
(1)     1B2 : E6 02                      ldab    queue_put,x     ; 8 bits offset
(1)     1B4 : 3C                         pshx
(1)     1B5 : 3A                         abx                     ; X+=B
(1)     1B6 : A7 04                      staa    queue_buf,x     ; store an element
(1)     1B8 : 38                         pulx
(1)     1B9 : 6C 00                      inc     queue_len,x
(1)     1BB : 5C                         incb
(1)     1BC : E7 02                      stab    queue_put,x
(1)     1BE : E1 01                      cmpb    queue_size,x
(1)     1C0 : 25 03                      blo     queue_add_return ; carry is set
(1)     1C2 : 6F 02                      clr     queue_put,x
(1)     1C4 : 0D                         sec                     ; set carry
(1)     1C5 :                    queue_add_return:
(1)     1C5 : 33                 	pulb
(1)     1C6 : 39                         rts
(1)     1C7 :
(1)     1C7 :                    ;;; [queue] Remove an element from queue
(1)     1C7 :                    ;;; @param X queue work space pointer
(1)     1C7 :                    ;;; @return A an element
(1)     1C7 :                    ;;; @return CC.C 0 if queue is empty
(1)     1C7 :                    queue_remove:
(1)     1C7 : 6D 00                      tst     queue_len,x
(1)     1C9 : 26 02                      bne     queue_remove_elem
(1)     1CB : 0C                         clc                     ; clear carry
(1)     1CC : 39                         rts
(1)     1CD :                    queue_remove_elem
(1)     1CD : 37                 	pshb
(1)     1CE : E6 03                      ldab    queue_get,x     ; 8 bits offset
(1)     1D0 : 3C                         pshx
(1)     1D1 : 3A                         abx                     ; X+=B
(1)     1D2 : A6 04                      ldaa    queue_buf,x     ; read an element
(1)     1D4 : 38                         pulx
(1)     1D5 : 6A 00                      dec     queue_len,x
(1)     1D7 : 5C                         incb
(1)     1D8 : E7 03                      stab    queue_get,x
(1)     1DA : E1 01                      cmpb    queue_size,x
(1)     1DC : 25 03                      blo     queue_remove_return ; carry is set
(1)     1DE : 6F 03                      clr     queue_get,x
(1)     1E0 : 0D                         sec                     ; set carry
(1)     1E1 :                    queue_remove_return:
(1)     1E1 : 33                         pulb
(1)     1E2 : 39                         rts
(1)     1E3 :
(1)     1E3 :                    ;;; Local Variables:
(1)     1E3 :                    ;;; mode: asm
(1)     1E3 :                    ;;; End:
(1)     1E3 :                    ;;; vim: set ft=asm et ts=4 sw=4:
        1E3 :
        1E3 :                    isr_sci:
        1E3 : D6 11                      ldab    TRCSR
        1E5 : C5 80                      bitb    #TRCSR_RDRF_bm
        1E7 : 27 08                      beq     isr_sci_send
        1E9 : 96 12                      ldaa    SCRDR           ; receive character
        1EB : CE 20 00                   ldx     #rx_queue
        1EE : BD 01 AB                   jsr     queue_add
        1F1 :                    isr_sci_send:
        1F1 : C5 20                      bitb    #TRCSR_TDRE_bm
        1F3 : 27 0A                      beq     isr_sci_exit
        1F5 : CE 20 80                   ldx     #tx_queue
        1F8 : BD 01 C7                   jsr     queue_remove
        1FB : 24 03                      bcc     isr_sci_empty
        1FD : 97 13                      staa    SCTDR           ; send character
        1FF :                    isr_sci_exit:
        1FF : 3B                         rti
        200 :                    isr_sci_empty:
        200 : 86 1A                      ldaa    #RX_INT_TX_NO
        202 : 97 11                      staa    TRCSR           ; disable Tx interrupt
        204 : 3B                         rti

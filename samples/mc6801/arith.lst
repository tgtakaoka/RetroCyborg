          0 :                            cpu     6801
          0 :                            include "mc6801.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6801/MC6803
(1)       0 :                    ;;; Condition Code Register (CC)
(1)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 CC_OVERFLOW   equ  %00000010   ; set to 1 if overflow occurred
(1)       0 : =4                 CC_ZERO       equ  %00000100   ; set to 1 if result is zero
(1)       0 : =8                 CC_NEGATIVE   equ  %00001000   ; set to 1 if result is negative
(1)       0 : =10                CC_IRQ        equ  %00010000   ; if 1, IRQ is masked
(1)       0 : =20                CC_HALF_CARRY equ  %00100000   ; if 1, decimal carry from least digit occurred
(1)       0 :
(1)       0 :                    ;;; Internal Register Area
(1)       0 : =0                 DDR1:   equ     $00          ; $00: Port 1 Data Direction Register
(1)       0 : =1                 DDR2:   equ     $01          ; $01: Port 2 Data Direction Register
(1)       0 : =2                 PORT1:  equ     $02          ; $02: Port 1 Data Register
(1)       0 : =3                 PORT2:  equ     $03          ; $03: Port 2 Data Register
(1)       0 : =4                 DDR3:   equ     $04          ; $04: Port 3 Data Direction Register
(1)       0 : =5                 DDR4:   equ     $05          ; $05: Port 4 Data Direction Register
(1)       0 : =6                 PORT3:  equ     $06          ; $06: Port 3 Data Register
(1)       0 : =7                 PORT4:  equ     $07          ; $07: Port 4 Data Register
(1)       0 : =8                 TCSR:   equ     $08          ; $08: Timer Control and Status Register
(1)       0 : =9                 TCNT:   equ     $09          ; $09: Timer Counter
(1)       0 : =B                 TOCR:   equ     $0B          ; $0B: Output Compare Register
(1)       0 : =D                 TCAP:   equ     $0D          ; $0D: Input Capture Register
(1)       0 : =F                 P3CSR:  equ     $0F          ; $0F: Port 3 Control and Status Register
(1)       0 : =10                RMCR:   equ     $10          ; $10: Rate and Mode Control Registers
(1)       0 : =11                TRCSR:  equ     $11          ; $11: Transmit Receive Control and Status Register
(1)       0 : =12                SCRDR:  equ     $12          ; $12: Receiver Data Register
(1)       0 : =13                SCTDR:  equ     $13          ; $13: Transmit Data Register
(1)       0 : =14                RAMCR:  equ     $14          ; $14: RAM Control Register
(1)       0 :
(1)       0 :                    ;;; Port 2 Data Register
(1)       0 : =E0                PC_gm:  equ     %11100000       ; PC group mask
(1)       0 : =5                 PC_gp:  equ     5               ; PC group position
(1)       0 : =20                PC0_bm: equ     %00100000       ; PC0
(1)       0 : =40                PC1_bm: equ     %01000000       ; PC1
(1)       0 : =80                PC2_bm: equ     %10000000       ; PC2
(1)       0 :
(1)       0 :                    ;;; Port 3 Control and Status Register
(1)       0 : =8                 P3_LATCH_bm:    equ     %00001000 ; Latch Enable
(1)       0 : =10                P3_OSS_bm:      equ     %00010000 ; Output Strobe Select
(1)       0 : =40                P3_IS3IE_bm:    equ     %01000000 ; IS3 IRQ1 Enable
(1)       0 : =80                P3_IS3F_bm:     equ     %10000000 ; IS3 Flag
(1)       0 :
(1)       0 :                    ;;; RAM Control Register
(1)       0 : =40                RAME_bm:        equ     %01000000 ; RAM Enable
(1)       0 : =80                STBY_PWR_bm:    equ     %10000000 ; Standby Power status
(1)       0 :
(1)       0 :                    ;;; Timer Control and Status Register
(1)       0 : =1                 TCSR_OLVL_bm:   equ     %00000001 ; Output Level
(1)       0 : =2                 TCSR_IEDG_bm:   equ     %00000010 ; Input Edge. 0=negative/1=positive
(1)       0 : =4                 TCSR_ETOI_bm:   equ     %00000100 ; Enable Timer Overflow Interrupt for IRQ2
(1)       0 : =8                 TCSR_EOCI_bm:   equ     %00001000 ; Enable Output Compare Interrupt for IRQ2
(1)       0 : =10                TCSR_EICI_bm:   equ     %00010000 ; Enable Input Capture Interrupt for IRQ2
(1)       0 : =20                TCSR_TOF_bm:    equ     %00100000 ; Timer Overflow Flag
(1)       0 : =40                TCSR_OCF_bm:    equ     %01000000 ; Output Compare Flag
(1)       0 : =80                TCSR_ICF_bm:    equ     %10000000 ; Input Capture Flag
(1)       0 :
(1)       0 :                    ;;; Serial Communication Interface
(1)       0 :                    ;;; Rate and Mode Control Registers
(1)       0 :                            ;; Speed Select
(1)       0 : =3                 SS_gm:          equ     %00000011 ; Group mask
(1)       0 : =0                 SS_DIV16_gc:    equ     %00000000 ; E/16
(1)       0 : =1                 SS_DIV128_gc:   equ     %00000001 ; E/128
(1)       0 : =2                 SS_DIV1024_gc:  equ     %00000010 ; E/1024
(1)       0 : =3                 SS_DIV4096_gc:  equ     %00000011 ; E/4096
(1)       0 :                            ;; Clock Control and Format Select
(1)       0 : =C                 CCFS_gm:        equ     %00001100 ; Group mask
(1)       0 : =0                 CCFS_BIPH_gc:   equ     %00000000 ; Bi-Phase
(1)       0 : =4                 CCFS_NRZ_gc:    equ     %00000100 ; NRZ
(1)       0 : =8                 CCFS_NRZO_gc:   equ     %00001000 ; NRZ P22=Clock Output
(1)       0 : =C                 CCFS_NRZI_gc:   equ     %00001100 ; NRZ P22=Clock Input
(1)       0 :                    ;;; Transmit/Receive Control and Status Register
(1)       0 : =1                 TRCSR_WU_bm:    equ     %00000001 ; Wake-up on idle line
(1)       0 : =2                 TRCSR_TE_bm:    equ     %00000010 ; Transmit Enable; if set, P24 is output
(1)       0 : =4                 TRCSR_TIE_bm:   equ     %00000100 ; Transmit Interrupt Enable for IRQ2
(1)       0 : =8                 TRCSR_RE_bm:    equ     %00001000 ; Receiver Enable; if set, P23 is input
(1)       0 : =10                TRCSR_RIE_bm:   equ     %00010000 ; Receiver Interrupt Enable for IRQ2
(1)       0 : =20                TRCSR_TDRE_bm:  equ     %00100000 ; Transmit Data Register Empty
(1)       0 : =40                TRCSR_ORFE_bm:  equ     %01000000 ; Overrun Framing Error
(1)       0 : =80                TRCSR_RDRF_bm:  equ     %10000000 ; Receive Data Register Full
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =FFF0              VEC_SCI:        equ     $FFF0  ; $FFF0: SCI Interrupt (TDRE+RDRF+ORFE)
(1)       0 : =FFF2              VEC_TOF:        equ     $FFF2  ; $FFF2: Timer Overflow Interrupt
(1)       0 : =FFF4              VEC_OCF:        equ     $FFF4  ; $FFF4: Output Compare Interrupt
(1)       0 : =FFF6              VEC_ICF:        equ     $FFF6  ; $FFF6: Input Capture Interrupt
(1)       0 : =FFF8              VEC_IRQ1:       equ     $FFF8  ; $FFF8: Maskable Interrupt Request 1
(1)       0 : =FFFA              VEC_SWI:        equ     $FFFA  ; $FFFA: Software Interrupt
(1)       0 : =FFFC              VEC_NMI:        equ     $FFFC  ; $FFFC: Non Maskable Interrupt
(1)       0 : =FFFE              VEC_RESET:      equ     $FFFE  ; $FFFE: Reset
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     $DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 :
         20 :                            org     $20
         20 :                    R0:
         20 :                    R0H:    rmb     1
         21 :                    R0L:    rmb     1
         22 :                    R1:
         22 :                    R1H:    rmb     1
         23 :                    R1L:    rmb     1
         24 :                    R2:
         24 :                    R2H:    rmb     1
         25 :                    R2L:    rmb     1
         26 :
       1000 :                            org     $1000
       1000 : =FFF               stack:  equ     *-1             ; MC6800's SP is post-decrement/pre-increment
       1000 :
       FFFA :                            org     VEC_SWI
       FFFA : FF FA                      fdb     VEC_SWI         ; for halt to system
       FFFC :
       FFFE :                            org     VEC_RESET
       FFFE : 01 00                      fdb     initialize
      10000 :
        100 :                            org     $0100
        100 :                    initialize:
        100 : 8E 0F FF                   lds     #stack
        103 : 86 03                      ldaa    #CDS_RESET_gc   ; Master reset
        105 : B7 DF 00                   staa    ACIA_control
        108 : 86 14                      ldaa    #WSB_8N1_gc     ; 8 bits + No Parity + 1 Stop Bits
        10A :                                                    ; Transmit, Receive interrupts disabled
        10A : B7 DF 00                   staa    ACIA_control
        10D :
        10D : BD 01 65                   jsr     arith
        110 : 3F                         swi
        111 :
        111 :                    ;;; Print out char
        111 :                    ;;; @param A char
        111 :                    ;;; @clobber A
        111 :                    putspace:
        111 : 86 20                      ldaa    #' '
        113 : 20 06                      bra     putchar
        115 :                    newline:
        115 : 86 0D                      ldaa    #$0D
        117 : 8D 02                      bsr     putchar
        119 : 86 0A                      ldaa    #$0A
        11B :                    putchar:
        11B : F6 DF 00                   ldab    ACIA_status
        11E : C5 02                      bitb    #TDRE_bm
        120 : 27 F9                      beq     putchar
        122 : B7 DF 01                   staa    ACIA_data
        125 : 39                         rts
        126 :
        126 :                    ;;; Print "R1 op R2"
        126 :                    ;;; @params A op letter
        126 :                    ;;; @clobber R0
        126 :                    expr:
        126 : 36                         psha
        127 : DE 22                      ldx     R1
        129 : DF 20                      stx     R0
        12B : BD 03 84                   jsr     print_int16     ; print R1
        12E : 8D E1                      bsr     putspace
        130 : 32                         pula
        131 : 8D E8                      bsr     putchar         ; print op
        133 : 8D DC                      bsr     putspace
        135 : DE 24                      ldx     R2
        137 : DF 20                      stx     R0
        139 : 7E 03 84                   jmp     print_int16     ; print R2
        13C :
        13C :                    ;;; Print " = R0\n"
        13C :                    ;;; @clobber R0 R1 R2
        13C :                    answer:
        13C : 8D D3                      bsr     putspace
        13E : 86 3D                      ldaa    #'='
        140 : 8D D9                      bsr     putchar
        142 : 8D CD                      bsr     putspace
        144 : BD 03 84                   jsr     print_int16     ; print R0
        147 : 20 CC                      bra     newline
        149 :
        149 :                    ;;; Print "R1 rel R2"
        149 :                    ;;; @clobber R0
        149 :                    comp:
        149 : DC 22                      ldd     R1
        14B : 93 24                      subd    R2
        14D : 27 0C                      beq     comp_eq
        14F : 2D 0E                      blt     comp_lt
        151 : 2E 04                      bgt     comp_gt
        153 : 86 3F                      ldaa    #'?'
        155 : 20 0A                      bra     comp_out
        157 :                    comp_gt:
        157 : 86 3E                      ldaa    #'>'
        159 : 20 06                      bra     comp_out
        15B :                    comp_eq:
        15B : 86 3D                      ldaa    #'='
        15D : 20 02                      bra     comp_out
        15F :                    comp_lt:
        15F : 86 3C                      ldaa    #'<'
        161 :                    comp_out:
        161 : 8D C3                      bsr     expr
        163 : 20 B0                      bra     newline
        165 :
        165 :                    arith:
        165 : CE 46 50                   ldx     #18000
        168 : DF 22                      stx     R1
        16A : CE 6D 60                   ldx     #28000
        16D : DF 24                      stx     R2
        16F : 86 2B                      ldaa    #'+'
        171 : BD 01 26                   jsr     expr
        174 : BD 03 A9                   jsr     add16           ; R0=R1+R2
        177 : BD 01 3C                   jsr     answer          ; -19536
        17A :
        17A : CE 46 50                   ldx     #18000
        17D : DF 22                      stx     R1
        17F : CE B9 B0                   ldx     #-18000
        182 : DF 24                      stx     R2
        184 : 86 2B                      ldaa    #'+'
        186 : BD 01 26                   jsr     expr
        189 : BD 03 A9                   jsr     add16           ; R0=R1+R2
        18C : BD 01 3C                   jsr     answer          ; 0
        18F :
        18F : CE B9 B0                   ldx     #-18000
        192 : DF 22                      stx     R1
        194 : CE B9 B0                   ldx     #-18000
        197 : DF 24                      stx     R2
        199 : 86 2B                      ldaa    #'+'
        19B : BD 01 26                   jsr     expr
        19E : BD 03 A9                   jsr     add16           ; R0=R1+R2
        1A1 : BD 01 3C                   jsr     answer          ; 29536
        1A4 :
        1A4 : CE B9 B0                   ldx     #-18000
        1A7 : DF 22                      stx     R1
        1A9 : CE 92 A0                   ldx     #-28000
        1AC : DF 24                      stx     R2
        1AE : 86 2D                      ldaa    #'-'
        1B0 : BD 01 26                   jsr     expr
        1B3 : BD 03 B0                   jsr     sub16           ; R0=R1-R2
        1B6 : BD 01 3C                   jsr     answer          ; -19536
        1B9 :
        1B9 : CE 46 50                   ldx     #18000
        1BC : DF 22                      stx     R1
        1BE : CE B9 B0                   ldx     #-18000
        1C1 : DF 24                      stx     R2
        1C3 : 86 2D                      ldaa    #'-'
        1C5 : BD 01 26                   jsr     expr
        1C8 : BD 03 B0                   jsr     sub16           ; R0=R1-R2
        1CB : BD 01 3C                   jsr     answer          ; 29536
        1CE :
        1CE : CE 92 A0                   ldx     #-28000
        1D1 : DF 22                      stx     R1
        1D3 : CE B9 B0                   ldx     #-18000
        1D6 : DF 24                      stx     R2
        1D8 : 86 2D                      ldaa    #'-'
        1DA : BD 01 26                   jsr     expr
        1DD : BD 03 B0                   jsr     sub16           ; R0=R1-R2
        1E0 : BD 01 3C                   jsr     answer          ; -10000
        1E3 :
        1E3 : CE 00 64                   ldx     #100
        1E6 : DF 22                      stx     R1
        1E8 : CE 01 2C                   ldx     #300
        1EB : DF 24                      stx     R2
        1ED : 86 2A                      ldaa    #'*'
        1EF : BD 01 26                   jsr     expr
        1F2 : BD 03 D1                   jsr     mul16           ; R0=R1*R2
        1F5 : BD 01 3C                   jsr     answer          ; 30000
        1F8 :
        1F8 : CE 00 C8                   ldx     #200
        1FB : DF 22                      stx     R1
        1FD : CE 00 64                   ldx     #100
        200 : DF 24                      stx     R2
        202 : 86 2A                      ldaa    #'*'
        204 : BD 01 26                   jsr     expr
        207 : BD 03 D1                   jsr     mul16           ; R0=R1*R2
        20A : BD 01 3C                   jsr     answer          ; 20000
        20D :
        20D : CE 01 2C                   ldx     #300
        210 : DF 22                      stx     R1
        212 : CE FF 38                   ldx     #-200
        215 : DF 24                      stx     R2
        217 : 86 2A                      ldaa    #'*'
        219 : BD 01 26                   jsr     expr
        21C : BD 03 D1                   jsr     mul16           ; R0=R1*R2
        21F : BD 01 3C                   jsr     answer          ; 5536
        222 :
        222 : CE 00 64                   ldx     #100
        225 : DF 22                      stx     R1
        227 : CE FE D4                   ldx     #-300
        22A : DF 24                      stx     R2
        22C : 86 2A                      ldaa    #'*'
        22E : BD 01 26                   jsr     expr
        231 : BD 03 D1                   jsr     mul16           ; R0=R1*R2
        234 : BD 01 3C                   jsr     answer          ; -30000
        237 :
        237 : CE FF 38                   ldx     #-200
        23A : DF 22                      stx     R1
        23C : CE FF 9C                   ldx     #-100
        23F : DF 24                      stx     R2
        241 : 86 2A                      ldaa    #'*'
        243 : BD 01 26                   jsr     expr
        246 : BD 03 D1                   jsr     mul16           ; R0=R1*R2
        249 : BD 01 3C                   jsr     answer          ; 20000
        24C :
        24C : CE 75 30                   ldx     #30000
        24F : DF 22                      stx     R1
        251 : CE 00 64                   ldx     #100
        254 : DF 24                      stx     R2
        256 : 86 2F                      ldaa    #'/'
        258 : BD 01 26                   jsr     expr
        25B : BD 04 30                   jsr     div16           ; R0=R1/R2
        25E : BD 01 3C                   jsr     answer          ; 30
        261 :
        261 : CE FF 38                   ldx     #-200
        264 : DF 22                      stx     R1
        266 : CE 00 64                   ldx     #100
        269 : DF 24                      stx     R2
        26B : 86 2F                      ldaa    #'/'
        26D : BD 01 26                   jsr     expr
        270 : BD 04 30                   jsr     div16           ; R0=R1/R2
        273 : BD 01 3C                   jsr     answer          ; -2
        276 :
        276 : CE 8A D0                   ldx     #-30000
        279 : DF 22                      stx     R1
        27B : CE FF 38                   ldx     #-200
        27E : DF 24                      stx     R2
        280 : 86 2F                      ldaa    #'/'
        282 : BD 01 26                   jsr     expr
        285 : BD 04 30                   jsr     div16           ; R0=R1/R2
        288 : BD 01 3C                   jsr     answer          ; 150
        28B :
        28B : CE 8A D0                   ldx     #-30000
        28E : DF 22                      stx     R1
        290 : CE 00 4E                   ldx     #78
        293 : DF 24                      stx     R2
        295 : 86 2F                      ldaa    #'/'
        297 : BD 01 26                   jsr     expr
        29A : BD 04 30                   jsr     div16           ; R0=R1/R2
        29D : BD 01 3C                   jsr     answer          ; -384
        2A0 :
        2A0 : CE 13 88                   ldx     #5000
        2A3 : DF 22                      stx     R1
        2A5 : CE 0F A0                   ldx     #4000
        2A8 : DF 24                      stx     R2
        2AA : BD 01 49                   jsr     comp
        2AD :
        2AD : CE 13 88                   ldx     #5000
        2B0 : DF 22                      stx     R1
        2B2 : CE 13 88                   ldx     #5000
        2B5 : DF 24                      stx     R2
        2B7 : BD 01 49                   jsr     comp
        2BA :
        2BA : CE 0F A0                   ldx     #4000
        2BD : DF 22                      stx     R1
        2BF : CE 13 88                   ldx     #5000
        2C2 : DF 24                      stx     R2
        2C4 : BD 01 49                   jsr     comp
        2C7 :
        2C7 : CE EC 78                   ldx     #-5000
        2CA : DF 22                      stx     R1
        2CC : CE F0 60                   ldx     #-4000
        2CF : DF 24                      stx     R2
        2D1 : BD 01 49                   jsr     comp
        2D4 :
        2D4 : CE EC 78                   ldx     #-5000
        2D7 : DF 22                      stx     R1
        2D9 : CE EC 78                   ldx     #-5000
        2DC : DF 24                      stx     R2
        2DE : BD 01 49                   jsr     comp
        2E1 :
        2E1 : CE F0 60                   ldx     #-4000
        2E4 : DF 22                      stx     R1
        2E6 : CE EC 78                   ldx     #-5000
        2E9 : DF 24                      stx     R2
        2EB : BD 01 49                   jsr     comp
        2EE :
        2EE : CE 7F BC                   ldx     #32700
        2F1 : DF 22                      stx     R1
        2F3 : CE 7F 58                   ldx     #32600
        2F6 : DF 24                      stx     R2
        2F8 : BD 01 49                   jsr     comp
        2FB :
        2FB : CE 7F BC                   ldx     #32700
        2FE : DF 22                      stx     R1
        300 : CE 7F BC                   ldx     #32700
        303 : DF 24                      stx     R2
        305 : BD 01 49                   jsr     comp
        308 :
        308 : CE 7F 58                   ldx     #32600
        30B : DF 22                      stx     R1
        30D : CE 7F BC                   ldx     #32700
        310 : DF 24                      stx     R2
        312 : BD 01 49                   jsr     comp
        315 :
        315 : CE 80 44                   ldx     #-32700
        318 : DF 22                      stx     R1
        31A : CE 80 A8                   ldx     #-32600
        31D : DF 24                      stx     R2
        31F : BD 01 49                   jsr     comp
        322 :
        322 : CE 80 44                   ldx     #-32700
        325 : DF 22                      stx     R1
        327 : CE 80 44                   ldx     #-32700
        32A : DF 24                      stx     R2
        32C : BD 01 49                   jsr     comp
        32F :
        32F : CE 80 A8                   ldx     #-32600
        332 : DF 22                      stx     R1
        334 : CE 80 44                   ldx     #-32700
        337 : DF 24                      stx     R2
        339 : BD 01 49                   jsr     comp
        33C :
        33C : CE 46 50                   ldx     #18000
        33F : DF 22                      stx     R1
        341 : CE 92 A0                   ldx     #-28000
        344 : DF 24                      stx     R2
        346 : BD 01 49                   jsr     comp
        349 :
        349 : CE 92 A0                   ldx     #-28000
        34C : DF 22                      stx     R1
        34E : CE 92 A0                   ldx     #-28000
        351 : DF 24                      stx     R2
        353 : BD 01 49                   jsr     comp
        356 :
        356 : CE 92 A0                   ldx     #-28000
        359 : DF 22                      stx     R1
        35B : CE 46 50                   ldx     #18000
        35E : DF 24                      stx     R2
        360 : BD 01 49                   jsr     comp
        363 : 39                         rts
        364 :
        364 :                            include "arith.inc"
(1)     364 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     364 :                            cpu     6801
(1)     364 :
(1)     364 :                    ;;; Print unsigned 16-bit integer as decimal
(1)     364 :                    ;;; @param R0 value
(1)     364 :                    ;;; @clobber A X R0 R1 R2
(1)     364 :                    print_uint16:
(1)     364 : 96 20                      ldaa    R0H
(1)     366 : 9A 21                      oraa    R0L
(1)     368 : 27 14                      beq     print_uint16_zero
(1)     36A :                    print_uint16_loop:
(1)     36A : DE 20                      ldx     R0
(1)     36C : DF 22                      stx     R1                ; R1=value
(1)     36E : 27 13                      beq     print_uint16_end ; branch if value == 0
(1)     370 : CE 00 0A                   ldx     #10
(1)     373 : DF 24                      stx     R2              ; R2=10
(1)     375 : BD 03 F6                   jsr     udiv16          ; R0=value/10
(1)     378 : 96 23                      ldaa    R1L
(1)     37A : 36                         psha                    ; push reminder
(1)     37B : 8D ED                      bsr     print_uint16_loop
(1)     37D : 32                         pula
(1)     37E :                    print_uint16_zero:
(1)     37E : 8A 30                      oraa    #'0'
(1)     380 : 7E 01 1B                   jmp     putchar
(1)     383 :                    print_uint16_end:
(1)     383 : 39                         rts
(1)     384 :
(1)     384 :                    ;;; Print signed 16-bit integer as decimal
(1)     384 :                    ;;; @param R0 value
(1)     384 :                    ;;; @clobber A X R0
(1)     384 :                    print_int16:
(1)     384 : DE 22                      ldx     R1
(1)     386 : 3C                         pshx                    ; push R1
(1)     387 : DE 24                      ldx     R2
(1)     389 : 3C                         pshx                    ; push R2
(1)     38A : 96 20                      ldaa    R0H
(1)     38C : 2A 0B                      bpl     print_int16_print
(1)     38E : 86 2D                      ldaa    #'-'
(1)     390 : BD 01 1B                   jsr     putchar
(1)     393 : DC 20                      ldd     R0
(1)     395 : 8D 0B                      bsr     neg_D
(1)     397 : DD 20                      std     R0
(1)     399 :                    print_int16_print:
(1)     399 : 8D C9                      bsr     print_uint16
(1)     39B : 38                         pulx                    ; pop R2
(1)     39C : DF 24                      stx     R2
(1)     39E : 38                         pulx                    ; pop R1
(1)     39F : DF 22                      stx     R1
(1)     3A1 : 39                         rts
(1)     3A2 :
(1)     3A2 :                    ;;; Negate D
(1)     3A2 :                    ;;; @param D register
(1)     3A2 :                    neg_D:
(1)     3A2 : 43                         coma
(1)     3A3 : 53                         comb
(1)     3A4 : CB 01                      addb    #1
(1)     3A6 : 89 00                      adca    #0
(1)     3A8 : 39                         rts
(1)     3A9 :
(1)     3A9 :                    ;;; Addition: R0 = R1 + R2
(1)     3A9 :                    ;;; @clobber D
(1)     3A9 :                    add16:
(1)     3A9 : DC 22                      ldd     R1
(1)     3AB : D3 24                      addd    R2
(1)     3AD : DD 20                      std     R0
(1)     3AF : 39                         rts
(1)     3B0 :
(1)     3B0 :                    ;;; Subtraction: R0 = R1 + R2
(1)     3B0 :                    ;;; @clobber D
(1)     3B0 :                    sub16:
(1)     3B0 : DC 22                      ldd     R1
(1)     3B2 : 93 24                      subd    R2
(1)     3B4 : DD 20                      std     R0
(1)     3B6 : 39                         rts
(1)     3B7 :
(1)     3B7 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)     3B7 :                    ;;; @param R1 multiplicand
(1)     3B7 :                    ;;; @param R2 multiplier
(1)     3B7 :                    ;;; @return R0 result
(1)     3B7 :                    ;;; @clobber R0 R1 R2
(1)     3B7 :                    umul16:
(1)     3B7 : 96 23                      ldaa    R1L
(1)     3B9 : D6 25                      ldab    R2L
(1)     3BB : 3D                         mul                     ; low(multiplicand)*low(multiplier)
(1)     3BC : DD 20                      std     R0
(1)     3BE : 96 23                      ldaa    R1L
(1)     3C0 : D6 24                      ldab    R2H
(1)     3C2 : 3D                         mul                     ; low(multiplicand)*high(multiplier)
(1)     3C3 : DB 20                      addb    R0H
(1)     3C5 : D7 20                      stab    R0H
(1)     3C7 : 96 22                      ldaa    R1H
(1)     3C9 : D6 25                      ldab    R2L
(1)     3CB : 3D                         mul                     ; high(multiplicand)*low(multiplier)
(1)     3CC : DB 20                      addb    R0H
(1)     3CE : D7 20                      stab    R0H
(1)     3D0 : 39                         rts
(1)     3D1 :
(1)     3D1 :                    ;;; Multiply; result = multiplicand * multiplier
(1)     3D1 :                    ;;; @param R1 multiplicand
(1)     3D1 :                    ;;; @param R2 multiplier
(1)     3D1 :                    ;;; @return R0 result
(1)     3D1 :                    ;;; @clobber R1 R2
(1)     3D1 :                    mul16:
(1)     3D1 : 96 22                      ldaa    R1H
(1)     3D3 : 98 24                      eora    R2H
(1)     3D5 : 36                         psha                    ; save hi(multiplicand^multiplier)
(1)     3D6 : DC 24                      ldd     R2
(1)     3D8 : 2A 03                      bpl     mul16_multiplicand
(1)     3DA : BD 03 A2                   jsr     neg_D           ; negate multiplier
(1)     3DD :                    mul16_multiplicand:
(1)     3DD : DD 24                      std     R2
(1)     3DF : DC 22                      ldd     R1
(1)     3E1 : 2A 03                      bpl     mul16_multiply
(1)     3E3 : BD 03 A2                   jsr     neg_D           ; negate multiplicand
(1)     3E6 :                    mul16_multiply:
(1)     3E6 : DD 22                      std     R1
(1)     3E8 : 8D CD                      bsr     umul16          ; R0=result
(1)     3EA : 32                         pula                    ; A=(multiplicand^multiplier)
(1)     3EB : 4D                         tsta
(1)     3EC : 2A 07                      bpl     mul16_end
(1)     3EE : DC 20                      ldd     R0
(1)     3F0 : BD 03 A2                   jsr     neg_D           ; negate result
(1)     3F3 : DD 20                      std     R0
(1)     3F5 :                    mul16_end:
(1)     3F5 : 39                         rts
(1)     3F6 :
(1)     3F6 :                    ;;; Unsigned division: dividend / divisor = quotient ... reminder
(1)     3F6 :                    ;;; @praram R1 dividend
(1)     3F6 :                    ;;; @praram R2 divisor
(1)     3F6 :                    ;;; @return R0 quotient
(1)     3F6 :                    ;;; @return R1 reminder
(1)     3F6 :                    ;;; @clobber R2
(1)     3F6 :                    udiv16:
(1)     3F6 : 96 24                      ldaa    R2H
(1)     3F8 : 9A 25                      oraa    R2L
(1)     3FA : 27 33                      beq     udiv16_end      ; branch if R2==0
(1)     3FC : CE 00 01                   ldx     #1              ; X=bits
(1)     3FF : 20 06                      bra     udiv16_prep
(1)     401 :                    udiv16_prep_loop:
(1)     401 : DC 24                      ldd     R2
(1)     403 : 05                         lsld
(1)     404 : DD 24                      std     R2              ; divisor <<= 1
(1)     406 : 08                         inx                     ; ++bits
(1)     407 :                    udiv16_prep:
(1)     407 : 96 24                      ldaa    R2H
(1)     409 : 2A F6                      bpl     udiv16_prep_loop ; while msb(divisor) == 0
(1)     40B : 4F                         clra
(1)     40C : 5F                         clrb
(1)     40D : DD 20                      std     R0              ; quotient=0
(1)     40F : 20 0A                      bra     udiv16_enter_loop
(1)     411 :                    udiv16_loop:
(1)     411 : DC 24                      ldd     R2
(1)     413 : 04                         lsrd
(1)     414 : DD 24                      std     R2              ; divisor >>= 1
(1)     416 : DC 20                      ldd     R0
(1)     418 : 05                         lsld
(1)     419 : DD 20                      std     R0              ; quotient <<= 1
(1)     41B :                    udiv16_enter_loop:
(1)     41B : DC 22                      ldd     R1
(1)     41D : 93 24                      subd    R2
(1)     41F : DD 22                      std     R1              ; dividend -= divisor
(1)     421 : 25 05                      bcs     udiv16_readd
(1)     423 : 7C 00 21                   inc     R0L             ; quotient |= 1
(1)     426 : 20 04                      bra     udiv16_next
(1)     428 :                    udiv16_readd:
(1)     428 : D3 24                      addd    R2
(1)     42A : DD 22                      std     R1              ; dividend += divisor
(1)     42C :                    udiv16_next:
(1)     42C : 09                         dex                     ; --bits
(1)     42D : 26 E2                      bne     udiv16_loop     ; while bits != 0
(1)     42F :                    udiv16_end:
(1)     42F : 39                         rts
(1)     430 :
(1)     430 :                    ;;; Division; dividend / divisor = quotient ... reminder
(1)     430 :                    ;;; @param R1 dividend
(1)     430 :                    ;;; @param R2 divisor
(1)     430 :                    ;;; @return R0 quotient
(1)     430 :                    ;;; @return R1 reminder
(1)     430 :                    ;;; @clobber R2
(1)     430 :                    div16:
(1)     430 : 96 22                      ldaa    R1H
(1)     432 : 98 24                      eora    R2H
(1)     434 : 36                         psha                    ; save hi(dividend^divisor)
(1)     435 : DC 24                      ldd     R2
(1)     437 : 2A 03                      bpl     div16_dividend
(1)     439 : BD 03 A2                   jsr     neg_D           ; negate divisor
(1)     43C :                    div16_dividend:
(1)     43C : DD 24                      std     R2
(1)     43E : DC 22                      ldd     R1
(1)     440 : 2A 03                      bpl     div16_divide
(1)     442 : BD 03 A2                   jsr     neg_D           ; negate dividend
(1)     445 :                    div16_divide:
(1)     445 : DD 22                      std     R1
(1)     447 : BD 03 F6                   jsr     udiv16          ; R0=quotient
(1)     44A : 32                         pula                    ; A=(dividend^divisor)
(1)     44B : 4D                         tsta
(1)     44C : 2A 07                      bpl     div16_end
(1)     44E : DC 20                      ldd     R0
(1)     450 : BD 03 A2                   jsr     neg_D           ; negate result
(1)     453 : DD 20                      std     R0
(1)     455 :                    div16_end:
(1)     455 : 39                         rts

          0 :                            cpu     6801
          0 :                            include "mc6801.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6801/MC6803
(1)       0 :                    ;;; Condition Code Register (CC)
(1)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 CC_OVERFLOW   equ  %00000010   ; set to 1 if overflow occurred
(1)       0 : =4                 CC_ZERO       equ  %00000100   ; set to 1 if result is zero
(1)       0 : =8                 CC_NEGATIVE   equ  %00001000   ; set to 1 if result is negative
(1)       0 : =10                CC_IRQ        equ  %00010000   ; if 1, IRQ is masked
(1)       0 : =20                CC_HALF_CARRY equ  %00100000   ; if 1, decimal carry from least digit occurred
(1)       0 :
(1)       0 :                    ;;; Internal Register Area
(1)       0 : =0                 DDR1:   equ     $00          ; $00: Port 1 Data Direction Register
(1)       0 : =1                 DDR2:   equ     $01          ; $01: Port 2 Data Direction Register
(1)       0 : =2                 PORT1:  equ     $02          ; $02: Port 1 Data Register
(1)       0 : =3                 PORT2:  equ     $03          ; $03: Port 2 Data Register
(1)       0 : =4                 DDR3:   equ     $04          ; $04: Port 3 Data Direction Register
(1)       0 : =5                 DDR4:   equ     $05          ; $05: Port 4 Data Direction Register
(1)       0 : =6                 PORT3:  equ     $06          ; $06: Port 3 Data Register
(1)       0 : =7                 PORT4:  equ     $07          ; $07: Port 4 Data Register
(1)       0 : =8                 TCSR:   equ     $08          ; $08: Timer Control and Status Register
(1)       0 : =9                 TCNT:   equ     $09          ; $09: Timer Counter
(1)       0 : =B                 TOCR:   equ     $0B          ; $0B: Output Compare Register
(1)       0 : =D                 TCAP:   equ     $0D          ; $0D: Input Capture Register
(1)       0 : =F                 P3CSR:  equ     $0F          ; $0F: Port 3 Control and Status Register
(1)       0 : =10                RMCR:   equ     $10          ; $10: Rate and Mode Control Registers
(1)       0 : =11                TRCSR:  equ     $11          ; $11: Transmit Receive Control and Status Register
(1)       0 : =12                SCRDR:  equ     $12          ; $12: Receiver Data Register
(1)       0 : =13                SCTDR:  equ     $13          ; $13: Transmit Data Register
(1)       0 : =14                RAMCR:  equ     $14          ; $14: RAM Control Register
(1)       0 :
(1)       0 :                    ;;; Port 2 Data Register
(1)       0 : =E0                PC_gm:  equ     %11100000       ; PC group mask
(1)       0 : =5                 PC_gp:  equ     5               ; PC group position
(1)       0 : =20                PC0_bm: equ     %00100000       ; PC0
(1)       0 : =40                PC1_bm: equ     %01000000       ; PC1
(1)       0 : =80                PC2_bm: equ     %10000000       ; PC2
(1)       0 :
(1)       0 :                    ;;; Port 3 Control and Status Register
(1)       0 : =8                 P3_LATCH_bm:    equ     %00001000 ; Latch Enable
(1)       0 : =10                P3_OSS_bm:      equ     %00010000 ; Output Strobe Select
(1)       0 : =40                P3_IS3IE_bm:    equ     %01000000 ; IS3 IRQ1 Enable
(1)       0 : =80                P3_IS3F_bm:     equ     %10000000 ; IS3 Flag
(1)       0 :
(1)       0 :                    ;;; RAM Control Register
(1)       0 : =40                RAME_bm:        equ     %01000000 ; RAM Enable
(1)       0 : =80                STBY_PWR_bm:    equ     %10000000 ; Standby Power status
(1)       0 :
(1)       0 :                    ;;; Timer Control and Status Register
(1)       0 : =1                 TCSR_OLVL_bm:   equ     %00000001 ; Output Level
(1)       0 : =2                 TCSR_IEDG_bm:   equ     %00000010 ; Input Edge. 0=negative/1=positive
(1)       0 : =4                 TCSR_ETOI_bm:   equ     %00000100 ; Enable Timer Overflow Interrupt for IRQ2
(1)       0 : =8                 TCSR_EOCI_bm:   equ     %00001000 ; Enable Output Compare Interrupt for IRQ2
(1)       0 : =10                TCSR_EICI_bm:   equ     %00010000 ; Enable Input Capture Interrupt for IRQ2
(1)       0 : =20                TCSR_TOF_bm:    equ     %00100000 ; Timer Overflow Flag
(1)       0 : =40                TCSR_OCF_bm:    equ     %01000000 ; Output Compare Flag
(1)       0 : =80                TCSR_ICF_bm:    equ     %10000000 ; Input Capture Flag
(1)       0 :
(1)       0 :                    ;;; Serial Communication Interface
(1)       0 :                    ;;; Rate and Mode Control Registers
(1)       0 :                            ;; Speed Select
(1)       0 : =3                 SS_gm:          equ     %00000011 ; Group mask
(1)       0 : =0                 SS_DIV16_gc:    equ     %00000000 ; E/16
(1)       0 : =1                 SS_DIV128_gc:   equ     %00000001 ; E/128
(1)       0 : =2                 SS_DIV1024_gc:  equ     %00000010 ; E/1024
(1)       0 : =3                 SS_DIV4096_gc:  equ     %00000011 ; E/4096
(1)       0 :                            ;; Clock Control and Format Select
(1)       0 : =C                 CCFS_gm:        equ     %00001100 ; Group mask
(1)       0 : =0                 CCFS_BIPH_gc:   equ     %00000000 ; Bi-Phase
(1)       0 : =4                 CCFS_NRZ_gc:    equ     %00000100 ; NRZ
(1)       0 : =8                 CCFS_NRZO_gc:   equ     %00001000 ; NRZ P22=Clock Output
(1)       0 : =C                 CCFS_NRZI_gc:   equ     %00001100 ; NRZ P22=Clock Input
(1)       0 :                    ;;; Transmit/Receive Control and Status Register
(1)       0 : =1                 TRCSR_WU_bm:    equ     %00000001 ; Wake-up on idle line
(1)       0 : =2                 TRCSR_TE_bm:    equ     %00000010 ; Transmit Enable; if set, P24 is output
(1)       0 : =4                 TRCSR_TIE_bm:   equ     %00000100 ; Transmit Interrupt Enable for IRQ2
(1)       0 : =8                 TRCSR_RE_bm:    equ     %00001000 ; Receiver Enable; if set, P23 is input
(1)       0 : =10                TRCSR_RIE_bm:   equ     %00010000 ; Receiver Interrupt Enable for IRQ2
(1)       0 : =20                TRCSR_TDRE_bm:  equ     %00100000 ; Transmit Data Register Empty
(1)       0 : =40                TRCSR_ORFE_bm:  equ     %01000000 ; Overrun Framing Error
(1)       0 : =80                TRCSR_RDRF_bm:  equ     %10000000 ; Receive Data Register Full
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =FFF0              VEC_SCI:        equ     $FFF0  ; $FFF0: SCI Interrupt (TDRE+RDRF+ORFE)
(1)       0 : =FFF2              VEC_TOF:        equ     $FFF2  ; $FFF2: Timer Overflow Interrupt
(1)       0 : =FFF4              VEC_OCF:        equ     $FFF4  ; $FFF4: Output Compare Interrupt
(1)       0 : =FFF6              VEC_ICF:        equ     $FFF6  ; $FFF6: Input Capture Interrupt
(1)       0 : =FFF8              VEC_IRQ1:       equ     $FFF8  ; $FFF8: Maskable Interrupt Request 1
(1)       0 : =FFFA              VEC_SWI:        equ     $FFFA  ; $FFFA: Software Interrupt
(1)       0 : =FFFC              VEC_NMI:        equ     $FFFC  ; $FFFC: Non Maskable Interrupt
(1)       0 : =FFFE              VEC_RESET:      equ     $FFFE  ; $FFFE: Reset
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     $DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
         20 :                            org     $20
         20 :                    ;;; Working space for mandelbrot.inc
         20 : =32                F:      equ     50
         20 :                    vC:     rmb     2
         22 :                    vD:     rmb     2
         24 :                    vA:     rmb     2
         26 :                    vB:     rmb     2
         28 :                    vS:     rmb     2
         2A :                    vP:     rmb     2
         2C :                    vQ:     rmb     2
         2E :                    vY:     rmb     1
         2F :                    vX:     rmb     1
         30 :                    vI:     rmb     1
         31 :                            
         31 :                    ;;; Working space for arith.inc
         31 :                    R0:
         31 :                    R0H:    rmb     1
         32 :                    R0L:    rmb     1
         33 :                    R1:
         33 :                    R1H:    rmb     1
         34 :                    R1L:    rmb     1
         35 :                    R2:
         35 :                    R2H:    rmb     1
         36 :                    R2L:    rmb     1
         37 :
       2000 :                            org     $2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       rmb     rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       rmb     tx_queue_size
       2100 :
       1000 :                            org     $1000
       1000 : =FFF               stack:  equ     *-1             ; MC6800's SP is post-decrement/pre-increment
       1000 :
       FFF8 :                            org     VEC_IRQ1
       FFF8 : 03 E6                      fdb     isr_irq
       FFFA :
       FFFA :                            org     VEC_SWI
       FFFA : FF FA                      fdb     VEC_SWI         ; for halt to system
       FFFC :
       FFFE :                            org     VEC_RESET
       FFFE : 01 00                      fdb     initialize
      10000 :
        100 :                            org     $0100
        100 :                    initialize:
        100 : 8E 0F FF                   lds     #stack
        103 : CE 20 00                   ldx     #rx_queue
        106 : C6 80                      ldab    #rx_queue_size
        108 : BD 03 9F                   jsr     queue_init
        10B : CE 20 80                   ldx     #tx_queue
        10E : C6 80                      ldab    #tx_queue_size
        110 : BD 03 9F                   jsr     queue_init
        113 :                            ;; initialize ACIA
        113 : 86 03                      ldaa    #CDS_RESET_gc   ; master reset
        115 : B7 DF 00                   staa    ACIA_control
        118 : 86 94                      ldaa    #RX_INT_TX_NO
        11A : B7 DF 00                   staa    ACIA_control
        11D : 0E                         cli                     ; enable IRQ
        11E :
        11E : BD 01 66                   jsr     mandelbrot
        121 : 3F                         swi
        122 :
        122 :                    ;;; Get character
        122 :                    ;;; @return A
        122 :                    ;;; @return CC.C 0 if no character
        122 :                    ;;; @clobber X
        122 :                    getchar:
        122 : 0F                         sei                     ; disable IRQ
        123 : CE 20 00                   ldx     #rx_queue
        126 : BD 03 CA                   jsr     queue_remove
        129 : 0E                         cli                     ; enable IRQ
        12A : 39                         rts
        12B :
        12B :                    ;;; Put character
        12B :                    ;;; @param A
        12B :                    ;;; @clobber X
        12B :                    putspace:
        12B : 86 20                      ldaa    #' '
        12D : 20 06                      bra     putchar
        12F :                    newline:
        12F : 86 0D                      ldaa    #$0D
        131 : 8D 02                      bsr     putchar
        133 : 86 0A                      ldaa    #$0A
        135 :                    putchar:
        135 : 36                         psha
        136 : CE 20 80                   ldx     #tx_queue
        139 :                    putchar_retry:
        139 : 0F                         sei                     ; disable IRQ
        13A : BD 03 AE                   jsr     queue_add
        13D : 0E                         cli                     ; enable IRQ
        13E : 24 F9                      bcc     putchar_retry   ; branch if queue is full
        140 : 86 B4                      ldaa    #RX_INT_TX_INT  ; enable Tx interrupt
        142 : B7 DF 00                   staa    ACIA_control
        145 : 32                         pula
        146 : 39                         rts
        147 :
        147 :                            include "mandelbrot.inc"
(1)     147 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     147 :                            cpu     6801
(1)     147 :
(1)     147 :                    ;;; Print variable: "A=variable "
(1)     147 :                    ;;; @param X variable
(1)     147 :                    ;;; @param A variable letter
(1)     147 :                    ;;; @clobber R0
(1)     147 :                    print:
(1)     147 : DF 31                      stx     R0
(1)     149 : BD 01 35                   jsr     putchar         ; print variable letter
(1)     14C : 86 3D                      ldaa    #'='
(1)     14E : BD 01 35                   jsr     putchar         ; '='
(1)     151 : BD 02 CD                   jsr     print_int16
(1)     154 : 7E 01 2B                   jmp     putspace
(1)     157 :
(1)     157 :                    ;;; Sign extend A into X
(1)     157 :                    ;;; @param A
(1)     157 :                    ;;; @return X sign extended A
(1)     157 :                    sex_A:
(1)     157 : 5F                         clrb
(1)     158 : 36                         psha
(1)     159 : 4D                         tsta
(1)     15A : 2A 01                      bpl     sex_A_exit
(1)     15C : 53                         comb
(1)     15D :                    sex_A_exit:
(1)     15D : 37                         pshb
(1)     15E : 38                         pulx
(1)     15F : 39                         rts
(1)     160 :
(1)     160 :                    ;;; Sign extend B into D
(1)     160 :                    ;;; @param B
(1)     160 :                    ;;; @return D sign extended B
(1)     160 :                    sex_B:
(1)     160 : 4F                         clra
(1)     161 : 5D                         tstb
(1)     162 : 2A 01                      bpl     sex_B_exit
(1)     164 : 43                         coma
(1)     165 :                    sex_B_exit:
(1)     165 : 39                         rts
(1)     166 :
(1)     166 :                    mandelbrot:
(1)     166 : 86 F4                      ldaa    #-12
(1)     168 : 97 2E                      staa    vY              ; Y=-12
(1)     16A :                    loop_y:
(1)     16A : 86 CF                      ldaa    #-49
(1)     16C : 97 2F                      staa    vX              ; X=-49
(1)     16E :                    loop_x:
(1)     16E : D6 2F                      ldab    vX
(1)     170 : 8D EE                      bsr     sex_B
(1)     172 : DD 33                      std     R1              ; R1=X
(1)     174 : CE 00 E5                   ldx     #229
(1)     177 : DF 35                      stx     R2
(1)     179 : BD 03 1A                   jsr     mul16           ; R0=X*229
(1)     17C : DE 31                      ldx     R0
(1)     17E : DF 33                      stx     R1
(1)     180 : CE 00 64                   ldx     #100
(1)     183 : DF 35                      stx     R2
(1)     185 : BD 03 79                   jsr     div16           ; R0=X*229/100
(1)     188 : DE 31                      ldx     R0
(1)     18A : DF 20                      stx     vC              ; C=X*229/100
(1)     18C : DF 24                      stx     vA              ; A=C
(1)     18E : D6 2E                      ldab    vY
(1)     190 : 8D CE                      bsr     sex_B
(1)     192 : DD 33                      std     R1              ; R1=Y
(1)     194 : CE 01 A0                   ldx     #416
(1)     197 : DF 35                      stx     R2
(1)     199 : BD 03 1A                   jsr     mul16           ; R0=Y*416
(1)     19C : DE 31                      ldx     R0
(1)     19E : DF 33                      stx     R1
(1)     1A0 : CE 00 64                   ldx     #100
(1)     1A3 : DF 35                      stx     R2
(1)     1A5 : BD 03 79                   jsr     div16           ; R0=Y*416/100
(1)     1A8 : DE 31                      ldx     R0
(1)     1AA : DF 22                      stx     vD              ; D=Y*416/100
(1)     1AC : DF 26                      stx     vB              ; B=D
(1)     1AE : 7F 00 30                   clr     vI              ; I=0
(1)     1B1 :
(1)     1B1 :                            ;; ldaa    vY              ; Y
(1)     1B1 :                            ;; jsr     sex_A
(1)     1B1 :                            ;; ldaa    #'Y'
(1)     1B1 :                            ;; jsr     print
(1)     1B1 :                            ;; ldaa    vX              ; X
(1)     1B1 :                            ;; jsr     sex_A
(1)     1B1 :                            ;; ldaa    #'X'
(1)     1B1 :                            ;; jsr     print
(1)     1B1 :                            ;; ldx     vC              ; C
(1)     1B1 :                            ;; ldaa    #'C'
(1)     1B1 :                            ;; jsr     print
(1)     1B1 :                            ;; ldx     vD              ; D
(1)     1B1 :                            ;; ldaa    #'D'
(1)     1B1 :                            ;; jsr     print
(1)     1B1 :                            ;; jsr     newline
(1)     1B1 :
(1)     1B1 :                    loop_i:
(1)     1B1 : DE 26                      ldx     vB
(1)     1B3 : DF 33                      stx     R1              ; R1=B
(1)     1B5 : CE 00 32                   ldx     #F
(1)     1B8 : DF 35                      stx     R2              ; R2=F
(1)     1BA : BD 03 79                   jsr     div16           ; R0=B/F
(1)     1BD : DE 31                      ldx     R0
(1)     1BF : DF 2C                      stx     vQ              ; Q=B/F
(1)     1C1 : DF 33                      stx     R1              ; R1=Q
(1)     1C3 : CE 00 32                   ldx     #F
(1)     1C6 : DF 35                      stx     R2              ; R2=F
(1)     1C8 : BD 03 1A                   jsr     mul16           ; R0=Q*F
(1)     1CB : DC 26                      ldd     vB
(1)     1CD : 93 31                      subd    R0              ; B-Q*F
(1)     1CF : DD 28                      std     vS              ; S=B-Q*F
(1)     1D1 : DE 24                      ldx     vA
(1)     1D3 : DF 33                      stx     R1              ; R1=A
(1)     1D5 : DF 35                      stx     R2              ; R2=A
(1)     1D7 : BD 03 1A                   jsr     mul16           ; R0=A*A
(1)     1DA : DE 31                      ldx     R0
(1)     1DC : 3C                         pshx                    ; push A*A
(1)     1DD : DE 26                      ldx     vB
(1)     1DF : DF 33                      stx     R1              ; R1=B
(1)     1E1 : DF 35                      stx     R2              ; R2=B
(1)     1E3 : BD 03 1A                   jsr     mul16           ; R0=B*B
(1)     1E6 : 32                         pula
(1)     1E7 : 33                         pulb                    ; A*A
(1)     1E8 : 93 31                      subd    R0              ; A*A-B*B
(1)     1EA : DD 33                      std     R1              ; R1=A*A-B*B
(1)     1EC : CE 00 32                   ldx     #F
(1)     1EF : DF 35                      stx     R2
(1)     1F1 : BD 03 79                   jsr     div16           ; R0=(A*A-B*B)/F
(1)     1F4 : DC 31                      ldd     R0
(1)     1F6 : D3 20                      addd    vC
(1)     1F8 : 37                         pshb
(1)     1F9 : 36                         psha                    ; push (A*A-B*B)/F+C
(1)     1FA : DE 24                      ldx     vA
(1)     1FC : DF 33                      stx     R1              ; R1=A
(1)     1FE : DE 2C                      ldx     vQ
(1)     200 : DF 35                      stx     R2              ; R2=Q
(1)     202 : BD 03 1A                   jsr     mul16           ; R0=A*Q
(1)     205 : DE 31                      ldx     R0
(1)     207 : 3C                         pshx                    ; push A*Q
(1)     208 : DE 24                      ldx     vA
(1)     20A : DF 33                      stx     R1              ; R1=A
(1)     20C : DE 28                      ldx     vS
(1)     20E : DF 35                      stx     R2              ; R2=S
(1)     210 : BD 03 1A                   jsr     mul16           ; R0=A*S
(1)     213 : DE 31                      ldx     R0
(1)     215 : DF 33                      stx     R1              ; R1=A*S
(1)     217 : CE 00 32                   ldx     #F
(1)     21A : DF 35                      stx     R2
(1)     21C : BD 03 79                   jsr     div16           ; R0=A*S/F
(1)     21F : 32                         pula
(1)     220 : 33                         pulb                    ; A*Q
(1)     221 : D3 31                      addd    R0              ; A*Q+A*S/F
(1)     223 : DD 31                      std     R0              ; R0=A*Q+A*S/F
(1)     225 : D3 31                      addd    R0              ; 2*(A*Q+A*S/F)
(1)     227 : D3 22                      addd    vD              ; 2*(A*Q+A*S/F)+D
(1)     229 : DD 26                      std     vB              ; B=2*(A*Q+A*S/F)+D
(1)     22B : 38                         pulx                    ; pop (A*A-B*B)/F+C
(1)     22C : DF 24                      stx     vA              ; A=(A*A-B*B)/F+C
(1)     22E : DF 33                      stx     R1              ; R1=A
(1)     230 : CE 00 32                   ldx     #F
(1)     233 : DF 35                      stx     R2              ; R2=F
(1)     235 : BD 03 79                   jsr     div16           ; R0=A/F
(1)     238 : DE 31                      ldx     R0
(1)     23A : DF 2A                      stx     vP              ; P=A/F
(1)     23C : DE 26                      ldx     vB
(1)     23E : DF 33                      stx     R1              ; R1=B
(1)     240 : CE 00 32                   ldx     #F
(1)     243 : DF 35                      stx     R2              ; R2=F
(1)     245 : BD 03 79                   jsr     div16           ; R0=B/F
(1)     248 : DE 31                      ldx     R0
(1)     24A : DF 2C                      stx     vQ              ; Q=B/F
(1)     24C :
(1)     24C :                            ;; jsr     putspace
(1)     24C :                            ;; ldaa    vI              ; I
(1)     24C :                            ;; jsr     sex_A
(1)     24C :                            ;; ldaa    #'I'
(1)     24C :                            ;; jsr     print
(1)     24C :                            ;; ldx     vA              ; A
(1)     24C :                            ;; ldaa    #'A'
(1)     24C :                            ;; jsr     print
(1)     24C :                            ;; ldx     vB              ; B
(1)     24C :                            ;; ldaa    #'B'
(1)     24C :                            ;; jsr     print
(1)     24C :                            ;; ldx     vP              ; P
(1)     24C :                            ;; ldaa    #'P'
(1)     24C :                            ;; jsr     print
(1)     24C :                            ;; ldx     vQ              ; Q
(1)     24C :                            ;; ldaa    #'Q'
(1)     24C :                            ;; jsr     print
(1)     24C :                            ;; jsr     newline
(1)     24C :
(1)     24C : DE 2A                      ldx     vP
(1)     24E : DF 33                      stx     R1              ; R1=P
(1)     250 : DF 35                      stx     R2              ; R2=P
(1)     252 : BD 03 1A                   jsr     mul16           ; R0=P*P
(1)     255 : DE 31                      ldx     R0
(1)     257 : 3C                         pshx                    ; push P*P
(1)     258 : DE 2C                      ldx     vQ
(1)     25A : DF 33                      stx     R1              ; R1=Q
(1)     25C : DF 35                      stx     R2              ; R2=Q
(1)     25E : BD 03 1A                   jsr     mul16           ; R0=Q*Q
(1)     261 : 32                         pula
(1)     262 : 33                         pulb                    ; pop P*P
(1)     263 : D3 31                      addd    R0              ; Q*Q+P*P
(1)     265 : 83 00 04                   subd    #4              ; Q*Q+P*P-4
(1)     268 : 2E 10                      bgt     print_i         ; if 4<P*P+Q*Q
(1)     26A : 7C 00 30                   inc     vI              ; I+=1
(1)     26D : 96 30                      ldaa    vI
(1)     26F : 81 10                      cmpa    #16
(1)     271 : 2A 03                      bpl     print_space
(1)     273 : 7E 01 B1                   jmp     loop_i          ; if I<16
(1)     276 :                    print_space:
(1)     276 : 86 20                      ldaa    #' '
(1)     278 : 20 0C                      bra     print_char
(1)     27A :                    print_i:
(1)     27A : 96 30                      ldaa    vI
(1)     27C : 80 0A                      suba    #10
(1)     27E : 2A 04                      bpl     print_i2       ; if I>=10
(1)     280 : 8B 3A                      adda    #10+'0'
(1)     282 : 20 02                      bra     print_char
(1)     284 :                    print_i2:
(1)     284 : 8B 41                      adda    #'A'
(1)     286 :                    print_char:
(1)     286 : BD 01 35                   jsr     putchar
(1)     289 :
(1)     289 :                            ;; psha
(1)     289 :                            ;; ldaa    #'@'
(1)     289 :                            ;; jsr     putchar
(1)     289 :                            ;; ldaa    #'='
(1)     289 :                            ;; jsr     putchar
(1)     289 :                            ;; pula
(1)     289 :                            ;; jsr     putchar
(1)     289 :                            ;; jsr     newline
(1)     289 :
(1)     289 : BD 01 22                   jsr     getchar
(1)     28C : 24 03                      bcc     next_x
(1)     28E : 4D                         tsta
(1)     28F : 27 1B                      beq     mandelbrot_end  ; break
(1)     291 :                    next_x:
(1)     291 : 7C 00 2F                   inc     vX              ; X+=1
(1)     294 : 96 2F                      ldaa    vX
(1)     296 : 81 1E                      cmpa    #30
(1)     298 : 2A 03                      bpl     next_y
(1)     29A : 7E 01 6E                   jmp     loop_x          ; if X<30
(1)     29D :                    next_y:
(1)     29D : BD 01 2F                   jsr     newline
(1)     2A0 : 7C 00 2E                   inc     vY              ; Y+=1
(1)     2A3 : 96 2E                      ldaa    vY
(1)     2A5 : 81 0D                      cmpa    #13
(1)     2A7 : 2A 03                      bpl     mandelbrot_end
(1)     2A9 : 7E 01 6A                   jmp     loop_y          ; if Y<13
(1)     2AC :                    mandelbrot_end:
(1)     2AC : 39                         rts
        2AD :                            include "arith.inc"
(1)     2AD :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     2AD :                            cpu     6801
(1)     2AD :
(1)     2AD :                    ;;; Print unsigned 16-bit integer as decimal
(1)     2AD :                    ;;; @param R0 value
(1)     2AD :                    ;;; @clobber A X R0 R1 R2
(1)     2AD :                    print_uint16:
(1)     2AD : 96 31                      ldaa    R0H
(1)     2AF : 9A 32                      oraa    R0L
(1)     2B1 : 27 14                      beq     print_uint16_zero
(1)     2B3 :                    print_uint16_loop:
(1)     2B3 : DE 31                      ldx     R0
(1)     2B5 : DF 33                      stx     R1                ; R1=value
(1)     2B7 : 27 13                      beq     print_uint16_end ; branch if value == 0
(1)     2B9 : CE 00 0A                   ldx     #10
(1)     2BC : DF 35                      stx     R2              ; R2=10
(1)     2BE : BD 03 3F                   jsr     udiv16          ; R0=value/10
(1)     2C1 : 96 34                      ldaa    R1L
(1)     2C3 : 36                         psha                    ; push reminder
(1)     2C4 : 8D ED                      bsr     print_uint16_loop
(1)     2C6 : 32                         pula
(1)     2C7 :                    print_uint16_zero:
(1)     2C7 : 8A 30                      oraa    #'0'
(1)     2C9 : 7E 01 35                   jmp     putchar
(1)     2CC :                    print_uint16_end:
(1)     2CC : 39                         rts
(1)     2CD :
(1)     2CD :                    ;;; Print signed 16-bit integer as decimal
(1)     2CD :                    ;;; @param R0 value
(1)     2CD :                    ;;; @clobber A X R0
(1)     2CD :                    print_int16:
(1)     2CD : DE 33                      ldx     R1
(1)     2CF : 3C                         pshx                    ; push R1
(1)     2D0 : DE 35                      ldx     R2
(1)     2D2 : 3C                         pshx                    ; push R2
(1)     2D3 : 96 31                      ldaa    R0H
(1)     2D5 : 2A 0B                      bpl     print_int16_print
(1)     2D7 : 86 2D                      ldaa    #'-'
(1)     2D9 : BD 01 35                   jsr     putchar
(1)     2DC : DC 31                      ldd     R0
(1)     2DE : 8D 0B                      bsr     neg_D
(1)     2E0 : DD 31                      std     R0
(1)     2E2 :                    print_int16_print:
(1)     2E2 : 8D C9                      bsr     print_uint16
(1)     2E4 : 38                         pulx                    ; pop R2
(1)     2E5 : DF 35                      stx     R2
(1)     2E7 : 38                         pulx                    ; pop R1
(1)     2E8 : DF 33                      stx     R1
(1)     2EA : 39                         rts
(1)     2EB :
(1)     2EB :                    ;;; Negate D
(1)     2EB :                    ;;; @param D register
(1)     2EB :                    neg_D:
(1)     2EB : 43                         coma
(1)     2EC : 53                         comb
(1)     2ED : CB 01                      addb    #1
(1)     2EF : 89 00                      adca    #0
(1)     2F1 : 39                         rts
(1)     2F2 :
(1)     2F2 :                    ;;; Addition: R0 = R1 + R2
(1)     2F2 :                    ;;; @clobber D
(1)     2F2 :                    add16:
(1)     2F2 : DC 33                      ldd     R1
(1)     2F4 : D3 35                      addd    R2
(1)     2F6 : DD 31                      std     R0
(1)     2F8 : 39                         rts
(1)     2F9 :
(1)     2F9 :                    ;;; Subtraction: R0 = R1 + R2
(1)     2F9 :                    ;;; @clobber D
(1)     2F9 :                    sub16:
(1)     2F9 : DC 33                      ldd     R1
(1)     2FB : 93 35                      subd    R2
(1)     2FD : DD 31                      std     R0
(1)     2FF : 39                         rts
(1)     300 :
(1)     300 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)     300 :                    ;;; @param R1 multiplicand
(1)     300 :                    ;;; @param R2 multiplier
(1)     300 :                    ;;; @return R0 result
(1)     300 :                    ;;; @clobber R0 R1 R2
(1)     300 :                    umul16:
(1)     300 : 96 34                      ldaa    R1L
(1)     302 : D6 36                      ldab    R2L
(1)     304 : 3D                         mul                     ; low(multiplicand)*low(multiplier)
(1)     305 : DD 31                      std     R0
(1)     307 : 96 34                      ldaa    R1L
(1)     309 : D6 35                      ldab    R2H
(1)     30B : 3D                         mul                     ; low(multiplicand)*high(multiplier)
(1)     30C : DB 31                      addb    R0H
(1)     30E : D7 31                      stab    R0H
(1)     310 : 96 33                      ldaa    R1H
(1)     312 : D6 36                      ldab    R2L
(1)     314 : 3D                         mul                     ; high(multiplicand)*low(multiplier)
(1)     315 : DB 31                      addb    R0H
(1)     317 : D7 31                      stab    R0H
(1)     319 : 39                         rts
(1)     31A :
(1)     31A :                    ;;; Multiply; result = multiplicand * multiplier
(1)     31A :                    ;;; @param R1 multiplicand
(1)     31A :                    ;;; @param R2 multiplier
(1)     31A :                    ;;; @return R0 result
(1)     31A :                    ;;; @clobber R1 R2
(1)     31A :                    mul16:
(1)     31A : 96 33                      ldaa    R1H
(1)     31C : 98 35                      eora    R2H
(1)     31E : 36                         psha                    ; save hi(multiplicand^multiplier)
(1)     31F : DC 35                      ldd     R2
(1)     321 : 2A 03                      bpl     mul16_multiplicand
(1)     323 : BD 02 EB                   jsr     neg_D           ; negate multiplier
(1)     326 :                    mul16_multiplicand:
(1)     326 : DD 35                      std     R2
(1)     328 : DC 33                      ldd     R1
(1)     32A : 2A 03                      bpl     mul16_multiply
(1)     32C : BD 02 EB                   jsr     neg_D           ; negate multiplicand
(1)     32F :                    mul16_multiply:
(1)     32F : DD 33                      std     R1
(1)     331 : 8D CD                      bsr     umul16          ; R0=result
(1)     333 : 32                         pula                    ; A=(multiplicand^multiplier)
(1)     334 : 4D                         tsta
(1)     335 : 2A 07                      bpl     mul16_end
(1)     337 : DC 31                      ldd     R0
(1)     339 : BD 02 EB                   jsr     neg_D           ; negate result
(1)     33C : DD 31                      std     R0
(1)     33E :                    mul16_end:
(1)     33E : 39                         rts
(1)     33F :
(1)     33F :                    ;;; Unsigned division: dividend / divisor = quotient ... reminder
(1)     33F :                    ;;; @praram R1 dividend
(1)     33F :                    ;;; @praram R2 divisor
(1)     33F :                    ;;; @return R0 quotient
(1)     33F :                    ;;; @return R1 reminder
(1)     33F :                    ;;; @clobber R2
(1)     33F :                    udiv16:
(1)     33F : 96 35                      ldaa    R2H
(1)     341 : 9A 36                      oraa    R2L
(1)     343 : 27 33                      beq     udiv16_end      ; branch if R2==0
(1)     345 : CE 00 01                   ldx     #1              ; X=bits
(1)     348 : 20 06                      bra     udiv16_prep
(1)     34A :                    udiv16_prep_loop:
(1)     34A : DC 35                      ldd     R2
(1)     34C : 05                         lsld
(1)     34D : DD 35                      std     R2              ; divisor <<= 1
(1)     34F : 08                         inx                     ; ++bits
(1)     350 :                    udiv16_prep:
(1)     350 : 96 35                      ldaa    R2H
(1)     352 : 2A F6                      bpl     udiv16_prep_loop ; while msb(divisor) == 0
(1)     354 : 4F                         clra
(1)     355 : 5F                         clrb
(1)     356 : DD 31                      std     R0              ; quotient=0
(1)     358 : 20 0A                      bra     udiv16_enter_loop
(1)     35A :                    udiv16_loop:
(1)     35A : DC 35                      ldd     R2
(1)     35C : 04                         lsrd
(1)     35D : DD 35                      std     R2              ; divisor >>= 1
(1)     35F : DC 31                      ldd     R0
(1)     361 : 05                         lsld
(1)     362 : DD 31                      std     R0              ; quotient <<= 1
(1)     364 :                    udiv16_enter_loop:
(1)     364 : DC 33                      ldd     R1
(1)     366 : 93 35                      subd    R2
(1)     368 : DD 33                      std     R1              ; dividend -= divisor
(1)     36A : 25 05                      bcs     udiv16_readd
(1)     36C : 7C 00 32                   inc     R0L             ; quotient |= 1
(1)     36F : 20 04                      bra     udiv16_next
(1)     371 :                    udiv16_readd:
(1)     371 : D3 35                      addd    R2
(1)     373 : DD 33                      std     R1              ; dividend += divisor
(1)     375 :                    udiv16_next:
(1)     375 : 09                         dex                     ; --bits
(1)     376 : 26 E2                      bne     udiv16_loop     ; while bits != 0
(1)     378 :                    udiv16_end:
(1)     378 : 39                         rts
(1)     379 :
(1)     379 :                    ;;; Division; dividend / divisor = quotient ... reminder
(1)     379 :                    ;;; @param R1 dividend
(1)     379 :                    ;;; @param R2 divisor
(1)     379 :                    ;;; @return R0 quotient
(1)     379 :                    ;;; @return R1 reminder
(1)     379 :                    ;;; @clobber R2
(1)     379 :                    div16:
(1)     379 : 96 33                      ldaa    R1H
(1)     37B : 98 35                      eora    R2H
(1)     37D : 36                         psha                    ; save hi(dividend^divisor)
(1)     37E : DC 35                      ldd     R2
(1)     380 : 2A 03                      bpl     div16_dividend
(1)     382 : BD 02 EB                   jsr     neg_D           ; negate divisor
(1)     385 :                    div16_dividend:
(1)     385 : DD 35                      std     R2
(1)     387 : DC 33                      ldd     R1
(1)     389 : 2A 03                      bpl     div16_divide
(1)     38B : BD 02 EB                   jsr     neg_D           ; negate dividend
(1)     38E :                    div16_divide:
(1)     38E : DD 33                      std     R1
(1)     390 : BD 03 3F                   jsr     udiv16          ; R0=quotient
(1)     393 : 32                         pula                    ; A=(dividend^divisor)
(1)     394 : 4D                         tsta
(1)     395 : 2A 07                      bpl     div16_end
(1)     397 : DC 31                      ldd     R0
(1)     399 : BD 02 EB                   jsr     neg_D           ; negate result
(1)     39C : DD 31                      std     R0
(1)     39E :                    div16_end:
(1)     39E : 39                         rts
        39F :                            include "queue.inc"
(1)     39F :                    ;;; [queue] queue structure
(1)     39F : =0                 queue_len:      equ     0       ; queue length
(1)     39F : =1                 queue_size:     equ     1       ; buffer size
(1)     39F : =2                 queue_put:      equ     2       ; queue put index
(1)     39F : =3                 queue_get:      equ     3       ; queue get index
(1)     39F : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     39F :
(1)     39F :                    ;;; [queue] Initialize queue
(1)     39F :                    ;;; @param X queue work space pointer
(1)     39F :                    ;;; @param B queue work space size
(1)     39F :                    ;;; @clobber B
(1)     39F :                    queue_init:
(1)     39F : 37                         pshb
(1)     3A0 : 3C                         pshx
(1)     3A1 :                    queue_init_loop:
(1)     3A1 : 6F 00                      clr     0,x
(1)     3A3 : 08                         inx
(1)     3A4 : 5A                         decb
(1)     3A5 : 26 FA                      bne     queue_init_loop
(1)     3A7 : 38                         pulx
(1)     3A8 : 33                         pulb
(1)     3A9 : C0 04                      subb    #queue_buf
(1)     3AB : E7 01                      stab    queue_size,x
(1)     3AD : 39                         rts
(1)     3AE :
(1)     3AE :                    ;;; [queue] Add an element to queue
(1)     3AE :                    ;;; @param X queue work space pointer
(1)     3AE :                    ;;; @param A an element
(1)     3AE :                    ;;; @return CC.C 0 if queue is full
(1)     3AE :                    queue_add:
(1)     3AE : 37                 	pshb
(1)     3AF : E6 00                      ldab    queue_len,x
(1)     3B1 : E1 01                      cmpb    queue_size,x
(1)     3B3 : 24 13                      bhs     queue_add_return ; carry is cleared
(1)     3B5 : E6 02                      ldab    queue_put,x     ; 8 bits offset
(1)     3B7 : 3C                         pshx
(1)     3B8 : 3A                         abx                     ; X+=B
(1)     3B9 : A7 04                      staa    queue_buf,x     ; store an element
(1)     3BB : 38                         pulx
(1)     3BC : 6C 00                      inc     queue_len,x
(1)     3BE : 5C                         incb
(1)     3BF : E7 02                      stab    queue_put,x
(1)     3C1 : E1 01                      cmpb    queue_size,x
(1)     3C3 : 25 03                      blo     queue_add_return ; carry is set
(1)     3C5 : 6F 02                      clr     queue_put,x
(1)     3C7 : 0D                         sec                     ; set carry
(1)     3C8 :                    queue_add_return:
(1)     3C8 : 33                 	pulb
(1)     3C9 : 39                         rts
(1)     3CA :
(1)     3CA :                    ;;; [queue] Remove an element from queue
(1)     3CA :                    ;;; @param X queue work space pointer
(1)     3CA :                    ;;; @return A an element
(1)     3CA :                    ;;; @return CC.C 0 if queue is empty
(1)     3CA :                    queue_remove:
(1)     3CA : 6D 00                      tst     queue_len,x
(1)     3CC : 26 02                      bne     queue_remove_elem
(1)     3CE : 0C                         clc                     ; clear carry
(1)     3CF : 39                         rts
(1)     3D0 :                    queue_remove_elem
(1)     3D0 : 37                 	pshb
(1)     3D1 : E6 03                      ldab    queue_get,x     ; 8 bits offset
(1)     3D3 : 3C                         pshx
(1)     3D4 : 3A                         abx                     ; X+=B
(1)     3D5 : A6 04                      ldaa    queue_buf,x     ; read an element
(1)     3D7 : 38                         pulx
(1)     3D8 : 6A 00                      dec     queue_len,x
(1)     3DA : 5C                         incb
(1)     3DB : E7 03                      stab    queue_get,x
(1)     3DD : E1 01                      cmpb    queue_size,x
(1)     3DF : 25 03                      blo     queue_remove_return ; carry is set
(1)     3E1 : 6F 03                      clr     queue_get,x
(1)     3E3 : 0D                         sec                     ; set carry
(1)     3E4 :                    queue_remove_return:
(1)     3E4 : 33                         pulb
(1)     3E5 : 39                         rts
(1)     3E6 :
(1)     3E6 :                    ;;; Local Variables:
(1)     3E6 :                    ;;; mode: asm
(1)     3E6 :                    ;;; End:
(1)     3E6 :                    ;;; vim: set ft=asm et ts=4 sw=4:
        3E6 :
        3E6 :                    isr_irq:
        3E6 : F6 DF 00                   ldab    ACIA_status
        3E9 : C5 80                      bitb    #IRQF_bm
        3EB : 27 1C                      beq     isr_irq_exit
        3ED : C5 01                      bitb    #RDRF_bm
        3EF : 27 09                      beq     isr_irq_send
        3F1 : B6 DF 01                   ldaa    ACIA_data       ; receive character
        3F4 : CE 20 00                   ldx     #rx_queue
        3F7 : BD 03 AE                   jsr     queue_add
        3FA :                    isr_irq_send:
        3FA : C5 02                      bitb    #TDRE_bm
        3FC : 27 0B                      beq     isr_irq_exit
        3FE : CE 20 80                   ldx     #tx_queue
        401 : BD 03 CA                   jsr     queue_remove
        404 : 24 04                      bcc     isr_irq_send_empty
        406 : B7 DF 01                   staa    ACIA_data       ; send character
        409 :                    isr_irq_exit:
        409 : 3B                         rti
        40A :                    isr_irq_send_empty:
        40A : 86 94                      ldaa    #RX_INT_TX_NO
        40C : B7 DF 00                   staa    ACIA_control    ; disable Tx interrupt
        40F : 3B                         rti

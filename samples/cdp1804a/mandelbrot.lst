          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     1804A
          0 :                            option  "smart-branch", "on"
          0 :                            include "cdp1802.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; CDP1802 register alias
(1)       0 : =0                 R0:     equ     0
(1)       0 : =1                 R1:     equ     1
(1)       0 : =2                 R2:     equ     2
(1)       0 : =3                 R3:     equ     3
(1)       0 : =4                 R4:     equ     4
(1)       0 : =5                 R5:     equ     5
(1)       0 : =6                 R6:     equ     6
(1)       0 : =7                 R7:     equ     7
(1)       0 : =8                 R8:     equ     8
(1)       0 : =9                 R9:     equ     9
(1)       0 : =A                 R10:    equ     10
(1)       0 : =B                 R11:    equ     11
(1)       0 : =C                 R12:    equ     12
(1)       0 : =D                 R13:    equ     13
(1)       0 : =E                 R14:    equ     14
(1)       0 : =F                 R15:    equ     15
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =0                 ORG_RESET:      equ     0000H   ; Reset transfer location
          0 :
          0 :                            org     ORG_RESET
          0 : 71                         dis                     ; disable interrupt
          1 : 00                         dc      X'00'           ; X:P=0:0
          2 : 30 04                      br      scrt_init
          4 :                            include "scrt.inc"
(1)       4 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       4 :
(1)       4 :                    ;;; Standard Call and Return Technique
(1)       4 :                    ;;; R0: DMA pointer
(1)       4 :                    ;;; R1: Program counter for Interrupt routine
(1)       4 :                    ;;; R2: Stack pointer
(1)       4 :                    ;;; R3: Program counter
(1)       4 :                    ;;; R4: Link register, pointer to the return location and arguments
(1)       4 :                    ;;;     passed by the calling program
(1)       4 :
(1)       4 :                    ;;; Call subroutine
(1)       4 :                    ;;;   SCAL R4, subroutine
(1)       4 :                    ;;;   DC   arguments...
(1)       4 :                    ;;; Subroutine return
(1)       4 :                    ;;;   SRET R4
(1)       4 :                    ;;; Return from interrupt
(1)       4 :                    ;;;   SEP R1
(1)       4 :
(1)       4 :                    ;;; Initialize for SCRT, P=0
(1)       4 :                    ;;; @param P!=3
(1)       4 :                    ;;; @param stack top address of stack
(1)       4 :                    ;;; @param main start address of main routine
(1)       4 :                    ;;; @return P=3
(1)       4 :                    ;;; @return R1=scrt_isr
(1)       4 :                    ;;; @return R2=stack
(1)       4 :                    ;;; @return R3=main
(1)       4 :                    ;;; @clobber D, R15
(1)       4 :                    scrt_init:
(1)       4 : 68 C3 00 09                rldi    R3, scrt_start
(1)       8 : D3                         sep     R3              ; P=3
(1)       9 :                    scrt_start:
(1)       9 : 68 C1 00 1E                rldi    R1, scrt_isr    ; setup interrupt
(1)       D : E2                         sex     R2
(1)       E : 68 C2 0F FF                rldi    R2, stack       ; setup stack
(1)      12 : C0 10 00                   br      main            ; goto main with P=3
(1)      15 :
(1)      15 :                    ;;; Interrupt exit entry P=1
(1)      15 :                    ;;;  (Come here by SEP R1)
(1)      15 :                    scrt_isr_exit:
(1)      15 : 60                         irx
(1)      16 : 68 63                      rlxa    R3              ; pop program counter R3
(1)      18 : 68 6F                      rlxa    R15             ; pop scratch pad register R15
(1)      1A : 72                         ldxa                    ; pop DF into D:MSB
(1)      1B : FE                         shl                     ; restore DF
(1)      1C : 72                         ldxa                    ; pop D
(1)      1D : 70                         ret                     ; restore X,P IE=1
(1)      1E :                            ;; R1 points scrt_isr
(1)      1E :                    ;;; CDP1802 interrupt entry, X=2, P=1, IE=0
(1)      1E :                    ;;; @unchanged D, DF, X, P, R3, R15
(1)      1E :                    scrt_isr:
(1)      1E :                            ;; R2[0] must be preserved because it may be in the pop process
(1)      1E : 22                         dec     R2
(1)      1F : 78                         sav                     ; push X,P
(1)      20 : 22                         dec     R2
(1)      21 : 73                         stxd                    ; push D
(1)      22 : 76                         shrc                    ; MSB of D=DF
(1)      23 : 73                         stxd                    ; push DF
(1)      24 : 68 AF                      rsxd    R15             ; push scratch pad register R15
(1)      26 : 68 A3                      rsxd    R3              ; push program counter R3
(1)      28 : 68 C3 10 66                rldi    R3, isr
(1)      2C : D3                         sep     R3              ; call interrupt service routine with P=3
(1)      2D : 30 15                      br      scrt_isr_exit   ; return from isr by SEP R1
         2F :
         2F :                    ;;; MC6850 Asynchronous Communication Interface Adapter
         2F : =DF00              ACIA:   equ     X'0DF00'
         2F :                            include "mc6850.inc"
(1)      2F :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)      2F :
(1)      2F :                    ;;; MC6850
(1)      2F :                    ;;; Asynchronous Communication Interface Adapter
(1)      2F :
(1)      2F :                    ;;; Control register
(1)      2F : =DF00              ACIA_control:   equ     ACIA+0
(1)      2F :                            ;; Counter Divider Select Bits
(1)      2F : =3                 CDS_gm:         equ     11b    ; Group mask
(1)      2F : =0                 CDS_DIV1_gc:    equ     00000000B ; /1
(1)      2F : =1                 CDS_DIV16_gc:   equ     00000001B ; /16
(1)      2F : =2                 CDS_DIV64_gc:   equ     00000010B ; /64
(1)      2F : =3                 CDS_RESET_gc:   equ     00000011B ; Master Reset
(1)      2F :                            ;; Word Select Bits
(1)      2F : =1C                WSB_gm:         equ     00011100B ; Group mask
(1)      2F : =0                 WSB_7E2_gc:     equ     00000000B ; 7 Bits + Even Parity + 2 Stop Bits
(1)      2F : =4                 WSB_7O2_gc:     equ     00000100B ; 7 bits + Odd Parity  + 2 Stop Bits
(1)      2F : =8                 WSB_7E1_gc:     equ     00001000B ; 7 bits + Even Parity + 1 Stop Bits
(1)      2F : =C                 WSB_7O1_gc:     equ     00001100B ; 7 bits + Odd Parity  + 1 Stop Bits
(1)      2F : =10                WSB_8N2_gc:     equ     00010000B ; 8 bits + No Parity   + 2 Stop Bits
(1)      2F : =14                WSB_8N1_gc:     equ     00010100B ; 8 bits + No Parity   + 1 Stop Bits
(1)      2F : =18                WSB_8E1_gc:     equ     00011000B ; 8 bits + Even Parity + 1 Stop Bits
(1)      2F : =1C                WSB_8O1_gc:     equ     00011100B ; 8 bits + Odd Parity  + 1 Stop Bits
(1)      2F :                            ;; Transmit Control Bits
(1)      2F : =60                TCB_gm:         equ     01100000B ; Group mask
(1)      2F : =0                 TCB_DI_gc:      equ     00000000B ; RTS=Low,  Tx Interrupt Disabled
(1)      2F : =20                TCB_EI_gc:      equ     00100000B ; RTS=Low,  Tx Interrupt Enabled
(1)      2F : =40                TCB_RTS_gc:     equ     01000000B ; RTS=High, Tx Interrupt Disabled
(1)      2F : =60                TCB_BREAK_gc:   equ     01100000B ; RTS=Low,  Tx Interrupt Disabled
(1)      2F :                                                      ; Transmit Break Level
(1)      2F : =80                RIEB_bm:        equ     10000000B ; Receive Interrupt Enable Bit mask
(1)      2F :
(1)      2F :                    ;;; Status register
(1)      2F : =DF00              ACIA_status:    equ     ACIA+0
(1)      2F : =1                 RDRF_bm:        equ     00000001B ; Receive Data Register Full
(1)      2F : =2                 TDRE_bm:        equ     00000010B ; Transmit Data Register Empty
(1)      2F : =4                 DCDF_bm:        equ     00000100B ; Data Carrier Detect Flag
(1)      2F : =8                 CTSF_bm:        equ     00001000B ; Clear To Send Flag
(1)      2F : =10                FERR_bm:        equ     00010000B ; Frame Error Flag
(1)      2F : =20                OVRN_bm:        equ     00100000B ; Receiver Overrun Flag
(1)      2F : =40                PERR_bm:        equ     01000000B ; Parity Error Flag
(1)      2F : =80                IRQF_bm:        equ     10000000B ; Interrupt Request Flag
(1)      2F :
(1)      2F :                    ;;; Data register
(1)      2F : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
         2F :
       2000 :                            org     X'2000'
       2000 :
       2000 : =80                rx_queue_size:  equ     128
       2000 : =80                tx_queue_size:  equ     128
       2000 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
       2000 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
       2000 :
       2000 :                    rx_queue:
       2080 :                            org     *+rx_queue_size
       2080 :                    tx_queue:
       2100 :                            org     *+tx_queue_size
       2100 :
       2100 : =FFF               stack:  equ     X'1000'-1
       2100 :
       1000 :                            org     X'1000'
       1000 :                    main:
       1000 : 68 84 10 A8                scal    R4, queue_init   ; call queue_init
       1004 : 20 00                      dc      A(rx_queue)
       1006 : 80                         dc      rx_queue_size
       1007 : 68 84 10 A8                scal    R4, queue_init   ; call queue_init
       100B : 20 80                      dc      A(tx_queue)
       100D : 80                         dc      tx_queue_size
       100E :                            ;; initialize ACIA
       100E : F8 DF                      ldi     A.1(ACIA)
       1010 : B8                         phi     R8
       1011 : F8 00                      ldi     A.0(ACIA)
       1013 : A8                         plo     R8
       1014 : F8 03                      ldi     CDS_RESET_gc    ; Master reset
       1016 : 58                         str     R8              ; ACIA_control
       1017 : F8 94                      ldi     RX_INT_TX_NO
       1019 : 58                         str     R8              ; ACIA_control
       101A : E3                         sex     R3
       101B : 70                         ret
       101C : 33                         dc      X'33'           ; enable interrupt
       101D : E2                         sex     R2
       101E :
       101E : 68 84 13 10                scal    R4, mandelbrot
       1022 : 00                         idl
       1023 :
       1023 :                    ;;; Get character
       1023 :                    ;;; @return R7.0 char
       1023 :                    ;;; @return A 0 if no char received
       1023 :                    getchar:
       1023 : E3                         sex     R3
       1024 : 71                         dis                     ; disable interrupt
       1025 : 33                         dc      X'33'
       1026 : E2                         sex     R2
       1027 : 68 84 11 00                scal    R4, queue_remove
       102B : 20 00                      dc      A(rx_queue)
       102D : E3                         sex     R3
       102E : 70                         ret                     ; enable interrupt
       102F : 33                         dc      X'33'
       1030 : E2                         sex     R2
       1031 : 68 94                      sret    R4
       1033 :
       1033 :                    ;;; Put character
       1033 :                    ;;; @param D char
       1033 :                    ;;; @unchanged D
       1033 :                    ;;; @clobber R15
       1033 :                    putchar:
       1033 : 73                         stxd                    ; save D
       1034 : AF                         plo     R15             ; save D to scratch pad
       1035 : 87                         glo     R7              ; save R7.0
       1036 : 73                         stxd
       1037 : 8F                         glo     R15             ; restore D
       1038 : A7                         plo     R7              ; R7.0=char
       1039 :                    putchar_loop:
       1039 : E3                         sex     R3
       103A : 71                         dis                     ; disable interrupt
       103B : 33                         dc      X'33'
       103C : E2                         sex     R2
       103D : 68 84 10 C8                scal    R4, queue_add
       1041 : 20 80                      dc      A(tx_queue)
       1043 : E3                         sex     R3
       1044 : 70                         ret                     ; enable interrupt
       1045 : 33                         dc      X'33'
       1046 : E2                         sex     R2
       1047 : 32 39                      bz      putchar_loop    ; retry if queue is full
       1049 : F8 DF                      ldi     A.1(ACIA)
       104B : BF                         phi     R15
       104C : F8 00                      ldi     A.0(ACIA)
       104E : AF                         plo     R15
       104F : F8 B4                      ldi     RX_INT_TX_INT   ; enable Tx interrupt
       1051 : 5F                         str     R15             ; ACIA_C
       1052 :                    putchar_exit:
       1052 : 60                         irx
       1053 : 72                         ldxa                    ; restore R7.0
       1054 : A7                         plo     R7
       1055 : F0                         ldx                     ; restore D
       1056 : 68 94                      sret    R4
       1058 :
       1058 :                    ;;; Print out newline
       1058 :                    ;;; @clobber D R15.0
       1058 :                    newline:
       1058 : F8 0D                      ldi     X'0D'
       105A : 68 84 10 33                scal    R4, putchar
       105E : F8 0A                      ldi     X'0A'
       1060 : 30 33                      br      putchar
       1062 :
       1062 :                    ;;; Print out space
       1062 :                    ;;; @clobber D R15.0
       1062 :                    putspace:
       1062 : F8 20                      ldi     T' '
       1064 : 30 33                      br      putchar
       1066 :
       1066 :                    ;;; From scrt_isr, X=2, P=3
       1066 :                    isr:
       1066 : 88                         glo     R8              ; save R8
       1067 : 73                         stxd
       1068 : 98                         ghi     R8
       1069 : 73                         stxd
       106A : 87                         glo     R7              ; save R7
       106B : 73                         stxd
       106C : 97                         ghi     R7
       106D : 73                         stxd
       106E :                            ;;
       106E : F8 DF                      ldi     A.1(ACIA)
       1070 : B8                         phi     R8
       1071 : F8 00                      ldi     A.0(ACIA)
       1073 : A8                         plo     R8              ; R8=ACIA
       1074 : 08                         ldn     R8              ; ACIA_status
       1075 : FA 80                      ani     IRQF_bm
       1077 : 32 9E                      bz      isr_exit
       1079 : 08                         ldn     R8              ; ACIA_status
       107A : FA 01                      ani     RDRF_bm
       107C : 32 88                      bz      isr_send        ; no data is received
       107E : 18                         inc     R8
       107F : 08                         ldn     R8              ; ACIA_data
       1080 : 28                         dec     R8
       1081 : A7                         plo     R7
       1082 : 68 84 10 C8                scal    R4, queue_add
       1086 : 20 00                      dc      A(rx_queue)
       1088 :                    isr_send:
       1088 : 08                         ldn     R8              ; ACIA_status
       1089 : FA 02                      ani     TDRE_bm
       108B : 32 9E                      bz      isr_exit
       108D : 68 84 11 00                scal    R4, queue_remove
       1091 : 20 80                      dc      A(tx_queue)
       1093 : 32 9B                      bz      isr_send_empty
       1095 : 87                         glo     R7
       1096 : 18                         inc     R8
       1097 : 58                         str     R8              ; ACIA_D
       1098 : 28                         dec     R8
       1099 : 30 9E                      br      isr_exit
       109B :                    isr_send_empty:
       109B : F8 94                      ldi     RX_INT_TX_NO    ; disable Tx interrupt
       109D : 58                         str     R8              ; ACIA_C
       109E :                    isr_exit:
       109E : 60                         irx
       109F : 72                         ldxa                    ; restore R7
       10A0 : B7                         phi     R7
       10A1 : 72                         ldxa
       10A2 : A7                         plo     R7
       10A3 : 72                         ldxa                    ; restore R8
       10A4 : B8                         phi     R8
       10A5 : F0                         ldx
       10A6 : A8                         plo     R8
       10A7 : D1                         sep     R1              ; return to scrt_isr
       10A8 :
       10A8 :                            include "queue.inc"
(1)    10A8 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    10A8 :                    ;;; [queue] queue structure
(1)    10A8 : =0                 queue_len:      equ     0       ; queue length
(1)    10A8 : =1                 queue_size:     equ     1       ; buffer size
(1)    10A8 : =2                 queue_put:      equ     2       ; queue put index
(1)    10A8 : =3                 queue_get:      equ     3       ; queue get index
(1)    10A8 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    10A8 :
(1)    10A8 :                    ;;; [queue] Initialize queue
(1)    10A8 :                    ;;; @param R4+0 queue work space pointer
(1)    10A8 :                    ;;; @param R4+2 queue work space size
(1)    10A8 :                    ;;; @clobber D, R15
(1)    10A8 :                    queue_init:
(1)    10A8 : 68 AE                      rsxd    R14             ; save R14
(1)    10AA : E4                         sex     R4
(1)    10AB : 68 6F                      rlxa    R15             ; R15=queue space pointer
(1)    10AD : F8 00                      ldi     0
(1)    10AF : 5F                         str     R15             ; clear queue_len
(1)    10B0 : 1F                         inc     R15
(1)    10B1 : 44                         lda     R4              ; queue space size
(1)    10B2 : FF 04                      smi     queue_buf       ; calculate queue size
(1)    10B4 : 5F                         str     R15             ; store queue_size
(1)    10B5 : FC 02                      adi     2               ; for queue_put and queue_get
(1)    10B7 : AE                         plo     R14             ; R14.0: byte counter
(1)    10B8 : F8 00                      ldi     0
(1)    10BA : BE                         phi     R14
(1)    10BB :                    queue_init_clear:
(1)    10BB : 1F                         inc     R15
(1)    10BC : 5F                         str     R15             ; clear memory
(1)    10BD : 68 2E 10 BB                dbnz    R14, queue_init_clear
(1)    10C1 : E2                         sex     R2
(1)    10C2 : 60                         irx
(1)    10C3 : 68 6E                      rlxa    R14             ; restore R14
(1)    10C5 : 22                         dec     R2
(1)    10C6 : 68 94                      sret    R4
(1)    10C8 :
(1)    10C8 :                    ;;; [queue] Add an element to queue
(1)    10C8 :                    ;;; @param R4+0 queue work space pointer
(1)    10C8 :                    ;;; @param R7.0 an element
(1)    10C8 :                    ;;; @return D 0 if queue is full
(1)    10C8 :                    queue_add:
(1)    10C8 : 68 AE                      rsxd    R14             ; save R14
(1)    10CA : E4                         sex     R4
(1)    10CB : 68 6F                      rlxa    R15             ; R15=queue space pointer
(1)    10CD : EF                         sex     R15
(1)    10CE : 72                         ldxa                    ; load queue_len
(1)    10CF : F3                         xor                     ; queue_len ^ queue_size
(1)    10D0 : 32 F7                      bz      queue_add_return ; branch if D=0
(1)    10D2 : 2F                         dec     R15
(1)    10D3 : 8F                         glo     R15
(1)    10D4 : FC 04                      adi     queue_buf
(1)    10D6 : AE                         plo     R14
(1)    10D7 : 9F                         ghi     R15
(1)    10D8 : 7C 00                      adci    0
(1)    10DA : BE                         phi     R14             ; R14=&queue_buf[0]
(1)    10DB : 0F                         ldn     R15
(1)    10DC : FC 01                      adi     1
(1)    10DE : 5F                         str     R15             ; queue_len++
(1)    10DF : 8E                         glo     R14
(1)    10E0 : 1F                         inc     R15
(1)    10E1 : 1F                         inc     R15
(1)    10E2 : EF                         sex     R15
(1)    10E3 : F4                         add                     ; add queue_put
(1)    10E4 : AE                         plo     R14
(1)    10E5 : 9E                         ghi     R14
(1)    10E6 : 7C 00                      adci    0
(1)    10E8 : BE                         phi     R14             ; R14=&queue_buf[queue_put]
(1)    10E9 : 87                         glo     R7              ; R7.0=an element
(1)    10EA : 5E                         str     R14             ; store an element
(1)    10EB : 0F                         ldn     R15             ; load queue_put
(1)    10EC : FC 01                      adi     1
(1)    10EE : 5F                         str     R15             ; update queue_put
(1)    10EF : 2F                         dec     R15
(1)    10F0 : F3                         xor                      ; queue_put ^ queue_size
(1)    10F1 : 3A F7                      bnz     queue_add_return ; branch if D!=0
(1)    10F3 : 1F                         inc     R15
(1)    10F4 : 5F                         str     R15             ; queue_put=0
(1)    10F5 : F8 01                      ldi     1
(1)    10F7 :                    queue_add_return:
(1)    10F7 : AF                         plo     R15             ; return flag
(1)    10F8 : E2                         sex     R2
(1)    10F9 : 60                         irx
(1)    10FA : 68 6E                      rlxa    R14             ; restore R14
(1)    10FC : 22                         dec     R2
(1)    10FD : 8F                         glo     R15
(1)    10FE : 68 94                      sret    R4
(1)    1100 :
(1)    1100 :                    ;;; [queue] Remove an element from queue
(1)    1100 :                    ;;; @param R4+0 queue work space pointer
(1)    1100 :                    ;;; @return R7.0 an element
(1)    1100 :                    ;;; @return D 0 if queue is empty
(1)    1100 :                    ;;; @clobber R15
(1)    1100 :                    queue_remove:
(1)    1100 : 68 AE                      rsxd    R14             ; save R14
(1)    1102 : E4                         sex     R4
(1)    1103 : 68 6F                      rlxa    R15                 ; R15=queue space pointer
(1)    1105 : 0F                         ldn     R15                 ; load queue_len
(1)    1106 : 32 2E                      bz      queue_remove_return ; branch if D=0
(1)    1108 : FF 01                      smi     1
(1)    110A : 5F                         str     R15             ; queue_len--
(1)    110B : 8F                         glo     R15
(1)    110C : FC 04                      adi     queue_buf
(1)    110E : AE                         plo     R14
(1)    110F : 9F                         ghi     R15
(1)    1110 : 7C 00                      adci    0
(1)    1112 : BE                         phi     R14             ; R14=&queue_buf[0]
(1)    1113 : 8E                         glo     R14
(1)    1114 : 1F                         inc     R15
(1)    1115 : 1F                         inc     R15
(1)    1116 : 1F                         inc     R15
(1)    1117 : EF                         sex     R15
(1)    1118 : F4                         add                     ; add queue_get
(1)    1119 : AE                         plo     R14
(1)    111A : 9E                         ghi     R14
(1)    111B : 7C 00                      adci    0
(1)    111D : BE                         phi     R14             ; R14=&queue_buf[queue_get]
(1)    111E : 0E                         ldn     R14             ; load an alement
(1)    111F : A7                         plo     R7              ; R7.0=an element
(1)    1120 : 0F                         ldn     R15             ; load queue_get
(1)    1121 : FC 01                      adi     1
(1)    1123 : 5F                         str     R15             ; update queue_get
(1)    1124 : 2F                         dec     R15
(1)    1125 : 2F                         dec     R15
(1)    1126 : F3                         xor                     ; queue_get ^ queue_size
(1)    1127 : 3A 2E                      bnz     queue_remove_return ; brnach if D!=0
(1)    1129 : 1F                         inc     R15
(1)    112A : 1F                         inc     R15
(1)    112B : 5F                         str     R15             ; queue_get=0
(1)    112C : F8 01                      ldi     1
(1)    112E :                    queue_remove_return:
(1)    112E : AF                         plo     R15             ; return flag
(1)    112F : E2                         sex     R2
(1)    1130 : 60                         irx
(1)    1131 : 68 6E                      rlxa    R14             ; restore R14
(1)    1133 : 22                         dec     R2
(1)    1134 : 8F                         glo     R15             ; return flag
(1)    1135 : 68 94                      sret    R4
       1137 :                            include "arith.inc"
(1)    1137 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    1137 :                            cpu     1804A
(1)    1137 :
(1)    1137 :                    ;;; Print unsigned 16-bit integer as decimal
(1)    1137 :                    ;;; @param R7 value
(1)    1137 :                    ;;; @clobber D R7 R8 R15
(1)    1137 :                    print_uint16:
(1)    1137 : 97                         ghi     R7
(1)    1138 : 3A 3D                      bnz     print_uint16_loop
(1)    113A : 87                         glo     R7
(1)    113B : 32 57                      bz      print_uint16_zero
(1)    113D :                    print_uint16_loop:
(1)    113D : 97                         ghi     R7
(1)    113E : 3A 45                      bnz     print_uint16_digit
(1)    1140 : 87                         glo     R7
(1)    1141 : 3A 45                      bnz     print_uint16_digit
(1)    1143 : 68 94                      sret    R4
(1)    1145 :                    print_uint16_digit:
(1)    1145 : F8 00                      ldi     0
(1)    1147 : B8                         phi     R8
(1)    1148 : F8 0A                      ldi     10
(1)    114A : A8                         plo     R8              ; divisor=10
(1)    114B : 68 84 12 5B                scal    R4, udiv16
(1)    114F : 88                         glo     R8
(1)    1150 : 73                         stxd                    ; push reminder
(1)    1151 : 68 84 11 3D                scal    R4, print_uint16_loop
(1)    1155 : 12                         inc     R2
(1)    1156 : 02                         ldn     R2              ; pop reminder
(1)    1157 :                    print_uint16_zero:
(1)    1157 : FC 30                      adi     T'0'
(1)    1159 : C0 10 33                   br      putchar
(1)    115C :
(1)    115C :                    ;;; Print signed 16-bit integer as decimal
(1)    115C :                    ;;; @param R7 value
(1)    115C :                    ;;; @clobber D R15
(1)    115C :                    print_int16:
(1)    115C : 68 A8                      rsxd    R8              ; save R8
(1)    115E : 68 A7                      rsxd    R7              ; save R7
(1)    1160 : 97                         ghi     R7
(1)    1161 : FA 80                      ani     X'80'
(1)    1163 : 32 74                      bz      print_int16_print
(1)    1165 : F8 2D                      ldi     T'-'
(1)    1167 : 68 84 10 33                scal    R4, putchar      ; print '-'
(1)    116B : 97                         ghi     R7
(1)    116C : FB FF                      xri     X'FF'
(1)    116E : B7                         phi     R7
(1)    116F : 87                         glo     R7
(1)    1170 : FB FF                      xri     X'FF'
(1)    1172 : A7                         plo     R7
(1)    1173 : 17                         inc     R7              ; negate value
(1)    1174 :                    print_int16_print:
(1)    1174 : 68 84 11 37                scal    R4, print_uint16
(1)    1178 : 60                         irx
(1)    1179 : 68 67                      rlxa    R7              ; restore R7
(1)    117B : 68 68                      rlxa    R8              ; restore R8
(1)    117D : 22                         dec     R2
(1)    117E : 68 94                      sret    R4
(1)    1180 :
(1)    1180 :                    ;;; Store R7 to variable
(1)    1180 :                    ;;;   SCAL R4, store_R7
(1)    1180 :                    ;;;   DC   A(variable)
(1)    1180 :                    ;;; @clobber D
(1)    1180 :                    store_R7:
(1)    1180 : 68 A8                      rsxd    R8              ; save R8
(1)    1182 : E4                         sex     R4
(1)    1183 : 68 68                      rlxa    R8              ; R8=&valiable
(1)    1185 : E8                         sex     R8
(1)    1186 : 60                         irx
(1)    1187 : 68 A7                      rsxd    R7
(1)    1189 : E2                         sex     R2
(1)    118A : 60                         irx
(1)    118B : 68 68                      rlxa    R8              ; restore R8
(1)    118D : 22                         dec     R2
(1)    118E : 68 94                      sret    R4
(1)    1190 :
(1)    1190 :                    ;;; Load variable to R7
(1)    1190 :                    ;;;   SCAL R4, load_R7
(1)    1190 :                    ;;;   DC   A(variable)
(1)    1190 :                    ;;; @return R7 variable
(1)    1190 :                    ;;; @clobber R15
(1)    1190 :                    load_R7:
(1)    1190 : E4                         sex     R4
(1)    1191 : 68 67                      rlxa    R7              ; R7=&variable
(1)    1193 : E7                         sex     R7
(1)    1194 : 68 67                      rlxa    R7
(1)    1196 : E2                         sex     R2
(1)    1197 : 68 94                      sret    R4
(1)    1199 :
(1)    1199 :                    ;;; Load variable to R8
(1)    1199 :                    ;;;   SCAL R4, load_R8
(1)    1199 :                    ;;;   DC   A(variable)
(1)    1199 :                    ;;; @clobber R15
(1)    1199 :                    load_R8:
(1)    1199 : E4                         sex     R4
(1)    119A : 68 68                      rlxa    R8              ; R8=&variable
(1)    119C : E8                         sex     R8
(1)    119D : 68 68                      rlxa    R8
(1)    119F : E2                         sex     R2
(1)    11A0 : 68 94                      sret    R4
(1)    11A2 :
(1)    11A2 :                    ;;; Increment variable
(1)    11A2 :                    ;;;   SCAL R4, inc16
(1)    11A2 :                    ;;;   DC   A(variable)
(1)    11A2 :                    ;;; @return R7 variable
(1)    11A2 :                    inc16:
(1)    11A2 : 68 A8                      rsxd    R8              ; save R8
(1)    11A4 : E4                         sex     R4
(1)    11A5 : 68 68                      rlxa    R8              ; R8=$variable
(1)    11A7 : E8                         sex     R8
(1)    11A8 : 68 67                      rlxa    R7              ; load R7
(1)    11AA : 17                         inc     R7
(1)    11AB : 28                         dec     R8
(1)    11AC : 68 A7                      rsxd    R7              ; save R7
(1)    11AE : E2                         sex     R2
(1)    11AF : 60                         irx
(1)    11B0 : 68 68                      rlxa    R8              ; restore R8
(1)    11B2 : 22                         dec     R2
(1)    11B3 : 68 94                      sret    R4
(1)    11B5 :
(1)    11B5 :                    ;;; Signed addition: summand += addend
(1)    11B5 :                    ;;; @param R7 summand
(1)    11B5 :                    ;;; @param R8 addend
(1)    11B5 :                    ;;; @return R7 summand + addend
(1)    11B5 :                    ;;;   SCAL R4, add16
(1)    11B5 :                    ;;; @clobber D
(1)    11B5 :                    add16:
(1)    11B5 : 88                         glo     R8
(1)    11B6 : 52                         str     R2
(1)    11B7 : 87                         glo     R7
(1)    11B8 : F4                         add
(1)    11B9 : A7                         plo     R7
(1)    11BA : 98                         ghi     R8
(1)    11BB : 52                         str     R2
(1)    11BC : 97                         ghi     R7
(1)    11BD : 74                         adc
(1)    11BE : B7                         phi     R7
(1)    11BF : 68 94                      sret    R4
(1)    11C1 :
(1)    11C1 :                    ;;; Singed subtraction: minuend -= subtrahend
(1)    11C1 :                    ;;;   SCAL R4, sub16
(1)    11C1 :                    ;;; @param R7 minuend
(1)    11C1 :                    ;;; @param R8 subtrahend
(1)    11C1 :                    ;;; @return R7 minuend - subtrahend
(1)    11C1 :                    ;;; @clobber D
(1)    11C1 :                    sub16:
(1)    11C1 : 88                         glo     R8
(1)    11C2 : 52                         str     R2
(1)    11C3 : 87                         glo     R7
(1)    11C4 : F7                         sm
(1)    11C5 : A7                         plo     R7
(1)    11C6 : 98                         ghi     R8
(1)    11C7 : 52                         str     R2
(1)    11C8 : 97                         ghi     R7
(1)    11C9 : 77                         smb
(1)    11CA : B7                         phi     R7
(1)    11CB : 68 94                      sret    R4
(1)    11CD :
(1)    11CD :                    ;;; Signed comparison: minuend - subtrahend
(1)    11CD :                    ;;; @param R7 minuend
(1)    11CD :                    ;;; @param R8 subtrahend
(1)    11CD :                    ;;; @return D=0 DF=1 (minuend==subtrahend); BZ
(1)    11CD :                    ;;;         D=1 DF=1 (minuend>subtrahend);  BGE
(1)    11CD :                    ;;;         D=1 DF=0 (minuend<subtrahend);  BL
(1)    11CD :                    ;;; @clobber R7 R8
(1)    11CD :                    ;;; result = minuend - subtrahend
(1)    11CD :                    ;;; Z=(result.1 | result.0) == 0
(1)    11CD :                    ;;; N=(result.1 & 0x80) != 0
(1)    11CD :                    ;;; V=((minuend.1 ^ subtrahend.1) & (result.1 ^ minuend.1) & 0x80) != 0
(1)    11CD :                    ;;; LT=N ^ V
(1)    11CD :                    cmp16:
(1)    11CD : 88                         glo     R8              ; D=subtrahend.0
(1)    11CE : 52                         str     R2              ; stack top=subtrahend.0
(1)    11CF : 87                         glo     R7              ; D=minuend.0
(1)    11D0 : F7                         sm                      ; D=minuend.0=subtrahend.0
(1)    11D1 : A7                         plo     R7              ; R7.0=result.0
(1)    11D2 : 98                         ghi     R8              ; D=subtrahend.1
(1)    11D3 : 52                         str     R2              ; stack top=subtrahend.1
(1)    11D4 : 97                         ghi     R7              ; D=minuend.1
(1)    11D5 : F3                         xor                     ; D=minuend.1^subtrahend.1
(1)    11D6 : A8                         plo     R8              ; R8.0=minuend.1^subtrahend.1
(1)    11D7 : 97                         ghi     R7              ; D=minuend.1
(1)    11D8 : 77                         smb                     ; D=minuend.1=subtrahend.1
(1)    11D9 : B8                         phi     R8              ; R8.1=result.1
(1)    11DA : 3A E4                      bnz     cmp16_neq       ; branch if result.1!=0
(1)    11DC : 87                         glo     R7              ; D=result.0
(1)    11DD : 3A E4                      bnz     cmp16_neq       ; branch if result.0!=-
(1)    11DF : F8 01                      ldi     1
(1)    11E1 : F6                         shr
(1)    11E2 : 68 94                      sret    R4
(1)    11E4 :                    cmp16_neq:
(1)    11E4 : 98                         ghi     R8              ; D=result.1
(1)    11E5 : 52                         str     R2
(1)    11E6 : 97                         ghi     R7              ; D=minuend.1
(1)    11E7 : F3                         xor                     ; D=result.1^minuend.1
(1)    11E8 : 52                         str     R2              ; stack top=result.1^minuend.1
(1)    11E9 : 88                         glo     R8              ; D=minuend.1^subtrahend.1
(1)    11EA : F2                         and                     ; D=(minuend.1^subtrahend.1)&(result.1^minuend.1)
(1)    11EB : 52                         str     R2              ; stack top=V
(1)    11EC : 98                         ghi     R8              ; D=result.1
(1)    11ED : F3                         xor                     ; D=N^V
(1)    11EE : FB 80                      xri     X'80'           ; D=~(N^V)
(1)    11F0 : FE                         shl                     ; DF=~(N^V)
(1)    11F1 : F8 01                      ldi     1
(1)    11F3 : 68 94                      sret    R4
(1)    11F5 :
(1)    11F5 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    11F5 :                    ;;; @param R7 multiplicand
(1)    11F5 :                    ;;; @param R8 multiplier
(1)    11F5 :                    ;;; @return R7 result
(1)    11F5 :                    ;;; @clobber D R7 R8 R15
(1)    11F5 :                    umul16:
(1)    11F5 : F8 00                      ldi     0
(1)    11F7 : BF                         phi     R15
(1)    11F8 : AF                         plo     R15             ; R15=result
(1)    11F9 : C0 12 17                   br      umul16_check
(1)    11FC :                    umul16_loop:
(1)    11FC : 88                         glo     R8
(1)    11FD : FA 01                      ani     1
(1)    11FF : 32 0B                      bz      umul16_sr       ; lsb(multiplier)==0
(1)    1201 : 87                         glo     R7
(1)    1202 : 52                         str     R2              ; stack top=multiplicand.0
(1)    1203 : 8F                         glo     R15
(1)    1204 : F4                         add
(1)    1205 : AF                         plo     R15
(1)    1206 : 97                         ghi     R7
(1)    1207 : 52                         str     R2              ; stack top=multiplicand.1
(1)    1208 : 9F                         ghi     R15
(1)    1209 : 74                         adc
(1)    120A : BF                         phi     R15             ; result += multiplicand
(1)    120B :                    umul16_sr:
(1)    120B : 98                         ghi     R8
(1)    120C : F6                         shr
(1)    120D : B8                         phi     R8
(1)    120E : 88                         glo     R8
(1)    120F : 76                         shrc
(1)    1210 : A8                         plo     R8              ; multiplier >>= 1
(1)    1211 : 87                         glo     R7
(1)    1212 : FE                         shl
(1)    1213 : A7                         plo     R7
(1)    1214 : 97                         ghi     R7
(1)    1215 : 7E                         shlc
(1)    1216 : B7                         phi     R7              ; multiplicand <<= 1
(1)    1217 :                    umul16_check:
(1)    1217 : 98                         ghi     R8
(1)    1218 : CA 11 FC                   bnz     umul16_loop     ; while multiplier != 0
(1)    121B : 88                         glo     R8
(1)    121C : CA 11 FC                   bnz     umul16_loop     ; while multiplier != 0
(1)    121F : 9F                         ghi     R15
(1)    1220 : B7                         phi     R7
(1)    1221 : 8F                         glo     R15
(1)    1222 : A7                         plo     R7              ; R7=result
(1)    1223 : 68 94                      sret    R4
(1)    1225 :
(1)    1225 :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)    1225 :                    ;;; @param R7 multiplicand
(1)    1225 :                    ;;; @param R8 multiplier
(1)    1225 :                    ;;; @return R7 multiplicand * multiplier
(1)    1225 :                    ;;;   SCAL R4, mul16
(1)    1225 :                    ;;; @clobber R8 R15
(1)    1225 :                    mul16:
(1)    1225 : 98                         ghi     R8
(1)    1226 : 52                         str     R2
(1)    1227 : 97                         ghi     R7
(1)    1228 : F3                         xor
(1)    1229 : 73                         stxd                    ; push sign
(1)    122A : 98                         ghi     R8
(1)    122B : FA 80                      ani     X'80'
(1)    122D : 32 38                      bz      mul16_multiplicand
(1)    122F : 98                         ghi     R8
(1)    1230 : FB FF                      xri     X'FF'
(1)    1232 : B8                         phi     R8
(1)    1233 : 88                         glo     R8
(1)    1234 : FB FF                      xri     X'FF'
(1)    1236 : A8                         plo     R8
(1)    1237 : 18                         inc     R8              ; negate multiplier
(1)    1238 :                    mul16_multiplicand:
(1)    1238 : 97                         ghi     R7
(1)    1239 : FA 80                      ani     X'80'
(1)    123B : 32 46                      bz      mul16_multiply
(1)    123D : 97                         ghi     R7
(1)    123E : FB FF                      xri     X'FF'
(1)    1240 : B7                         phi     R7
(1)    1241 : 87                         glo     R7
(1)    1242 : FB FF                      xri     X'FF'
(1)    1244 : A7                         plo     R7
(1)    1245 : 17                         inc     R7              ; negate multiplicand
(1)    1246 :                    mul16_multiply:
(1)    1246 : 68 84 11 F5                scal    R4, umul16
(1)    124A : 60                         irx
(1)    124B : F0                         ldx                     ; sign
(1)    124C : FA 80                      ani     X'80'
(1)    124E : 32 59                      bz      mul16_return
(1)    1250 : 97                         ghi     R7
(1)    1251 : FB FF                      xri     X'FF'
(1)    1253 : B7                         phi     R7
(1)    1254 : 87                         glo     R7
(1)    1255 : FB FF                      xri     X'FF'
(1)    1257 : A7                         plo     R7
(1)    1258 : 17                         inc     R7              ; negate result
(1)    1259 :                    mul16_return:
(1)    1259 : 68 94                      sret    R4
(1)    125B :
(1)    125B :                    ;;; Unsigned division: dividend / divisor = quotient ... reminder
(1)    125B :                    ;;; @praram R7 dividend
(1)    125B :                    ;;; @praram R8 divisor
(1)    125B :                    ;;; @return R7 quotient
(1)    125B :                    ;;; @return R8 reminder
(1)    125B :                    ;;; @clobber R7 R8 R15
(1)    125B :                    udiv16:
(1)    125B : 98                         ghi     R8
(1)    125C : 3A 63                      bnz     udiv16_calc
(1)    125E : 88                         glo     R8
(1)    125F : 3A 63                      bnz     udiv16_calc
(1)    1261 : 68 94                      sret    R4
(1)    1263 :                    udiv16_calc:
(1)    1263 : 68 A9                      rsxd    R9              ; save R9
(1)    1265 : F8 01                      ldi     1
(1)    1267 : AF                         plo     R15             ; R15.0=bits
(1)    1268 : 30 71                      br      udiv16_prep
(1)    126A :                    udiv16_prep_loop:
(1)    126A : 88                         glo     R8
(1)    126B : FE                         shl
(1)    126C : A8                         plo     R8
(1)    126D : 98                         ghi     R8
(1)    126E : 7E                         shlc
(1)    126F : B8                         phi     R8              ; divisor <<= 1
(1)    1270 : 1F                         inc     R15             ; ++bits
(1)    1271 :                    udiv16_prep:
(1)    1271 : 98                         ghi     R8
(1)    1272 : FA 80                      ani     X'80'
(1)    1274 : 32 6A                      bz      udiv16_prep_loop ; while msb(divisor) == 0
(1)    1276 : 97                         ghi     R7
(1)    1277 : B9                         phi     R9
(1)    1278 : 87                         glo     R7
(1)    1279 : A9                         plo     R9              ; R9=dividend
(1)    127A : F8 00                      ldi     0
(1)    127C : B7                         phi     R7
(1)    127D : A7                         plo     R7              ; R7=quotient
(1)    127E : 30 8C                      br      udiv16_enter_loop
(1)    1280 :                    udiv16_loop:
(1)    1280 : 98                         ghi     R8
(1)    1281 : F6                         shr
(1)    1282 : B8                         phi     R8
(1)    1283 : 88                         glo     R8
(1)    1284 : 76                         shrc
(1)    1285 : A8                         plo     R8              ; divisor >>= 1
(1)    1286 : 87                         glo     R7
(1)    1287 : FE                         shl
(1)    1288 : A7                         plo     R7
(1)    1289 : 97                         ghi     R7
(1)    128A : 7E                         shlc
(1)    128B : B7                         phi     R7              ; quotient <<= 1
(1)    128C :                    udiv16_enter_loop:
(1)    128C : 88                         glo     R8
(1)    128D : 52                         str     R2
(1)    128E : 89                         glo     R9
(1)    128F : F7                         sm
(1)    1290 : A9                         plo     R9
(1)    1291 : 98                         ghi     R8
(1)    1292 : 52                         str     R2
(1)    1293 : 99                         ghi     R9
(1)    1294 : 77                         smb
(1)    1295 : B9                         phi     R9              ; dividend-=divisor
(1)    1296 : 3B 9B                      bm      udiv16_readd    ; branch if dividend < 0
(1)    1298 : 17                         inc     R7              ; quotient += 1
(1)    1299 : 30 A5                      br      udiv16_next
(1)    129B :                    udiv16_readd:
(1)    129B : 88                         glo     R8
(1)    129C : 52                         str     R2
(1)    129D : 89                         glo     R9
(1)    129E : F4                         add
(1)    129F : A9                         plo     R9
(1)    12A0 : 98                         ghi     R8
(1)    12A1 : 52                         str     R2
(1)    12A2 : 99                         ghi     R9
(1)    12A3 : 74                         adc
(1)    12A4 : B9                         phi     R9              ; dividend+=divisor
(1)    12A5 :                    udiv16_next:
(1)    12A5 : 2F                         dec     R15
(1)    12A6 : 8F                         glo     R15
(1)    12A7 : 3A 80                      bnz     udiv16_loop     ; while bits != 0
(1)    12A9 : 99                         ghi     R9
(1)    12AA : B8                         phi     R8
(1)    12AB : 89                         glo     R9
(1)    12AC : A8                         plo     R8              ; R8=reminder
(1)    12AD : 60                         irx
(1)    12AE : 68 69                      rlxa    R9              ; restore R9
(1)    12B0 : 22                         dec     R2
(1)    12B1 : 68 94                      sret    R4
(1)    12B3 :
(1)    12B3 :                    ;;; Signed division: dividend / divisor = quotient ... reminder
(1)    12B3 :                    ;;; @param R7 dividend
(1)    12B3 :                    ;;; @param R8 divisor
(1)    12B3 :                    ;;; @return R7 quotient
(1)    12B3 :                    ;;; @return R8 reminder
(1)    12B3 :                    ;;;   SCAL R4, duvsi2
(1)    12B3 :                    ;;;   SEP R5
(1)    12B3 :                    ;;;   DC  A(div16)
(1)    12B3 :                    ;;; @clobber R15
(1)    12B3 :                    div16:
(1)    12B3 : 98                         ghi     R8
(1)    12B4 : 52                         str     R2
(1)    12B5 : 97                         ghi     R7
(1)    12B6 : F3                         xor
(1)    12B7 : 73                         stxd                    ; push sign
(1)    12B8 : 98                         ghi     R8
(1)    12B9 : FA 80                      ani     X'80'
(1)    12BB : 32 C6                      bz      div16_dividend
(1)    12BD : 98                         ghi     R8
(1)    12BE : FB FF                      xri     X'FF'
(1)    12C0 : B8                         phi     R8
(1)    12C1 : 88                         glo     R8
(1)    12C2 : FB FF                      xri     X'FF'
(1)    12C4 : A8                         plo     R8
(1)    12C5 : 18                         inc     R8              ; negate divisor
(1)    12C6 :                    div16_dividend:
(1)    12C6 : 97                         ghi     R7              ; R7=dividend
(1)    12C7 : FA 80                      ani     X'80'
(1)    12C9 : 32 D4                      bz      div16_divide
(1)    12CB : 97                         ghi     R7
(1)    12CC : FB FF                      xri     X'FF'
(1)    12CE : B7                         phi     R7
(1)    12CF : 87                         glo     R7
(1)    12D0 : FB FF                      xri     X'FF'
(1)    12D2 : A7                         plo     R7
(1)    12D3 : 17                         inc     R7              ; negate dividend
(1)    12D4 :                    div16_divide:
(1)    12D4 : 68 84 12 5B                scal    R4, udiv16
(1)    12D8 : 60                         irx
(1)    12D9 : F0                         ldx                     ; pop sign
(1)    12DA : FA 80                      ani     X'80'
(1)    12DC : 32 E7                      bz      div16_return
(1)    12DE : 97                         ghi     R7
(1)    12DF : FB FF                      xri     X'FF'
(1)    12E1 : B7                         phi     R7
(1)    12E2 : 87                         glo     R7
(1)    12E3 : FB FF                      xri     X'FF'
(1)    12E5 : A7                         plo     R7
(1)    12E6 : 17                         inc     R7              ; negate quotient
(1)    12E7 :                    div16_return:
(1)    12E7 : 68 94                      sret    R4
       12E9 :                            include "mandelbrot.inc"
(1)    12E9 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    12E9 :                    ;;; Mandelbrot variables
(1)    12E9 : =32                Fv:     equ     50
(1)    12E9 : 00 00              vC:     dc      A(0)
(1)    12EB : 00 00              vD:     dc      A(0)
(1)    12ED : 00 00              vA:     dc      A(0)
(1)    12EF : 00 00              vB:     dc      A(0)
(1)    12F1 : 00 00              vP:     dc      A(0)
(1)    12F3 : 00 00              vQ:     dc      A(0)
(1)    12F5 : 00 00              vS:     dc      A(0)
(1)    12F7 : 00 00              vT:     dc      A(0)
(1)    12F9 : 00 00              vY:     dc      A(0)
(1)    12FB : 00 00              vX:     dc      A(0)
(1)    12FD : 00 00              vI:     dc      A(0)
(1)    12FF :
(1)    12FF :                    ;;; Print variable: "D=variable "
(1)    12FF :                    ;;; @param D variable letter
(1)    12FF :                    ;;; @param R7 variable
(1)    12FF :                    ;;;   SCAL R4, print
(1)    12FF :                    ;;; @clobber R7 R15
(1)    12FF :                    print:
(1)    12FF : 68 84 10 33                scal    R4, putchar     ; print variable letter
(1)    1303 : F8 3D                      ldi     T'='
(1)    1305 : 68 84 10 33                scal    R4, putchar     ; '='
(1)    1309 : 68 84 11 5C                scal    R4, print_int16
(1)    130D : C0 10 62                   br      putspace
(1)    1310 :
(1)    1310 :                    mandelbrot:
(1)    1310 : 68 C7 FF F4                rldi    R7, -12
(1)    1314 : 68 84 11 80                scal    R4, store_R7
(1)    1318 : 12 F9                      dc      A(vY)           ; Y=-12
(1)    131A :                    loop_y:
(1)    131A : 68 C7 FF CF                rldi    R7, -49
(1)    131E : 68 84 11 80                scal    R4, store_R7
(1)    1322 : 12 FB                      dc      A(vX)           ; X=-49
(1)    1324 :                    loop_x:
(1)    1324 : 68 84 11 90                scal    R4, load_R7
(1)    1328 : 12 FB                      dc      A(vX)
(1)    132A : 68 C8 00 E5                rldi    R8, 229
(1)    132E : 68 84 12 25                scal    R4, mul16
(1)    1332 : 68 C8 00 64                rldi    R8, 100
(1)    1336 : 68 84 12 B3                scal    R4, div16
(1)    133A : 68 84 11 80                scal    R4, store_R7
(1)    133E : 12 E9                      dc      A(vC)           ; C=X*229/100
(1)    1340 : 68 84 11 80                scal    R4, store_R7
(1)    1344 : 12 ED                      dc      A(vA)           ; A=C
(1)    1346 : 68 84 11 90                scal    R4, load_R7
(1)    134A : 12 F9                      dc      A(vY)
(1)    134C : 68 C8 01 A0                rldi    R8, 416
(1)    1350 : 68 84 12 25                scal    R4, mul16
(1)    1354 : 68 C8 00 64                rldi    R8, 100
(1)    1358 : 68 84 12 B3                scal    R4, div16
(1)    135C : 68 84 11 80                scal    R4, store_R7
(1)    1360 : 12 EB                      dc      A(vD)           ; D=Y*416/100
(1)    1362 : 68 84 11 80                scal    R4, store_R7
(1)    1366 : 12 EF                      dc      A(vB)           ; B=D
(1)    1368 : 68 C7 00 00                rldi    R7, 0
(1)    136C : 68 84 11 80                scal    R4, store_R7
(1)    1370 : 12 FD                      dc      A(vI)           ; I=0
(1)    1372 :
(1)    1372 :                            ;; scal    R4, load_R7
(1)    1372 :                            ;; dc      A(vY)
(1)    1372 :                            ;; ldi     T'Y'
(1)    1372 :                            ;; scal    R4, print
(1)    1372 :                            ;; scal    R4, load_R7
(1)    1372 :                            ;; dc      A(vX)
(1)    1372 :                            ;; ldi     T'X'
(1)    1372 :                            ;; scal    R4, print
(1)    1372 :                            ;; scal    R4, load_R7
(1)    1372 :                            ;; dc      A(vC)
(1)    1372 :                            ;; ldi     T'C'
(1)    1372 :                            ;; scal    R4, print
(1)    1372 :                            ;; scal    R4, load_R7
(1)    1372 :                            ;; dc      A(vD)
(1)    1372 :                            ;; ldi     T'D'
(1)    1372 :                            ;; scal    R4, print
(1)    1372 :                            ;; scal    R4, newline
(1)    1372 :
(1)    1372 :                    loop_i:
(1)    1372 : 68 84 11 90                scal    R4, load_R7
(1)    1376 : 12 EF                      dc      A(vB)
(1)    1378 : 68 C8 00 32                rldi    R8, Fv
(1)    137C : 68 84 12 B3                scal    R4, div16
(1)    1380 : 68 84 11 80                scal    R4, store_R7
(1)    1384 : 12 F3                      dc      A(vQ)           ; Q=B/F
(1)    1386 : 68 C8 00 32                rldi    R8, Fv
(1)    138A : 68 84 12 25                scal    R4, mul16
(1)    138E : 97                         ghi     R7
(1)    138F : B8                         phi     R8
(1)    1390 : 87                         glo     R7
(1)    1391 : A8                         plo     R8
(1)    1392 : 68 84 11 90                scal    R4, load_R7
(1)    1396 : 12 EF                      dc      A(vB)
(1)    1398 : 68 84 11 C1                scal    R4, sub16
(1)    139C : 68 84 11 80                scal    R4, store_R7
(1)    13A0 : 12 F5                      dc      A(vS)           ; S=B-Q*F
(1)    13A2 : 68 84 11 90                scal    R4, load_R7
(1)    13A6 : 12 EF                      dc      A(vB)
(1)    13A8 : 97                         ghi     R7
(1)    13A9 : B8                         phi     R8
(1)    13AA : 87                         glo     R7
(1)    13AB : A8                         plo     R8
(1)    13AC : 68 84 12 25                scal    R4, mul16       ; B*B
(1)    13B0 : 68 A7                      rsxd    R7              ; push B*B
(1)    13B2 : 68 84 11 90                scal    R4, load_R7
(1)    13B6 : 12 ED                      dc      A(vA)
(1)    13B8 : 97                         ghi     R7
(1)    13B9 : B8                         phi     R8
(1)    13BA : 87                         glo     R7
(1)    13BB : A8                         plo     R8
(1)    13BC : 68 84 12 25                scal    R4, mul16       ; A*A
(1)    13C0 : 60                         irx
(1)    13C1 : 68 68                      rlxa    R8              ; pop B*B
(1)    13C3 : 22                         dec     R2
(1)    13C4 : 68 84 11 C1                scal    R4, sub16       ; A*A-B*B
(1)    13C8 : 68 C8 00 32                rldi    R8, Fv
(1)    13CC : 68 84 12 B3                scal    R4, div16       ; (A*A-B*B)/F
(1)    13D0 : 68 84 11 99                scal    R4, load_R8
(1)    13D4 : 12 E9                      dc      A(vC)
(1)    13D6 : 68 84 11 B5                scal    R4, add16       ; (A*A-B*B)/F+C
(1)    13DA : 68 84 11 80                scal    R4, store_R7    ; T=(A*A-B*B)/F+C
(1)    13DE : 12 F7                      dc      A(vT)
(1)    13E0 : 68 84 11 90                scal    R4, load_R7
(1)    13E4 : 12 ED                      dc      A(vA)
(1)    13E6 : 68 84 11 99                scal    R4, load_R8
(1)    13EA : 12 F5                      dc      A(vS)
(1)    13EC : 68 84 12 25                scal    R4, mul16       ; A*S
(1)    13F0 : 68 C8 00 32                rldi    R8, Fv
(1)    13F4 : 68 84 12 B3                scal    R4, div16       ; A*S/F
(1)    13F8 : 68 A7                      rsxd    R7              ; push A*S/F
(1)    13FA : 68 84 11 90                scal    R4, load_R7
(1)    13FE : 12 ED                      dc      A(vA)
(1)    1400 : 68 84 11 99                scal    R4, load_R8
(1)    1404 : 12 F3                      dc      A(vQ)
(1)    1406 : 68 84 12 25                scal    R4, mul16       ; A*Q
(1)    140A : 60                         irx
(1)    140B : 68 68                      rlxa    R8              ; pop A*S/F
(1)    140D : 22                         dec     R2
(1)    140E : 68 84 11 B5                scal    R4, add16       ; A*Q+A*S/F
(1)    1412 : 97                         ghi     R7
(1)    1413 : B8                         phi     R8
(1)    1414 : 87                         glo     R7
(1)    1415 : A8                         plo     R8
(1)    1416 : 68 84 11 B5                scal    R4, add16       ; 2*(A*Q+A*S/F)
(1)    141A : 68 84 11 99                scal    R4, load_R8
(1)    141E : 12 EB                      dc      A(vD)
(1)    1420 : 68 84 11 B5                scal    R4, add16       ; 2*(A*Q+A*S/F)+D
(1)    1424 : 68 84 11 80                scal    R4, store_R7
(1)    1428 : 12 EF                      dc      A(vB)           ; B=2*(A*Q+A*S/F)+D
(1)    142A : 68 84 11 90                scal    R4, load_R7
(1)    142E : 12 F7                      dc      A(vT)
(1)    1430 : 68 84 11 80                scal    R4, store_R7
(1)    1434 : 12 ED                      dc      A(vA)           ; A=T
(1)    1436 : 68 C8 00 32                rldi    R8, Fv
(1)    143A : 68 84 12 B3                scal    R4, div16
(1)    143E : 68 84 11 80                scal    R4, store_R7
(1)    1442 : 12 F1                      dc      A(vP)           ; P=A/F
(1)    1444 : 97                         ghi     R7
(1)    1445 : B8                         phi     R8
(1)    1446 : 87                         glo     R7
(1)    1447 : A8                         plo     R8
(1)    1448 : 68 84 12 25                scal    R4, mul16
(1)    144C : 68 A7                      rsxd    R7              ; push P*P
(1)    144E : 68 84 11 90                scal    R4, load_R7
(1)    1452 : 12 EF                      dc      A(vB)
(1)    1454 : 68 C8 00 32                rldi    R8, Fv
(1)    1458 : 68 84 12 B3                scal    R4, div16
(1)    145C : 68 84 11 80                scal    R4, store_R7
(1)    1460 : 12 F3                      dc      A(vQ)           ; Q=B/F
(1)    1462 : 97                         ghi     R7
(1)    1463 : B8                         phi     R8
(1)    1464 : 87                         glo     R7
(1)    1465 : A8                         plo     R8
(1)    1466 : 68 84 12 25                scal    R4, mul16       ; Q*Q
(1)    146A : 60                         irx
(1)    146B : 68 68                      rlxa    R8              ; pop P*P
(1)    146D : 22                         dec     R2
(1)    146E : 68 84 11 B5                scal    R4, add16       ; P*P+Q*Q
(1)    1472 :
(1)    1472 :                            ;; rsxd    R7              ; push T
(1)    1472 :                            ;; scal    R4, putspace
(1)    1472 :                            ;; scal    R4, load_R7
(1)    1472 :                            ;; dc      A(vI)
(1)    1472 :                            ;; ldi     T'I'
(1)    1472 :                            ;; scal    R4, print
(1)    1472 :                            ;; scal    R4, load_R7
(1)    1472 :                            ;; dc      A(vA)
(1)    1472 :                            ;; ldi     T'A'
(1)    1472 :                            ;; scal    R4, print
(1)    1472 :                            ;; scal    R4, load_R7
(1)    1472 :                            ;; dc      A(vB)
(1)    1472 :                            ;; ldi     T'B'
(1)    1472 :                            ;; scal    R4, print
(1)    1472 :                            ;; scal    R4, load_R7
(1)    1472 :                            ;; dc      A(vP)
(1)    1472 :                            ;; ldi     T'P'
(1)    1472 :                            ;; scal    R4, print
(1)    1472 :                            ;; scal    R4, load_R7
(1)    1472 :                            ;; dc      A(vQ)
(1)    1472 :                            ;; ldi     T'Q'
(1)    1472 :                            ;; scal    R4, print
(1)    1472 :                            ;; scal    R4, newline
(1)    1472 :                            ;; irx
(1)    1472 :                            ;; rlxa    R7              ; pop T
(1)    1472 :                            ;; dec     R2
(1)    1472 :
(1)    1472 : 97                         ghi     R7
(1)    1473 : 3A 8B                      bnz     print_i
(1)    1475 : 87                         glo     R7
(1)    1476 : FD 04                      sdi     4
(1)    1478 : 3B 8B                      bm      print_i         ; if 4<T
(1)    147A : 68 C7 12 FE                rldi    R7, vI+1
(1)    147E : 07                         ldn     R7
(1)    147F : FC 01                      adi     1
(1)    1481 : 57                         str     R7              ; I+=1
(1)    1482 : FF 10                      smi     16
(1)    1484 : CB 13 72                   bm      loop_i          ; if I<16
(1)    1487 : F8 20                      ldi     T' '
(1)    1489 : 30 98                      br      print_char
(1)    148B :                    print_i:
(1)    148B : 68 C7 12 FE                rldi    R7, vI+1
(1)    148F : 07                         ldn     R7
(1)    1490 : FF 0A                      smi     10
(1)    1492 : 3B 96                      bl      print_i2        ; if I<10
(1)    1494 : FC 07                      adi     T'A'-T'0'-10
(1)    1496 :                    print_i2:
(1)    1496 : FC 3A                      adi     T'0'+10
(1)    1498 :                    print_char:
(1)    1498 : 68 84 10 33                scal    R4, putchar
(1)    149C :
(1)    149C :                            ;; stxd                    ; save char
(1)    149C :                            ;; ldi     T'@'
(1)    149C :                            ;; scal    R4, putchar
(1)    149C :                            ;; ldi     T'='
(1)    149C :                            ;; scal    R4, putchar
(1)    149C :                            ;; inc     R2
(1)    149C :                            ;; ldn     R2              ; restore char
(1)    149C :                            ;; scal    R4, putchar
(1)    149C :                            ;; scal    R4, newline
(1)    149C :
(1)    149C : 68 84 10 23                scal    R4, getchar
(1)    14A0 : 32 A6                      bz      next_x
(1)    14A2 : 87                         glo     R7
(1)    14A3 : 3A A6                      bnz     next_x
(1)    14A5 : 00                         idl                     ; break
(1)    14A6 :                    next_x:
(1)    14A6 : 68 84 11 A2                scal    R4, inc16
(1)    14AA : 12 FB                      dc      A(vX)           ; X+=1
(1)    14AC : 97                         ghi     R7
(1)    14AD : CA 13 24                   bnz     loop_x          ; if X<0
(1)    14B0 : 87                         glo     R7
(1)    14B1 : FF 1E                      smi     30
(1)    14B3 : CB 13 24                   bl      loop_x          ; if X<30
(1)    14B6 : 68 84 10 58                scal    R4, newline
(1)    14BA : 68 84 11 A2                scal    R4, inc16
(1)    14BE : 12 F9                      dc      A(vY)           ; Y+=1
(1)    14C0 : 97                         ghi     R7
(1)    14C1 : CA 13 1A                   bnz     loop_y          ; if Y<0
(1)    14C4 : 87                         glo     R7
(1)    14C5 : FF 0D                      smi     13
(1)    14C7 : CB 13 1A                   bl      loop_y          ; if Y<13
(1)    14CA : D6                         sep     R6
       14CB :
       14CB :                            end

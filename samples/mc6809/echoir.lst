          0 :                            cpu     6809
          0 :                            include "mc6809.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; Condition Code Register (CC)
(1)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 CC_OVERFLOW   equ  %00000010   ; set to 1 if overflow occurred
(1)       0 : =4                 CC_ZERO       equ  %00000100   ; set to 1 if result is zero
(1)       0 : =8                 CC_NEGATIVE   equ  %00001000   ; set to 1 if result is negative
(1)       0 : =10                CC_IRQ        equ  %00010000   ; if 1, IRQ is masked
(1)       0 : =20                CC_HALF_CARRY equ  %00100000   ; if 1, decimal carry from least digit occurred
(1)       0 : =40                CC_FIRQ       equ  %01000000   ; if 1, FIRQ is masked
(1)       0 : =80                CC_ENTIRE     equ  %10000000   ; set to 1 if entire registers are pushed
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =FFF2              VEC_SWI3:       equ     $FFF2  ; $FFF2: Software Interrupt 3
(1)       0 : =FFF4              VEC_SWI2:       equ     $FFF4  ; $FFF4: Software Interrupt 2
(1)       0 : =FFF6              VEC_FIRQ:       equ     $FFF6  ; $FFF6: Fast Interrupt Request
(1)       0 : =FFF8              VEC_IRQ:        equ     $FFF8  ; $FFF8: Interrupt Request
(1)       0 : =FFFA              VEC_SWI:        equ     $FFFA  ; $FFFA: Software Interrupt
(1)       0 : =FFFC              VEC_NMI:        equ     $FFFC  ; $FFFC: Non Maskable Interrupt
(1)       0 : =FFFE              VEC_RESET:      equ     $FFFE  ; $FFFE: Reset
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     $DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 :
       2000 :                            org     $2000
       2000 :
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       rmb     rx_queue_size
       2080 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
       2080 :
       1000 :                            org     $1000
       1000 : =1000              stack:  equ     *
       1000 :
       FFF8 :                            org     VEC_IRQ
       FFF8 : 01 8F                      fdb     isr_irq
       FFFA :
       FFFA :                            org     VEC_SWI
       FFFA : FF FA                      fdb     VEC_SWI         ; for halt to system
       FFFC :
       FFFE :                            org     VEC_RESET
       FFFE : 01 00                      fdb     initialize
      10000 :
        100 :                            org     $0100
        100 :                    initialize:
        100 : 10 CE 10 00                lds     #stack
        104 : 8E 20 00                   ldx     #rx_queue
        107 : C6 80                      ldb     #rx_queue_size
        109 : 17 00 38                   lbsr    queue_init
        10C :                            ;; initialize ACIA
        10C : 86 03                      lda     #CDS_RESET_gc   ; Master reset
        10E : B7 DF 00                   sta     ACIA_control
        111 : 86 94                      lda     #RX_INT_TX_NO
        113 : B7 DF 00                   sta     ACIA_control
        116 : 86 01                      lda     #1              ; IRQ
        118 : B7 DF 02                   sta     ACIA+2          ; set #IRQ name for MC6850 emulator
        11B : 8E 20 00                   ldx     #rx_queue
        11E :
        11E :                    wait:
        11E : 3C EF                      cwai    #~CC_IRQ        ; Clear IRQ mask
        120 :                    loop:
        120 : 1A 10                      orcc    #CC_IRQ         ; Set IRQ mask
        122 : 17 00 4B                   lbsr    queue_remove
        125 : 1C EF                      andcc   #~CC_IRQ        ; Clear IRQ mask
        127 : 24 F5                      bcc     wait
        129 : 4D                         tsta
        12A : 27 0C                      beq     halt_to_system
        12C : 8D 0B                      bsr     putchar
        12E : 81 0D                      cmpa    #$0D
        130 : 26 EE                      bne     loop
        132 : 86 0A                      lda     #$0A
        134 : 8D 03                      bsr     putchar
        136 : 20 E8                      bra     loop
        138 :                    halt_to_system:
        138 : 3F                         swi                     ; halt to system
        139 :
        139 :                    putchar:
        139 : F6 DF 00                   ldb     ACIA_status
        13C : C5 02                      bitb    #TDRE_bm
        13E : 27 F9                      beq     putchar
        140 : B7 DF 01                   sta     ACIA_data
        143 : 39                         rts
        144 :
        144 :                            include "queue.inc"
(1)     144 :                    ;;; -*- mode: asm; mode: flying-spell; -*-
(1)     144 :                    ;;; [queue] queue structure
(1)     144 : =0                 queue_len:      equ     0       ; queue length
(1)     144 : =1                 queue_size:     equ     1       ; buffer size
(1)     144 : =2                 queue_put:      equ     2       ; queue put index
(1)     144 : =3                 queue_get:      equ     3       ; queue get index
(1)     144 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     144 :
(1)     144 :                    ;;; [queue] Initialize queue
(1)     144 :                    ;;; @param X queue work space pointer
(1)     144 :                    ;;; @param B queue work space size
(1)     144 :                    queue_init:
(1)     144 : 34 14                      pshs    x,b
(1)     146 :                    queue_init_loop:
(1)     146 : 6F 80                      clr     ,x+
(1)     148 : 5A                         decb
(1)     149 : 26 FB                      bne     queue_init_loop
(1)     14B : 35 14                      puls    b,x
(1)     14D : C0 04                      subb    #queue_buf
(1)     14F : E7 01                      stb     queue_size,x
(1)     151 : 39                         rts
(1)     152 :
(1)     152 :                    ;;; [queue] Add an element to queue
(1)     152 :                    ;;; @param X queue work space pointer
(1)     152 :                    ;;; @param A an element
(1)     152 :                    ;;; @return CC.C 0 if queue is full
(1)     152 :                    queue_add:
(1)     152 : 34 54                      pshs    u,x,b
(1)     154 : 1F 13                      tfr     x,u
(1)     156 : E6 C4                      ldb     queue_len,u
(1)     158 : E1 41                      cmpb    queue_size,u
(1)     15A : 24 12                      bhs     queue_add_return ;carry is cleared
(1)     15C : E6 42                      ldb     queue_put,u     ; 8 bits offset
(1)     15E : 3A                         abx                     ; X+=B
(1)     15F : A7 04                      sta     queue_buf,x     ; store an element
(1)     161 : 6C C4                      inc     queue_len,u
(1)     163 : 5C                         incb
(1)     164 : E7 42                      stb     queue_put,u
(1)     166 : E1 41                      cmpb    queue_size,u
(1)     168 : 25 04                      blo     queue_add_return ; carry is set
(1)     16A : 6F 42                      clr     queue_put,u
(1)     16C : 1A 01                      orcc    #CC_CARRY       ; set carry
(1)     16E :                    queue_add_return:
(1)     16E : 35 D4                      puls    b,x,u,pc
(1)     170 :
(1)     170 :                    ;;; [queue] Remove an element from queue
(1)     170 :                    ;;; @param X queue work space pointer
(1)     170 :                    ;;; @return A an element
(1)     170 :                    ;;; @return CC.C 0 if queue is empty
(1)     170 :                    queue_remove:
(1)     170 : 6D 84                      tst     queue_len,x
(1)     172 : 26 03                      bne     queue_remove_elem
(1)     174 : 1C FE                      andcc   #~CC_CARRY      ; clear carry
(1)     176 : 39                         rts
(1)     177 :                    queue_remove_elem:
(1)     177 : 34 54                      pshs    u,x,b
(1)     179 : 1F 13                      tfr     x,u
(1)     17B : E6 43                      ldb     queue_get,u     ; 8 bits offset
(1)     17D : 3A                         abx                     ; X+=B
(1)     17E : A6 04                      lda     queue_buf,x
(1)     180 : 6A C4                      dec     queue_len,u
(1)     182 : 5C                         incb
(1)     183 : E7 43                      stb     queue_get,u
(1)     185 : E1 41                      cmpb    queue_size,u
(1)     187 : 25 04                      blo     queue_remove_return ; carry is set
(1)     189 : 6F 43                      clr     queue_get,u
(1)     18B : 1A 01                      orcc    #CC_CARRY       ; set carry
(1)     18D :                    queue_remove_return:
(1)     18D : 35 D4                      puls    b,x,u,pc
        18F :
        18F :                    ;;; IRQ
        18F :                    isr_irq:
        18F : F6 DF 00                   ldb     ACIA_status
        192 : C5 80                      bitb    #IRQF_bm
        194 : 27 0D                      beq     isr_irq_return
        196 :                    isr_irq_receive:
        196 : C5 01                      bitb    #RDRF_bm
        198 : 27 09                      beq     isr_irq_return
        19A : B6 DF 01                   lda     ACIA_data
        19D : 8E 20 00                   ldx     #rx_queue
        1A0 : BD 01 52                   jsr     queue_add
        1A3 :                    isr_irq_return:
        1A3 : 3B                         rti

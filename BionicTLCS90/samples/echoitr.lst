          0 :                            cpu     tlcs90
          0 :                            include "tmp90c802.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; TMP90C802
(1)       0 :                            include "tlcs90.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; TLCS90
(2)       0 :                    ;;; F Register
(2)       0 : =80                F_SIGN:         equ     10000000B ; set to 1 if negative
(2)       0 : =40                F_ZERO:         equ     01000000B ; set to 1 if zero
(2)       0 : =20                F_INTENB:       equ     00100000B ; set to 1 if interrupt enabled
(2)       0 : =10                F_HALF_CARRY:   equ     00010000B ; set to 1 if carry from bit-3
(2)       0 : =8                 F_EXTENDED:     equ     00001000B ; set to 1 if extended carry
(2)       0 : =4                 F_OVERFLOW:     equ     00000100B ; set to 1 if overflow
(2)       0 : =2                 F_SUBTRACT:     equ     00000010B ; set to 1 if subtraction
(2)       0 : =1                 F_CARRY:        equ     00000001B ; set to 1 if carry
(2)       0 :                    ;;; Interrupt origin
(2)       0 : =0                 ORG_RESET:      equ     0000H   ; RESET
(2)       0 : =10                ORG_SWI:        equ     0010H   ; SWI
(2)       0 : =18                ORG_NMI:        equ     0018H   ; NMI
(2)       0 : =20                ORG_INTWD:      equ     0020H   ; Watchdog
(2)       0 : =28                ORG_INT0:       equ     0028H   ; INT0
(2)       0 : =58                ORG_INT1:       equ     0058H   ; INT1
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =30                ORG_INTT0:      equ     0030H   ; Timer 0
(1)       0 : =38                ORG_INTT1:      equ     0038H   ; Timer 1
(1)       0 : =40                ORG_INTT2:      equ     0040H   ; Timer 2
(1)       0 : =48                ORG_INTT3:      equ     0048H   ; Timer 3
(1)       0 : =70                ORG_INTRX:      equ     0070H   ; Serial receive
(1)       0 : =78                ORG_INTTX:      equ     0078H   ; Serial transmit\
(1)       0 :                    ;;; I/O Port
(1)       0 :                    ;;; Port 0,1,2 are used for data and address bus when #EA=0
(1)       0 :                    ;;; Port P37, P36, P35 are used for bus controls
(1)       0 : =FFC6              P3:     equ     0FFC6H            ; Port 3
(1)       0 : =4                 P32:            equ     00000100B ; Port 3.2
(1)       0 : =FFC7              P3CR:   equ     0FFC7H            ; Port 3 control register
(1)       0 : =80                P3CR_WAIT_ENB:  equ     10000000B ; Enable #WAIT
(1)       0 : =8                 P3CR_TXD:       equ     00001000B ; set to 1 then P33 is TXD
(1)       0 : =2                 P3CR_RXD:       equ     00000010B ; set to 1 then P31 is RXD
(1)       0 : =FFD1              P8CR:   equ     0FFD1H            ; Port 8 control register
(1)       0 : =1                 P8CR_EDGE:      equ     00000001B ; set to 1 then INT0 is edge detection
(1)       0 :                    ;;; Watchdog timer
(1)       0 : =FFD2              WDMOD:  equ     0FFD2H            ; Watchdog timer mode register
(1)       0 : =80                WDMOD_WDTE:     equ     10000000B ; set to 1 then Watchdog timer is enabled
(1)       0 : =FFD3              WDCR:   equ     0FFD3H            ; Watchdog timer control register
(1)       0 : =B1                WDCR_DISABLE:   equ     0B1H      ; Disable watchdog timer
(1)       0 : =4E                WDCR_CLEAR:     equ     04EH      ; Clear watchdog timer
(1)       0 :                    ;;; Interrupt request flag
(1)       0 : =FFC2              IRFL:   equ     0FFC2H
(1)       0 : =6                 IRFL_IRF0_bp:   equ     6       ; INT0 request flag
(1)       0 : =FFC3              IRFH:   equ     0FFC3H
(1)       0 : =4                 IRFH_IRF1_bp:   equ     4       ; INT1 request flag
(1)       0 : =1                 IRFH_IRFRX_bp:  equ     1       ; INTRX request flag
(1)       0 : =0                 IRFH_IRFTX_bp:  equ     0       ; INTTX request flag
(1)       0 :                    ;;; Interrupt enable flag
(1)       0 : =FFE6              INTEL:  equ     0FFE6H
(1)       0 : =4                 INTEL_IE1_bp:   equ     4       ; enable INT1
(1)       0 : =1                 INTEL_IERX_bp:  equ     1       ; enable INTRX
(1)       0 : =0                 INTEL_IETX_bp:  equ     0       ; enable INTTX
(1)       0 : =FFE7              INTEH:  equ     0FFE7H
(1)       0 : =2                 INTEH_IE0_bp:   equ     2       ; enable INT0
(1)       0 :                    ;;; Timer/Serial channel control register
(1)       0 : =FFDB              TRUN:   equ     0FFDBH
(1)       0 : =C0                TRUN_BR9600:    equ     11000000B ; Baud rate 9600bps
(1)       0 : =20                TRUN_PRRUN:     equ     00100000B ; Enable prescaler
(1)       0 :                    ;;; Serial channel mode register
(1)       0 : =FFE9              SCMOD:  equ     0FFE9H
(1)       0 : =20                SCMOD_RXE:      equ     00100000B ; Enable receiving data
(1)       0 : =8                 SCMOD_SM8:      equ     00001000B ; Serial transfer mode 8-bit UART
(1)       0 : =1                 SCMOD_SCBAUD:   equ     00000001B ; Serial transfer clock from baud rate generator
(1)       0 : =3                 SCMOD_SCBAUD2:  equ     00000011B ; Serial transfer clock from 1/2 baud rate generator
(1)       0 :                    ;;; Serial channel control register
(1)       0 : =FFEA              SCCR:   equ     0FFEAH
(1)       0 : =0                 SCCR_PE_DIS:    equ     00000000B ; Disable parity
(1)       0 : =10                SCCR_OERR:      equ     00010000B ; Overrun error flag
(1)       0 : =8                 SCCR_PERR:      equ     00001000B ; Parity error flag
(1)       0 : =4                 SCCR_FERR:      equ     00000100B ; Framing error flag
(1)       0 :                    ;;; Serial transmission/receiving buffer register
(1)       0 : =FFEB              SCBUF:  equ     0FFEBH
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =FFF0              USART:          equ     0FFF0H
          0 : =FFF0              USARTD:         equ     USART+0 ; Receive/Transmit data
          0 : =FFF1              USARTS:         equ     USART+1 ; Srtatus register
          0 : =FFF1              USARTC:         equ     USART+1 ; Control register
          0 : =FFF2              USARTRV:        equ     USART+2 ; Receive interrupt vector (ORG_*)
          0 : =FFF3              USARTTV:        equ     USART+3 ; Transmit interrupt vector (ORG_*)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =2                 ST_TxEMPTY_bp:  equ     2           ; Transmitter empty
(1)       0 : =1                 ST_RxRDY_bp:    equ     1           ; Receiver ready
(1)       0 : =0                 ST_TxRDY_bp:    equ     0           ; Transmitter ready
          0 : =27                TXRX_ENABLE     equ     CMD_RTS_bm|CMD_DTR_bm|CMD_RxEN_bm|CMD_TxEN_bm
          0 : =37                RXERR_RESET     equ     TXRX_ENABLE | CMD_ER_bm
          0 :
       2000 :                            org     2000H
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       ds      tx_queue_size
       2100 : 01                 tx_intr_enable: db      1
       2101 :
       1000 :                            org     1000H
       1000 : =1000              stack:  equ     $
       1000 :
          0 :                            org     ORG_RESET
          0 : 1A 00 01                   jp      init
          3 :
         28 :                            org     ORG_INT0
         28 : 1A 3F 02                   jp      isr_intr
         2B :                    ;        bit     ST_RxRDY_bp, (USARTS)
         2B :                    ;        jp      nz, isr_intr_rx
         2B :                    ;        reti
         2B :
         58 :                            org     ORG_INT1
         58 : A8 F1                      bit     ST_TxRDY_bp, (USARTS)
         5A : EB 55 02 CE                jp      nz, isr_intr_tx
         5E : 1F                         reti
         5F :
        100 :                            org     0100H
        100 :                    init:
        100 : 3E 00 10                   ld      sp, stack
        103 : 3C 00 20                   ld      ix, rx_queue
        106 : 30 80                      ld      b, rx_queue_size
        108 : 1C D2 01                   call     queue_init
        10B : 3C 80 20                   ld      ix, tx_queue
        10E : 30 80                      ld      b, tx_queue_size
        110 : 1C D2 01                   call     queue_init
        113 :                    init_usart:
        113 : 37 F1 00                   ld      (USARTC), 0
        116 : 37 F1 00                   ld      (USARTC), 0
        119 : 37 F1 00                   ld      (USARTC), 0     ; safest way to sync mode
        11C :                    ;;; reset
        11C : 37 F1 40                   ld      (USARTC), CMD_IR_bm
        11F : 00                         nop
        120 : 00                         nop
        121 :                    ;;; async 1stop 8data x16
        121 : 37 F1 4E                   ld      (USARTC), MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
        124 : 00                         nop
        125 : 00                         nop
        126 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
        126 :                    ;;; enable RxRDY interrupt using RST 5.5
        126 : 37 F1 27                   ld      (USARTC), TXRX_ENABLE
        129 : 37 F2 28                   ld      (USARTRV), ORG_INT0
        12C : 37 F3 00                   ld      (USARTTV), ORG_RESET ; disable TxRDY interrupt
        12F :                    ;;; Enable INT0, INT1
        12F : BA E7                      set     INTEH_IE0_bp, (INTEH)
        131 :                    ;        set     INTEL_IE1_bp, (INTEL)
        131 : 03                         ei
        132 :
        132 :                    receive_loop:
        132 : 1C AD 01                   call    getchar
        135 : CF FB                      jr      nc, receive_loop
        137 : FE 66                      or      a, a
        139 : CE 01                      jr      nz, echo_back
        13B : FF                         swi                     ; A=0
        13C :                    echo_back:
        13C : 28                         ld      b, a
        13D : 1C B8 01                   call    putchar         ; echo
        140 : 36 20                      ld      a, ' '          ; space
        142 : 1C B8 01                   call    putchar
        145 : 1C 5F 01                   call    put_hex8        ; print in hex
        148 : 36 20                      ld      a, ' '          ; space
        14A : 1C B8 01                   call    putchar
        14D : 1C 82 01                   call    put_bin8        ; print in binary
        150 : 1C 55 01                   call    newline
        153 : C8 DD                      jr      receive_loop
        155 :
        155 :                    ;;; Put newline
        155 :                    ;;; @clobber A
        155 :                    newline:
        155 : 36 0D                      ld      a, 0DH
        157 : 1C B8 01                   call    putchar
        15A : 36 0A                      ld      a, 0AH
        15C : 1A B8 01                   jp      putchar
        15F :
        15F :                    ;;; Print uint8_t in hex
        15F :                    ;;; @param B uint8_t value to be printed in hex.
        15F :                    ;;; @clobber A
        15F :                    put_hex8:
        15F : 36 30                      ld      a, '0'
        161 : 1C B8 01                   call    putchar
        164 : 36 78                      ld      a, 'x'
        166 : 1C B8 01                   call    putchar
        169 : 20                         ld      a, b
        16A : A7                         srla
        16B : A7                         srla
        16C : A7                         srla
        16D : A7                         srla
        16E : 1C 72 01                   call    put_hex4
        171 : 20                         ld      a, b
        172 :                    put_hex4:
        172 : 6C 0F                      and     a, 0FH
        174 : 6F 0A                      cp      a, 10
        176 : C7 05                      jr      c, put_hex8_dec    ; A<10
        178 : 68 37                      add     a, 'A'-10
        17A : 1A B8 01                   jp      putchar
        17D :                    put_hex8_dec:
        17D : 68 30                      add     a, '0'
        17F : 1A B8 01                   jp      putchar
        182 :
        182 :                    ;;; Print uint8_t in binary
        182 :                    ;;; @param B uint8_t value to be printed in binary.
        182 :                    ;;; @clobber A
        182 :                    put_bin8:
        182 : 50                         push    bc
        183 : 36 30                      ld      a, '0'
        185 : 1C B8 01                   call    putchar
        188 : 36 62                      ld      a, 'b'
        18A : 1C B8 01                   call    putchar
        18D : 20                         ld      a, b
        18E : 1C 97 01                   call    put_bin4
        191 : A6                         slla
        192 : 1C 97 01                   call    put_bin4
        195 : 58                         pop     bc
        196 : 1E                         ret
        197 :                    put_bin4:
        197 : 1C 9B 01                   call    put_bin2
        19A : A6                         slla
        19B :                    put_bin2:
        19B : 1C 9F 01                   call    put_bin1
        19E : A6                         slla
        19F :                    put_bin1:
        19F : 31 30                      ld      c, '0'
        1A1 : FE 66                      or      a, a            ; chech MSB
        1A3 : CD 01                      jr      pl, put_bin0    ; MSB=0
        1A5 : 81                         inc     c               ; MSB=1
        1A6 :                    put_bin0:
        1A6 : 28                         ld      b, a
        1A7 : 21                         ld      a, c
        1A8 : 1C B8 01                   call    putchar
        1AB : 20                         ld      a, b
        1AC : 1E                         ret
        1AD :
        1AD :                    ;;; Get character
        1AD :                    ;;; @return A
        1AD :                    ;;; @return CC.C 0 if no character
        1AD :                    getchar:
        1AD : 54                         push    ix
        1AE : 3C 00 20                   ld      ix, rx_queue
        1B1 : 02                         di
        1B2 : 1C 19 02                   call    queue_remove
        1B5 : 03                         ei
        1B6 : 5C                         pop     ix
        1B7 : 1E                         ret
        1B8 :
        1B8 :                    ;;; Put character
        1B8 :                    ;;; @param A
        1B8 :                    putchar:
        1B8 : 56                         push    af
        1B9 : 54                         push    ix
        1BA : 3C 80 20                   ld      ix, tx_queue
        1BD :                    putchar_retry:
        1BD : 02                         di
        1BE : 1C E9 01                   call    queue_add
        1C1 : 03                         ei
        1C2 : CF F9                      jr      nc, putchar_retry ; branch if queue is full
        1C4 : 5C                         pop     ix
        1C5 : 02                         di
        1C6 : 27 F3                      ld      a, (USARTTV)
        1C8 : FE 66                      or      a, a
        1CA : CE 03                      jr      nz, putchar_exit ; already enabled
        1CC : 37 F3 28                   ld      (USARTTV), ORG_INT0
        1CF :                    ;        ld      (USARTTV), ORG_INT1
        1CF :                    putchar_exit:
        1CF : 03                         ei
        1D0 : 5E                         pop     af
        1D1 : 1E                         ret
        1D2 :
        1D2 :                            include "queue.inc"
(1)     1D2 :                    ;;; [queue] queue structure
(1)     1D2 : =0                 queue_len:      equ     0       ; queue length
(1)     1D2 : =1                 queue_size:     equ     1       ; buffer size
(1)     1D2 : =2                 queue_put:      equ     2       ; queue put index
(1)     1D2 : =3                 queue_get:      equ     3       ; queue get index
(1)     1D2 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     1D2 :
(1)     1D2 :                    ;;; [queue] Initialize queue
(1)     1D2 :                    ;;; @param IX queue work space pointer
(1)     1D2 :                    ;;; @param B queue work space size
(1)     1D2 :                    ;;; @clobber B IX
(1)     1D2 :                    queue_init:
(1)     1D2 : F4 00 37 00                ld      (ix+queue_len), 0
(1)     1D6 : F8 6A 04                   sub     b, queue_buf
(1)     1D9 : F4 01 20                   ld      (ix+queue_size), b
(1)     1DC : F8 68 02                   add     b, 2            ; for queue_put and queue_get
(1)     1DF : F4 02 3C                   lda     ix, ix+queue_put
(1)     1E2 :                    queue_init_loop:
(1)     1E2 : EC 37 00                   ld      (ix), 0
(1)     1E5 : 94                         inc     ix
(1)     1E6 : 18 FA                      djnz    queue_init_loop
(1)     1E8 : 1E                         ret
(1)     1E9 :
(1)     1E9 :                    ;;; [queue] Add an element to queue
(1)     1E9 :                    ;;; @param IX queue work space pointer
(1)     1E9 :                    ;;; @param A an element
(1)     1E9 :                    ;;; @return F.C 0 if queue is full
(1)     1E9 :                    queue_add:
(1)     1E9 : 56                         push    af              ; save an element
(1)     1EA : F0 00 2E                   ld      a, (ix+queue_len)
(1)     1ED : F0 01 67                   cp      a, (ix+queue_size)
(1)     1F0 : C7 03                      jr      c, queue_add_store ; queue_len < queue_size
(1)     1F2 : 5E                         pop     af
(1)     1F3 : 0C                         rcf                     ; clear carry
(1)     1F4 : 1E                         ret
(1)     1F5 :                    queue_add_store:
(1)     1F5 : 86                         inc     a               ; queue_len++
(1)     1F6 : F4 00 26                   ld      (ix+queue_len), a
(1)     1F9 : 52                         push    hl
(1)     1FA : F4 04 3A                   lda     hl, ix+queue_buf
(1)     1FD : F0 02 2E                   ld      a, (ix+queue_put)
(1)     200 : F7 3A                      lda     hl, hl+a
(1)     202 : F2 03 2E                   ld      a, (sp+3)       ; get element
(1)     205 : EA 26                      ld      (hl), a         ; store element
(1)     207 : 5A                         pop     hl
(1)     208 : F0 02 2E                   ld      a, (ix+queue_put)
(1)     20B : 86                         inc     a
(1)     20C : F0 01 67                   cp      a, (ix+queue_size)
(1)     20F : C7 02                      jr      c, queue_add_update ; queue_put < queue_size
(1)     211 : 36 00                      ld      a, 0                ; wrap around
(1)     213 :                    queue_add_update:
(1)     213 : F4 02 26                   ld      (ix+queue_put), a
(1)     216 : 5E                         pop     af
(1)     217 : 0D                         scf                     ; set carry
(1)     218 : 1E                         ret
(1)     219 :
(1)     219 :                    ;;; [queue] Remove an element from queue
(1)     219 :                    ;;; @param IX queue work space pointer
(1)     219 :                    ;;; @return A an element
(1)     219 :                    ;;; @return F.C 0 if queue is empty
(1)     219 :                    queue_remove:
(1)     219 : E4 2E                      ld      a, (ix)           ; queue_len
(1)     21B : FE 66                      or      a, a              ; clear carry
(1)     21D : FE D6                      ret     z                 ; carry is cleared by |or|
(1)     21F : 52                         push    hl
(1)     220 : 8E                         dec     a               ; queue_len--
(1)     221 : F4 00 26                   ld      (ix+queue_len), a
(1)     224 : F4 04 3A                   lda     hl, ix+queue_buf
(1)     227 : F0 03 2E                   ld      a, (ix+queue_get)
(1)     22A : F3 2E                      ld      a, (hl+a)       ; read element
(1)     22C : 2C                         ld      h, a            ; save element
(1)     22D : F0 03 2E                   ld      a, (ix+queue_get)
(1)     230 : 86                         inc     a
(1)     231 : F0 01 67                   cp      a, (ix+queue_size)
(1)     234 : C7 02                      jr      c, queue_remove_update ; queue_get < queue_size
(1)     236 : 36 00                      ld      a, 0                   ; wrap around
(1)     238 :                    queue_remove_update:
(1)     238 : F4 03 26                   ld      (ix+queue_get), a
(1)     23B : 24                         ld      a, h            ; restore element
(1)     23C : 5A                         pop     hl
(1)     23D : 0D                         scf                     ; set carry
(1)     23E : 1E                         ret
(1)     23F :
(1)     23F :                    ;;; Local Variables:
(1)     23F :                    ;;; mode: asm
(1)     23F :                    ;;; End:
(1)     23F :                    ;;; vim: set ft=asm et ts=4 sw=4:
        23F :
        23F :                    isr_intr:
        23F : 27 F1                      ld      a, (USARTS)
        241 : FE A9                      bit     ST_RxRDY_bp, a
        243 : CE 05                      jr      nz, isr_intr_rx
        245 : FE A8                      bit     ST_TxRDY_bp, a
        247 : CE 0C                      jr      nz, isr_intr_tx
        249 : 1F                         reti
        24A :
        24A :                    isr_intr_rx:
        24A : 27 F0                      ld      a, (USARTD)     ; receive character
        24C : 54                         push    ix
        24D : 3C 00 20                   ld      ix, rx_queue
        250 : 1C E9 01                   call    queue_add
        253 : 5C                         pop     ix
        254 : 1F                         reti
        255 :
        255 :                    isr_intr_tx:
        255 : 54                         push    ix
        256 : 3C 80 20                   ld      ix, tx_queue
        259 : 1C 19 02                   call    queue_remove
        25C : 5C                         pop     ix
        25D : CF 03                      jr      nc, isr_intr_send_empty
        25F : 2F F0                      ld      (USARTD), a     ; send character
        261 : 1F                         reti
        262 :                    isr_intr_send_empty:
        262 : 37 F3 00                   ld      (USARTTV), ORG_RESET ; disable Tx interrupt
        265 : 1F                         reti

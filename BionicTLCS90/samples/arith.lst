          0 :                            cpu     tlcs90
          0 :                            include "tmp90c802.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; TMP90C802
(1)       0 :                            include "tlcs90.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; TLCS90
(2)       0 :                    ;;; F Register
(2)       0 : =80                F_SIGN:         equ     10000000B ; set to 1 if negative
(2)       0 : =40                F_ZERO:         equ     01000000B ; set to 1 if zero
(2)       0 : =20                F_INTENB:       equ     00100000B ; set to 1 if interrupt enabled
(2)       0 : =10                F_HALF_CARRY:   equ     00010000B ; set to 1 if carry from bit-3
(2)       0 : =8                 F_EXTENDED:     equ     00001000B ; set to 1 if extended carry
(2)       0 : =4                 F_OVERFLOW:     equ     00000100B ; set to 1 if overflow
(2)       0 : =2                 F_SUBTRACT:     equ     00000010B ; set to 1 if subtraction
(2)       0 : =1                 F_CARRY:        equ     00000001B ; set to 1 if carry
(2)       0 :                    ;;; Interrupt origin
(2)       0 : =0                 ORG_RESET:      equ     0000H   ; RESET
(2)       0 : =10                ORG_SWI:        equ     0010H   ; SWI
(2)       0 : =18                ORG_NMI:        equ     0018H   ; NMI
(2)       0 : =20                ORG_INTWD:      equ     0020H   ; Watchdog
(2)       0 : =28                ORG_INT0:       equ     0028H   ; INT0
(2)       0 : =58                ORG_INT1:       equ     0058H   ; INT1
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =30                ORG_INTT0:      equ     0030H   ; Timer 0
(1)       0 : =38                ORG_INTT1:      equ     0038H   ; Timer 1
(1)       0 : =40                ORG_INTT2:      equ     0040H   ; Timer 2
(1)       0 : =48                ORG_INTT3:      equ     0048H   ; Timer 3
(1)       0 : =70                ORG_INTRX:      equ     0070H   ; Serial receive
(1)       0 : =78                ORG_INTTX:      equ     0078H   ; Serial transmit\
(1)       0 :                    ;;; I/O Port
(1)       0 :                    ;;; Port 0,1,2 are used for data and address bus when #EA=0
(1)       0 :                    ;;; Port P37, P36, P35 are used for bus controls
(1)       0 : =FFC6              P3:     equ     0FFC6H            ; Port 3
(1)       0 : =4                 P32:            equ     00000100B ; Port 3.2
(1)       0 : =FFC7              P3CR:   equ     0FFC7H            ; Port 3 control register
(1)       0 : =80                P3CR_WAIT_ENB:  equ     10000000B ; Enable #WAIT
(1)       0 : =8                 P3CR_TXD:       equ     00001000B ; set to 1 then P33 is TXD
(1)       0 : =2                 P3CR_RXD:       equ     00000010B ; set to 1 then P31 is RXD
(1)       0 : =FFD1              P8CR:   equ     0FFD1H            ; Port 8 control register
(1)       0 : =1                 P8CR_EDGE:      equ     00000001B ; set to 1 then INT0 is edge detection
(1)       0 :                    ;;; Watchdog timer
(1)       0 : =FFD2              WDMOD:  equ     0FFD2H            ; Watchdog timer mode register
(1)       0 : =80                WDMOD_WDTE:     equ     10000000B ; set to 1 then Watchdog timer is enabled
(1)       0 : =FFD3              WDCR:   equ     0FFD3H            ; Watchdog timer control register
(1)       0 : =B1                WDCR_DISABLE:   equ     0B1H      ; Disable watchdog timer
(1)       0 : =4E                WDCR_CLEAR:     equ     04EH      ; Clear watchdog timer
(1)       0 :                    ;;; Interrupt request flag
(1)       0 : =FFC2              IRFL:   equ     0FFC2H
(1)       0 : =6                 IRFL_IRF0_bp:   equ     6       ; INT0 request flag
(1)       0 : =FFC3              IRFH:   equ     0FFC3H
(1)       0 : =4                 IRFH_IRF1_bp:   equ     4       ; INT1 request flag
(1)       0 : =1                 IRFH_IRFRX_bp:  equ     1       ; INTRX request flag
(1)       0 : =0                 IRFH_IRFTX_bp:  equ     0       ; INTTX request flag
(1)       0 :                    ;;; Interrupt enable flag
(1)       0 : =FFE6              INTEL:  equ     0FFE6H
(1)       0 : =4                 INTEL_IE1_bp:   equ     4       ; enable INT1
(1)       0 : =1                 INTEL_IERX_bp:  equ     1       ; enable INTRX
(1)       0 : =0                 INTEL_IETX_bp:  equ     0       ; enable INTTX
(1)       0 : =FFE7              INTEH:  equ     0FFE7H
(1)       0 : =2                 INTEH_IE0_bp:   equ     2       ; enable INT0
(1)       0 :                    ;;; Timer/Serial channel control register
(1)       0 : =FFDB              TRUN:   equ     0FFDBH
(1)       0 : =C0                TRUN_BR9600:    equ     11000000B ; Baud rate 9600bps
(1)       0 : =20                TRUN_PRRUN:     equ     00100000B ; Enable prescaler
(1)       0 :                    ;;; Serial channel mode register
(1)       0 : =FFE9              SCMOD:  equ     0FFE9H
(1)       0 : =20                SCMOD_RXE:      equ     00100000B ; Enable receiving data
(1)       0 : =8                 SCMOD_SM8:      equ     00001000B ; Serial transfer mode 8-bit UART
(1)       0 : =1                 SCMOD_SCBAUD:   equ     00000001B ; Serial transfer clock from baud rate generator
(1)       0 : =3                 SCMOD_SCBAUD2:  equ     00000011B ; Serial transfer clock from 1/2 baud rate generator
(1)       0 :                    ;;; Serial channel control register
(1)       0 : =FFEA              SCCR:   equ     0FFEAH
(1)       0 : =0                 SCCR_PE_DIS:    equ     00000000B ; Disable parity
(1)       0 : =10                SCCR_OERR:      equ     00010000B ; Overrun error flag
(1)       0 : =8                 SCCR_PERR:      equ     00001000B ; Parity error flag
(1)       0 : =4                 SCCR_FERR:      equ     00000100B ; Framing error flag
(1)       0 :                    ;;; Serial transmission/receiving buffer register
(1)       0 : =FFEB              SCBUF:  equ     0FFEBH
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =FFF0              USART:  equ     0FFF0H
          0 : =FFF0              USARTD: equ     USART+0         ; Data register
          0 : =FFF1              USARTS: equ     USART+1         ; Status register
          0 : =FFF1              USARTC: equ     USART+1         ; Control register
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =2                 ST_TxEMPTY_bp:  equ     2           ; Transmitter empty
(1)       0 : =1                 ST_RxRDY_bp:    equ     1           ; Receiver ready
(1)       0 : =0                 ST_TxRDY_bp:    equ     0           ; Transmitter ready
          0 :
       1000 :                            org     1000H
       1000 : =1000              stack:  equ     $
       1000 :
          0 :                            org     ORG_RESET
          0 : 3E 00 10                   ld      SP, stack
          3 : 1A 00 01                   jp      init_usart
          6 :
        100 :                            org     0100H
        100 :                    init_usart:
        100 : 37 F1 00                   ld      (USARTC), 0
        103 : 37 F1 00                   ld      (USARTC), 0
        106 : 37 F1 00                   ld      (USARTC), 0     ; safest way to sync mode
        109 :                    ;;; reset
        109 : 37 F1 40                   ld      (USARTC), CMD_IR_bm
        10C : 00                         nop
        10D : 00                         nop
        10E :                    ;;;  async 1stop 8data x16
        10E : 37 F1 4E                   ld      (USARTC), MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
        111 : 00                         nop
        112 : 00                         nop
        113 :                    ;;;  RTS/DTR, error reset, Rx enable, Tx enable
        113 : 37 F1 37                   ld      (USARTC), CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
        116 :
        116 : 1C 00 10                   call    arith
        119 : 36 00                      ld      A, 0
        11B : FF                         swi
        11C :
        11C :                    putchar:
        11C : A8 F1                      bit     ST_TxRDY_bp, (USARTS)
        11E : C6 FC                      jr      Z, putchar
        120 : 2F F0                      ld      (USARTD), A
        122 : 1E                         ret
        123 :
        123 :                    newline:
        123 : 56                         push    AF
        124 : 36 0D                      ld      A, 0DH
        126 : 1C 1C 01                   call    putchar
        129 : 36 0A                      ld      A, 0AH
        12B : 1C 1C 01                   call    putchar
        12E : 5E                         pop     AF
        12F : 1E                         ret
        130 :
        130 :                    putspace:
        130 : 56                         push    AF
        131 : 36 20                      ld      A, ' '
        133 : 1C 1C 01                   call    putchar
        136 : 5E                         pop     AF
        137 : 1E                         ret
        138 :
        138 :                    ;;; Print unsigned 16-bit integer as decimal
        138 :                    ;;; @param HL: value
        138 :                    ;;; @clobber HL
        138 :                    print_uint16:
        138 : 56                         push    AF
        139 :                    print_uint16_inner:
        139 : 24                         ld      A, H
        13A : FD 66                      or      A, L
        13C : C6 20                      jr      Z, print_uint16_zero
        13E : 50                         push    BC
        13F : 51                         push    DE
        140 : 48                         ld      BC, HL
        141 : 1C 48 01                   call    print_uint16_loop
        144 : 59                         pop     DE
        145 : 58                         pop     BC
        146 : 5E                         pop     AF
        147 : 1E                         ret
        148 :                    print_uint16_loop:
        148 : 20                         ld      A, B
        149 : F9 66                      or      A, C
        14B : FE D6                      ret     Z
        14D : 39 0A 00                   ld      DE, 10
        150 : 1C 7A 12                   call    udiv16
        153 : 52                         push    HL              ; push reminder
        154 : 1C 48 01                   call    print_uint16_loop
        157 : 5A                         pop     HL              ; pop reminder
        158 : 25                         ld      A, L
        159 : 68 30                      add     A, '0'
        15B : 1A 1C 01                   jp      putchar
        15E :                    print_uint16_zero:
        15E : 36 30                      ld      A, '0'
        160 : 1C 1C 01                   call    putchar
        163 : 5E                         pop     AF
        164 : 1E                         ret
        165 :
        165 :                    ;;; Print signed 16-bit integer as decimal
        165 :                    ;;; @param HL: value
        165 :                    ;;; @clobber HL
        165 :                    print_int16:
        165 : 56                         push    AF
        166 : FC AF                      bit     7, H
        168 : C6 CF                      jr      Z, print_uint16_inner
        16A : 36 2D                      ld      A, '-'
        16C : 1C 1C 01                   call    putchar
        16F : 7D FF FF                   xor     HL, 0FFFFH
        172 : 92                         inc     HL              ; HL=-value
        173 : C8 C4                      jr      print_uint16_inner
        175 :
        175 :                    expr:
        175 : 56                         push    AF
        176 : E4 4A                      ld      HL, (IX)
        178 : 1C 65 01                   call    print_int16
        17B : 1C 30 01                   call    putspace
        17E : 5E                         pop     AF
        17F : 1C 1C 01                   call    putchar
        182 : 1C 30 01                   call    putspace
        185 : E5 4A                      ld      HL, (IY)
        187 : C8 DC                      jr      print_int16
        189 :
        189 :                    answer:
        189 : 1C 30 01                   call    putspace
        18C : 36 3D                      ld      A, '='
        18E : 1C 1C 01                   call    putchar
        191 : 1C 30 01                   call    putspace
        194 : E3 00 02 4A                ld      HL, (vA)
        198 : 1C 65 01                   call    print_int16
        19B : 1A 23 01                   jp      newline
        19E :
        19E :                    comp:
        19E : 3C 00 02                   ld      IX, vA
        1A1 : 3D 02 02                   ld      IY, vB
        1A4 : 1C 23 12                   call    cmpsi2
        1A7 : C6 0C                      jr      Z, comp_eq
        1A9 : CA 06                      jr      GT, comp_gt
        1AB : C1 0C                      jr      LT, comp_lt
        1AD : 36 3F                      ld      A, '?'
        1AF : C8 0A                      jr      comp_out
        1B1 :                    comp_gt:
        1B1 : 36 3E                      ld      A, '>'
        1B3 : C8 06                      jr      comp_out
        1B5 :                    comp_eq:
        1B5 : 36 3D                      ld      A, '='
        1B7 : C8 02                      jr      comp_out
        1B9 :                    comp_lt:
        1B9 : 36 3C                      ld      A, '<'
        1BB :                    comp_out:
        1BB : 1C 75 01                   call    expr
        1BE : 1A 23 01                   jp      newline
        1C1 :
        200 :                            org     0200H
        200 :
        200 :                    vA:     ds      2
        202 :                    vB:     ds      2
        204 :
       1000 :                            org     1000H
       1000 :
       1000 :                    arith:
       1000 : 3C 00 02                   ld      IX, vA
       1003 : 3D 02 02                   ld      IY, vB
       1006 :
       1006 : EB 00 02 3F 00 00          ldw     (vA), 0
       100C : EB 02 02 3F A0 92          ldw     (vB), -28000
       1012 : 36 2D                      ld      A, '-'
       1014 : 1C 75 01                   call    expr
       1017 : 1C 0C 12                   call    negsi2
       101A : 1C 89 01                   call    answer          ; 28000
       101D :
       101D : EB 00 02 3F 00 00          ldw     (vA), 0
       1023 : EB 02 02 3F 60 6D          ldw     (vB), 28000
       1029 : 36 2D                      ld      A, '-'
       102B : 1C 75 01                   call    expr
       102E : 1C 0C 12                   call    negsi2
       1031 : 1C 89 01                   call    answer          ; -28000
       1034 :
       1034 : EB 00 02 3F 50 46          ldw     (vA), 18000
       103A : EB 02 02 3F 60 6D          ldw     (vB), 28000
       1040 : 36 2B                      ld      A, '+'
       1042 : 1C 75 01                   call    expr
       1045 : 1C 15 12                   call    addsi2
       1048 : 1C 89 01                   call    answer          ; -19536
       104B :
       104B : EB 00 02 3F 50 46          ldw     (vA), 18000
       1051 : EB 02 02 3F B0 B9          ldw     (vB), -18000
       1057 : 36 2B                      ld      A, '+'
       1059 : 1C 75 01                   call    expr
       105C : 1C 15 12                   call    addsi2
       105F : 1C 89 01                   call    answer          ; 0
       1062 :
       1062 : EB 00 02 3F B0 B9          ldw     (vA), -18000
       1068 : EB 02 02 3F B0 B9          ldw     (vB), -18000
       106E : 36 2B                      ld      A, '+'
       1070 : 1C 75 01                   call    expr
       1073 : 1C 15 12                   call    addsi2
       1076 : 1C 89 01                   call    answer          ; 29536
       1079 :
       1079 : EB 00 02 3F B0 B9          ldw     (vA), -18000
       107F : EB 02 02 3F A0 92          ldw     (vB), -28000
       1085 : 36 2D                      ld      A, '-'
       1087 : 1C 75 01                   call    expr
       108A : 1C 1C 12                   call    subsi2
       108D : 1C 89 01                   call    answer          ; 10000
       1090 :
       1090 : EB 00 02 3F 64 00          ldw     (vA), 100
       1096 : EB 02 02 3F 2C 01          ldw     (vB), 300
       109C : 36 2A                      ld      A, '*'
       109E : 1C 75 01                   call    expr
       10A1 : 1C 4D 12                   call    mulsi2
       10A4 : 1C 89 01                   call    answer          ; 30000
       10A7 :
       10A7 : EB 00 02 3F 2C 01          ldw     (vA), 300
       10AD : EB 02 02 3F 38 FF          ldw     (vB), -200
       10B3 : 36 2A                      ld      A, '*'
       10B5 : 1C 75 01                   call    expr
       10B8 : 1C 4D 12                   call    mulsi2
       10BB : 1C 89 01                   call    answer          ; 5536
       10BE :
       10BE : EB 00 02 3F 64 00          ldw     (vA), 100
       10C4 : EB 02 02 3F D4 FE          ldw     (vB), -300
       10CA : 36 2A                      ld      A, '*'
       10CC : 1C 75 01                   call    expr
       10CF : 1C 4D 12                   call    mulsi2
       10D2 : 1C 89 01                   call    answer          ; -30000
       10D5 :
       10D5 : EB 00 02 3F 38 FF          ldw     (vA), -200
       10DB : EB 02 02 3F 9C FF          ldw     (vB), -100
       10E1 : 36 2A                      ld      A, '*'
       10E3 : 1C 75 01                   call    expr
       10E6 : 1C 4D 12                   call    mulsi2
       10E9 : 1C 89 01                   call    answer          ; 20000
       10EC :
       10EC : EB 00 02 3F 30 75          ldw     (vA), 30000
       10F2 : EB 02 02 3F 64 00          ldw     (vB), 100
       10F8 : 36 2F                      ld      A, '/'
       10FA : 1C 75 01                   call    expr
       10FD : 1C A9 12                   call    udivsi2
       1100 : 1C 89 01                   call    answer          ; 300
       1103 :
       1103 : EB 00 02 3F 38 FF          ldw     (vA), -200
       1109 : EB 02 02 3F 64 00          ldw     (vB), 100
       110F : 36 2F                      ld      A, '/'
       1111 : 1C 75 01                   call    expr
       1114 : 1C B7 12                   call    divsi2
       1117 : 1C 89 01                   call    answer          ; -2
       111A :
       111A : EB 00 02 3F D0 8A          ldw     (vA), -30000
       1120 : EB 02 02 3F 38 FF          ldw     (vB), -200
       1126 : 36 2F                      ld      A, '/'
       1128 : 1C 75 01                   call    expr
       112B : 1C B7 12                   call    divsi2
       112E : 1C 89 01                   call    answer          ; 150
       1131 :
       1131 : EB 00 02 3F D0 8A          ldw     (vA), -30000
       1137 : EB 02 02 3F 4E 00          ldw     (vB), 78
       113D : 36 2F                      ld      A, '/'
       113F : 1C 75 01                   call    expr
       1142 : 1C B7 12                   call    divsi2
       1145 : 1C 89 01                   call    answer          ; -384
       1148 :
       1148 : EB 00 02 3F D0 FF          ldw     (vA), -48
       114E : EB 02 02 3F 1E 00          ldw     (vB), 30
       1154 : 1C 9E 01                   call    comp
       1157 :
       1157 : EB 00 02 3F 1E 00          ldw     (vA), 30
       115D : EB 02 02 3F D0 FF          ldw     (vB), -48
       1163 : 1C 9E 01                   call    comp
       1166 :
       1166 : EB 00 02 3F 88 13          ldw     (vA), 5000
       116C : EB 02 02 3F A0 0F          ldw     (vB), 4000
       1172 : 1C 9E 01                   call    comp
       1175 :
       1175 : EB 02 02 3F 88 13          ldw     (vB), 5000
       117B : 1C 9E 01                   call    comp
       117E :
       117E : EB 00 02 3F A0 0F          ldw     (vA), 4000
       1184 : 1C 9E 01                   call    comp
       1187 :
       1187 : EB 00 02 3F 78 EC          ldw     (vA), -5000
       118D : EB 02 02 3F 60 F0          ldw     (vB), -4000
       1193 : 1C 9E 01                   call    comp
       1196 :
       1196 : EB 02 02 3F 78 EC          ldw     (vB), -5000
       119C : 1C 9E 01                   call    comp
       119F :
       119F : EB 00 02 3F 60 F0          ldw     (vA), -4000
       11A5 : 1C 9E 01                   call    comp
       11A8 :
       11A8 : EB 00 02 3F BC 7F          ldw     (vA), 32700
       11AE : EB 02 02 3F 58 7F          ldw     (vB), 32600
       11B4 : 1C 9E 01                   call    comp
       11B7 :
       11B7 : EB 02 02 3F BC 7F          ldw     (vB), 32700
       11BD : 1C 9E 01                   call    comp
       11C0 :
       11C0 : EB 00 02 3F 58 7F          ldw     (vA), 32600
       11C6 : 1C 9E 01                   call    comp
       11C9 :
       11C9 : EB 00 02 3F 44 80          ldw     (vA), -32700
       11CF : EB 02 02 3F A8 80          ldw     (vB), -32600
       11D5 : 1C 9E 01                   call    comp
       11D8 :
       11D8 : EB 02 02 3F 44 80          ldw     (vB), -32700
       11DE : 1C 9E 01                   call    comp
       11E1 :
       11E1 : EB 00 02 3F A8 80          ldw     (vA), -32600
       11E7 : 1C 9E 01                   call    comp
       11EA :
       11EA : EB 00 02 3F 50 46          ldw     (vA), 18000
       11F0 : EB 02 02 3F A0 92          ldw     (vB), -28000
       11F6 : 1C 9E 01                   call    comp
       11F9 :
       11F9 : EB 02 02 3F 50 46          ldw     (vB), 18000
       11FF : 1C 9E 01                   call    comp
       1202 :
       1202 : EB 00 02 3F A0 92          ldw     (vA), -28000
       1208 : 1C 9E 01                   call    comp
       120B :
       120B : 1E                         ret
       120C :
       120C :                            include "arith.inc"
(1)    120C :                            cpu     tlcs90
(1)    120C :
(1)    120C :                    ;;; Negation; result = -value
(1)    120C :                    ;;; @param @IX: result
(1)    120C :                    ;;; @param @IY: value
(1)    120C :                    ;;; @clobber HL
(1)    120C :                    negsi2:
(1)    120C : E5 4A                      ld      HL, (IY)
(1)    120E : 7D FF FF                   xor     HL, 0FFFFH
(1)    1211 : 92                         inc     HL
(1)    1212 : EC 42                      ld      (IX), HL
(1)    1214 : 1E                         ret
(1)    1215 :
(1)    1215 :                    ;;; Signed addition: summand += addend
(1)    1215 :                    ;;; @param @IX: summand
(1)    1215 :                    ;;; @param @IY: addend
(1)    1215 :                    ;;; @clobber HL
(1)    1215 :                    addsi2:
(1)    1215 : E4 4A                      ld      HL, (IX)
(1)    1217 : E5 70                      add     HL, (IY)
(1)    1219 : EC 42                      ld      (IX), HL
(1)    121B : 1E                         ret
(1)    121C :
(1)    121C :                    ;;; Singed subtraction: minuend -= subtrahend
(1)    121C :                    ;;; @param @IX: minuend
(1)    121C :                    ;;; @param @IY: subtrahend
(1)    121C :                    ;;; @clobber HL
(1)    121C :                    subsi2:
(1)    121C : E4 4A                      ld      HL, (IX)
(1)    121E : E5 72                      sub     HL, (IY)
(1)    1220 : EC 42                      ld      (IX), HL
(1)    1222 : 1E                         ret
(1)    1223 :
(1)    1223 :                    ;;; Signed comparison: minuend - subtrahend
(1)    1223 :                    ;;; @param @IX: minuend
(1)    1223 :                    ;;; @param @IY: subtrahend
(1)    1223 :                    ;;; @return F.S, F.V
(1)    1223 :                    ;;; @clobber HL
(1)    1223 :                    cmpsi2:
(1)    1223 : E4 4A                      ld      HL, (IX)
(1)    1225 : E5 77                      cp      HL, (IY)
(1)    1227 : 1E                         ret
(1)    1228 :
(1)    1228 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    1228 :                    ;;; @param BC: multiplicand
(1)    1228 :                    ;;; @param DE: multiplier
(1)    1228 :                    ;;; @return HL: result
(1)    1228 :                    ;;; @clobber BC DE HL A
(1)    1228 :                    umul16:
(1)    1228 : 3A 00 00                   ld      HL, 0           ; result=0
(1)    122B : C8 0C                      jr      umul16_check
(1)    122D :                    umul16_loop:
(1)    122D : FA A7                      srl     D
(1)    122F : FB A3                      rr      E               ; multiplier >>= 1
(1)    1231 : CF 02                      jr      nc, umul16_next ; if lsb(multiplier) == 0
(1)    1233 : F8 70                      add     HL, BC          ; result += multiplicand
(1)    1235 :                    umul16_next:
(1)    1235 : F9 A6                      sll     C
(1)    1237 : F8 A2                      rl      B               ; multiplicand <<= 1
(1)    1239 :                    umul16_check:
(1)    1239 : 22                         ld      A, D
(1)    123A : FB 66                      or      A, E
(1)    123C : CE EF                      jr      nz, umul16_loop ; while multiplier != 0
(1)    123E :                    umul16_end:
(1)    123E : 1E                         ret
(1)    123F :
(1)    123F :                    ;;; Unsigned multiplication: multiplicand *= multiplier
(1)    123F :                    ;;; @param @IX: multiplicand
(1)    123F :                    ;;; @param @IY: multiplier
(1)    123F :                    ;;; @clobber HL A
(1)    123F :                    umulsi2:
(1)    123F : 50                         push    BC
(1)    1240 : 51                         push    DE
(1)    1241 : E4 48                      ld      BC, (IX)        ; BC=multiplicand
(1)    1243 : E5 49                      ld      DE, (IY)        ; DE=multiplier
(1)    1245 : 1C 28 12                   call    umul16          ; HL=multiplicand * multiplier
(1)    1248 : EC 42                      ld      (IX), HL
(1)    124A : 59                         pop     DE
(1)    124B : 58                         pop     BC
(1)    124C : 1E                         ret
(1)    124D :
(1)    124D :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)    124D :                    ;;; @param @IX: multiplicand
(1)    124D :                    ;;; @param @IY: multiplier
(1)    124D :                    ;;; @clobber HL A
(1)    124D :                    mulsi2:
(1)    124D : 50                         push    BC
(1)    124E : 51                         push    DE
(1)    124F : E4 4A                      ld      HL, (IX)        ; HL=multiplicand
(1)    1251 : 24                         ld      A, H            ; A=high(multiplicand)
(1)    1252 : FC AF                      bit     7, H
(1)    1254 : C6 04                      jr      Z, mulsi2_abs_muliplicand
(1)    1256 : 7D FF FF                   xor     HL, 0FFFFH
(1)    1259 : 92                         inc     HL              ; multiplicand = -multiplicand
(1)    125A :                    mulsi2_abs_muliplicand:
(1)    125A : 48                         ld      BC, HL          ; BC=abs(multiplicand)
(1)    125B : E5 4A                      ld      HL, (IY)        ; HL=multiplier
(1)    125D : FC 65                      xor     A, H            ; A=high(multiplicand^multiplier)
(1)    125F : FC AF                      bit     7, H
(1)    1261 : C6 04                      jr      Z, mulsi2_multiply
(1)    1263 : 7D FF FF                   xor     HL, 0FFFFH
(1)    1266 : 92                         inc     HL              ; multiplier = -multiplier
(1)    1267 :                    mulsi2_multiply:
(1)    1267 : 49                         ld      DE, HL          ; DE=abs(multiplyer)
(1)    1268 : 56                         push    AF              ; save sign
(1)    1269 : 1C 28 12                   call    umul16          ; HL = multiplicand * multiplier
(1)    126C : 5E                         pop     AF              ; A=sign
(1)    126D : FE AF                      bit     7, A
(1)    126F : C6 04                      jr      Z, mulsi2_return
(1)    1271 : 7D FF FF                   xor     HL, 0FFFFH
(1)    1274 : 92                         inc     HL              ; result = -result
(1)    1275 :                    mulsi2_return:
(1)    1275 : EC 42                      ld      (IX), HL
(1)    1277 : 59                         pop     DE
(1)    1278 : 58                         pop     BC
(1)    1279 : 1E                         ret
(1)    127A :
(1)    127A :                    ;;; Unsigned division: divident / divisor = quotient ... reminder
(1)    127A :                    ;;; @praram BC: divident
(1)    127A :                    ;;; @praram DE: divisor
(1)    127A :                    ;;; @return HL: reminder
(1)    127A :                    ;;; @return BC: quotient
(1)    127A :                    ;;; @clobber BC DE HL A
(1)    127A :                    udiv16:
(1)    127A : 22                         ld      A, D
(1)    127B : FB 66                      or      A, E
(1)    127D : FE D6                      ret     Z               ; divide by zero
(1)    127F : 36 01                      ld      A, 1            ; A=bits
(1)    1281 : C8 05                      jr      udiv16_prep
(1)    1283 :                    udiv16_prep_loop:
(1)    1283 : FB A6                      sll     E
(1)    1285 : FA A2                      rl      D               ; divisor <<= 1
(1)    1287 : 86                         inc     A               ; ++bits
(1)    1288 :                    udiv16_prep:                    ; while msb(divisor) == 0
(1)    1288 : FA AF                      bit     7, D
(1)    128A : C6 F7                      jr      Z, udiv16_prep_loop
(1)    128C : 40                         ld      HL, BC          ; HL=divident
(1)    128D : 38 00 00                   ld      BC, 0           ; BC=quotient
(1)    1290 : C8 08                      jr      udiv16_enter_loop
(1)    1292 :                    udiv16_loop:
(1)    1292 : FA A7                      srl     D
(1)    1294 : FB A3                      rr      E               ; divisor >>= 1
(1)    1296 : F9 A6                      sll     C
(1)    1298 : F8 A2                      rl      B               ; quotient <<= 1
(1)    129A :                    udiv16_enter_loop:
(1)    129A : F9 72                      sub     HL, DE          ; divident -= divisor
(1)    129C : C7 05                      jr      ULT, udiv16_readd ; if divident < 0
(1)    129E : 81                         inc     C                 ; quotient |= 1
(1)    129F : 8E                         dec     A
(1)    12A0 : CE F0                      jr      NZ, udiv16_loop ; while bits != 0
(1)    12A2 : 1E                         ret
(1)    12A3 :                    udiv16_readd:
(1)    12A3 : F9 70                      add     HL, DE          ; divident += divisor
(1)    12A5 : 8E                         dec     A               ; --bits
(1)    12A6 : CE EA                      jr      NZ, udiv16_loop ; while bits != 0
(1)    12A8 : 1E                         ret
(1)    12A9 :
(1)    12A9 :                    ;;; Unsigned division: dividend /= divisor
(1)    12A9 :                    ;;; @praram @IX: dividend
(1)    12A9 :                    ;;; @praram @IY: divisor
(1)    12A9 :                    ;;; @clobber HL A
(1)    12A9 :                    udivsi2:
(1)    12A9 : 50                         push    BC
(1)    12AA : 51                         push    DE
(1)    12AB : E4 48                      ld      BC, (IX)
(1)    12AD : E5 49                      ld      DE, (IY)
(1)    12AF : 1C 7A 12                   call    udiv16
(1)    12B2 : EC 40                      ld      (IX), BC
(1)    12B4 : 59                         pop     DE
(1)    12B5 : 58                         pop     BC
(1)    12B6 : 1E                         ret
(1)    12B7 :
(1)    12B7 :                    ;;; Signed division: divident *= divisor
(1)    12B7 :                    ;;; @param @IX: divident
(1)    12B7 :                    ;;; @param @IY: divisor
(1)    12B7 :                    ;;; @clobber HL A
(1)    12B7 :                    divsi2:
(1)    12B7 : 50                         push    BC
(1)    12B8 : 51                         push    DE
(1)    12B9 : E4 4A                      ld      HL, (IX)        ; HL=divident
(1)    12BB : 24                         ld      A, H            ; A=high(divident)
(1)    12BC : FC AF                      bit     7, H
(1)    12BE : C6 04                      jr      Z, divsi2_abs_divident
(1)    12C0 : 7D FF FF                   xor     HL, 0FFFFH
(1)    12C3 : 92                         inc     HL              ; divident = -divident
(1)    12C4 :                    divsi2_abs_divident:
(1)    12C4 : 48                         ld      BC, HL          ; BC=abs(divident)
(1)    12C5 : E5 4A                      ld      HL, (IY)        ; HL=divisor
(1)    12C7 : FC 65                      xor     A, H            ; A=high(divident^divisor)
(1)    12C9 : FC AF                      bit     7, H
(1)    12CB : C6 04                      jr      Z, divsi2_divide
(1)    12CD : 7D FF FF                   xor     HL, 0FFFFH
(1)    12D0 : 92                         inc     HL              ; divisor = -divisor
(1)    12D1 :                    divsi2_divide:
(1)    12D1 : 49                         ld      DE, HL          ; DE=abs(dvisor)
(1)    12D2 : 56                         push    AF              ; save sign
(1)    12D3 : 1C 7A 12                   call    udiv16          ; BC = divident / divisor
(1)    12D6 : 5E                         pop     AF              ; A=sign
(1)    12D7 : 40                         ld      HL, BC          ; HL=quotient
(1)    12D8 : FE AF                      bit     7, A
(1)    12DA : C6 04                      jr      Z, divsi2_return
(1)    12DC : 7D FF FF                   xor     HL, 0FFFFH
(1)    12DF : 92                         inc     HL              ; quotient=-quotient
(1)    12E0 :                    divsi2_return:
(1)    12E0 : EC 42                      ld      (IX), HL
(1)    12E2 : 59                         pop     DE
(1)    12E3 : 58                         pop     BC
(1)    12E4 : 1E                         ret
(1)    12E5 :
(1)    12E5 :                    ;;; Local Variables:
(1)    12E5 :                    ;;; mode: asm
(1)    12E5 :                    ;;; End:
(1)    12E5 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       12E5 :
       12E5 :                            end

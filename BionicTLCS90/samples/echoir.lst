          0 :                            cpu     tlcs90
          0 :                            include "tmp90c802.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; TMP90C802
(1)       0 :                            include "tlcs90.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; TLCS90
(2)       0 :                    ;;; F Register
(2)       0 : =80                F_SIGN:         equ     10000000B ; set to 1 if negative
(2)       0 : =40                F_ZERO:         equ     01000000B ; set to 1 if zero
(2)       0 : =20                F_INTENB:       equ     00100000B ; set to 1 if interrupt enabled
(2)       0 : =10                F_HALF_CARRY:   equ     00010000B ; set to 1 if carry from bit-3
(2)       0 : =8                 F_EXTENDED:     equ     00001000B ; set to 1 if extended carry
(2)       0 : =4                 F_OVERFLOW:     equ     00000100B ; set to 1 if overflow
(2)       0 : =2                 F_SUBTRACT:     equ     00000010B ; set to 1 if subtraction
(2)       0 : =1                 F_CARRY:        equ     00000001B ; set to 1 if carry
(2)       0 :                    ;;; Interrupt origin
(2)       0 : =0                 ORG_RESET:      equ     0000H   ; RESET
(2)       0 : =10                ORG_SWI:        equ     0010H   ; SWI
(2)       0 : =18                ORG_NMI:        equ     0018H   ; NMI
(2)       0 : =20                ORG_INTWD:      equ     0020H   ; Watchdog
(2)       0 : =28                ORG_INT0:       equ     0028H   ; INT0
(2)       0 : =58                ORG_INT1:       equ     0058H   ; INT1
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =30                ORG_INTT0:      equ     0030H   ; Timer 0
(1)       0 : =38                ORG_INTT1:      equ     0038H   ; Timer 1
(1)       0 : =40                ORG_INTT2:      equ     0040H   ; Timer 2
(1)       0 : =48                ORG_INTT3:      equ     0048H   ; Timer 3
(1)       0 : =70                ORG_INTRX:      equ     0070H   ; Serial receive
(1)       0 : =78                ORG_INTTX:      equ     0078H   ; Serial transmit\
(1)       0 :                    ;;; I/O Port
(1)       0 :                    ;;; Port 0,1,2 are used for data and address bus when #EA=0
(1)       0 :                    ;;; Port P37, P36, P35 are used for bus controls
(1)       0 : =FFC6              P3:     equ     0FFC6H            ; Port 3
(1)       0 : =4                 P32:            equ     00000100B ; Port 3.2
(1)       0 : =FFC7              P3CR:   equ     0FFC7H            ; Port 3 control register
(1)       0 : =80                P3CR_WAIT_ENB:  equ     10000000B ; Enable #WAIT
(1)       0 : =8                 P3CR_TXD:       equ     00001000B ; set to 1 then P33 is TXD
(1)       0 : =2                 P3CR_RXD:       equ     00000010B ; set to 1 then P31 is RXD
(1)       0 : =FFD1              P8CR:   equ     0FFD1H            ; Port 8 control register
(1)       0 : =1                 P8CR_EDGE:      equ     00000001B ; set to 1 then INT0 is edge detection
(1)       0 :                    ;;; Watchdog timer
(1)       0 : =FFD2              WDMOD:  equ     0FFD2H            ; Watchdog timer mode register
(1)       0 : =80                WDMOD_WDTE:     equ     10000000B ; set to 1 then Watchdog timer is enabled
(1)       0 : =FFD3              WDCR:   equ     0FFD3H            ; Watchdog timer control register
(1)       0 : =B1                WDCR_DISABLE:   equ     0B1H      ; Disable watchdog timer
(1)       0 : =4E                WDCR_CLEAR:     equ     04EH      ; Clear watchdog timer
(1)       0 :                    ;;; Interrupt request flag
(1)       0 : =FFC2              IRFL:   equ     0FFC2H
(1)       0 : =6                 IRFL_IRF0_bp:   equ     6       ; INT0 request flag
(1)       0 : =FFC3              IRFH:   equ     0FFC3H
(1)       0 : =4                 IRFH_IRF1_bp:   equ     4       ; INT1 request flag
(1)       0 : =1                 IRFH_IRFRX_bp:  equ     1       ; INTRX request flag
(1)       0 : =0                 IRFH_IRFTX_bp:  equ     0       ; INTTX request flag
(1)       0 :                    ;;; Interrupt enable flag
(1)       0 : =FFE6              INTEL:  equ     0FFE6H
(1)       0 : =4                 INTEL_IE1_bp:   equ     4       ; enable INT1
(1)       0 : =1                 INTEL_IERX_bp:  equ     1       ; enable INTRX
(1)       0 : =0                 INTEL_IETX_bp:  equ     0       ; enable INTTX
(1)       0 : =FFE7              INTEH:  equ     0FFE7H
(1)       0 : =2                 INTEH_IE0_bp:   equ     2       ; enable INT0
(1)       0 :                    ;;; Timer/Serial channel control register
(1)       0 : =FFDB              TRUN:   equ     0FFDBH
(1)       0 : =C0                TRUN_BR9600:    equ     11000000B ; Baud rate 9600bps
(1)       0 : =20                TRUN_PRRUN:     equ     00100000B ; Enable prescaler
(1)       0 :                    ;;; Serial channel mode register
(1)       0 : =FFE9              SCMOD:  equ     0FFE9H
(1)       0 : =20                SCMOD_RXE:      equ     00100000B ; Enable receiving data
(1)       0 : =8                 SCMOD_SM8:      equ     00001000B ; Serial transfer mode 8-bit UART
(1)       0 : =1                 SCMOD_SCBAUD:   equ     00000001B ; Serial transfer clock from baud rate generator
(1)       0 : =3                 SCMOD_SCBAUD2:  equ     00000011B ; Serial transfer clock from 1/2 baud rate generator
(1)       0 :                    ;;; Serial channel control register
(1)       0 : =FFEA              SCCR:   equ     0FFEAH
(1)       0 : =0                 SCCR_PE_DIS:    equ     00000000B ; Disable parity
(1)       0 : =10                SCCR_OERR:      equ     00010000B ; Overrun error flag
(1)       0 : =8                 SCCR_PERR:      equ     00001000B ; Parity error flag
(1)       0 : =4                 SCCR_FERR:      equ     00000100B ; Framing error flag
(1)       0 :                    ;;; Serial transmission/receiving buffer register
(1)       0 : =FFEB              SCBUF:  equ     0FFEBH
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =FFF0              USART:          equ     0FFF0H
          0 : =FFF0              USARTD:         equ     USART+0 ; Receive/Transmit data
          0 : =FFF1              USARTS:         equ     USART+1 ; Srtatus register
          0 : =FFF1              USARTC:         equ     USART+1 ; Control register
          0 : =FFF2              USARTRV:        equ     USART+2 ; Receive interrupt vector (ORG_*)
          0 : =FFF3              USARTTV:        equ     USART+3 ; Transmit interrupt vector (ORG_*)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =2                 ST_TxEMPTY_bp:  equ     2           ; Transmitter empty
(1)       0 : =1                 ST_RxRDY_bp:    equ     1           ; Receiver ready
(1)       0 : =0                 ST_TxRDY_bp:    equ     0           ; Transmitter ready
          0 :
       2000 :                            org     2000H
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 :
       1000 :                            org     1000H
       1000 : =1000              stack:  equ     $
       1000 :
          0 :                            org     ORG_RESET
          0 : 1A 00 01                   jp      init
          3 :
         28 :                            org     ORG_INT0
         28 :                    ;        org     ORG_INT1
         28 : 1A B4 01                   jp      isr_intr
         2B :
        100 :                            org     0100H
        100 :                    init:
        100 : 3E 00 10                   ld      sp, stack
        103 : 3C 00 20                   ld      ix, rx_queue
        106 : 30 80                      ld      b, rx_queue_size
        108 : 1C 47 01                   call    queue_init
        10B :                    init_usart:
        10B : 37 F1 00                   ld      (USARTC), 0
        10E : 37 F1 00                   ld      (USARTC), 0
        111 : 37 F1 00                   ld      (USARTC), 0     ; safest way to sync mode
        114 :                    ;;; reset
        114 : 37 F1 40                   ld      (USARTC), CMD_IR_bm
        117 : 00                         nop
        118 : 00                         nop
        119 :                    ;;; async 1stop 8data x16
        119 : 37 F1 4E                   ld      (USARTC), MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
        11C : 00                         nop
        11D : 00                         nop
        11E :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
        11E : 37 F1 37                   ld      (USARTC), CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
        121 :                    ;;; enable RxRDY interrupt using INT0
        121 : 37 F2 28                   ld      (USARTRV), ORG_INT0
        124 :                    ;        ld      (USARTRV), ORG_INT1
        124 :                    ;;; disable TxRDY interrupt
        124 : 37 F3 00                   ld      (USARTTV), ORG_RESET
        127 :                    ;;; Enable INT0
        127 : BA E7                      set     INTEH_IE0_bp, (INTEH)
        129 :                    ;        set     INTEL_IE1_bp, (INTEL)
        129 : 03                         ei
        12A :
        12A : 3C 00 20                   ld      ix, rx_queue
        12D :                    receive_loop:
        12D : 02                         di                      ; Disable INTR
        12E : 1C 8E 01                   call    queue_remove
        131 : 03                         ei                      ; Enable INTR
        132 : CF F9                      jr      nc, receive_loop
        134 : FE 66                      or      a, a
        136 : CE 01                      jr      nz, transmit_loop
        138 : FF                         swi                     ; A=0
        139 :                    transmit_loop:
        139 : A8 F1                      bit     ST_TxRDY_bp, (USARTS)
        13B : C6 FC                      jr      z, transmit_loop
        13D :                    transmit_data:
        13D : 2F F0                      ld      (USARTD), a
        13F : 6F 0D                      cp      a, 0DH
        141 : CE EA                      jr      nz, receive_loop
        143 : 36 0A                      ld      a, 0AH
        145 : C8 F2                      jr      transmit_loop
        147 :
        147 :                            include "queue.inc"
(1)     147 :                    ;;; [queue] queue structure
(1)     147 : =0                 queue_len:      equ     0       ; queue length
(1)     147 : =1                 queue_size:     equ     1       ; buffer size
(1)     147 : =2                 queue_put:      equ     2       ; queue put index
(1)     147 : =3                 queue_get:      equ     3       ; queue get index
(1)     147 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     147 :
(1)     147 :                    ;;; [queue] Initialize queue
(1)     147 :                    ;;; @param IX queue work space pointer
(1)     147 :                    ;;; @param B queue work space size
(1)     147 :                    ;;; @clobber B IX
(1)     147 :                    queue_init:
(1)     147 : F4 00 37 00                ld      (ix+queue_len), 0
(1)     14B : F8 6A 04                   sub     b, queue_buf
(1)     14E : F4 01 20                   ld      (ix+queue_size), b
(1)     151 : F8 68 02                   add     b, 2            ; for queue_put and queue_get
(1)     154 : F4 02 3C                   lda     ix, ix+queue_put
(1)     157 :                    queue_init_loop:
(1)     157 : EC 37 00                   ld      (ix), 0
(1)     15A : 94                         inc     ix
(1)     15B : 18 FA                      djnz    queue_init_loop
(1)     15D : 1E                         ret
(1)     15E :
(1)     15E :                    ;;; [queue] Add an element to queue
(1)     15E :                    ;;; @param IX queue work space pointer
(1)     15E :                    ;;; @param A an element
(1)     15E :                    ;;; @return F.C 0 if queue is full
(1)     15E :                    queue_add:
(1)     15E : 56                         push    af              ; save an element
(1)     15F : F0 00 2E                   ld      a, (ix+queue_len)
(1)     162 : F0 01 67                   cp      a, (ix+queue_size)
(1)     165 : C7 03                      jr      c, queue_add_store ; queue_len < queue_size
(1)     167 : 5E                         pop     af
(1)     168 : 0C                         rcf                     ; clear carry
(1)     169 : 1E                         ret
(1)     16A :                    queue_add_store:
(1)     16A : 86                         inc     a               ; queue_len++
(1)     16B : F4 00 26                   ld      (ix+queue_len), a
(1)     16E : 52                         push    hl
(1)     16F : F4 04 3A                   lda     hl, ix+queue_buf
(1)     172 : F0 02 2E                   ld      a, (ix+queue_put)
(1)     175 : F7 3A                      lda     hl, hl+a
(1)     177 : F2 03 2E                   ld      a, (sp+3)       ; get element
(1)     17A : EA 26                      ld      (hl), a         ; store element
(1)     17C : 5A                         pop     hl
(1)     17D : F0 02 2E                   ld      a, (ix+queue_put)
(1)     180 : 86                         inc     a
(1)     181 : F0 01 67                   cp      a, (ix+queue_size)
(1)     184 : C7 02                      jr      c, queue_add_update ; queue_put < queue_size
(1)     186 : 36 00                      ld      a, 0                ; wrap around
(1)     188 :                    queue_add_update:
(1)     188 : F4 02 26                   ld      (ix+queue_put), a
(1)     18B : 5E                         pop     af
(1)     18C : 0D                         scf                     ; set carry
(1)     18D : 1E                         ret
(1)     18E :
(1)     18E :                    ;;; [queue] Remove an element from queue
(1)     18E :                    ;;; @param IX queue work space pointer
(1)     18E :                    ;;; @return A an element
(1)     18E :                    ;;; @return F.C 0 if queue is empty
(1)     18E :                    queue_remove:
(1)     18E : E4 2E                      ld      a, (ix)           ; queue_len
(1)     190 : FE 66                      or      a, a              ; clear carry
(1)     192 : FE D6                      ret     z                 ; carry is cleared by |or|
(1)     194 : 52                         push    hl
(1)     195 : 8E                         dec     a               ; queue_len--
(1)     196 : F4 00 26                   ld      (ix+queue_len), a
(1)     199 : F4 04 3A                   lda     hl, ix+queue_buf
(1)     19C : F0 03 2E                   ld      a, (ix+queue_get)
(1)     19F : F3 2E                      ld      a, (hl+a)       ; read element
(1)     1A1 : 2C                         ld      h, a            ; save element
(1)     1A2 : F0 03 2E                   ld      a, (ix+queue_get)
(1)     1A5 : 86                         inc     a
(1)     1A6 : F0 01 67                   cp      a, (ix+queue_size)
(1)     1A9 : C7 02                      jr      c, queue_remove_update ; queue_get < queue_size
(1)     1AB : 36 00                      ld      a, 0                   ; wrap around
(1)     1AD :                    queue_remove_update:
(1)     1AD : F4 03 26                   ld      (ix+queue_get), a
(1)     1B0 : 24                         ld      a, h            ; restore element
(1)     1B1 : 5A                         pop     hl
(1)     1B2 : 0D                         scf                     ; set carry
(1)     1B3 : 1E                         ret
(1)     1B4 :
(1)     1B4 :                    ;;; Local Variables:
(1)     1B4 :                    ;;; mode: asm
(1)     1B4 :                    ;;; End:
(1)     1B4 :                    ;;; vim: set ft=asm et ts=4 sw=4:
        1B4 :
        1B4 :                    isr_intr:
        1B4 : A9 F1                      bit     ST_RxRDY_bp, (USARTS)
        1B6 : C6 0A                      jr      z, isr_intr_recv_end
        1B8 : 27 F0                      ld      a, (USARTD)
        1BA : 54                         push    ix
        1BB : 3C 00 20                   ld      ix, rx_queue
        1BE : 1C 5E 01                   call    queue_add
        1C1 : 5C                         pop     ix
        1C2 :                    isr_intr_recv_end:
        1C2 : 1F                         reti

          0 :                            cpu     tlcs90
          0 :                            include "tmp90c802.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; TMP90C802
(1)       0 :                            include "tlcs90.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; TLCS90
(2)       0 :                    ;;; F Register
(2)       0 : =80                F_SIGN:         equ     10000000B ; set to 1 if negative
(2)       0 : =40                F_ZERO:         equ     01000000B ; set to 1 if zero
(2)       0 : =20                F_INTENB:       equ     00100000B ; set to 1 if interrupt enabled
(2)       0 : =10                F_HALF_CARRY:   equ     00010000B ; set to 1 if carry from bit-3
(2)       0 : =8                 F_EXTENDED:     equ     00001000B ; set to 1 if extended carry
(2)       0 : =4                 F_OVERFLOW:     equ     00000100B ; set to 1 if overflow
(2)       0 : =2                 F_SUBTRACT:     equ     00000010B ; set to 1 if subtraction
(2)       0 : =1                 F_CARRY:        equ     00000001B ; set to 1 if carry
(2)       0 :                    ;;; Interrupt origin
(2)       0 : =0                 ORG_RESET:      equ     0000H   ; RESET
(2)       0 : =10                ORG_SWI:        equ     0010H   ; SWI
(2)       0 : =18                ORG_NMI:        equ     0018H   ; NMI
(2)       0 : =20                ORG_INTWD:      equ     0020H   ; Watchdog
(2)       0 : =28                ORG_INT0:       equ     0028H   ; INT0
(2)       0 : =58                ORG_INT1:       equ     0058H   ; INT1
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =30                ORG_INTT0:      equ     0030H   ; Timer 0
(1)       0 : =38                ORG_INTT1:      equ     0038H   ; Timer 1
(1)       0 : =40                ORG_INTT2:      equ     0040H   ; Timer 2
(1)       0 : =48                ORG_INTT3:      equ     0048H   ; Timer 3
(1)       0 : =70                ORG_INTRX:      equ     0070H   ; Serial receive
(1)       0 : =78                ORG_INTTX:      equ     0078H   ; Serial transmit\
(1)       0 :                    ;;; I/O Port
(1)       0 :                    ;;; Port 0,1,2 are used for data and address bus when #EA=0
(1)       0 :                    ;;; Port P37, P36, P35 are used for bus controls
(1)       0 : =FFC6              P3:     equ     0FFC6H            ; Port 3
(1)       0 : =4                 P32:            equ     00000100B ; Port 3.2
(1)       0 : =FFC7              P3CR:   equ     0FFC7H            ; Port 3 control register
(1)       0 : =80                P3CR_WAIT_ENB:  equ     10000000B ; Enable #WAIT
(1)       0 : =8                 P3CR_TXD:       equ     00001000B ; set to 1 then P33 is TXD
(1)       0 : =2                 P3CR_RXD:       equ     00000010B ; set to 1 then P31 is RXD
(1)       0 : =FFD1              P8CR:   equ     0FFD1H            ; Port 8 control register
(1)       0 : =1                 P8CR_EDGE:      equ     00000001B ; set to 1 then INT0 is edge detection
(1)       0 :                    ;;; Watchdog timer
(1)       0 : =FFD2              WDMOD:  equ     0FFD2H            ; Watchdog timer mode register
(1)       0 : =80                WDMOD_WDTE:     equ     10000000B ; set to 1 then Watchdog timer is enabled
(1)       0 : =FFD3              WDCR:   equ     0FFD3H            ; Watchdog timer control register
(1)       0 : =B1                WDCR_DISABLE:   equ     0B1H      ; Disable watchdog timer
(1)       0 : =4E                WDCR_CLEAR:     equ     04EH      ; Clear watchdog timer
(1)       0 :                    ;;; Interrupt request flag
(1)       0 : =FFC2              IRFL:   equ     0FFC2H
(1)       0 : =6                 IRFL_IRF0_bp:   equ     6       ; INT0 request flag
(1)       0 : =FFC3              IRFH:   equ     0FFC3H
(1)       0 : =4                 IRFH_IRF1_bp:   equ     4       ; INT1 request flag
(1)       0 : =1                 IRFH_IRFRX_bp:  equ     1       ; INTRX request flag
(1)       0 : =0                 IRFH_IRFTX_bp:  equ     0       ; INTTX request flag
(1)       0 :                    ;;; Interrupt enable flag
(1)       0 : =FFE6              INTEL:  equ     0FFE6H
(1)       0 : =4                 INTEL_IE1_bp:   equ     4       ; enable INT1
(1)       0 : =1                 INTEL_IERX_bp:  equ     1       ; enable INTRX
(1)       0 : =0                 INTEL_IETX_bp:  equ     0       ; enable INTTX
(1)       0 : =FFE7              INTEH:  equ     0FFE7H
(1)       0 : =2                 INTEH_IE0_bp:   equ     2       ; enable INT0
(1)       0 :                    ;;; Timer/Serial channel control register
(1)       0 : =FFDB              TRUN:   equ     0FFDBH
(1)       0 : =C0                TRUN_BR9600:    equ     11000000B ; Baud rate 9600bps
(1)       0 : =20                TRUN_PRRUN:     equ     00100000B ; Enable prescaler
(1)       0 :                    ;;; Serial channel mode register
(1)       0 : =FFE9              SCMOD:  equ     0FFE9H
(1)       0 : =20                SCMOD_RXE:      equ     00100000B ; Enable receiving data
(1)       0 : =8                 SCMOD_SM8:      equ     00001000B ; Serial transfer mode 8-bit UART
(1)       0 : =1                 SCMOD_SCBAUD:   equ     00000001B ; Serial transfer clock from baud rate generator
(1)       0 : =3                 SCMOD_SCBAUD2:  equ     00000011B ; Serial transfer clock from 1/2 baud rate generator
(1)       0 :                    ;;; Serial channel control register
(1)       0 : =FFEA              SCCR:   equ     0FFEAH
(1)       0 : =0                 SCCR_PE_DIS:    equ     00000000B ; Disable parity
(1)       0 : =10                SCCR_OERR:      equ     00010000B ; Overrun error flag
(1)       0 : =8                 SCCR_PERR:      equ     00001000B ; Parity error flag
(1)       0 : =4                 SCCR_FERR:      equ     00000100B ; Framing error flag
(1)       0 :                    ;;; Serial transmission/receiving buffer register
(1)       0 : =FFEB              SCBUF:  equ     0FFEBH
          0 :
       2000 :                            org     2000H
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       ds      tx_queue_size
       2100 : 01                 tx_intr_enable: db      1
       2101 :
       1000 :                            org     1000H
       1000 : =1000              stack:  equ     $
       1000 :
          0 :                            org     ORG_RESET
          0 : 1A 00 01                   jp      init
          3 :
         70 :                            org     ORG_INTRX
         70 : 1A 2B 02                   jp      isr_intr_rx
         73 :
         78 :                            org     ORG_INTTX
         78 : 1A 3A 02                   jp      isr_intr_tx
         7B :
         7B : =8A                P3CR_SET:       equ     P3CR_WAIT_ENB|P3CR_TXD|P3CR_RXD
         7B : =29                SCMOD_SET:      equ     SCMOD_RXE|SCMOD_SM8|SCMOD_SCBAUD ; 8-bit
         7B : =E0                TRUN_SET:       equ     TRUN_BR9600|TRUN_PRRUN           ; 9600bps
         7B : =0                 SCCR_SET:       equ     SCCR_PE_DIS ; no parity, no handshake
         7B :
        100 :                            org     0100H
        100 :                    init:
        100 : 3E 00 10                   ld      sp, stack
        103 : 3C 00 20                   ld      ix, rx_queue
        106 : 30 80                      ld      b, rx_queue_size
        108 : 1C BE 01                   call     queue_init
        10B : 3C 80 20                   ld      ix, tx_queue
        10E : 30 80                      ld      b, tx_queue_size
        110 : 1C BE 01                   call     queue_init
        113 :                    init_uart:
        113 : 37 C7 8A                   ld      (P3CR), P3CR_SET
        116 : 37 E9 29                   ld      (SCMOD), SCMOD_SET
        119 : 37 DB E0                   ld      (TRUN), TRUN_SET
        11C : 37 EA 00                   ld      (SCCR), SCCR_SET
        11F : B9 E6                      set     INTEL_IERX_bp, (INTEL) ; Enable INTRX
        121 : 03                         ei
        122 :
        122 :                    receive_loop:
        122 : 1C 9D 01                   call    getchar
        125 : CF FB                      jr      nc, receive_loop
        127 : FE 66                      or      a, a
        129 : CE 01                      jr      nz, echo_back
        12B : FF                         swi                     ; A=0
        12C :                    echo_back:
        12C : 28                         ld      b, a
        12D : 1C A8 01                   call    putchar         ; echo
        130 : 36 20                      ld      a, ' '          ; space
        132 : 1C A8 01                   call    putchar
        135 : 1C 4F 01                   call    put_hex8        ; print in hex
        138 : 36 20                      ld      a, ' '          ; space
        13A : 1C A8 01                   call    putchar
        13D : 1C 72 01                   call    put_bin8        ; print in binary
        140 : 1C 45 01                   call    newline
        143 : C8 DD                      jr      receive_loop
        145 :
        145 :                    ;;; Put newline
        145 :                    ;;; @clobber A
        145 :                    newline:
        145 : 36 0D                      ld      a, 0DH
        147 : 1C A8 01                   call    putchar
        14A : 36 0A                      ld      a, 0AH
        14C : 1A A8 01                   jp      putchar
        14F :
        14F :                    ;;; Print uint8_t in hex
        14F :                    ;;; @param B uint8_t value to be printed in hex.
        14F :                    ;;; @clobber A
        14F :                    put_hex8:
        14F : 36 30                      ld      a, '0'
        151 : 1C A8 01                   call    putchar
        154 : 36 78                      ld      a, 'x'
        156 : 1C A8 01                   call    putchar
        159 : 20                         ld      a, b
        15A : A6                         slla
        15B : A6                         slla
        15C : A6                         slla
        15D : A6                         slla
        15E : 1C 62 01                   call    put_hex4
        161 : 20                         ld      a, b
        162 :                    put_hex4:
        162 : 6C 0F                      and     a, 0FH
        164 : 6F 0A                      cp      a, 10
        166 : C7 05                      jr      c, put_hex8_dec    ; A<10
        168 : 68 37                      add     a, 'A'-10
        16A : 1A A8 01                   jp      putchar
        16D :                    put_hex8_dec:
        16D : 68 30                      add     a, '0'
        16F : 1A A8 01                   jp      putchar
        172 :
        172 :                    ;;; Print uint8_t in binary
        172 :                    ;;; @param B uint8_t value to be printed in binary.
        172 :                    ;;; @clobber A
        172 :                    put_bin8:
        172 : 50                         push    bc
        173 : 36 30                      ld      a, '0'
        175 : 1C A8 01                   call    putchar
        178 : 36 62                      ld      a, 'b'
        17A : 1C A8 01                   call    putchar
        17D : 20                         ld      a, b
        17E : 1C 87 01                   call    put_bin4
        181 : A6                         slla
        182 : 1C 87 01                   call    put_bin4
        185 : 58                         pop     bc
        186 : 1E                         ret
        187 :                    put_bin4:
        187 : 1C 8B 01                   call    put_bin2
        18A : A6                         slla
        18B :                    put_bin2:
        18B : 1C 8F 01                   call    put_bin1
        18E : A6                         slla
        18F :                    put_bin1:
        18F : 31 30                      ld      c, '0'
        191 : FE 66                      or      a, a            ; chech MSB
        193 : CD 01                      jr      pl, put_bin0    ; MSB=0
        195 : 81                         inc     c               ; MSB=1
        196 :                    put_bin0:
        196 : 28                         ld      b, a
        197 : 21                         ld      a, c
        198 : 1C A8 01                   call    putchar
        19B : 20                         ld      a, b
        19C : 1E                         ret
        19D :
        19D :                    ;;; Get character
        19D :                    ;;; @return A
        19D :                    ;;; @return CC.C 0 if no character
        19D :                    getchar:
        19D : 54                         push    ix
        19E : 3C 00 20                   ld      ix, rx_queue
        1A1 : 02                         di
        1A2 : 1C 05 02                   call    queue_remove
        1A5 : 03                         ei
        1A6 : 5C                         pop     ix
        1A7 : 1E                         ret
        1A8 :
        1A8 :                    ;;; Put character
        1A8 :                    ;;; @param A
        1A8 :                    putchar:
        1A8 : A8 E6                      bit     INTEL_IETX_bp, (INTEL)
        1AA : CE 05                      jr      nz, putchar_add ; INTTX is enabled, add to queue
        1AC : 2F EB                      ld      (SCBUF), a
        1AE : B8 E6                      set     INTEL_IETX_bp, (INTEL) ; enable INTTX
        1B0 : 1E                         ret
        1B1 :                    putchar_add:
        1B1 : 54                         push    ix
        1B2 : 3C 80 20                   ld      ix, tx_queue
        1B5 :                    putchar_retry:
        1B5 : 02                         di
        1B6 : 1C D5 01                   call    queue_add
        1B9 : 03                         ei
        1BA : CF F9                      jr      nc, putchar_retry ; branch if queue is full
        1BC : 5C                         pop     ix
        1BD : 1E                         ret
        1BE :
        1BE :                            include "queue.inc"
(1)     1BE :                    ;;; [queue] queue structure
(1)     1BE : =0                 queue_len:      equ     0       ; queue length
(1)     1BE : =1                 queue_size:     equ     1       ; buffer size
(1)     1BE : =2                 queue_put:      equ     2       ; queue put index
(1)     1BE : =3                 queue_get:      equ     3       ; queue get index
(1)     1BE : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     1BE :
(1)     1BE :                    ;;; [queue] Initialize queue
(1)     1BE :                    ;;; @param IX queue work space pointer
(1)     1BE :                    ;;; @param B queue work space size
(1)     1BE :                    ;;; @clobber B IX
(1)     1BE :                    queue_init:
(1)     1BE : F4 00 37 00                ld      (ix+queue_len), 0
(1)     1C2 : F8 6A 04                   sub     b, queue_buf
(1)     1C5 : F4 01 20                   ld      (ix+queue_size), b
(1)     1C8 : F8 68 02                   add     b, 2            ; for queue_put and queue_get
(1)     1CB : F4 02 3C                   lda     ix, ix+queue_put
(1)     1CE :                    queue_init_loop:
(1)     1CE : EC 37 00                   ld      (ix), 0
(1)     1D1 : 94                         inc     ix
(1)     1D2 : 18 FA                      djnz    queue_init_loop
(1)     1D4 : 1E                         ret
(1)     1D5 :
(1)     1D5 :                    ;;; [queue] Add an element to queue
(1)     1D5 :                    ;;; @param IX queue work space pointer
(1)     1D5 :                    ;;; @param A an element
(1)     1D5 :                    ;;; @return F.C 0 if queue is full
(1)     1D5 :                    queue_add:
(1)     1D5 : 56                         push    af              ; save an element
(1)     1D6 : F0 00 2E                   ld      a, (ix+queue_len)
(1)     1D9 : F0 01 67                   cp      a, (ix+queue_size)
(1)     1DC : C7 03                      jr      c, queue_add_store ; queue_len < queue_size
(1)     1DE : 5E                         pop     af
(1)     1DF : 0C                         rcf                     ; clear carry
(1)     1E0 : 1E                         ret
(1)     1E1 :                    queue_add_store:
(1)     1E1 : 86                         inc     a               ; queue_len++
(1)     1E2 : F4 00 26                   ld      (ix+queue_len), a
(1)     1E5 : 52                         push    hl
(1)     1E6 : F4 04 3A                   lda     hl, ix+queue_buf
(1)     1E9 : F0 02 2E                   ld      a, (ix+queue_put)
(1)     1EC : F7 3A                      lda     hl, hl+a
(1)     1EE : F2 03 2E                   ld      a, (sp+3)       ; get element
(1)     1F1 : EA 26                      ld      (hl), a         ; store element
(1)     1F3 : 5A                         pop     hl
(1)     1F4 : F0 02 2E                   ld      a, (ix+queue_put)
(1)     1F7 : 86                         inc     a
(1)     1F8 : F0 01 67                   cp      a, (ix+queue_size)
(1)     1FB : C7 02                      jr      c, queue_add_update ; queue_put < queue_size
(1)     1FD : 36 00                      ld      a, 0                ; wrap around
(1)     1FF :                    queue_add_update:
(1)     1FF : F4 02 26                   ld      (ix+queue_put), a
(1)     202 : 5E                         pop     af
(1)     203 : 0D                         scf                     ; set carry
(1)     204 : 1E                         ret
(1)     205 :
(1)     205 :                    ;;; [queue] Remove an element from queue
(1)     205 :                    ;;; @param IX queue work space pointer
(1)     205 :                    ;;; @return A an element
(1)     205 :                    ;;; @return F.C 0 if queue is empty
(1)     205 :                    queue_remove:
(1)     205 : E4 2E                      ld      a, (ix)           ; queue_len
(1)     207 : FE 66                      or      a, a              ; clear carry
(1)     209 : FE D6                      ret     z                 ; carry is cleared by |or|
(1)     20B : 52                         push    hl
(1)     20C : 8E                         dec     a               ; queue_len--
(1)     20D : F4 00 26                   ld      (ix+queue_len), a
(1)     210 : F4 04 3A                   lda     hl, ix+queue_buf
(1)     213 : F0 03 2E                   ld      a, (ix+queue_get)
(1)     216 : F3 2E                      ld      a, (hl+a)       ; read element
(1)     218 : 2C                         ld      h, a            ; save element
(1)     219 : F0 03 2E                   ld      a, (ix+queue_get)
(1)     21C : 86                         inc     a
(1)     21D : F0 01 67                   cp      a, (ix+queue_size)
(1)     220 : C7 02                      jr      c, queue_remove_update ; queue_get < queue_size
(1)     222 : 36 00                      ld      a, 0                   ; wrap around
(1)     224 :                    queue_remove_update:
(1)     224 : F4 03 26                   ld      (ix+queue_get), a
(1)     227 : 24                         ld      a, h            ; restore element
(1)     228 : 5A                         pop     hl
(1)     229 : 0D                         scf                     ; set carry
(1)     22A : 1E                         ret
(1)     22B :
(1)     22B :                    ;;; Local Variables:
(1)     22B :                    ;;; mode: asm
(1)     22B :                    ;;; End:
(1)     22B :                    ;;; vim: set ft=asm et ts=4 sw=4:
        22B :
        22B :                    isr_intr_rx:
        22B : A9 C3                      bit     IRFH_IRFRX_bp, (IRFH)
        22D : C6 0A                      jr      z, isr_intr_rx_end
        22F : 27 EB                      ld      a, (SCBUF)      ; receive character
        231 : 54                         push    ix
        232 : 3C 00 20                   ld      ix, rx_queue
        235 : 1C D5 01                   call    queue_add
        238 : 5C                         pop     ix
        239 :                    isr_intr_rx_end:        
        239 : 1F                         reti
        23A :
        23A :                    isr_intr_tx:
        23A : 54                         push    ix
        23B : 3C 80 20                   ld      ix, tx_queue
        23E : 1C 05 02                   call    queue_remove
        241 : 5C                         pop     ix
        242 : CF 03                      jr      nc, isr_intr_send_empty
        244 : 2F EB                      ld      (SCBUF), a      ; send character
        246 : 1F                         reti
        247 :                    isr_intr_send_empty:
        247 : B0 E6                      res     INTEL_IETX_bp, (INTEL) ; disable Tx interrupt
        249 : 1F                         reti

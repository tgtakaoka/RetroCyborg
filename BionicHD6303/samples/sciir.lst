   0:                                CPU   6801
   0:                                INCLUDE               "mc6801.inc"
   0:                ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:                ;;; MC6801/MC6803
   0:                ;;; Condition Code Register (CC)
   0: =$1            CC_CARRY        EQU   %00000001       ; set to 1 if carry occurred
   0: =$2            CC_OVERFLOW     EQU   %00000010       ; set to 1 if overflow occurred
   0: =$4            CC_ZERO         EQU   %00000100       ; set to 1 if result is zero
   0: =$8            CC_NEGATIVE     EQU   %00001000       ; set to 1 if result is negative
   0: =$10           CC_IRQ          EQU   %00010000       ; if 1, IRQ is masked
   0: =$20           CC_HALF_CARRY   EQU   %00100000       ; if 1, decimal carry from least digit occurred
   0:
   0:                ;;; Internal Register Area
   0:                                ORG   $00
   0:                DDR1:           RMB   1               ; $00: Port 1 Data Direction Register
   1:                DDR2:           RMB   1               ; $01: Port 2 Data Direction Register
   2:                PORT1:          RMB   1               ; $02: Port 1 Data Register
   3:                PORT2:          RMB   1               ; $03: Port 2 Data Register
   4:                DDR3:           RMB   1               ; $04: Port 3 Data Direction Register
   5:                DDR4:           RMB   1               ; $05: Port 4 Data Direction Register
   6:                PORT3:          RMB   1               ; $06: Port 3 Data Register
   7:                PORT4:          RMB   1               ; $07: Port 4 Data Register
   8:                TCSR:           RMB   1               ; $08: Timer Control and Status Register
   9:                TCNT:           RMB   2               ; $09: Timer Counter
   B:                TOCR:           RMB   2               ; $0B: Output Compare Register
   D:                TCAP:           RMB   2               ; $0D: Input Capture Register
   F:                P3CSR:          RMB   1               ; $0F: Port 3 Control and Status Register
  10:                RMCR:           RMB   1               ; $10: Rate and Mode Control Registers
  11:                TRCSR:          RMB   1               ; $11: Transmit Receive Control and Status Register
  12:                SCRDR:          RMB   1               ; $12: Receiver Data Register
  13:                SCTDR:          RMB   1               ; $13: Transmit Data Register
  14:                RAMCR:          RMB   1               ; $14: RAM Control Register
  15:                                RMB   11              ; $15-$1F: Reserved
  20: =$20           end_IRA:        EQU   *               ; end of internal register area
  20:
  20:                ;;; Port 2 Data Register
  20: =$E0           PC_gm:          EQU   %11100000       ; PC group mask
  20: =$5            PC_gp:          EQU   5               ; PC group position
  20: =$20           PC0_bm:         EQU   %00100000       ; PC0
  20: =$40           PC1_bm:         EQU   %01000000       ; PC1
  20: =$80           PC2_bm:         EQU   %10000000       ; PC2
  20:
  20:                ;;; Port 3 Control and Status Register
  20: =$8            P3_LATCH_bm:    EQU   %00001000       ; Latch Enable
  20: =$10           P3_OSS_bm:      EQU   %00010000       ; Output Strobe Select
  20: =$40           P3_IS3IE_bm:    EQU   %01000000       ; IS3 IRQ1 Enable
  20: =$80           P3_IS3F_bm:     EQU   %10000000       ; IS3 Flag
  20:
  20:                ;;; RAM Control Register
  20: =$40           RAME_bm:        EQU   %01000000       ; RAM Enable
  20: =$80           STBY_PWR_bm:    EQU   %10000000       ; Standby Power status
  20:
  20:                ;;; Timer Control and Status Register
  20: =$1            TCSR_OLVL_bm:   EQU   %00000001       ; Output Level
  20: =$2            TCSR_IEDG_bm:   EQU   %00000010       ; Input Edge. 0=negative/1=positive
  20: =$4            TCSR_ETOI_bm:   EQU   %00000100       ; Enable Timer Overflow Interrupt for IRQ2
  20: =$8            TCSR_EOCI_bm:   EQU   %00001000       ; Enable Output Compare Interrupt for IRQ2
  20: =$10           TCSR_EICI_bm:   EQU   %00010000       ; Enable Input Capture Interrupt for IRQ2
  20: =$20           TCSR_TOF_bm:    EQU   %00100000       ; Timer Overflow Flag
  20: =$40           TCSR_OCF_bm:    EQU   %01000000       ; Output Compare Flag
  20: =$80           TCSR_ICF_bm:    EQU   %10000000       ; Input Capture Flag
  20:
  20:                ;;; Serial Communication Interface
  20:                ;;; Rate and Mode Control Registers
  20:                ;; Speed Select
  20: =$3            SS_gm:          EQU   %00000011       ; Group mask
  20: =$0            SS_DIV16_gc:    EQU   %00000000       ; E/16
  20: =$1            SS_DIV128_gc:   EQU   %00000001       ; E/128
  20: =$2            SS_DIV1024_gc:  EQU   %00000010       ; E/1024
  20: =$3            SS_DIV4096_gc:  EQU   %00000011       ; E/4096
  20:                ;; Clock Control and Format Select
  20: =$C            CCFS_gm:        EQU   %00001100       ; Group mask
  20: =$0            CCFS_BIPH_gc:   EQU   %00000000       ; Bi-Phase
  20: =$4            CCFS_NRZ_gc:    EQU   %00000100       ; NRZ
  20: =$8            CCFS_NRZO_gc:   EQU   %00001000       ; NRZ P22=Clock Output
  20: =$C            CCFS_NRZI_gc:   EQU   %00001100       ; NRZ P22=Clock Input
  20:                ;;; Transmit/Receive Control and Status Register
  20: =$1            TRCSR_WU_bm:    EQU   %00000001       ; Wake-up on idle line
  20: =$2            TRCSR_TE_bm:    EQU   %00000010       ; Transmit Enable; if set, P24 is output
  20: =$4            TRCSR_TIE_bm:   EQU   %00000100       ; Transmit Interrupt Enable for IRQ2
  20: =$8            TRCSR_RE_bm:    EQU   %00001000       ; Receiver Enable; if set, P23 is input
  20: =$10           TRCSR_RIE_bm:   EQU   %00010000       ; Receiver Interrupt Enable for IRQ2
  20: =$20           TRCSR_TDRE_bm:  EQU   %00100000       ; Transmit Data Register Empty
  20: =$40           TRCSR_ORFE_bm:  EQU   %01000000       ; Overrun Framing Error
  20: =$80           TRCSR_RDRF_bm:  EQU   %10000000       ; Receive Data Register Full
  20:
  20:                ;;; Vector
FFF0:                                ORG   $FFF0
FFF0:                VEC_SCI:        RMB   2               ; $FFF0: SCI Interrupt (TDRE+RDRF+ORFE)
FFF2:                VEC_TOF:        RMB   2               ; $FFF2: Timer Overflow Interrupt
FFF4:                VEC_OCF:        RMB   2               ; $FFF4: Output Compare Interrupt
FFF6:                VEC_ICF:        RMB   2               ; $FFF6: Input Capture Interrupt
FFF8:                VEC_IRQ1:       RMB   2               ; $FFF8: Maskable Interrupt Request 1
FFFA:                VEC_SWI:        RMB   2               ; $FFFA: Software Interrupt
FFFC:                VEC_NMI:        RMB   2               ; $FFFC: Non Maskable Interrupt
FFFE:                VEC_RESET:      RMB   2               ; $FFFE: Reset
   0:
2000:                                ORG   $2000
2000:
2000: =$80           rx_queue_size:  EQU   128
2000:                rx_queue:       RMB   rx_queue_size
2080:
2080:                ;;; SCI: Enable Rx interrupt
2080: =$1A           RX_INT_TX_NO:   EQU   TRCSR_TE_bm|TRCSR_RE_bm|TRCSR_RIE_bm
2080:
1000:                                ORG   $1000
1000: =$FFF          stack:          EQU   *-1             ; MC6801's SP is post-decrement/pre-increment
1000:
1000:                                ORG   $1000
1000:                initialize:
1000: 8E 0F FF                       LDS   #stack
1003: CE 20 00                       LDX   #rx_queue
1006: C6 80                          LDAB  #rx_queue_size
1008: BD 10 2E                       JSR   queue_init
100B:                ;; Initialize SCI
100B: 86 04                          LDAA  #CCFS_NRZ_gc|SS_DIV16_gc
100D: 97 10                          STAA  RMCR            ; set NRZ and E/16
100F: 86 1A                          LDAA  #RX_INT_TX_NO
1011: 97 11                          STAA  TRCSR           ; Enable Tx and Rx/Interrupt
1013: 0E                             CLI                   ; Enable IRQ
1014:
1014: CE 20 00                       LDX   #rx_queue
1017:                receive_loop:
1017: 0F                             SEI                   ; Disable IRQ
1018: BD 10 59                       JSR   queue_remove
101B: 0E                             CLI                   ; Enable IRQ
101C: 24 F9                          BCC   receive_loop
101E:                transmit_loop:
101E: D6 11                          LDAB  TRCSR
1020: C5 20                          BITB  #TRCSR_TDRE_bm
1022: 27 FA                          BEQ   transmit_loop
1024:                transmit_data:
1024: 97 13                          STAA  SCTDR
1026: 81 0D                          CMPA  #$0d
1028: 26 ED                          BNE   receive_loop
102A: 86 0A                          LDAA  #$0a
102C: 20 F0                          BRA   transmit_loop
102E:
102E:                                INCLUDE               "queue.inc"
102E:                ;;; [queue] queue structure
102E: =$0            queue_len:      EQU   0               ; queue length
102E: =$1            queue_size:     EQU   1               ; buffer size
102E: =$2            queue_put:      EQU   2               ; queue put index
102E: =$3            queue_get:      EQU   3               ; queue get index
102E: =$4            queue_buf:      EQU   4               ; buffer start offset
102E:
102E:                ;;; [queue] Initialize queue
102E:                ;;; @param X queue work space pointer
102E:                ;;; @param B queue work space size
102E:                ;;; @clobber B
102E:                queue_init:
102E: 37                             PSHB
102F: 3C                             PSHX
1030:                queue_init_loop:
1030: 6F 00                          CLR   0,x
1032: 08                             INX
1033: 5A                             DECB
1034: 26 FA                          BNE   queue_init_loop
1036: 38                             PULX
1037: 33                             PULB
1038: C0 04                          SUBB  #queue_buf
103A: E7 01                          STAB  queue_size,x
103C: 39                             RTS
103D:
103D:                ;;; [queue] Add an element to queue
103D:                ;;; @param X queue work space pointer
103D:                ;;; @param A an element
103D:                ;;; @return CC.C 0 if queue is full
103D:                queue_add:
103D: 37                             PSHB
103E: E6 00                          LDAB  queue_len,x
1040: E1 01                          CMPB  queue_size,x
1042: 24 13                          BHS   queue_add_return    ; carry is cleared
1044: E6 02                          LDAB  queue_put,x     ; 8 bits offset
1046: 3C                             PSHX
1047: 3A                             ABX                   ; X+=B
1048: A7 04                          STAA  queue_buf,x     ; store an element
104A: 38                             PULX
104B: 6C 00                          INC   queue_len,x
104D: 5C                             INCB
104E: E7 02                          STAB  queue_put,x
1050: E1 01                          CMPB  queue_size,x
1052: 25 03                          BLO   queue_add_return    ; carry is set
1054: 6F 02                          CLR   queue_put,x
1056: 0D                             SEC                   ; set carry
1057:                queue_add_return:
1057: 33                             PULB
1058: 39                             RTS
1059:
1059:                ;;; [queue] Remove an element from queue
1059:                ;;; @param X queue work space pointer
1059:                ;;; @return A an element
1059:                ;;; @return CC.C 0 if queue is empty
1059:                queue_remove:
1059: 6D 00                          TST   queue_len,x
105B: 26 02                          BNE   queue_remove_elem
105D: 0C                             CLC                   ; clear carry
105E: 39                             RTS
105F:                queue_remove_elem
105F: 37                             PSHB
1060: E6 03                          LDAB  queue_get,x     ; 8 bits offset
1062: 3C                             PSHX
1063: 3A                             ABX                   ; X+=B
1064: A6 04                          LDAA  queue_buf,x     ; read an element
1066: 38                             PULX
1067: 6A 00                          DEC   queue_len,x
1069: 5C                             INCB
106A: E7 03                          STAB  queue_get,x
106C: E1 01                          CMPB  queue_size,x
106E: 25 03                          BLO   queue_remove_return ; carry is set
1070: 6F 03                          CLR   queue_get,x
1072: 0D                             SEC                   ; set carry
1073:                queue_remove_return:
1073: 33                             PULB
1074: 39                             RTS
1075:
1075:                ;;; Local Variables:
1075:                ;;; mode: asm
1075:                ;;; End:
1075:                ;;; vim: set ft=asm et ts=4 sw=4:
1075:
1075:                isr_sci:
1075: D6 11                          LDAB  TRCSR
1077: C5 40                          BITB  #TRCSR_ORFE_bm
1079: 26 0D                          BNE   isr_sci_error
107B: C5 80                          BITB  #TRCSR_RDRF_bm
107D: 27 08                          BEQ   isr_sci_return
107F:                isr_sci_receive:
107F: 96 12                          LDAA  SCRDR
1081: CE 20 00                       LDX   #rx_queue
1084: BD 10 3D                       JSR   queue_add
1087:                isr_sci_return:
1087: 3B                             RTI
1088:                isr_sci_error:
1088: D6 12                          LDAB  SCRDR           ; clear ORFE
108A: 20 FB                          BRA   isr_sci_return
108C:
FFF0:                                ORG   VEC_SCI
FFF0: 10 75                          FDB   isr_sci
FFF2:
FFFE:                                ORG   VEC_RESET
FFFE: 10 00                          FDB   initialize

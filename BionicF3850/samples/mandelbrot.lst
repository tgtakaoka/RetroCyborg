          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     f3850
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =FFF0              USART:          equ     0FFF0H
          0 : =FFF0              USARTD:         equ     USART+0 ; Receive/Transmit data
          0 : =FFF1              USARTS:         equ     USART+1 ; Srtatus register
          0 : =FFF1              USARTC:         equ     USART+1 ; Control register
          0 : =FFF2              USARTRV:        equ     USART+2 ; Receive interrupt vector (ORG_*)
          0 : =FFF3              USARTTV:        equ     USART+3 ; Transmit interrupt vector (ORG_*)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     00000100B   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     00000010B   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     00000001B   ; Transmitter ready
          0 :
       1000 :                            org     1000H
       1000 :                    stack:
       1000 :
       2000 :                            org     2000H
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       rs      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       rs      tx_queue_size
       2100 :
          0 :                            org     0
          0 : 29 02 00                   jmp     init
          3 :
          3 :                    rx_vec:
          3 : 29 02 65                   jmp     isr_intr_rx
          6 :
          6 :                    tx_vec:
          6 : 29 02 84                   jmp     isr_intr_tx
          9 :
        200 :                            org     H'0200'
        200 :                    init:
        200 : 28 03 2C                   pi      init_stack
        203 : 2A 20 00                   dci     rx_queue
        206 : 0E                         lr      Q, DC
        207 : 20 80                      li      rx_queue_size
        209 : 50                         lr      0, A
        20A : 28 03 91                   pi      call
        20D : 03 BD                      da      queue_init
        20F : 2A 20 80                   dci     tx_queue
        212 : 0E                         lr      Q, DC
        213 : 20 80                      li      tx_queue_size
        215 : 50                         lr      0, A
        216 : 28 03 91                   pi      call
        219 : 03 BD                      da      queue_init
        21B :                    init_usart:
        21B : 70                         lis     0
        21C : 27 F1                      out     USARTC
        21E : 27 F1                      out     USARTC
        220 : 27 F1                      out     USARTC          ; safest way to sync mode
        222 :                    ;;; reset
        222 : 20 40                      li      CMD_IR_bm
        224 : 27 F1                      out     USARTC
        226 : 2B                         nop
        227 : 2B                         nop
        228 :                    ;;;  async 1stop 8data x16
        228 : 20 4E                      li      MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
        22A : 27 F1                      out     USARTC
        22C : 2B                         nop
        22D : 2B                         nop
        22E :                    ;;;  RTS/DTR, error reset, Rx enable, Tx enable
        22E : 20 37                      li      CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
        230 : 27 F1                      out     USARTC
        232 :                    ;;; enable RxRDY interrupt using INT0
        232 : 20 03                      li      rx_vec
        234 : 27 F2                      out     USARTRV
        236 :                    ;;; enable TxRDY interrupt
        236 : 20 06                      li      tx_vec
        238 : 27 F3                      out     USARTTV
        23A :
        23A : 28 03 91                   pi      call
        23D : 06 96                      da      mandelbrot
        23F : 2F                         dc      H'2F'
        240 :
        240 :                    ;;; Get character
        240 :                    ;;; @return 0
        240 :                    ;;; @return CC.C 0 if no character
        240 :                    getchar:
        240 : 1B                         ei
        241 : 2B                         nop
        242 : 1A                         di
        243 : 2A 20 00                   dci     rx_queue
        246 : 0E                         lr      Q, DC
        247 : 29 03 FF                   jmp     queue_remove
        24A :
        24A :                    ;;; Put character
        24A :                    ;;; @param 0
        24A :                    ;;; @clobber 0
        24A :                    putchar:
        24A : 1B                         ei
        24B : 2B                         nop
        24C : 1A                         di
        24D : 2A 20 80                   dci     tx_queue
        250 : 0E                         lr      Q, DC
        251 : 28 03 91                   pi      call
        254 : 03 CF                      da      queue_add
        256 : 92 F3                      bnc     putchar         ; branch if queue is full
        258 : 26 F3                      in      USARTTV
        25A : 22 00                      oi      0
        25C : 94 05                      bnz     putchar_exit    ; already enabled
        25E : 20 06                      li      tx_vec
        260 : 27 F3                      out     USARTTV
        262 :                    putchar_exit:
        262 : 29 03 AE                   jmp     return
        265 :
        265 :                    isr_intr_rx:
        265 : 08                         lr      K, P
        266 : 28 03 43                   pi      pushK
        269 : 28 03 2F                   pi      push0
        26C : 26 F1                      in      USARTS
        26E : 21 02                      ni      ST_RxRDY_bm
        270 : 84 0D                      bz      isr_intr_end
        272 : 26 F0                      in      USARTD
        274 : 50                         lr      0, A
        275 : 2A 20 00                   dci     rx_queue
        278 : 0E                         lr      Q, DC
        279 : 28 03 91                   pi      call
        27C : 03 CF                      da      queue_add
        27E :                    isr_intr_end:
        27E : 28 03 5D                   pi      pop0
        281 : 29 03 AE                   jmp     return
        284 :
        284 :                    isr_intr_tx:
        284 : 08                         lr      K, P
        285 : 28 03 43                   pi      pushK
        288 : 28 03 2F                   pi      push0
        28B : 2A 20 80                   dci     tx_queue
        28E : 0E                         lr      Q, DC
        28F : 28 03 91                   pi      call
        292 : 03 FF                      da      queue_remove
        294 : 92 0A                      bnc     isr_intr_send_empty
        296 : 40                         lr      A, 0
        297 : 27 F0                      out     USARTD          ; send character
        299 : 28 03 5D                   pi      pop0
        29C : 29 03 AE                   jmp     return
        29F :                    isr_intr_send_empty:
        29F : 70                         clr
        2A0 : 27 F3                      out     USARTTV         ; disable Tx interrupt
        2A2 : 28 03 5D                   pi      pop0
        2A5 : 29 03 AE                   jmp     return
        2A8 :
        2A8 :                    ;;; Print unsigned 16-bit integer as decimal
        2A8 :                    ;;; @param 0:1 value
        2A8 :                    ;;; @clobber 0 1 4 5 6 7 A
        2A8 :                    print_uint16:
        2A8 : 40                         lr      A, 0
        2A9 : 22 00                      oi      0
        2AB : 94 06                      bnz     print_uint16_inner
        2AD : 41                         lr      A, 1
        2AE : 22 00                      oi      0
        2B0 : 84 29                      bz      print_uint16_zero
        2B2 :                    print_uint16_inner:
        2B2 : 40                         lr      A, 0
        2B3 : 54                         lr      4, A
        2B4 : 41                         lr      A, 1
        2B5 : 55                         lr      5, A            ; 4:5=value
        2B6 :                    print_uint16_loop:
        2B6 : 44                         lr      A, 4
        2B7 : 22 00                      oi      0
        2B9 : 94 09                      bnz     print_uint16_digit
        2BB : 45                         lr      A, 5
        2BC : 22 00                      oi      0
        2BE : 94 04                      bnz     print_uint16_digit
        2C0 : 29 03 AE                   jmp     return
        2C3 :                    print_uint16_digit:
        2C3 : 70                         clr
        2C4 : 56                         lr      6, A
        2C5 : 20 0A                      li      10
        2C7 : 57                         lr      7, A            ; 6:7=10
        2C8 : 28 03 91                   pi      call
        2CB : 05 84                      da      udiv16          ; 4:5/6:7=4:5...6:7
        2CD : 47                         lr      A, 7
        2CE : 50                         lr      0, A
        2CF : 28 03 2F                   pi      push0           ; push reminder
        2D2 : 28 03 91                   pi      call
        2D5 : 02 B6                      da      print_uint16_loop
        2D7 : 28 03 5D                   pi      pop0
        2DA :                    print_uint16_zero:
        2DA : 20 30                      li      C'0'
        2DC : C0                         as      0
        2DD : 50                         lr      0, A
        2DE : 29 02 4A                   jmp     putchar
        2E1 :
        2E1 :                    ;;; Print signed 16-bit integer as decimal
        2E1 :                    ;;; @param 0:1 value
        2E1 :                    ;;; @clobber 0 1 4 5 6 7 A
        2E1 :                    print_int16:
        2E1 : 40                         lr      A, 0
        2E2 : 22 00                      oi      0
        2E4 : 81 C3                      bp      print_uint16
        2E6 : 28 03 2F                   pi      push0
        2E9 : 20 2D                      li      C'-'
        2EB : 50                         lr      0, A
        2EC : 28 03 91                   pi      call
        2EF : 02 4A                      da      putchar         ; print '-'
        2F1 : 28 03 5D                   pi      pop0
        2F4 : 40                         lr      A, 0
        2F5 : 18                         com
        2F6 : 50                         lr      0, A
        2F7 : 41                         lr      A, 1
        2F8 : 18                         com
        2F9 : 1F                         inc
        2FA : 51                         lr      1, A
        2FB : 40                         lr      A, 0
        2FC : 19                         lnk
        2FD : 50                         lr      0, A            ; 0:1=-value
        2FE : 90 A9                      br      print_uint16
        300 :
        300 :                    print_2:
        300 : 28 03 91                   pi      call
        303 : 02 4A                      da      putchar
        305 : 20 3D                      li      C'='
        307 : 50                         lr      0, A
        308 : 28 03 91                   pi      call
        30B : 02 4A                      da      putchar
        30D : 42                         lr      A, 2
        30E : 0B                         lr      IS, A
        30F : 4D                         lr      A, I
        310 : 50                         lr      0, A
        311 : 4C                         lr      A, S
        312 : 51                         lr      1, A
        313 : 28 03 91                   pi      call
        316 : 02 E1                      da      print_int16
        318 : 20 20                      li      C' '
        31A : 50                         lr      0, A
        31B : 29 02 4A                   jmp     putchar
        31E :
        31E :                    newline:        
        31E : 20 0D                      li      H'0D'
        320 : 50                         lr      0, A
        321 : 28 03 91                   pi      call
        324 : 02 4A                      da      putchar
        326 : 20 0A                      li      H'0A'
        328 : 50                         lr      0,A
        329 : 29 02 4A                   jmp     putchar
        32C :
        32C :                            include "stack.inc"
(1)     32C :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     32C :
(1)     32C :                    ;;; Stack pointer is 8-bit and pre-decrement and post-increment
(1)     32C : =8                 SP:     equ     8               ; SP is scratchpad register 8
(1)     32C : =F                 __STACK_U:      equ     ((stack - 1) >> 8)
(1)     32C :
(1)     32C :                    ;;; Initialize stack
(1)     32C :                    ;;; @param stack
(1)     32C :                    ;;; @clobber A
(1)     32C :                    init_stack:
(1)     32C : 70                         clr
(1)     32D : 58                         lr      SP, A
(1)     32E : 1C                         pop
(1)     32F :
(1)     32F :                    ;;; Push 0
(1)     32F :                    ;;; @clobber A H W
(1)     32F :                    ;;; PI push0
(1)     32F :                    push0:
(1)     32F : 38                         ds      SP              ; SP-=1
(1)     330 : 20 0F                      li      __STACK_U
(1)     332 : 5A                         lr      HU, A
(1)     333 : 48                         lr      A, SP
(1)     334 : 5B                         lr      HL, A
(1)     335 : 10                         lr      DC, H           ; DC0=SP
(1)     336 : 40                         lr      A, 0
(1)     337 : 17                         st
(1)     338 : 1C                         pop
(1)     339 :
(1)     339 :                    ;;; Push 1
(1)     339 :                    ;;; @clobber A H W
(1)     339 :                    ;;; PI push1
(1)     339 :                    push1:
(1)     339 : 38                         ds      SP              ; SP-=1
(1)     33A : 20 0F                      li      __STACK_U
(1)     33C : 5A                         lr      HU, A
(1)     33D : 48                         lr      A, SP
(1)     33E : 5B                         lr      HL, A
(1)     33F : 10                         lr      DC, H           ; DC0=SP
(1)     340 : 41                         lr      A, 1
(1)     341 : 17                         st
(1)     342 : 1C                         pop
(1)     343 :
(1)     343 :                    ;;; Push K
(1)     343 :                    ;;; @clobber A H W
(1)     343 :                    ;;; PI pushK
(1)     343 :                    pushK:
(1)     343 : 38                         ds      SP
(1)     344 : 38                         ds      SP              ; SP-=2
(1)     345 : 20 0F                      li      __STACK_U
(1)     347 : 5A                         lr      HU, A
(1)     348 : 48                         lr      A, SP
(1)     349 : 5B                         lr      HL, A
(1)     34A : 10                         lr      DC, H           ; DC0=SP
(1)     34B : 00                         lr      A, KU
(1)     34C : 17                         st
(1)     34D : 01                         lr      A, KL
(1)     34E : 17                         st
(1)     34F : 1C                         pop
(1)     350 :
(1)     350 :                    ;;; Push Q
(1)     350 :                    ;;; @clobber A H W
(1)     350 :                    ;;; PI pushQ
(1)     350 :                    pushQ:
(1)     350 : 38                         ds      SP
(1)     351 : 38                         ds      SP              ; SP -= 2
(1)     352 : 20 0F                      li      __STACK_U
(1)     354 : 5A                         lr      HU, A
(1)     355 : 48                         lr      A, SP
(1)     356 : 5B                         lr      HL, A
(1)     357 : 10                         lr      DC, H           ; DC0=SP
(1)     358 : 02                         lr      A, QU
(1)     359 : 17                         st
(1)     35A : 03                         lr      A, QL
(1)     35B : 17                         st
(1)     35C : 1C                         pop
(1)     35D :
(1)     35D :                    ;;; POP 0
(1)     35D :                    ;;; @clobber A H
(1)     35D :                    ;;; PI pop0
(1)     35D :                    pop0:
(1)     35D : 20 0F                      li      __STACK_U
(1)     35F : 5A                         lr      HU, A
(1)     360 : 48                         lr      A, SP
(1)     361 : 5B                         lr      HL, A
(1)     362 : 10                         lr      DC, H           ; DC0=SP
(1)     363 : 16                         lm
(1)     364 : 50                         lr      0, A
(1)     365 : 11                         lr      H, DC
(1)     366 : 4B                         lr      A, HL
(1)     367 : 58                         lr      SP, A
(1)     368 : 1C                         pop
(1)     369 :
(1)     369 :                    ;;; POP 1
(1)     369 :                    ;;; @clobber A H
(1)     369 :                    ;;; PI pop1
(1)     369 :                    pop1:
(1)     369 : 20 0F                      li      __STACK_U
(1)     36B : 5A                         lr      HU, A
(1)     36C : 48                         lr      A, SP
(1)     36D : 5B                         lr      HL, A
(1)     36E : 10                         lr      DC, H           ; DC0=SP
(1)     36F : 16                         lm
(1)     370 : 51                         lr      1, A
(1)     371 : 11                         lr      H, DC
(1)     372 : 4B                         lr      A, HL
(1)     373 : 58                         lr      SP, A
(1)     374 : 1C                         pop
(1)     375 :
(1)     375 :                    ;;; Pop K
(1)     375 :                    ;;; @clobber A H
(1)     375 :                    ;;; PI popK
(1)     375 :                    popK:
(1)     375 : 20 0F                      li      __STACK_U
(1)     377 : 5A                         lr      HU, A
(1)     378 : 48                         lr      A, SP
(1)     379 : 5B                         lr      HL, A
(1)     37A : 10                         lr      DC, H           ; DC0=SP
(1)     37B : 16                         lm
(1)     37C : 04                         lr      KU, A
(1)     37D : 16                         lm
(1)     37E : 05                         lr      KL, A
(1)     37F : 11                         lr      H, DC
(1)     380 : 4B                         lr      A, HL
(1)     381 : 58                         lr      SP, A
(1)     382 : 1C                         pop
(1)     383 :
(1)     383 :                    ;;; pop Q
(1)     383 :                    ;;; @clobber A H
(1)     383 :                    ;;; PI popQ
(1)     383 :                    popQ:
(1)     383 : 20 0F                      li      __STACK_U
(1)     385 : 5A                         lr      HU, A
(1)     386 : 48                         lr      A, SP
(1)     387 : 5B                         lr      HL, A
(1)     388 : 10                         lr      DC, H           ; DC0=SP
(1)     389 : 16                         lm
(1)     38A : 06                         lr      QU, A
(1)     38B : 16                         lm
(1)     38C : 07                         lr      QL, A
(1)     38D : 11                         lr      H, DC
(1)     38E : 4B                         lr      A, HL
(1)     38F : 58                         lr      SP, A
(1)     390 : 1C                         pop
(1)     391 :
(1)     391 :                    ;;; Call subroutine
(1)     391 :                    ;;; @clobber A H K W
(1)     391 :                    ;;; PI call
(1)     391 :                    ;;; DA subroutine
(1)     391 :                    call:
(1)     391 : 08                         lr      K, P
(1)     392 : 00                         lr      A, KU
(1)     393 : 5A                         lr      HU, A
(1)     394 : 01                         lr      A, KL
(1)     395 : 5B                         lr      HL, A
(1)     396 : 10                         lr      DC, H           ; DC0=PC1
(1)     397 : 16                         lm
(1)     398 : 04                         lr      KU, A
(1)     399 : 16                         lm
(1)     39A : 05                         lr      KL, A
(1)     39B : 09                         lr      P, K            ; PC1=subroutine address
(1)     39C : 11                         lr      H, DC
(1)     39D : 4A                         lr      A, HU
(1)     39E : 04                         lr      KU, A
(1)     39F : 4B                         lr      A, HL
(1)     3A0 : 05                         lr      KL, A           ; K=return address
(1)     3A1 : 38                         ds      SP
(1)     3A2 : 38                         ds      SP              ; SP-=2
(1)     3A3 : 20 0F                      li      __STACK_U
(1)     3A5 : 5A                         lr      HU, A
(1)     3A6 : 48                         lr      A, SP
(1)     3A7 : 5B                         lr      HL, A
(1)     3A8 : 10                         lr      DC, H           ; DC0=SP
(1)     3A9 : 00                         lr      A, KU
(1)     3AA : 17                         st
(1)     3AB : 01                         lr      A, KL
(1)     3AC : 17                         st
(1)     3AD : 1C                         pop                     ; jump to subroutine
(1)     3AE :
(1)     3AE :                    ;;; Return from subroutine
(1)     3AE :                    ;;; @clobber A H K
(1)     3AE :                    ;;; JMP return
(1)     3AE :                    return:
(1)     3AE : 20 0F                      li      __STACK_U
(1)     3B0 : 5A                         lr      HU, A
(1)     3B1 : 48                         lr      A, SP
(1)     3B2 : 5B                         lr      HL, A
(1)     3B3 : 10                         lr      DC, H           ; DC0=SP
(1)     3B4 : 16                         lm
(1)     3B5 : 04                         lr      KU, A
(1)     3B6 : 16                         lm
(1)     3B7 : 05                         lr      KL, A
(1)     3B8 : 11                         lr      H, DC
(1)     3B9 : 4B                         lr      A, HL
(1)     3BA : 58                         lr      SP, A
(1)     3BB : 09                         lr      P, K            ; PC1=return address
(1)     3BC : 1C                         pop
        3BD :                            include "queue.inc"
(1)     3BD :                    ;;; [queue] queue structure
(1)     3BD : =0                 queue_len:      equ     0       ; queue length
(1)     3BD : =1                 queue_size:     equ     1       ; buffer size
(1)     3BD : =2                 queue_put:      equ     2       ; queue put index
(1)     3BD : =3                 queue_get:      equ     3       ; queue get index
(1)     3BD : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     3BD :
(1)     3BD :                    ;;; [queue] Initialize queue
(1)     3BD :                    ;;; @param Q queue work space pointer
(1)     3BD :                    ;;; @param 0 queue work space size
(1)     3BD :                    ;;; @clobber A H DC
(1)     3BD :                    queue_init:
(1)     3BD : 0F                         lr      DC, Q
(1)     3BE : 70                         clr
(1)     3BF : 17                         st                      ; queue_len = 0
(1)     3C0 : 40                         lr      A, 0            ; restore queue size
(1)     3C1 : 24 FC                      ai      -queue_buf
(1)     3C3 : 17                         st                      ; queue_size
(1)     3C4 : 24 02                      ai      2               ; for queue_put and queue_get
(1)     3C6 : 50                         lr      0, A            ; save counter
(1)     3C7 : 70                         clr
(1)     3C8 :                    queue_init_loop:
(1)     3C8 : 17                         st
(1)     3C9 : 30                         ds      0               ; decrement counter
(1)     3CA : 94 FD                      bnz     queue_init_loop
(1)     3CC : 29 03 AE                   jmp     return
(1)     3CF :
(1)     3CF :                    ;;; [queue] Add an element to queue
(1)     3CF :                    ;;; @param Q queue work space pointer
(1)     3CF :                    ;;; @param 0 an element
(1)     3CF :                    ;;; @return F.C 0 if queue is full
(1)     3CF :                    ;;; @clobber A H DC
(1)     3CF :                    queue_add:
(1)     3CF : 0F                         lr      DC, Q
(1)     3D0 : 16                         lm                      ; queue_len
(1)     3D1 : 5B                         lr      HL, A           ; HL=queue_len
(1)     3D2 : 16                         lm                      ; queue_size
(1)     3D3 : 18                         com
(1)     3D4 : 1F                         inc                     ; A=-queue_size
(1)     3D5 : CB                         as      HL              ; queue_len-queue_size
(1)     3D6 : 82 24                      bc      queue_add_end   ; queue_len >= queue_size
(1)     3D8 : 4B                         lr      A, HL
(1)     3D9 : 1F                         inc                     ; queue_len++
(1)     3DA : 0F                         lr      DC, Q
(1)     3DB : 17                         st                      ; update queue_len
(1)     3DC : 16                         lm                      ; queue_size
(1)     3DD : 16                         lm                      ; queue_put
(1)     3DE : 1F                         inc                     ; for queue_get
(1)     3DF : 8E                         adc                     ; DC=&queue_buf[queue_put]
(1)     3E0 : 40                         lr      A, 0            ; get element
(1)     3E1 : 17                         st                      ; store element
(1)     3E2 : 0F                         lr      DC, Q
(1)     3E3 : 16                         lm                      ; queue_len
(1)     3E4 : 16                         lm                      ; queue_size
(1)     3E5 : 18                         com
(1)     3E6 : 1F                         inc
(1)     3E7 : 5B                         lr      HL, A           ; HL=-queue_size
(1)     3E8 : 16                         lm                      ; queue_put
(1)     3E9 : 1F                         inc                     ; queue_put++
(1)     3EA : 5A                         lr      HU, A           ; HU=queue_put
(1)     3EB : CB                         as      HL              ; queue_put-queue_size
(1)     3EC : 92 03                      bnc     queue_add_update ; queue_put < queue_size
(1)     3EE : 70                         clr
(1)     3EF : 5A                         lr      HU, A           ; wrap around
(1)     3F0 :                    queue_add_update:
(1)     3F0 : 0F                         lr      DC, Q
(1)     3F1 : 16                         lm                      ; queue_len
(1)     3F2 : 16                         lm                      ; queue_size
(1)     3F3 : 4A                         lr      A, HU
(1)     3F4 : 17                         st                      ; update queue_put
(1)     3F5 : 70                         clr
(1)     3F6 : 18                         com
(1)     3F7 : 1F                         inc                     ; set carry
(1)     3F8 : 29 03 AE                   jmp     return
(1)     3FB :                    queue_add_end:
(1)     3FB : 18                         com                     ; clear carry
(1)     3FC : 29 03 AE                   jmp     return
(1)     3FF :
(1)     3FF :                    ;;; [queue] Remove an element from queue
(1)     3FF :                    ;;; @param Q queue work space pointer
(1)     3FF :                    ;;; @return 0 an element
(1)     3FF :                    ;;; @return F.C 0 if queue is empty
(1)     3FF :                    ;;; @clobber A H DC
(1)     3FF :                    queue_remove:
(1)     3FF : 0F                         lr      DC, Q
(1)     400 : 70                         clr
(1)     401 : 8B                         om                      ; queue_len
(1)     402 : 84 26                      bz      queue_remove_empty
(1)     404 : 24 FF                      ai      -1              ; queue_len--
(1)     406 : 0F                         lr      DC, Q
(1)     407 : 17                         st                      ; update queue_len
(1)     408 : 16                         lm                      ; queue_size
(1)     409 : 16                         lm                      ; queue_put
(1)     40A : 16                         lm                      ; queue_get
(1)     40B : 8E                         adc                     ; DC=&queue_buf[queue_get]
(1)     40C : 16                         lm                      ; read element
(1)     40D : 50                         lr      0, A            ; save element
(1)     40E : 0F                         lr      DC, Q
(1)     40F : 16                         lm                      ; queue_len
(1)     410 : 16                         lm                      ; queue_size
(1)     411 : 18                         com
(1)     412 : 1F                         inc
(1)     413 : 5B                         lr      HL, A           ; HL=-queue_size
(1)     414 : 16                         lm                      ; queue_put
(1)     415 : 16                         lm                      ; queue_get
(1)     416 : 1F                         inc                     ; queue_get++
(1)     417 : 5A                         lr      HU, A           ; HU=queue_get
(1)     418 : CB                         as      HL              ; queue_get-queue_size
(1)     419 : 92 03                      bnc     queue_remove_update ; queue_get<queueu_size
(1)     41B : 70                         clr
(1)     41C : 5A                         lr      HU, A           ; wrap around
(1)     41D :                    queue_remove_update:
(1)     41D : 0F                         lr      DC, Q
(1)     41E : 16                         lm                      ; queue_len
(1)     41F : 16                         lm                      ; queue_size
(1)     420 : 16                         lm                      ; queue_put
(1)     421 : 4A                         lr      A, HU
(1)     422 : 17                         st                      ; update queue_get
(1)     423 : 70                         clr
(1)     424 : 18                         com
(1)     425 : 1F                         inc                     ; set carry
(1)     426 : 29 03 AE                   jmp     return
(1)     429 :                    queue_remove_empty:
(1)     429 : 18                         com                     ; clear carry
(1)     42A : 29 03 AE                   jmp     return
(1)     42D :
(1)     42D :                    ;;; Local Variables:
(1)     42D :                    ;;; mode: asm
(1)     42D :                    ;;; End:
(1)     42D :                    ;;; vim: set ft=asm et ts=4 sw=4:
        42D :                            include "arith.inc"
(1)     42D :                            cpu     f3850
(1)     42D :
(1)     42D :                    ;;; Negation; result = -value
(1)     42D :                    ;;; @param @2: result
(1)     42D :                    ;;; @param @3: value
(1)     42D :                    ;;; @clobber 0 1 ISAR A
(1)     42D :                    negsi2:
(1)     42D : 43                         lr      A, 3
(1)     42E : 0B                         lr      IS, A           ; point MSB(value)
(1)     42F : 4D                         lr      A, I
(1)     430 : 18                         com
(1)     431 : 50                         lr      0, A            ; MSB(~value)
(1)     432 : 4C                         lr      A, S
(1)     433 : 18                         com
(1)     434 : 51                         lr      1, A            ; LSB(~value)
(1)     435 : 42                         lr      A, 2
(1)     436 : 1F                         inc
(1)     437 : 0B                         lr      IS, A           ; point LSB(@2)
(1)     438 : 41                         lr      A, 1
(1)     439 : 1F                         inc
(1)     43A : 5E                         lr      D, A            ; LSB(-value)
(1)     43B : 40                         lr      A, 0
(1)     43C : 19                         lnk
(1)     43D : 5C                         lr      S, A            ; MSB(-value)
(1)     43E : 29 03 AE                   jmp     return
(1)     441 :
(1)     441 :                    ;;; Negation; result = -result
(1)     441 :                    ;;; @param 0:1 result
(1)     441 :                    ;;; @clobber A
(1)     441 :                    negsi1:
(1)     441 : 40                         lr      A, 0
(1)     442 : 18                         com
(1)     443 : 50                         lr      0, A            ; MSB(~result)
(1)     444 : 41                         lr      A, 1
(1)     445 : 18                         com
(1)     446 : 1F                         inc
(1)     447 : 51                         lr      1, A            ; LSB(-result)
(1)     448 : 40                         lr      A, 0
(1)     449 : 19                         lnk
(1)     44A : 50                         lr      0, A            ; MSB(-result)
(1)     44B : 29 03 AE                   jmp     return
(1)     44E :
(1)     44E :                    ;;; Signed addition: summand += addend
(1)     44E :                    ;;; @param @2: summand
(1)     44E :                    ;;; @param @3: addend
(1)     44E :                    ;;; @clobber 0 1 ISAR A
(1)     44E :                    addsi2:
(1)     44E : 43                         lr      A, 3
(1)     44F : 0B                         lr      IS, A           ; point MSB(addend)
(1)     450 : 4D                         lr      A, I
(1)     451 : 50                         lr      0, A            ; MSB(addend)
(1)     452 : 4C                         lr      A, S
(1)     453 : 51                         lr      1, A            ; LSB(addend)
(1)     454 : 42                         lr      A, 2
(1)     455 : 1F                         inc
(1)     456 : 0B                         lr      IS, A           ; point LSB(summand)
(1)     457 : 4C                         lr      A, S
(1)     458 : C1                         as      1
(1)     459 : 5E                         lr      D, A            ; store LSB(summand)
(1)     45A : 4C                         lr      A, S
(1)     45B : 19                         lnk
(1)     45C : C0                         as      0
(1)     45D : 5C                         lr      S, A
(1)     45E : 29 03 AE                   jmp     return
(1)     461 :
(1)     461 :                    ;;; Singed subtraction: minuend -= subtrahend
(1)     461 :                    ;;; @param @2: minuend
(1)     461 :                    ;;; @param @3: subtrahend
(1)     461 :                    ;;; @clobber 0 1 A
(1)     461 :                    subsi2:
(1)     461 : 43                         lr      A, 3
(1)     462 : 0B                         lr      IS, A           ; point MSB(subtrand)
(1)     463 : 4D                         lr      A, I
(1)     464 : 18                         com
(1)     465 : 50                         lr      0, A            ; MSB(~subtrand)
(1)     466 : 4C                         lr      A, S
(1)     467 : 18                         com
(1)     468 : 1F                         inc
(1)     469 : 51                         lr      1, A            ; LSB(-subtrand)
(1)     46A : 40                         lr      A, 0
(1)     46B : 19                         lnk
(1)     46C : 50                         lr      0, A            ; MSB(-subtrand)
(1)     46D : 42                         lr      A, 2
(1)     46E : 1F                         inc
(1)     46F : 0B                         lr      IS, A           ; point LSB(minuend)
(1)     470 : 4C                         lr      A, S
(1)     471 : C1                         as      1
(1)     472 : 5E                         lr      D, A            ; store LSB(minuend)
(1)     473 : 4C                         lr      A, S
(1)     474 : 19                         lnk
(1)     475 : C0                         as      0
(1)     476 : 5C                         lr      S, A
(1)     477 : 29 03 AE                   jmp     return
(1)     47A :
(1)     47A :                    ;;; Signed comparison: minuend - subtrahend
(1)     47A :                    ;;; @param @2: minuend
(1)     47A :                    ;;; @param @3: subtrahend
(1)     47A :                    ;;; @return W.Z, W.S
(1)     47A :                    ;;; @clobber 0 1 ISAR A J
(1)     47A :                    cmpsi2:
(1)     47A : 43                         lr      A, 3
(1)     47B : 0B                         lr      IS, A           ; point MSB(subtrahend)
(1)     47C : 4D                         lr      A, I
(1)     47D : 18                         com
(1)     47E : 50                         lr      0, A            ; MSB(~subtrahend)
(1)     47F : 4C                         lr      A, S
(1)     480 : 18                         com
(1)     481 : 1F                         inc
(1)     482 : 51                         lr      1, A            ; LSB(-subtrahend)
(1)     483 : 40                         lr      A, 0
(1)     484 : 19                         lnk
(1)     485 : 50                         lr      0, A            ; MSB(-subtrahend)
(1)     486 : 42                         lr      A, 2
(1)     487 : 1F                         inc
(1)     488 : 0B                         lr      IS, A           ; point LSB(minuend)
(1)     489 : 4E                         lr      A, D
(1)     48A : C1                         as      1
(1)     48B : 51                         lr      1, A            ; LSB(minued-subtrahend)
(1)     48C : 4C                         lr      A, S
(1)     48D : 19                         lnk
(1)     48E : C0                         as      0
(1)     48F : 50                         lr      0, A            ; MSB(minued-subtrahend)
(1)     490 : 70                         clr                     ; MSB(A)=overflow
(1)     491 : 98 03                      bno     cmpsi2_nov      ; no overflow
(1)     493 : 23 80                      xi      H'80'           ; MSB(A)=overflow
(1)     495 :                    cmpsi2_nov:
(1)     495 : 59                         lr      J, A            ; MSB(J)=overflow
(1)     496 : 40                         lr      A, 0
(1)     497 : 22 00                      oi      0
(1)     499 : 94 06                      bnz     cmpsi2_cmp
(1)     49B : 41                         lr      A, 1
(1)     49C : 22 00                      oi      0
(1)     49E : 84 05                      bz      cmpsi2_eq       ; minued==subtrahend
(1)     4A0 :                    cmpsi2_cmp
(1)     4A0 : 40                         lr      A, 0            ; sign(minued-subtrahend)
(1)     4A1 : E9                         xs      J               ; sign^overflow
(1)     4A2 : 22 01                      oi      1               ; W.Z=0, W.S=result
(1)     4A4 :                    cmpsi2_eq:
(1)     4A4 : 29 03 AE                   jmp     return          ; W.Z=1
(1)     4A7 :
(1)     4A7 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)     4A7 :                    ;;; @param 4:5 multiplicand
(1)     4A7 :                    ;;; @param 6:7 multiplier
(1)     4A7 :                    ;;; @return 4:5 result
(1)     4A7 :                    ;;; @clobber 4 5 6 7
(1)     4A7 :                    umul16:
(1)     4A7 : 28 03 50                   pi      pushQ           ; save Q
(1)     4AA : 28 03 2F                   pi      push0           ; save 0
(1)     4AD : 70                         clr
(1)     4AE : 06                         lr      QU, A
(1)     4AF : 07                         lr      QL, A           ; result=0
(1)     4B0 : 90 25                      br      umul16_check
(1)     4B2 :                    umul16_loop:
(1)     4B2 : 47                         lr      A, 7
(1)     4B3 : 21 01                      ni      1
(1)     4B5 : 84 08                      bz      umul16_sr       ; lsb(multiplier)==0
(1)     4B7 : 03                         lr      A, QL
(1)     4B8 : C5                         as      5
(1)     4B9 : 07                         lr      QL, A
(1)     4BA : 02                         lr      A, QU
(1)     4BB : 19                         lnk
(1)     4BC : C4                         as      4
(1)     4BD : 06                         lr      QU, A           ; result += multiplicand
(1)     4BE :                    umul16_sr:
(1)     4BE : 70                         clr
(1)     4BF : 50                         lr      0, A            ; 0=carry
(1)     4C0 : 46                         lr      A, 6
(1)     4C1 : 21 01                      ni      1
(1)     4C3 : 84 04                      bz      umul16_sr_nz
(1)     4C5 : 20 80                      li      H'80'
(1)     4C7 : 50                         lr      0, A            ; set carry
(1)     4C8 :                    umul16_sr_nz:
(1)     4C8 : 46                         lr      A, 6
(1)     4C9 : 12                         sr      1
(1)     4CA : 56                         lr      6, A
(1)     4CB : 47                         lr      A, 7
(1)     4CC : 12                         sr      1
(1)     4CD : E0                         xs      0               ; shift in carry
(1)     4CE : 57                         lr      7, A            ; multiplier >>= 1
(1)     4CF :                    umul16_next:
(1)     4CF : 45                         lr      A, 5
(1)     4D0 : C5                         as      5
(1)     4D1 : 55                         lr      5, A
(1)     4D2 : 44                         lr      A, 4
(1)     4D3 : 19                         lnk
(1)     4D4 : C4                         as      4
(1)     4D5 : 54                         lr      4, A            ; multiplicand <<= 1
(1)     4D6 :                    umul16_check:
(1)     4D6 : 46                         lr      A, 6
(1)     4D7 : 22 00                      oi      0
(1)     4D9 : 94 D8                      bnz     umul16_loop
(1)     4DB : 47                         lr      A, 7
(1)     4DC : 22 00                      oi      0
(1)     4DE : 94 D3                      bnz     umul16_loop     ; while multiplier != 0
(1)     4E0 : 02                         lr      A, QU
(1)     4E1 : 54                         lr      4, A
(1)     4E2 : 03                         lr      A, QL
(1)     4E3 : 55                         lr      5, A            ; 4:5=result
(1)     4E4 : 28 03 5D                   pi      pop0            ; restore 0
(1)     4E7 : 28 03 83                   pi      popQ            ; restore Q
(1)     4EA : 29 03 AE                   jmp     return
(1)     4ED :
(1)     4ED :                    ;;; Unsigned multiplication: multiplicand = multiplier
(1)     4ED :                    ;;; @param @2: multiplicand
(1)     4ED :                    ;;; @param @3: multiplier
(1)     4ED :                    ;;; @clobber 4 5 6 7 A
(1)     4ED :                    umulsi2:
(1)     4ED : 42                         lr      A, 2
(1)     4EE : 0B                         lr      IS, A
(1)     4EF : 4D                         lr      A, I
(1)     4F0 : 54                         lr      4, A
(1)     4F1 : 4C                         lr      A, S
(1)     4F2 : 55                         lr      5, A            ; 4:5=multiplicand
(1)     4F3 : 43                         lr      A, 3
(1)     4F4 : 0B                         lr      IS, A
(1)     4F5 : 4D                         lr      A, I
(1)     4F6 : 56                         lr      6, A
(1)     4F7 : 4C                         lr      A, S
(1)     4F8 : 57                         lr      7, A            ; 6:7=multiplier
(1)     4F9 : 28 03 91                   pi      call
(1)     4FC : 04 A7                      da      umul16
(1)     4FE : 42                         lr      A, 2
(1)     4FF : 0B                         lr      IS, A
(1)     500 : 44                         lr      A, 4
(1)     501 : 5D                         lr      I, A
(1)     502 : 45                         lr      A, 5
(1)     503 : 5C                         lr      S, A            ; @2=result
(1)     504 : 29 03 AE                   jmp     return
(1)     507 :
(1)     507 :                    ;;; Signed multiplication: multiplicand = multiplier
(1)     507 :                    ;;; @param @2: multiplicand
(1)     507 :                    ;;; @param @3: multiplier
(1)     507 :                    ;;; @clobber 4 5 6 7 A
(1)     507 :                    mulsi2:
(1)     507 : 42                         lr      A, 2
(1)     508 : 1F                         inc
(1)     509 : 0B                         lr      IS, A           ; point LSB(@2)
(1)     50A : 4E                         lr      A, D
(1)     50B : 55                         lr      5, A
(1)     50C : 4C                         lr      A, S
(1)     50D : 54                         lr      4, A            ; 4:5=multiplicand
(1)     50E : 22 00                      oi      0
(1)     510 : 81 0A                      bp      mulsi2_multiplier
(1)     512 : 18                         com
(1)     513 : 54                         lr      4, A            ; MSB(~multiplicand)
(1)     514 : 45                         lr      A, 5
(1)     515 : 18                         com
(1)     516 : 1F                         inc
(1)     517 : 55                         lr      5, A            ; LSB(-multiplicand)
(1)     518 : 44                         lr      A, 4
(1)     519 : 19                         lnk
(1)     51A : 54                         lr      4, A            ; MSB(-multiplicand)
(1)     51B :                    mulsi2_multiplier:
(1)     51B : 43                         lr      A, 3
(1)     51C : 1F                         inc
(1)     51D : 0B                         lr      IS, A           ; point LSB(@3)
(1)     51E : 4E                         lr      A, D
(1)     51F : 57                         lr      7, A
(1)     520 : 4C                         lr      A, S
(1)     521 : 56                         lr      6, A
(1)     522 : 22 00                      oi      0
(1)     524 : 81 0A                      bp      mulsi2_multiply
(1)     526 : 18                         com
(1)     527 : 56                         lr      6, A            ; MSB(~multiplyer)
(1)     528 : 47                         lr      A, 7
(1)     529 : 18                         com
(1)     52A : 1F                         inc
(1)     52B : 57                         lr      7, A            ; LSB(-multiplyer)
(1)     52C : 46                         lr      A, 6
(1)     52D : 19                         lnk
(1)     52E : 56                         lr      6, A            ; MSB(-multiplyer)
(1)     52F :                    mulsi2_multiply:
(1)     52F : 28 03 91                   pi      call
(1)     532 : 04 A7                      da      umul16
(1)     534 : 43                         lr      A, 3
(1)     535 : 0B                         lr      IS, A
(1)     536 : 4C                         lr      A, S
(1)     537 : 56                         lr      6, A            ; MSB(multiplyer)
(1)     538 : 42                         lr      A, 2
(1)     539 : 0B                         lr      IS, A
(1)     53A : 4C                         lr      A, S            ; MSB(multiplicand)
(1)     53B : E6                         xs      6               ; MSB(multiplicand^multiplyer)
(1)     53C : 81 0B                      bp      mulsi2_store
(1)     53E : 44                         lr      A, 4
(1)     53F : 18                         com
(1)     540 : 54                         lr      4, A            ; MSB(~result)
(1)     541 : 45                         lr      A, 5
(1)     542 : 18                         com
(1)     543 : 1F                         inc
(1)     544 : 55                         lr      5, A            ; LSB(-result)
(1)     545 : 44                         lr      A, 4
(1)     546 : 19                         lnk
(1)     547 : 54                         lr      4, A            ; MSB(-result)
(1)     548 :                    mulsi2_store:
(1)     548 : 44                         lr      A, 4
(1)     549 : 5D                         lr      I, A
(1)     54A : 45                         lr      A, 5
(1)     54B : 5C                         lr      S, A            ; @2=result
(1)     54C : 29 03 AE                   jmp     return
(1)     54F :
(1)     54F :                    ;;; Unsigned comparison: minuend - subtrahend
(1)     54F :                    ;;; @param 4:5 minuend
(1)     54F :                    ;;; @param 6:7 subtrahend
(1)     54F :                    ;;; @clobber J
(1)     54F :                    ;;; @return W.Z W.S
(1)     54F :                    ucmp16:
(1)     54F : 28 03 39                   pi      push1
(1)     552 : 28 03 2F                   pi      push0
(1)     555 : 46                         lr      A, 6
(1)     556 : 18                         com
(1)     557 : 50                         lr      0, A
(1)     558 : 47                         lr      A, 7
(1)     559 : 18                         com
(1)     55A : 1F                         inc
(1)     55B : 51                         lr      1, A
(1)     55C : 40                         lr      A, 0
(1)     55D : 19                         lnk
(1)     55E : 50                         lr      0, A            ; 0:1=-subtrahend
(1)     55F : 45                         lr      A, 5
(1)     560 : C1                         as      1
(1)     561 : 51                         lr      1, A
(1)     562 : 44                         lr      A, 4
(1)     563 : 19                         lnk
(1)     564 : C0                         as      0
(1)     565 : 50                         lr      0, A            ; 0:1=minuend-subtrahend
(1)     566 : 1E                         lr      J, W
(1)     567 : 49                         lr      A, J
(1)     568 : 15                         sl      4
(1)     569 : 13                         sl      1
(1)     56A : 13                         sl      1               ; sign=carry << 6
(1)     56B : 59                         lr      J, A
(1)     56C : 40                         lr      A, 0
(1)     56D : 22 00                      oi      0
(1)     56F : 94 06                      bnz     ucmp16_cmp
(1)     571 : 41                         lr      A, 1
(1)     572 : 22 00                      oi      0
(1)     574 : 84 06                      bz      ucmp16_eq
(1)     576 :                    ucmp16_cmp:
(1)     576 : 49                         lr      A, J
(1)     577 : 23 80                      xi      H'80'
(1)     579 : 22 01                      oi      1               ; W.Z=0, W.S=~W.C
(1)     57B :                    ucmp16_eq:     
(1)     57B : 28 03 5D                   pi      pop0
(1)     57E : 28 03 69                   pi      pop1
(1)     581 : 29 03 AE                   jmp     return
(1)     584 :
(1)     584 :                    ;;; Unsigned division: divident / divisor = quotient ... reminder
(1)     584 :                    ;;; @praram 4:5 divident
(1)     584 :                    ;;; @praram 6:7 divisor
(1)     584 :                    ;;; @return 4:5 quotient
(1)     584 :                    ;;; @return 6:7 reminder
(1)     584 :                    ;;; @clobber 4 5 6 7 A
(1)     584 :                    udiv16:
(1)     584 : 28 03 50                   pi      pushQ           ; save Q
(1)     587 : 28 03 39                   pi      push1           ; save 1
(1)     58A : 28 03 2F                   pi      push0           ; save 0
(1)     58D : 71                         lis     1
(1)     58E : 50                         lr      0, A            ; bits=1
(1)     58F : 46                         lr      A, 6
(1)     590 : 22 00                      oi      0
(1)     592 : 94 1C                      bnz     udiv16_prep
(1)     594 : 47                         lr      A, 7
(1)     595 : 22 00                      oi      0
(1)     597 : 94 17                      bnz     udiv16_prep
(1)     599 : 28 03 5D                   pi      pop0
(1)     59C : 28 03 69                   pi      pop1
(1)     59F : 28 03 83                   pi      popQ
(1)     5A2 : 29 03 AE                   jmp     return          ; divide by zero
(1)     5A5 :                    udiv16_prep_loop:
(1)     5A5 : 47                         lr      A, 7
(1)     5A6 : C7                         as      7
(1)     5A7 : 57                         lr      7, A
(1)     5A8 : 46                         lr      A, 6
(1)     5A9 : 19                         lnk
(1)     5AA : C6                         as      6
(1)     5AB : 56                         lr      6, A            ; divisor <<= 1
(1)     5AC : 40                         lr      A, 0
(1)     5AD : 1F                         inc
(1)     5AE : 50                         lr      0, A            ; ++bits
(1)     5AF :                    udiv16_prep:
(1)     5AF : 46                         lr      A, 6
(1)     5B0 : 22 00                      oi      0
(1)     5B2 : 81 F2                      bp      udiv16_prep_loop ; while msb(divisor) == 0
(1)     5B4 : 70                         clr
(1)     5B5 : 06                         lr      QU, A
(1)     5B6 : 07                         lr      QL, A           ; Q=quotient
(1)     5B7 : 90 21                      br      udiv16_enter_loop
(1)     5B9 :                    udiv16_loop:
(1)     5B9 : 28 03 5D                   pi      pop0            ; restore bits
(1)     5BC : 30                         ds      0               ; --bits
(1)     5BD : 84 3B                      bz      udiv16_return   ; while bits != 0
(1)     5BF : 70                         clr
(1)     5C0 : 51                         lr      1, A            ; clear carry
(1)     5C1 : 46                         lr      A, 6
(1)     5C2 : 21 01                      ni      1
(1)     5C4 : 84 04                      bz      udiv16_sr_lsb
(1)     5C6 : 20 80                      li      H'80'
(1)     5C8 : 51                         lr      1, A            ; set carry
(1)     5C9 :                    udiv16_sr_lsb:
(1)     5C9 : 46                         lr      A, 6
(1)     5CA : 12                         sr      1
(1)     5CB : 56                         lr      6, A
(1)     5CC : 47                         lr      A, 7
(1)     5CD : 12                         sr      1
(1)     5CE : E1                         xs      1               ; shift in carry
(1)     5CF : 57                         lr      7, A            ; divisor >>= 1
(1)     5D0 : 03                         lr      A, QL
(1)     5D1 : 51                         lr      1, A
(1)     5D2 : C1                         as      1
(1)     5D3 : 07                         lr      QL, A
(1)     5D4 : 02                         lr      A, QU
(1)     5D5 : 51                         lr      1, A
(1)     5D6 : 19                         lnk
(1)     5D7 : C1                         as      1
(1)     5D8 : 06                         lr      QU, A           ; quotient <<= 1
(1)     5D9 :                    udiv16_enter_loop:
(1)     5D9 : 28 03 2F                   pi      push0           ; save bits
(1)     5DC : 28 03 91                   pi      call
(1)     5DF : 05 4F                      da      ucmp16          ; divident <=> divisor
(1)     5E1 : 91 D7                      bm      udiv16_loop     ; branch if divident < divisor
(1)     5E3 : 46                         lr      A, 6
(1)     5E4 : 18                         com
(1)     5E5 : 50                         lr      0, A
(1)     5E6 : 47                         lr      A, 7
(1)     5E7 : 18                         com
(1)     5E8 : 1F                         inc
(1)     5E9 : 51                         lr      1, A
(1)     5EA : 40                         lr      A, 0
(1)     5EB : 19                         lnk
(1)     5EC : 50                         lr      0, A            ; 0:1=-divisor
(1)     5ED : 45                         lr      A, 5
(1)     5EE : C1                         as      1
(1)     5EF : 55                         lr      5, A
(1)     5F0 : 44                         lr      A, 4
(1)     5F1 : 19                         lnk
(1)     5F2 : C0                         as      0
(1)     5F3 : 54                         lr      4, A            ; divident-=divisor
(1)     5F4 : 03                         lr      A, QL
(1)     5F5 : 1F                         inc
(1)     5F6 : 07                         lr      QL, A           ; quotient |= 1
(1)     5F7 : 90 C1                      br      udiv16_loop
(1)     5F9 :                    udiv16_return:
(1)     5F9 : 44                         lr      A, 4
(1)     5FA : 56                         lr      6, A
(1)     5FB : 45                         lr      A, 5
(1)     5FC : 57                         lr      7, A            ; 6:7=reminder
(1)     5FD : 02                         lr      A, QU
(1)     5FE : 54                         lr      4, A
(1)     5FF : 03                         lr      A, QL
(1)     600 : 55                         lr      5, A            ; 4:5=quotient
(1)     601 : 28 03 5D                   pi      pop0            ; restore 0
(1)     604 : 28 03 69                   pi      pop1            ; restore 1
(1)     607 : 28 03 83                   pi      popQ            ; restore Q
(1)     60A : 29 03 AE                   jmp     return
(1)     60D :
(1)     60D :                    ;;; Unsigned division: dividend /= divisor
(1)     60D :                    ;;; @praram @2: dividend
(1)     60D :                    ;;; @praram @3: divisor
(1)     60D :                    ;;; @clobber 4 5 6 7 A
(1)     60D :                    udivsi2:
(1)     60D : 42                         lr      A, 2
(1)     60E : 0B                         lr      IS, A
(1)     60F : 4D                         lr      A, I
(1)     610 : 54                         lr      4, A
(1)     611 : 4C                         lr      A, S
(1)     612 : 55                         lr      5, A            ; 4:5=divident
(1)     613 : 43                         lr      A, 3
(1)     614 : 0B                         lr      IS, A
(1)     615 : 4D                         lr      A, I
(1)     616 : 56                         lr      6, A
(1)     617 : 4C                         lr      A, S
(1)     618 : 57                         lr      7, A            ; 6:7=divisor
(1)     619 : 28 03 91                   pi      call
(1)     61C : 05 84                      da      udiv16
(1)     61E : 42                         lr      A, 2
(1)     61F : 0B                         lr      IS, A
(1)     620 : 44                         lr      A, 4
(1)     621 : 5D                         lr      I, A
(1)     622 : 45                         lr      A, 5
(1)     623 : 5C                         lr      S, A            ; @2=result
(1)     624 : 29 03 AE                   jmp     return
(1)     627 :
(1)     627 :
(1)     627 :                    ;;; Signed division: divident /= divisor
(1)     627 :                    ;;; @param @2: divident
(1)     627 :                    ;;; @param @3: divisor
(1)     627 :                    ;;; @clobber 4 5 6 7 A
(1)     627 :                    divsi2:
(1)     627 : 42                         lr      A, 2
(1)     628 : 1F                         inc
(1)     629 : 0B                         lr      IS, A           ; point LSB(@2)
(1)     62A : 4E                         lr      A, D
(1)     62B : 55                         lr      5, A
(1)     62C : 4C                         lr      A, S
(1)     62D : 54                         lr      4, A            ; 4:5=divident
(1)     62E : 22 00                      oi      0
(1)     630 : 81 0A                      bp      divsi2_divisor
(1)     632 : 18                         com
(1)     633 : 54                         lr      4, A            ; MSB(~divident)
(1)     634 : 45                         lr      A, 5
(1)     635 : 18                         com
(1)     636 : 1F                         inc
(1)     637 : 55                         lr      5, A            ; LSB(-divident)
(1)     638 : 44                         lr      A, 4
(1)     639 : 19                         lnk
(1)     63A : 54                         lr      4, A            ; MSB(-divident)
(1)     63B :                    divsi2_divisor:
(1)     63B : 43                         lr      A, 3
(1)     63C : 1F                         inc
(1)     63D : 0B                         lr      IS, A           ; point LSB(@3)
(1)     63E : 4E                         lr      A, D
(1)     63F : 57                         lr      7, A
(1)     640 : 4C                         lr      A, S
(1)     641 : 56                         lr      6, A
(1)     642 : 22 00                      oi      0
(1)     644 : 81 0A                      bp      divsi2_divide
(1)     646 : 18                         com
(1)     647 : 56                         lr      6, A            ; MSB(~divisor)
(1)     648 : 47                         lr      A, 7
(1)     649 : 18                         com
(1)     64A : 1F                         inc
(1)     64B : 57                         lr      7, A            ; LSB(-divisor)
(1)     64C : 46                         lr      A, 6
(1)     64D : 19                         lnk
(1)     64E : 56                         lr      6, A            ; MSB(-divisor)
(1)     64F :                    divsi2_divide:
(1)     64F : 28 03 91                   pi      call
(1)     652 : 05 84                      da      udiv16
(1)     654 : 43                         lr      A, 3
(1)     655 : 0B                         lr      IS, A
(1)     656 : 4C                         lr      A, S
(1)     657 : 56                         lr      6, A            ; MSB(divisor)
(1)     658 : 42                         lr      A, 2
(1)     659 : 0B                         lr      IS, A
(1)     65A : 4C                         lr      A, S            ; MSB(divident)
(1)     65B : E6                         xs      6               ; MSB(divident^divisor)
(1)     65C : 81 0B                      bp      divsi2_store
(1)     65E : 44                         lr      A, 4
(1)     65F : 18                         com
(1)     660 : 54                         lr      4, A            ; MSB(~result)
(1)     661 : 45                         lr      A, 5
(1)     662 : 18                         com
(1)     663 : 1F                         inc
(1)     664 : 55                         lr      5, A            ; LSB(-result)
(1)     665 : 44                         lr      A, 4
(1)     666 : 19                         lnk
(1)     667 : 54                         lr      4, A            ; MSB(-result)
(1)     668 :                    divsi2_store:
(1)     668 : 44                         lr      A, 4
(1)     669 : 5D                         lr      I, A
(1)     66A : 45                         lr      A, 5
(1)     66B : 5C                         lr      S, A            ; @2=result
(1)     66C : 29 03 AE                   jmp     return
(1)     66F :
(1)     66F :                    ;;; Local Variables:
(1)     66F :                    ;;; mode: asm
(1)     66F :                    ;;; End:
(1)     66F :                    ;;; vim: set ft=asm et ts=4 sw=4:
        66F :                            include "mandelbrot.inc"
(1)     66F : =66F               _mandelbrot:    equ     $
(1)     66F :
(1)     66F :                    ;;; Scratchpad registers
(1)      10 :                            org     H'10'
(1)      10 :                    vF:     rs      2
(1)      12 :                    vC:     rs      2
(1)      14 :                    vD:     rs      2
(1)      16 :                    vA:     rs      2
(1)      18 :                    vB:     rs      2
(1)      1A :                    vP:     rs      2
(1)      1C :                    vQ:     rs      2
(1)      1E :                    vS:     rs      2
(1)      20 :                    vT:     rs      2
(1)      22 :                    vY:     rs      2
(1)      24 :                    vX:     rs      2
(1)      26 :                    vI:     rs      2
(1)      28 :                    vTmp:   rs      2
(1)      2A :                    c4:     rs      2               ; constant 4
(1)      2C :                    c16:    rs      2               ; constant 16
(1)      2E :                    c30:    rs      2               ; constant 30
(1)      30 :                    c100:   rs      2               ; constant 100
(1)      32 :                    c229:   rs      2               ; constant 229
(1)      34 :                    c416:   rs      2               ; constant 416
(1)      36 :
(1)     66F :                            org     _mandelbrot
(1)     66F :
(1)     66F :                    ;;; Store DC to scratchpad pointed by 2
(1)     66F :                    ;;; @param DC value
(1)     66F :                    ;;; @param 2 scratchpad number
(1)     66F :                    ;;; @clobber H A
(1)     66F :                    store_2:
(1)     66F : 42                         lr      A, 2
(1)     670 : 0B                         lr      IS, A
(1)     671 : 11                         lr      H, DC
(1)     672 : 4A                         lr      A, HU
(1)     673 : 5D                         lr      I, A
(1)     674 : 4B                         lr      A, HL
(1)     675 : 5C                         lr      S, A
(1)     676 : 1C                         pop
(1)     677 :
(1)     677 :                    ;;; Store DC to scratchpad pointed by 3
(1)     677 :                    ;;; @param DC value
(1)     677 :                    ;;; @param 3 scratchpad number
(1)     677 :                    ;;; @clobber H A
(1)     677 :                    store_3:
(1)     677 : 43                         lr      A, 3
(1)     678 : 0B                         lr      IS, A
(1)     679 : 11                         lr      H, DC
(1)     67A : 4A                         lr      A, HU
(1)     67B : 5D                         lr      I, A
(1)     67C : 4B                         lr      A, HL
(1)     67D : 5C                         lr      S, A
(1)     67E : 1C                         pop
(1)     67F :
(1)     67F :                    ;;; Assign @3 to @2
(1)     67F :                    ;;; @param @2 assignee
(1)     67F :                    ;;; @param @3 value
(1)     67F :                    ;;; @clobber H A
(1)     67F :                    assign_2:       
(1)     67F : 43                         lr      A, 3
(1)     680 : 0B                         lr      IS, A
(1)     681 : 4D                         lr      A, I
(1)     682 : 5A                         lr      HU, A
(1)     683 : 4C                         lr      A, S
(1)     684 : 5B                         lr      HL, A
(1)     685 : 42                         lr      A, 2
(1)     686 : 0B                         lr      IS, A
(1)     687 : 4A                         lr      A, HU
(1)     688 : 5D                         lr      I, A
(1)     689 : 4B                         lr      A, HL
(1)     68A : 5C                         lr      S, A
(1)     68B : 1C                         pop
(1)     68C :
(1)     68C :                    ;;; Increment: result += 1
(1)     68C :                    ;;; @param @2: result
(1)     68C :                    ;;; @clobber A
(1)     68C :                    inc16:
(1)     68C : 42                         lr      A, 2
(1)     68D : 1F                         inc
(1)     68E : 0B                         lr      IS, A
(1)     68F : 4C                         lr      A, S
(1)     690 : 1F                         inc
(1)     691 : 5E                         lr      D, A
(1)     692 : 4C                         lr      A, S
(1)     693 : 19                         lnk
(1)     694 : 5C                         lr      S, A
(1)     695 : 1C                         pop
(1)     696 :
(1)     696 :                    mandelbrot:
(1)     696 : 2A 00 04                   dci     4
(1)     699 : 20 2A                      li      c4
(1)     69B : 52                         lr      2, A
(1)     69C : 28 06 6F                   pi      store_2         ; c4=4
(1)     69F : 2A 00 10                   dci     16
(1)     6A2 : 20 2C                      li      c16
(1)     6A4 : 52                         lr      2, A
(1)     6A5 : 28 06 6F                   pi      store_2         ; c16=16
(1)     6A8 : 2A 00 1E                   dci     30
(1)     6AB : 20 2E                      li      c30
(1)     6AD : 52                         lr      2, A
(1)     6AE : 28 06 6F                   pi      store_2         ; c30=30
(1)     6B1 : 2A 00 64                   dci     100
(1)     6B4 : 20 30                      li      c100
(1)     6B6 : 52                         lr      2, A
(1)     6B7 : 28 06 6F                   pi      store_2         ; c100=100
(1)     6BA : 2A 00 E5                   dci     229
(1)     6BD : 20 32                      li      c229
(1)     6BF : 52                         lr      2, A
(1)     6C0 : 28 06 6F                   pi      store_2         ; c229=229
(1)     6C3 : 2A 01 A0                   dci     416
(1)     6C6 : 20 34                      li      c416
(1)     6C8 : 52                         lr      2, A
(1)     6C9 : 28 06 6F                   pi      store_2         ; c416=416
(1)     6CC : 2A 00 32                   dci     50
(1)     6CF : 20 10                      li      vF
(1)     6D1 : 52                         lr      2, A
(1)     6D2 : 28 06 6F                   pi      store_2         ; F=50
(1)     6D5 : 2A FF F4                   dci     -12
(1)     6D8 : 20 22                      li      vY
(1)     6DA : 52                         lr      2, A
(1)     6DB : 28 06 6F                   pi      store_2         ; Y=-12
(1)     6DE :                    loop_y:
(1)     6DE : 2A FF CF                   dci     -49
(1)     6E1 : 20 24                      li      vX
(1)     6E3 : 52                         lr      2, A
(1)     6E4 : 28 06 6F                   pi      store_2         ; X=-49
(1)     6E7 :                    loop_x:
(1)     6E7 : 20 12                      li      vC
(1)     6E9 : 52                         lr      2, A
(1)     6EA : 20 24                      li      vX
(1)     6EC : 53                         lr      3, A
(1)     6ED : 28 06 7F                   pi      assign_2        ; C=X
(1)     6F0 : 20 32                      li      c229
(1)     6F2 : 53                         lr      3, A
(1)     6F3 : 28 03 91                   pi      call
(1)     6F6 : 05 07                      da      mulsi2          ; C=X*229
(1)     6F8 : 20 30                      li      c100
(1)     6FA : 53                         lr      3, A
(1)     6FB : 28 03 91                   pi      call
(1)     6FE : 06 27                      da      divsi2          ; C=X*229/100
(1)     700 : 20 14                      li      vD
(1)     702 : 52                         lr      2, A
(1)     703 : 20 22                      li      vY
(1)     705 : 53                         lr      3, A
(1)     706 : 28 06 7F                   pi      assign_2        ; D=Y
(1)     709 : 20 34                      li      c416
(1)     70B : 53                         lr      3, A
(1)     70C : 28 03 91                   pi      call
(1)     70F : 05 07                      da      mulsi2          ; D=Y*416
(1)     711 : 20 30                      li      c100
(1)     713 : 53                         lr      3, A
(1)     714 : 28 03 91                   pi      call
(1)     717 : 06 27                      da      divsi2          ; D=Y*416/100
(1)     719 : 20 16                      li      vA
(1)     71B : 52                         lr      2, A
(1)     71C : 20 12                      li      vC
(1)     71E : 53                         lr      3, A
(1)     71F : 28 06 7F                   pi      assign_2        ; A=C
(1)     722 : 20 18                      li      vB
(1)     724 : 52                         lr      2, A
(1)     725 : 20 14                      li      vD
(1)     727 : 53                         lr      3, A
(1)     728 : 28 06 7F                   pi      assign_2        ; B=D
(1)     72B : 2A 00 00                   dci     0
(1)     72E : 20 26                      li      vI
(1)     730 : 52                         lr      2, A
(1)     731 : 28 06 6F                   pi      store_2         ; I=0
(1)     734 :
(1)     734 :                            ;; li      vY
(1)     734 :                            ;; lr      2, A
(1)     734 :                            ;; li      C'Y'
(1)     734 :                            ;; lr      0, A
(1)     734 :                            ;; pi      call
(1)     734 :                            ;; da      print_2
(1)     734 :
(1)     734 :                            ;; li      vX
(1)     734 :                            ;; lr      2, A
(1)     734 :                            ;; li      C'X'
(1)     734 :                            ;; lr      0, A
(1)     734 :                            ;; pi      call
(1)     734 :                            ;; da      print_2
(1)     734 :
(1)     734 :                            ;; li      vC
(1)     734 :                            ;; lr      2, A
(1)     734 :                            ;; li      C'C'
(1)     734 :                            ;; lr      0, A
(1)     734 :                            ;; pi      call
(1)     734 :                            ;; da      print_2
(1)     734 :
(1)     734 :                            ;; li      vD
(1)     734 :                            ;; lr      2, A
(1)     734 :                            ;; li      C'D'
(1)     734 :                            ;; lr      0, A
(1)     734 :                            ;; pi      call
(1)     734 :                            ;; da      print_2
(1)     734 :
(1)     734 :                            ;; pi      call
(1)     734 :                            ;; da      newline
(1)     734 :
(1)     734 :                    loop_i:
(1)     734 : 20 1C                      li      vQ
(1)     736 : 52                         lr      2, A
(1)     737 : 20 18                      li      vB
(1)     739 : 53                         lr      3, A
(1)     73A : 28 06 7F                   pi      assign_2        ; Q=B
(1)     73D : 20 10                      li      vF
(1)     73F : 53                         lr      3, A
(1)     740 : 28 03 91                   pi      call
(1)     743 : 06 27                      da      divsi2          ; Q=B/F
(1)     745 : 20 1E                      li      vS
(1)     747 : 52                         lr      2, A
(1)     748 : 20 1C                      li      vQ
(1)     74A : 53                         lr      3, A
(1)     74B : 28 03 91                   pi      call
(1)     74E : 04 2D                      da      negsi2          ; S=-Q
(1)     750 : 20 10                      li      vF
(1)     752 : 53                         lr      3, A
(1)     753 : 28 03 91                   pi      call
(1)     756 : 05 07                      da      mulsi2          ; S=-Q*F
(1)     758 : 20 18                      li      vB
(1)     75A : 53                         lr      3, A
(1)     75B : 28 03 91                   pi      call
(1)     75E : 04 4E                      da      addsi2          ; S=B-Q*F
(1)     760 : 20 28                      li      vTmp
(1)     762 : 52                         lr      2, A
(1)     763 : 20 18                      li      vB
(1)     765 : 53                         lr      3, A
(1)     766 : 28 06 7F                   pi      assign_2        ; vTmp=B
(1)     769 : 28 03 91                   pi      call
(1)     76C : 05 07                      da      mulsi2          ; vTmp=B*B
(1)     76E : 20 20                      li      vT
(1)     770 : 52                         lr      2, A
(1)     771 : 20 16                      li      vA
(1)     773 : 53                         lr      3, A
(1)     774 : 28 06 7F                   pi      assign_2        ; T=A
(1)     777 : 28 03 91                   pi      call
(1)     77A : 05 07                      da      mulsi2          ; T=A*A
(1)     77C : 20 28                      li      vTmp
(1)     77E : 53                         lr      3, A
(1)     77F : 28 03 91                   pi      call
(1)     782 : 04 61                      da      subsi2          ; T=A*A-B*B
(1)     784 : 20 10                      li      vF
(1)     786 : 53                         lr      3, A
(1)     787 : 28 03 91                   pi      call
(1)     78A : 06 27                      da      divsi2          ; T=(A*A-B*B)/F
(1)     78C : 20 12                      li      vC
(1)     78E : 53                         lr      3, A
(1)     78F : 28 03 91                   pi      call
(1)     792 : 04 4E                      da      addsi2          ; T=(A*A-B*B)/F+C
(1)     794 : 20 28                      li      vTmp
(1)     796 : 52                         lr      2, A
(1)     797 : 20 16                      li      vA
(1)     799 : 53                         lr      3, A
(1)     79A : 28 06 7F                   pi      assign_2        ; vTmp=A
(1)     79D : 20 1E                      li      vS
(1)     79F : 53                         lr      3, A
(1)     7A0 : 28 03 91                   pi      call
(1)     7A3 : 05 07                      da      mulsi2          ; vTmp=A*S
(1)     7A5 : 20 10                      li      vF
(1)     7A7 : 53                         lr      3, A
(1)     7A8 : 28 03 91                   pi      call
(1)     7AB : 06 27                      da      divsi2          ; vTmp=A*S/F
(1)     7AD : 20 18                      li      vB
(1)     7AF : 52                         lr      2, A
(1)     7B0 : 20 16                      li      vA
(1)     7B2 : 53                         lr      3, A
(1)     7B3 : 28 06 7F                   pi      assign_2        ; B=A
(1)     7B6 : 20 1C                      li      vQ
(1)     7B8 : 53                         lr      3, A
(1)     7B9 : 28 03 91                   pi      call
(1)     7BC : 05 07                      da      mulsi2          ; B=A*Q
(1)     7BE : 20 28                      li      vTmp
(1)     7C0 : 53                         lr      3, A
(1)     7C1 : 28 03 91                   pi      call
(1)     7C4 : 04 4E                      da      addsi2          ; B=A*Q+A*S/F
(1)     7C6 : 20 18                      li      vB
(1)     7C8 : 53                         lr      3, A
(1)     7C9 : 28 03 91                   pi      call
(1)     7CC : 04 4E                      da      addsi2          ; B=2*(A*Q+A*S/F)
(1)     7CE : 20 14                      li      vD
(1)     7D0 : 53                         lr      3, A
(1)     7D1 : 28 03 91                   pi      call
(1)     7D4 : 04 4E                      da      addsi2          ; B=2*(A*Q+A*S/F)+D
(1)     7D6 : 20 16                      li      vA
(1)     7D8 : 52                         lr      2, A
(1)     7D9 : 20 20                      li      vT
(1)     7DB : 53                         lr      3, A
(1)     7DC : 28 06 7F                   pi      assign_2        ; A=T
(1)     7DF : 20 1A                      li      vP
(1)     7E1 : 52                         lr      2, A
(1)     7E2 : 20 16                      li      vA
(1)     7E4 : 53                         lr      3, A
(1)     7E5 : 28 06 7F                   pi      assign_2        ; P=A
(1)     7E8 : 20 10                      li      vF
(1)     7EA : 53                         lr      3, A
(1)     7EB : 28 03 91                   pi      call
(1)     7EE : 06 27                      da      divsi2          ; P=A/F
(1)     7F0 : 20 1C                      li      vQ
(1)     7F2 : 52                         lr      2, A
(1)     7F3 : 20 18                      li      vB
(1)     7F5 : 53                         lr      3, A
(1)     7F6 : 28 06 7F                   pi      assign_2        ; Q=B
(1)     7F9 : 20 10                      li      vF
(1)     7FB : 53                         lr      3, A
(1)     7FC : 28 03 91                   pi      call
(1)     7FF : 06 27                      da      divsi2          ; Q=B/F
(1)     801 : 20 28                      li      vTmp
(1)     803 : 52                         lr      2, A
(1)     804 : 20 1C                      li      vQ
(1)     806 : 53                         lr      3, A
(1)     807 : 28 06 7F                   pi      assign_2        ; vTmp=Q
(1)     80A : 28 03 91                   pi      call
(1)     80D : 05 07                      da      mulsi2          ; vTmp=Q*Q
(1)     80F : 20 20                      li      vT
(1)     811 : 52                         lr      2, A
(1)     812 : 20 1A                      li      vP
(1)     814 : 53                         lr      3, A
(1)     815 : 28 06 7F                   pi      assign_2        ; T=P
(1)     818 : 28 03 91                   pi      call
(1)     81B : 05 07                      da      mulsi2          ; T=P*P
(1)     81D : 20 28                      li      vTmp
(1)     81F : 53                         lr      3, A
(1)     820 : 28 03 91                   pi      call
(1)     823 : 04 4E                      da      addsi2          ; T=P*P+Q*Q
(1)     825 :
(1)     825 :                            ;; li      C' '
(1)     825 :                            ;; lr      0, A
(1)     825 :                            ;; pi      call
(1)     825 :                            ;; da      putchar
(1)     825 :
(1)     825 :                            ;; li      vI
(1)     825 :                            ;; lr      2, A
(1)     825 :                            ;; li      C'I'
(1)     825 :                            ;; lr      0, A
(1)     825 :                            ;; pi      call
(1)     825 :                            ;; da      print_2
(1)     825 :
(1)     825 :                            ;; li      vA
(1)     825 :                            ;; lr      2, A
(1)     825 :                            ;; li      C'A'
(1)     825 :                            ;; lr      0, A
(1)     825 :                            ;; pi      call
(1)     825 :                            ;; da      print_2
(1)     825 :
(1)     825 :                            ;; li      vB
(1)     825 :                            ;; lr      2, A
(1)     825 :                            ;; li      C'B'
(1)     825 :                            ;; lr      0, A
(1)     825 :                            ;; pi      call
(1)     825 :                            ;; da      print_2
(1)     825 :
(1)     825 :                            ;; li      vP
(1)     825 :                            ;; lr      2, A
(1)     825 :                            ;; li      C'P'
(1)     825 :                            ;; lr      0, A
(1)     825 :                            ;; pi      call
(1)     825 :                            ;; da      print_2
(1)     825 :
(1)     825 :                            ;; li      vQ
(1)     825 :                            ;; lr      2, A
(1)     825 :                            ;; li      C'Q'
(1)     825 :                            ;; lr      0, A
(1)     825 :                            ;; pi      call
(1)     825 :                            ;; da      print_2
(1)     825 :
(1)     825 :                            ;; pi      call
(1)     825 :                            ;; da      newline
(1)     825 :
(1)     825 : 20 2A                      li      c4
(1)     827 : 52                         lr      2, A
(1)     828 : 20 20                      li      vT
(1)     82A : 53                         lr      3, A
(1)     82B : 28 03 91                   pi      call
(1)     82E : 04 7A                      da      cmpsi2          ; 4-T
(1)     830 : 91 18                      bm      print_i         ; if 4<T
(1)     832 : 20 26                      li      vI
(1)     834 : 52                         lr      2, A
(1)     835 : 28 06 8C                   pi      inc16           ; I+=1
(1)     838 : 20 2C                      li      c16
(1)     83A : 53                         lr      3, A
(1)     83B : 28 03 91                   pi      call
(1)     83E : 04 7A                      da      cmpsi2
(1)     840 : 91 05                      bm      jmp_loop_i      ; if I<16
(1)     842 : 20 20                      li      C' '
(1)     844 : 90 10                      br      print_char
(1)     846 :                    jmp_loop_i:
(1)     846 : 29 07 34                   jmp     loop_i
(1)     849 :                    print_i:
(1)     849 : 20 27                      li      vI+1
(1)     84B : 0B                         lr      IS, A
(1)     84C : 4C                         lr      A, S
(1)     84D : 25 09                      ci      9               ; 9-I
(1)     84F : 81 03                      bp      print_i2        ; if I<10
(1)     851 : 24 07                      ai      C'A'-C'0'-10
(1)     853 :                    print_i2:
(1)     853 : 24 30                      ai      C'0'
(1)     855 :                    print_char:
(1)     855 : 50                         lr      0, A
(1)     856 : 28 03 91                   pi      call
(1)     859 : 02 4A                      da      putchar
(1)     85B :
(1)     85B :                            ;; pi      push0
(1)     85B :                            ;; li      C'@'
(1)     85B :                            ;; lr      0, A
(1)     85B :                            ;; pi      call
(1)     85B :                            ;; da      putchar
(1)     85B :                            ;; li      C'='
(1)     85B :                            ;; lr      0, A
(1)     85B :                            ;; pi      call
(1)     85B :                            ;; da      putchar
(1)     85B :                            ;; pi      pop0
(1)     85B :
(1)     85B : 28 03 91                   pi      call
(1)     85E : 02 40                      da      getchar
(1)     860 : 92 07                      bnc     next_x
(1)     862 : 40                         lr      A, 0
(1)     863 : 22 00                      oi      0
(1)     865 : 94 02                      bnz     next_x
(1)     867 : 2F                         dc      H'2F'           ; break
(1)     868 :                    next_x:
(1)     868 : 20 24                      li      vX
(1)     86A : 52                         lr      2, A
(1)     86B : 28 06 8C                   pi      inc16           ; X+=1
(1)     86E : 20 2E                      li      c30
(1)     870 : 53                         lr      3, A
(1)     871 : 28 03 91                   pi      call
(1)     874 : 04 7A                      da      cmpsi2
(1)     876 : 91 1F                      bm      jmp_loop_x      ; if X<30
(1)     878 : 28 03 91                   pi      call
(1)     87B : 03 1E                      da      newline
(1)     87D : 20 22                      li      vY
(1)     87F : 52                         lr      2, A
(1)     880 : 28 06 8C                   pi      inc16           ; Y+=1
(1)     883 : 2A 00 0D                   dci     13
(1)     886 : 20 28                      li      vTmp
(1)     888 : 53                         lr      3, A
(1)     889 : 28 06 77                   pi      store_3         ; vTmp=13
(1)     88C : 28 03 91                   pi      call
(1)     88F : 04 7A                      da      cmpsi2
(1)     891 : 91 07                      bm      jmp_loop_y      ; if Y<13
(1)     893 : 29 03 AE                   jmp     return
(1)     896 :                    jmp_loop_x:
(1)     896 : 29 06 E7                   jmp     loop_x
(1)     899 :                    jmp_loop_y:
(1)     899 : 29 06 DE                   jmp     loop_y
(1)     89C :
(1)     89C :                    ;;; Local Variables:
(1)     89C :                    ;;; mode: asm
(1)     89C :                    ;;; End:
(1)     89C :                    ;;; vim: set ft=asm et ts=4 sw=4:

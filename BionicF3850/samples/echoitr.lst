          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     f3850
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =FFF0              USART:          equ     0FFF0H
          0 : =FFF0              USARTD:         equ     USART+0 ; Receive/Transmit data
          0 : =FFF1              USARTS:         equ     USART+1 ; Srtatus register
          0 : =FFF1              USARTC:         equ     USART+1 ; Control register
          0 : =FFF2              USARTRV:        equ     USART+2 ; Receive interrupt vector (ORG_*)
          0 : =FFF3              USARTTV:        equ     USART+3 ; Transmit interrupt vector (ORG_*)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     00000100B   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     00000010B   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     00000001B   ; Transmitter ready
          0 :
       1000 :                            org     1000H
       1000 :                    stack:
       1000 :
       2000 :                            org     2000H
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       rs      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       rs      tx_queue_size
       2100 :
          0 :                            org     0
          0 : 29 00 09                   jmp     init
          3 :
          3 :                    rx_vec:
          3 : 29 01 1B                   jmp     isr_intr_rx
          6 :
          6 :                    tx_vec:
          6 : 29 01 3A                   jmp     isr_intr_tx
          9 :
          9 :                    init:
          9 : 28 01 5E                   pi      init_stack
          C : 2A 20 00                   dci     rx_queue
          F : 0E                         lr      Q, DC
         10 : 20 80                      li      rx_queue_size
         12 : 50                         lr      0, A
         13 : 28 01 C3                   pi      call
         16 : 01 EF                      da      queue_init
         18 : 2A 20 80                   dci     tx_queue
         1B : 0E                         lr      Q, DC
         1C : 20 80                      li      tx_queue_size
         1E : 50                         lr      0, A
         1F : 28 01 C3                   pi      call
         22 : 01 EF                      da      queue_init
         24 :                    init_usart:
         24 : 70                         lis     0
         25 : 27 F1                      out     USARTC
         27 : 27 F1                      out     USARTC
         29 : 27 F1                      out     USARTC          ; safest way to sync mode
         2B :                    ;;; reset
         2B : 20 40                      li      CMD_IR_bm
         2D : 27 F1                      out     USARTC
         2F : 2B                         nop
         30 : 2B                         nop
         31 :                    ;;;  async 1stop 8data x16
         31 : 20 4E                      li      MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
         33 : 27 F1                      out     USARTC
         35 : 2B                         nop
         36 : 2B                         nop
         37 :                    ;;;  RTS/DTR, error reset, Rx enable, Tx enable
         37 : 20 37                      li      CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
         39 : 27 F1                      out     USARTC
         3B :                    ;;; enable RxRDY interrupt using INT0
         3B : 20 03                      li      rx_vec
         3D : 27 F2                      out     USARTRV
         3F :                    ;;; enable TxRDY interrupt
         3F : 20 06                      li      tx_vec
         41 : 27 F3                      out     USARTTV
         43 :
         43 :                    receive_loop:
         43 : 28 01 C3                   pi      call
         46 : 00 F6                      da      getchar
         48 : 92 FA                      bnc     receive_loop
         4A : 40                         lr      A, 0
         4B : 22 00                      oi      0
         4D : 94 02                      bnz     echo_back
         4F : 2F                         dc      H'2F'           ; unknown instruction
         50 :                    echo_back:
         50 : 51                         lr      1, A            ; save character
         51 : 28 01 C3                   pi      call
         54 : 01 00                      da      putchar         ; echo
         56 : 20 20                      li      C' '            ; space
         58 : 50                         lr      0, A
         59 : 28 01 C3                   pi      call
         5C : 01 00                      da      putchar
         5E : 41                         lr      A, 1
         5F : 50                         lr      0, A
         60 : 28 01 C3                   pi      call
         63 : 00 86                      da      put_hex8        ; print in hex
         65 : 20 20                      li      C' '            ; space
         67 : 50                         lr      0, A
         68 : 28 01 C3                   pi      call
         6B : 01 00                      da      putchar
         6D : 41                         lr      A, 1
         6E : 50                         lr      0, A
         6F : 28 01 C3                   pi      call
         72 : 00 B3                      da      put_bin8        ; print in binary
         74 : 20 0D                      li      H'0D'
         76 : 50                         lr      0, A
         77 : 28 01 C3                   pi      call
         7A : 01 00                      da      putchar
         7C : 20 0A                      li      H'0A'
         7E : 50                         lr      0, A
         7F : 28 01 C3                   pi      call
         82 : 01 00                      da      putchar
         84 : 90 BE                      br      receive_loop
         86 :
         86 :                    ;;; Print uint8_t in hex
         86 :                    ;;; @param 1 uint8_t value to be printed in hex.
         86 :                    ;;; @clobber 0 A
         86 :                    put_hex8:
         86 : 20 30                      li      C'0'
         88 : 50                         lr      0, A
         89 : 28 01 C3                   pi      call
         8C : 01 00                      da      putchar
         8E : 20 78                      li      C'x'
         90 : 50                         lr      0, A
         91 : 28 01 C3                   pi      call
         94 : 01 00                      da      putchar
         96 : 41                         lr      A, 1
         97 : 14                         sr      4
         98 : 50                         lr      0, A
         99 : 28 01 C3                   pi      call
         9C : 00 A0                      da      put_hex4
         9E : 41                         lr      A, 1
         9F : 50                         lr      0, A
         A0 :                    put_hex4:
         A0 : 40                         lr      A, 0
         A1 : 21 0F                      ni      H'0F'
         A3 : 25 09                      ci      9               ; 9-A
         A5 : 81 07                      bp      put_hex8_dec    ; A<10
         A7 : 24 37                      ai      C'A'-10
         A9 : 50                         lr      0, A
         AA : 29 01 00                   jmp     putchar
         AD :                    put_hex8_dec:
         AD : 24 30                      ai      C'0'
         AF : 50                         lr      0, A
         B0 : 29 01 00                   jmp     putchar
         B3 :
         B3 :                    ;;; Print uint8_t in binary
         B3 :                    ;;; @param 1 uint8_t value to be printed in binary.
         B3 :                    ;;; @clobber 0 A
         B3 :                    put_bin8:
         B3 : 20 30                      li      C'0'
         B5 : 50                         lr      0, A
         B6 : 28 01 C3                   pi      call
         B9 : 01 00                      da      putchar
         BB : 20 62                      li      C'b'
         BD : 50                         lr      0, A
         BE : 28 01 C3                   pi      call
         C1 : 01 00                      da      putchar
         C3 : 41                         lr      A, 1
         C4 : 50                         lr      0, A
         C5 : 28 01 C3                   pi      call
         C8 : 00 CD                      da      put_bin4
         CA : 41                         lr      A, 1
         CB : 15                         sl      4
         CC : 50                         lr      0, A
         CD :                    ;;; Pinrt uint4_t in binary
         CD :                    ;;; @param 0 4-bit value in upper nibble
         CD :                    ;;; @clobber 0 A
         CD :                    put_bin4:
         CD : 28 01 61                   pi      push0
         D0 : 28 01 C3                   pi      call
         D3 : 00 DC                      da      put_bin2
         D5 : 28 01 8F                   pi      pop0
         D8 : 40                         lr      A, 0
         D9 : 13                         sl      1
         DA : 13                         sl      1
         DB : 50                         lr      0, A
         DC :                    ;;; Print uint2_t in binary
         DC :                    ;;; @param 0 value in the most upper 2-bit
         DC :                    ;;; @clobber 0 A
         DC :                    put_bin2:
         DC : 28 01 61                   pi      push0
         DF : 28 01 C3                   pi      call
         E2 : 00 EA                      da      put_bin1
         E4 : 28 01 8F                   pi      pop0
         E7 : 40                         lr      A, 0
         E8 : 13                         sl      1
         E9 : 50                         lr      0, A
         EA :                    ;;; Print MSB
         EA :                    ;;; @param 0 value at MSB
         EA :                    ;;; @clobber 0 A
         EA :                    put_bin1:
         EA : 40                         lr      A, 0
         EB : 22 00                      oi      0
         ED : 20 30                      li      C'0'            ; '0' for bit value 0
         EF : 81 02                      bp      put_bin0        ; MSB=0
         F1 : 1F                         inc                     ; make it '1'
         F2 :                    put_bin0
         F2 : 50                         lr      0, A
         F3 : 29 01 00                   jmp     putchar
         F6 :
         F6 :                    ;;; Get character
         F6 :                    ;;; @return 0
         F6 :                    ;;; @return CC.C 0 if no character
         F6 :                    getchar:
         F6 : 1B                         ei
         F7 : 2B                         nop
         F8 : 1A                         di
         F9 : 2A 20 00                   dci     rx_queue
         FC : 0E                         lr      Q, DC
         FD : 29 02 31                   jmp     queue_remove
        100 :
        100 :                    ;;; Put character
        100 :                    ;;; @param 0
        100 :                    ;;; @clobber 0
        100 :                    putchar:
        100 : 1B                         ei
        101 : 2B                         nop
        102 : 1A                         di
        103 : 2A 20 80                   dci     tx_queue
        106 : 0E                         lr      Q, DC
        107 : 28 01 C3                   pi      call
        10A : 02 01                      da      queue_add
        10C : 92 F3                      bnc     putchar         ; branch if queue is full
        10E : 26 F3                      in      USARTTV
        110 : 22 00                      oi      0
        112 : 94 05                      bnz     putchar_exit    ; already enabled
        114 : 20 06                      li      tx_vec
        116 : 27 F3                      out     USARTTV
        118 :                    putchar_exit:
        118 : 29 01 E0                   jmp     return
        11B :
        11B :                    isr_intr_rx:
        11B : 08                         lr      K, P
        11C : 28 01 75                   pi      pushK
        11F : 28 01 61                   pi      push0
        122 : 26 F1                      in      USARTS
        124 : 21 02                      ni      ST_RxRDY_bm
        126 : 84 0D                      bz      isr_intr_end
        128 : 26 F0                      in      USARTD
        12A : 50                         lr      0, A
        12B : 2A 20 00                   dci     rx_queue
        12E : 0E                         lr      Q, DC
        12F : 28 01 C3                   pi      call
        132 : 02 01                      da      queue_add
        134 :                    isr_intr_end:
        134 : 28 01 8F                   pi      pop0
        137 : 29 01 E0                   jmp     return
        13A :
        13A :                    isr_intr_tx:
        13A : 08                         lr      K, P
        13B : 28 01 75                   pi      pushK
        13E : 28 01 61                   pi      push0
        141 : 2A 20 80                   dci     tx_queue
        144 : 0E                         lr      Q, DC
        145 : 28 01 C3                   pi      call
        148 : 02 31                      da      queue_remove
        14A : 92 0A                      bnc     isr_intr_send_empty
        14C : 40                         lr      A, 0
        14D : 27 F0                      out     USARTD          ; send character
        14F : 28 01 8F                   pi      pop0
        152 : 29 01 E0                   jmp     return
        155 :                    isr_intr_send_empty:
        155 : 70                         clr
        156 : 27 F3                      out     USARTTV         ; disable Tx interrupt
        158 : 28 01 8F                   pi      pop0
        15B : 29 01 E0                   jmp     return
        15E :
        15E :                            include "stack.inc"
(1)     15E :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     15E :
(1)     15E :                    ;;; Stack pointer is 8-bit and pre-decrement and post-increment
(1)     15E : =8                 SP:     equ     8               ; SP is scratchpad register 8
(1)     15E : =F                 __STACK_U:      equ     ((stack - 1) >> 8)
(1)     15E :
(1)     15E :                    ;;; Initialize stack
(1)     15E :                    ;;; @param stack
(1)     15E :                    ;;; @clobber A
(1)     15E :                    init_stack:
(1)     15E : 70                         clr
(1)     15F : 58                         lr      SP, A
(1)     160 : 1C                         pop
(1)     161 :
(1)     161 :                    ;;; Push 0
(1)     161 :                    ;;; @clobber A H W
(1)     161 :                    ;;; PI push0
(1)     161 :                    push0:
(1)     161 : 38                         ds      SP              ; SP-=1
(1)     162 : 20 0F                      li      __STACK_U
(1)     164 : 5A                         lr      HU, A
(1)     165 : 48                         lr      A, SP
(1)     166 : 5B                         lr      HL, A
(1)     167 : 10                         lr      DC, H           ; DC0=SP
(1)     168 : 40                         lr      A, 0
(1)     169 : 17                         st
(1)     16A : 1C                         pop
(1)     16B :
(1)     16B :                    ;;; Push 1
(1)     16B :                    ;;; @clobber A H W
(1)     16B :                    ;;; PI push1
(1)     16B :                    push1:
(1)     16B : 38                         ds      SP              ; SP-=1
(1)     16C : 20 0F                      li      __STACK_U
(1)     16E : 5A                         lr      HU, A
(1)     16F : 48                         lr      A, SP
(1)     170 : 5B                         lr      HL, A
(1)     171 : 10                         lr      DC, H           ; DC0=SP
(1)     172 : 41                         lr      A, 1
(1)     173 : 17                         st
(1)     174 : 1C                         pop
(1)     175 :
(1)     175 :                    ;;; Push K
(1)     175 :                    ;;; @clobber A H W
(1)     175 :                    ;;; PI pushK
(1)     175 :                    pushK:
(1)     175 : 38                         ds      SP
(1)     176 : 38                         ds      SP              ; SP-=2
(1)     177 : 20 0F                      li      __STACK_U
(1)     179 : 5A                         lr      HU, A
(1)     17A : 48                         lr      A, SP
(1)     17B : 5B                         lr      HL, A
(1)     17C : 10                         lr      DC, H           ; DC0=SP
(1)     17D : 00                         lr      A, KU
(1)     17E : 17                         st
(1)     17F : 01                         lr      A, KL
(1)     180 : 17                         st
(1)     181 : 1C                         pop
(1)     182 :
(1)     182 :                    ;;; Push Q
(1)     182 :                    ;;; @clobber A H W
(1)     182 :                    ;;; PI pushQ
(1)     182 :                    pushQ:
(1)     182 : 38                         ds      SP
(1)     183 : 38                         ds      SP              ; SP -= 2
(1)     184 : 20 0F                      li      __STACK_U
(1)     186 : 5A                         lr      HU, A
(1)     187 : 48                         lr      A, SP
(1)     188 : 5B                         lr      HL, A
(1)     189 : 10                         lr      DC, H           ; DC0=SP
(1)     18A : 02                         lr      A, QU
(1)     18B : 17                         st
(1)     18C : 03                         lr      A, QL
(1)     18D : 17                         st
(1)     18E : 1C                         pop
(1)     18F :
(1)     18F :                    ;;; POP 0
(1)     18F :                    ;;; @clobber A H
(1)     18F :                    ;;; PI pop0
(1)     18F :                    pop0:
(1)     18F : 20 0F                      li      __STACK_U
(1)     191 : 5A                         lr      HU, A
(1)     192 : 48                         lr      A, SP
(1)     193 : 5B                         lr      HL, A
(1)     194 : 10                         lr      DC, H           ; DC0=SP
(1)     195 : 16                         lm
(1)     196 : 50                         lr      0, A
(1)     197 : 11                         lr      H, DC
(1)     198 : 4B                         lr      A, HL
(1)     199 : 58                         lr      SP, A
(1)     19A : 1C                         pop
(1)     19B :
(1)     19B :                    ;;; POP 1
(1)     19B :                    ;;; @clobber A H
(1)     19B :                    ;;; PI pop1
(1)     19B :                    pop1:
(1)     19B : 20 0F                      li      __STACK_U
(1)     19D : 5A                         lr      HU, A
(1)     19E : 48                         lr      A, SP
(1)     19F : 5B                         lr      HL, A
(1)     1A0 : 10                         lr      DC, H           ; DC0=SP
(1)     1A1 : 16                         lm
(1)     1A2 : 51                         lr      1, A
(1)     1A3 : 11                         lr      H, DC
(1)     1A4 : 4B                         lr      A, HL
(1)     1A5 : 58                         lr      SP, A
(1)     1A6 : 1C                         pop
(1)     1A7 :
(1)     1A7 :                    ;;; Pop K
(1)     1A7 :                    ;;; @clobber A H
(1)     1A7 :                    ;;; PI popK
(1)     1A7 :                    popK:
(1)     1A7 : 20 0F                      li      __STACK_U
(1)     1A9 : 5A                         lr      HU, A
(1)     1AA : 48                         lr      A, SP
(1)     1AB : 5B                         lr      HL, A
(1)     1AC : 10                         lr      DC, H           ; DC0=SP
(1)     1AD : 16                         lm
(1)     1AE : 04                         lr      KU, A
(1)     1AF : 16                         lm
(1)     1B0 : 05                         lr      KL, A
(1)     1B1 : 11                         lr      H, DC
(1)     1B2 : 4B                         lr      A, HL
(1)     1B3 : 58                         lr      SP, A
(1)     1B4 : 1C                         pop
(1)     1B5 :
(1)     1B5 :                    ;;; pop Q
(1)     1B5 :                    ;;; @clobber A H
(1)     1B5 :                    ;;; PI popQ
(1)     1B5 :                    popQ:
(1)     1B5 : 20 0F                      li      __STACK_U
(1)     1B7 : 5A                         lr      HU, A
(1)     1B8 : 48                         lr      A, SP
(1)     1B9 : 5B                         lr      HL, A
(1)     1BA : 10                         lr      DC, H           ; DC0=SP
(1)     1BB : 16                         lm
(1)     1BC : 06                         lr      QU, A
(1)     1BD : 16                         lm
(1)     1BE : 07                         lr      QL, A
(1)     1BF : 11                         lr      H, DC
(1)     1C0 : 4B                         lr      A, HL
(1)     1C1 : 58                         lr      SP, A
(1)     1C2 : 1C                         pop
(1)     1C3 :
(1)     1C3 :                    ;;; Call subroutine
(1)     1C3 :                    ;;; @clobber A H K W
(1)     1C3 :                    ;;; PI call
(1)     1C3 :                    ;;; DA subroutine
(1)     1C3 :                    call:
(1)     1C3 : 08                         lr      K, P
(1)     1C4 : 00                         lr      A, KU
(1)     1C5 : 5A                         lr      HU, A
(1)     1C6 : 01                         lr      A, KL
(1)     1C7 : 5B                         lr      HL, A
(1)     1C8 : 10                         lr      DC, H           ; DC0=PC1
(1)     1C9 : 16                         lm
(1)     1CA : 04                         lr      KU, A
(1)     1CB : 16                         lm
(1)     1CC : 05                         lr      KL, A
(1)     1CD : 09                         lr      P, K            ; PC1=subroutine address
(1)     1CE : 11                         lr      H, DC
(1)     1CF : 4A                         lr      A, HU
(1)     1D0 : 04                         lr      KU, A
(1)     1D1 : 4B                         lr      A, HL
(1)     1D2 : 05                         lr      KL, A           ; K=return address
(1)     1D3 : 38                         ds      SP
(1)     1D4 : 38                         ds      SP              ; SP-=2
(1)     1D5 : 20 0F                      li      __STACK_U
(1)     1D7 : 5A                         lr      HU, A
(1)     1D8 : 48                         lr      A, SP
(1)     1D9 : 5B                         lr      HL, A
(1)     1DA : 10                         lr      DC, H           ; DC0=SP
(1)     1DB : 00                         lr      A, KU
(1)     1DC : 17                         st
(1)     1DD : 01                         lr      A, KL
(1)     1DE : 17                         st
(1)     1DF : 1C                         pop                     ; jump to subroutine
(1)     1E0 :
(1)     1E0 :                    ;;; Return from subroutine
(1)     1E0 :                    ;;; @clobber A H K
(1)     1E0 :                    ;;; JMP return
(1)     1E0 :                    return:
(1)     1E0 : 20 0F                      li      __STACK_U
(1)     1E2 : 5A                         lr      HU, A
(1)     1E3 : 48                         lr      A, SP
(1)     1E4 : 5B                         lr      HL, A
(1)     1E5 : 10                         lr      DC, H           ; DC0=SP
(1)     1E6 : 16                         lm
(1)     1E7 : 04                         lr      KU, A
(1)     1E8 : 16                         lm
(1)     1E9 : 05                         lr      KL, A
(1)     1EA : 11                         lr      H, DC
(1)     1EB : 4B                         lr      A, HL
(1)     1EC : 58                         lr      SP, A
(1)     1ED : 09                         lr      P, K            ; PC1=return address
(1)     1EE : 1C                         pop
        1EF :                            include "queue.inc"
(1)     1EF :                    ;;; [queue] queue structure
(1)     1EF : =0                 queue_len:      equ     0       ; queue length
(1)     1EF : =1                 queue_size:     equ     1       ; buffer size
(1)     1EF : =2                 queue_put:      equ     2       ; queue put index
(1)     1EF : =3                 queue_get:      equ     3       ; queue get index
(1)     1EF : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     1EF :
(1)     1EF :                    ;;; [queue] Initialize queue
(1)     1EF :                    ;;; @param Q queue work space pointer
(1)     1EF :                    ;;; @param 0 queue work space size
(1)     1EF :                    ;;; @clobber A H DC
(1)     1EF :                    queue_init:
(1)     1EF : 0F                         lr      DC, Q
(1)     1F0 : 70                         clr
(1)     1F1 : 17                         st                      ; queue_len = 0
(1)     1F2 : 40                         lr      A, 0            ; restore queue size
(1)     1F3 : 24 FC                      ai      -queue_buf
(1)     1F5 : 17                         st                      ; queue_size
(1)     1F6 : 24 02                      ai      2               ; for queue_put and queue_get
(1)     1F8 : 50                         lr      0, A            ; save counter
(1)     1F9 : 70                         clr
(1)     1FA :                    queue_init_loop:
(1)     1FA : 17                         st
(1)     1FB : 30                         ds      0               ; decrement counter
(1)     1FC : 94 FD                      bnz     queue_init_loop
(1)     1FE : 29 01 E0                   jmp     return
(1)     201 :
(1)     201 :                    ;;; [queue] Add an element to queue
(1)     201 :                    ;;; @param Q queue work space pointer
(1)     201 :                    ;;; @param 0 an element
(1)     201 :                    ;;; @return F.C 0 if queue is full
(1)     201 :                    ;;; @clobber A H DC
(1)     201 :                    queue_add:
(1)     201 : 0F                         lr      DC, Q
(1)     202 : 16                         lm                      ; queue_len
(1)     203 : 5B                         lr      HL, A           ; HL=queue_len
(1)     204 : 16                         lm                      ; queue_size
(1)     205 : 18                         com
(1)     206 : 1F                         inc                     ; A=-queue_size
(1)     207 : CB                         as      HL              ; queue_len-queue_size
(1)     208 : 82 24                      bc      queue_add_end   ; queue_len >= queue_size
(1)     20A : 4B                         lr      A, HL
(1)     20B : 1F                         inc                     ; queue_len++
(1)     20C : 0F                         lr      DC, Q
(1)     20D : 17                         st                      ; update queue_len
(1)     20E : 16                         lm                      ; queue_size
(1)     20F : 16                         lm                      ; queue_put
(1)     210 : 1F                         inc                     ; for queue_get
(1)     211 : 8E                         adc                     ; DC=&queue_buf[queue_put]
(1)     212 : 40                         lr      A, 0            ; get element
(1)     213 : 17                         st                      ; store element
(1)     214 : 0F                         lr      DC, Q
(1)     215 : 16                         lm                      ; queue_len
(1)     216 : 16                         lm                      ; queue_size
(1)     217 : 18                         com
(1)     218 : 1F                         inc
(1)     219 : 5B                         lr      HL, A           ; HL=-queue_size
(1)     21A : 16                         lm                      ; queue_put
(1)     21B : 1F                         inc                     ; queue_put++
(1)     21C : 5A                         lr      HU, A           ; HU=queue_put
(1)     21D : CB                         as      HL              ; queue_put-queue_size
(1)     21E : 92 03                      bnc     queue_add_update ; queue_put < queue_size
(1)     220 : 70                         clr
(1)     221 : 5A                         lr      HU, A           ; wrap around
(1)     222 :                    queue_add_update:
(1)     222 : 0F                         lr      DC, Q
(1)     223 : 16                         lm                      ; queue_len
(1)     224 : 16                         lm                      ; queue_size
(1)     225 : 4A                         lr      A, HU
(1)     226 : 17                         st                      ; update queue_put
(1)     227 : 70                         clr
(1)     228 : 18                         com
(1)     229 : 1F                         inc                     ; set carry
(1)     22A : 29 01 E0                   jmp     return
(1)     22D :                    queue_add_end:
(1)     22D : 18                         com                     ; clear carry
(1)     22E : 29 01 E0                   jmp     return
(1)     231 :
(1)     231 :                    ;;; [queue] Remove an element from queue
(1)     231 :                    ;;; @param Q queue work space pointer
(1)     231 :                    ;;; @return 0 an element
(1)     231 :                    ;;; @return F.C 0 if queue is empty
(1)     231 :                    ;;; @clobber A H DC
(1)     231 :                    queue_remove:
(1)     231 : 0F                         lr      DC, Q
(1)     232 : 70                         clr
(1)     233 : 8B                         om                      ; queue_len
(1)     234 : 84 26                      bz      queue_remove_empty
(1)     236 : 24 FF                      ai      -1              ; queue_len--
(1)     238 : 0F                         lr      DC, Q
(1)     239 : 17                         st                      ; update queue_len
(1)     23A : 16                         lm                      ; queue_size
(1)     23B : 16                         lm                      ; queue_put
(1)     23C : 16                         lm                      ; queue_get
(1)     23D : 8E                         adc                     ; DC=&queue_buf[queue_get]
(1)     23E : 16                         lm                      ; read element
(1)     23F : 50                         lr      0, A            ; save element
(1)     240 : 0F                         lr      DC, Q
(1)     241 : 16                         lm                      ; queue_len
(1)     242 : 16                         lm                      ; queue_size
(1)     243 : 18                         com
(1)     244 : 1F                         inc
(1)     245 : 5B                         lr      HL, A           ; HL=-queue_size
(1)     246 : 16                         lm                      ; queue_put
(1)     247 : 16                         lm                      ; queue_get
(1)     248 : 1F                         inc                     ; queue_get++
(1)     249 : 5A                         lr      HU, A           ; HU=queue_get
(1)     24A : CB                         as      HL              ; queue_get-queue_size
(1)     24B : 92 03                      bnc     queue_remove_update ; queue_get<queueu_size
(1)     24D : 70                         clr
(1)     24E : 5A                         lr      HU, A           ; wrap around
(1)     24F :                    queue_remove_update:
(1)     24F : 0F                         lr      DC, Q
(1)     250 : 16                         lm                      ; queue_len
(1)     251 : 16                         lm                      ; queue_size
(1)     252 : 16                         lm                      ; queue_put
(1)     253 : 4A                         lr      A, HU
(1)     254 : 17                         st                      ; update queue_get
(1)     255 : 70                         clr
(1)     256 : 18                         com
(1)     257 : 1F                         inc                     ; set carry
(1)     258 : 29 01 E0                   jmp     return
(1)     25B :                    queue_remove_empty:
(1)     25B : 18                         com                     ; clear carry
(1)     25C : 29 01 E0                   jmp     return
(1)     25F :
(1)     25F :                    ;;; Local Variables:
(1)     25F :                    ;;; mode: asm
(1)     25F :                    ;;; End:
(1)     25F :                    ;;; vim: set ft=asm et ts=4 sw=4:

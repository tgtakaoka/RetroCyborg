   0:                                CPU   6801
   0:                                INCLUDE               "mc6801.inc"
   0:                ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:                ;;; MC6801/MC6803
   0:                ;;; Condition Code Register (CC)
   0: =$1            CC_CARRY        EQU   %00000001       ; set to 1 if carry occurred
   0: =$2            CC_OVERFLOW     EQU   %00000010       ; set to 1 if overflow occurred
   0: =$4            CC_ZERO         EQU   %00000100       ; set to 1 if result is zero
   0: =$8            CC_NEGATIVE     EQU   %00001000       ; set to 1 if result is negative
   0: =$10           CC_IRQ          EQU   %00010000       ; if 1, IRQ is masked
   0: =$20           CC_HALF_CARRY   EQU   %00100000       ; if 1, decimal carry from least digit occurred
   0:
   0:                ;;; Internal Register Area
   0: =$0            DDR1:           EQU   $00             ; $00: Port 1 Data Direction Register
   0: =$1            DDR2:           EQU   $01             ; $01: Port 2 Data Direction Register
   0: =$2            PORT1:          EQU   $02             ; $02: Port 1 Data Register
   0: =$3            PORT2:          EQU   $03             ; $03: Port 2 Data Register
   0: =$4            DDR3:           EQU   $04             ; $04: Port 3 Data Direction Register
   0: =$5            DDR4:           EQU   $05             ; $05: Port 4 Data Direction Register
   0: =$6            PORT3:          EQU   $06             ; $06: Port 3 Data Register
   0: =$7            PORT4:          EQU   $07             ; $07: Port 4 Data Register
   0: =$8            TCSR:           EQU   $08             ; $08: Timer Control and Status Register
   0: =$9            TCNT:           EQU   $09             ; $09: Timer Counter
   0: =$B            TOCR:           EQU   $0B             ; $0B: Output Compare Register
   0: =$D            TCAP:           EQU   $0D             ; $0D: Input Capture Register
   0: =$F            P3CSR:          EQU   $0F             ; $0F: Port 3 Control and Status Register
   0: =$10           RMCR:           EQU   $10             ; $10: Rate and Mode Control Registers
   0: =$11           TRCSR:          EQU   $11             ; $11: Transmit Receive Control and Status Register
   0: =$12           SCRDR:          EQU   $12             ; $12: Receiver Data Register
   0: =$13           SCTDR:          EQU   $13             ; $13: Transmit Data Register
   0: =$14           RAMCR:          EQU   $14             ; $14: RAM Control Register
   0:
   0:                ;;; Port 2 Data Register
   0: =$E0           PC_gm:          EQU   %11100000       ; PC group mask
   0: =$5            PC_gp:          EQU   5               ; PC group position
   0: =$20           PC0_bm:         EQU   %00100000       ; PC0
   0: =$40           PC1_bm:         EQU   %01000000       ; PC1
   0: =$80           PC2_bm:         EQU   %10000000       ; PC2
   0:
   0:                ;;; Port 3 Control and Status Register
   0: =$8            P3_LATCH_bm:    EQU   %00001000       ; Latch Enable
   0: =$10           P3_OSS_bm:      EQU   %00010000       ; Output Strobe Select
   0: =$40           P3_IS3IE_bm:    EQU   %01000000       ; IS3 IRQ1 Enable
   0: =$80           P3_IS3F_bm:     EQU   %10000000       ; IS3 Flag
   0:
   0:                ;;; RAM Control Register
   0: =$40           RAME_bm:        EQU   %01000000       ; RAM Enable
   0: =$80           STBY_PWR_bm:    EQU   %10000000       ; Standby Power status
   0:
   0:                ;;; Timer Control and Status Register
   0: =$1            TCSR_OLVL_bm:   EQU   %00000001       ; Output Level
   0: =$2            TCSR_IEDG_bm:   EQU   %00000010       ; Input Edge. 0=negative/1=positive
   0: =$4            TCSR_ETOI_bm:   EQU   %00000100       ; Enable Timer Overflow Interrupt for IRQ2
   0: =$8            TCSR_EOCI_bm:   EQU   %00001000       ; Enable Output Compare Interrupt for IRQ2
   0: =$10           TCSR_EICI_bm:   EQU   %00010000       ; Enable Input Capture Interrupt for IRQ2
   0: =$20           TCSR_TOF_bm:    EQU   %00100000       ; Timer Overflow Flag
   0: =$40           TCSR_OCF_bm:    EQU   %01000000       ; Output Compare Flag
   0: =$80           TCSR_ICF_bm:    EQU   %10000000       ; Input Capture Flag
   0:
   0:                ;;; Serial Communication Interface
   0:                ;;; Rate and Mode Control Registers
   0:                ;; Speed Select
   0: =$3            SS_gm:          EQU   %00000011       ; Group mask
   0: =$0            SS_DIV16_gc:    EQU   %00000000       ; E/16
   0: =$1            SS_DIV128_gc:   EQU   %00000001       ; E/128
   0: =$2            SS_DIV1024_gc:  EQU   %00000010       ; E/1024
   0: =$3            SS_DIV4096_gc:  EQU   %00000011       ; E/4096
   0:                ;; Clock Control and Format Select
   0: =$C            CCFS_gm:        EQU   %00001100       ; Group mask
   0: =$0            CCFS_BIPH_gc:   EQU   %00000000       ; Bi-Phase
   0: =$4            CCFS_NRZ_gc:    EQU   %00000100       ; NRZ
   0: =$8            CCFS_NRZO_gc:   EQU   %00001000       ; NRZ P22=Clock Output
   0: =$C            CCFS_NRZI_gc:   EQU   %00001100       ; NRZ P22=Clock Input
   0:                ;;; Transmit/Receive Control and Status Register
   0: =$1            TRCSR_WU_bm:    EQU   %00000001       ; Wake-up on idle line
   0: =$2            TRCSR_TE_bm:    EQU   %00000010       ; Transmit Enable; if set, P24 is output
   0: =$4            TRCSR_TIE_bm:   EQU   %00000100       ; Transmit Interrupt Enable for IRQ2
   0: =$8            TRCSR_RE_bm:    EQU   %00001000       ; Receiver Enable; if set, P23 is input
   0: =$10           TRCSR_RIE_bm:   EQU   %00010000       ; Receiver Interrupt Enable for IRQ2
   0: =$20           TRCSR_TDRE_bm:  EQU   %00100000       ; Transmit Data Register Empty
   0: =$40           TRCSR_ORFE_bm:  EQU   %01000000       ; Overrun Framing Error
   0: =$80           TRCSR_RDRF_bm:  EQU   %10000000       ; Receive Data Register Full
   0:
   0:                ;;; Vector
   0: =$FFF0         VEC_SCI:        EQU   $FFF0           ; $FFF0: SCI Interrupt (TDRE+RDRF+ORFE)
   0: =$FFF2         VEC_TOF:        EQU   $FFF2           ; $FFF2: Timer Overflow Interrupt
   0: =$FFF4         VEC_OCF:        EQU   $FFF4           ; $FFF4: Output Compare Interrupt
   0: =$FFF6         VEC_ICF:        EQU   $FFF6           ; $FFF6: Input Capture Interrupt
   0: =$FFF8         VEC_IRQ1:       EQU   $FFF8           ; $FFF8: Maskable Interrupt Request 1
   0: =$FFFA         VEC_SWI:        EQU   $FFFA           ; $FFFA: Software Interrupt
   0: =$FFFC         VEC_NMI:        EQU   $FFFC           ; $FFFC: Non Maskable Interrupt
   0: =$FFFE         VEC_RESET:      EQU   $FFFE           ; $FFFE: Reset
   0:
2000:                                ORG   $2000
2000:
2000: =$80           rx_queue_size:  EQU   128
2000:                rx_queue:       RMB   rx_queue_size
2080: =$80           tx_queue_size:  EQU   128
2080:                tx_queue:       RMB   tx_queue_size
2100:                tx_int_control: RMB   1
2101:
2101:                ;;; SCI: Enable Rx interrupt
2101: =$1A           RX_INT_TX_NO:   EQU   TRCSR_TE_bm|TRCSR_RE_bm|TRCSR_RIE_bm
2101: =$1E           RX_INT_TX_INT:  EQU   RX_INT_TX_NO|TRCSR_TIE_bm
2101:
1000:                                ORG   $1000
1000: =$FFF          stack:          EQU   *-1             ; MC6801's SP is post-decrement/pre-increment
1000:
1000:                                ORG   $1000
1000:                initialize:
1000: 8E 0F FF                       LDS   #stack
1003: CE 20 00                       LDX   #rx_queue
1006: C6 80                          LDAB  #rx_queue_size
1008: BD 10 B8                       JSR   queue_init
100B: CE 20 80                       LDX   #tx_queue
100E: C6 80                          LDAB  #tx_queue_size
1010: BD 10 B8                       JSR   queue_init
1013:                ;; Initialize SCI
1013: 86 04                          LDAA  #CCFS_NRZ_gc|SS_DIV16_gc
1015: 97 10                          STAA  RMCR            ; set NRZ and E/16
1017: 86 1A                          LDAA  #RX_INT_TX_NO
1019: 97 11                          STAA  TRCSR           ; Enable Tx and Rx/Interrupt
101B: 7F 21 00                       CLR   tx_int_control  ; disable Tx interrupt
101E: 0E                             CLI                   ; enable IRQ
101F:
101F:                receive_loop:
101F: 8D 59                          BSR   getchar
1021: 24 FC                          BCC   receive_loop
1023:                echo_back:
1023: 16                             TAB
1024: 8D 6E                          BSR   putchar         ; echo
1026: 86 20                          LDAA  #' '            ; space
1028: 8D 6A                          BSR   putchar
102A: 8D 12                          BSR   put_hex8        ; print in hex
102C: 86 20                          LDAA  #' '            ; space
102E: 8D 64                          BSR   putchar
1030: 8D 2A                          BSR   put_bin8        ; print in binary
1032: 8D 02                          BSR   newline
1034: 20 E9                          BRA   receive_loop
1036:
1036:                ;;; Put newline
1036:                ;;; @clobber A
1036:                newline:
1036: 86 0D                          LDAA  #$0d
1038: 8D 5A                          BSR   putchar
103A: 86 0A                          LDAA  #$0a
103C: 20 56                          BRA   putchar
103E:
103E:                ;;; Print uint8_t in hex
103E:                ;;; @param B uint8_t value to be printed in hex.
103E:                ;;; @clobber A
103E:                put_hex8:
103E: 86 30                          LDAA  #'0'
1040: 8D 52                          BSR   putchar
1042: 86 78                          LDAA  #'x'
1044: 8D 4E                          BSR   putchar
1046: 17                             TBA
1047: 44                             LSRA
1048: 44                             LSRA
1049: 44                             LSRA
104A: 44                             LSRA
104B: 8D 01                          BSR   put_hex4
104D: 17                             TBA
104E:                put_hex4:
104E: 84 0F                          ANDA  #$0f
1050: 81 0A                          CMPA  #10
1052: 25 04                          BLO   put_hex8_dec
1054: 8B 37                          ADDA  #'A'-10
1056: 20 3C                          BRA   putchar
1058:                put_hex8_dec:
1058: 8B 30                          ADDA  #'0'
105A: 20 38                          BRA   putchar
105C:
105C:                ;;; Print uint8_t in binary
105C:                ;;; @param B uint8_t value to be printed in binary.
105C:                ;;; @clobber A
105C:                put_bin8:
105C: 37                             PSHB
105D: 86 30                          LDAA  #'0'
105F: 8D 33                          BSR   putchar
1061: 86 62                          LDAA  #'b'
1063: 8D 2F                          BSR   putchar
1065: 8D 05                          BSR   put_bin4
1067: 58                             LSLB
1068: 8D 02                          BSR   put_bin4
106A: 33                             PULB
106B: 39                             RTS
106C:                put_bin4:
106C: 8D 01                          BSR   put_bin2
106E: 58                             LSLB
106F:                put_bin2:
106F: 8D 01                          BSR   put_bin1
1071: 58                             LSLB
1072:                put_bin1:
1072: 86 30                          LDAA  #'0'
1074: 5D                             TSTB                  ; chech MSB
1075: 2A 01                          BPL   put_bin0        ; MSB=0
1077: 4C                             INCA                  ; MSB=1
1078:                put_bin0:
1078: 20 1A                          BRA   putchar
107A:
107A:                ;;; Get character
107A:                ;;; @return A
107A:                ;;; @return CC.C 0 if no character
107A:                getchar:
107A: 3C                             PSHX
107B: 37                             PSHB
107C: 07                             TPA
107D: 36                             PSHA                  ; save CC
107E: 0F                             SEI                   ; disable IRQ
107F: CE 20 00                       LDX   #rx_queue
1082: BD 10 E3                       JSR   queue_remove
1085: 16                             TAB                   ; char? in B
1086: 32                             PULA                  ; restore CC to A
1087: 25 05                          BCS   getchar_exit
1089: 06                             TAP
108A: 0C                             CLC                   ; clear carry
108B: 33                             PULB
108C: 38                             PULX
108D: 39                             RTS
108E:                getchar_exit:
108E: 06                             TAP
108F: 0D                             SEC                   ; set carry
1090: 17                             TBA
1091: 33                             PULB
1092: 38                             PULX
1093: 39                             RTS
1094:
1094:                ;;; Put character
1094:                ;;; @param A
1094:                putchar:
1094: 3C                             PSHX
1095: 37                             PSHB
1096: 36                             PSHA
1097: 16                             TAB                   ; char in B
1098: 07                             TPA
1099: 36                             PSHA                  ; save CC
109A:                putchar_retry:
109A: 17                             TBA                   ; char in A
109B: CE 20 80                       LDX   #tx_queue
109E: 0F                             SEI                   ; disable IRQ
109F: BD 10 C7                       JSR   queue_add
10A2: 0E                             CLI                   ; enable IRQ
10A3: 24 F5                          BCC   putchar_retry   ; branch if queue is full
10A5: 0F                             SEI                   ; disable IRQ
10A6: 7D 21 00                       TST   tx_int_control
10A9: 26 07                          BNE   putchar_exit
10AB: 86 1E                          LDAA  #RX_INT_TX_INT  ; Enable Tx interrupt
10AD: 97 11                          STAA  TRCSR
10AF: 73 21 00                       COM   tx_int_control
10B2:                putchar_exit:
10B2: 32                             PULA                  ; restore CC
10B3: 06                             TAP
10B4: 32                             PULA
10B5: 33                             PULB
10B6: 38                             PULX
10B7: 39                             RTS
10B8:
10B8:                                INCLUDE               "queue.inc"
10B8:                ;;; [queue] queue structure
10B8: =$0            queue_len:      EQU   0               ; queue length
10B8: =$1            queue_size:     EQU   1               ; buffer size
10B8: =$2            queue_put:      EQU   2               ; queue put index
10B8: =$3            queue_get:      EQU   3               ; queue get index
10B8: =$4            queue_buf:      EQU   4               ; buffer start offset
10B8:
10B8:                ;;; [queue] Initialize queue
10B8:                ;;; @param X queue work space pointer
10B8:                ;;; @param B queue work space size
10B8:                ;;; @clobber B
10B8:                queue_init:
10B8: 37                             PSHB
10B9: 3C                             PSHX
10BA:                queue_init_loop:
10BA: 6F 00                          CLR   0,x
10BC: 08                             INX
10BD: 5A                             DECB
10BE: 26 FA                          BNE   queue_init_loop
10C0: 38                             PULX
10C1: 33                             PULB
10C2: C0 04                          SUBB  #queue_buf
10C4: E7 01                          STAB  queue_size,x
10C6: 39                             RTS
10C7:
10C7:                ;;; [queue] Add an element to queue
10C7:                ;;; @param X queue work space pointer
10C7:                ;;; @param A an element
10C7:                ;;; @return CC.C 0 if queue is full
10C7:                queue_add:
10C7: 37                             PSHB
10C8: E6 00                          LDAB  queue_len,x
10CA: E1 01                          CMPB  queue_size,x
10CC: 24 13                          BHS   queue_add_return    ; carry is cleared
10CE: E6 02                          LDAB  queue_put,x     ; 8 bits offset
10D0: 3C                             PSHX
10D1: 3A                             ABX                   ; X+=B
10D2: A7 04                          STAA  queue_buf,x     ; store an element
10D4: 38                             PULX
10D5: 6C 00                          INC   queue_len,x
10D7: 5C                             INCB
10D8: E7 02                          STAB  queue_put,x
10DA: E1 01                          CMPB  queue_size,x
10DC: 25 03                          BLO   queue_add_return    ; carry is set
10DE: 6F 02                          CLR   queue_put,x
10E0: 0D                             SEC                   ; set carry
10E1:                queue_add_return:
10E1: 33                             PULB
10E2: 39                             RTS
10E3:
10E3:                ;;; [queue] Remove an element from queue
10E3:                ;;; @param X queue work space pointer
10E3:                ;;; @return A an element
10E3:                ;;; @return CC.C 0 if queue is empty
10E3:                queue_remove:
10E3: 6D 00                          TST   queue_len,x
10E5: 26 02                          BNE   queue_remove_elem
10E7: 0C                             CLC                   ; clear carry
10E8: 39                             RTS
10E9:                queue_remove_elem
10E9: 37                             PSHB
10EA: E6 03                          LDAB  queue_get,x     ; 8 bits offset
10EC: 3C                             PSHX
10ED: 3A                             ABX                   ; X+=B
10EE: A6 04                          LDAA  queue_buf,x     ; read an element
10F0: 38                             PULX
10F1: 6A 00                          DEC   queue_len,x
10F3: 5C                             INCB
10F4: E7 03                          STAB  queue_get,x
10F6: E1 01                          CMPB  queue_size,x
10F8: 25 03                          BLO   queue_remove_return ; carry is set
10FA: 6F 03                          CLR   queue_get,x
10FC: 0D                             SEC                   ; set carry
10FD:                queue_remove_return:
10FD: 33                             PULB
10FE: 39                             RTS
10FF:
10FF:                ;;; Local Variables:
10FF:                ;;; mode: asm
10FF:                ;;; End:
10FF:                ;;; vim: set ft=asm et ts=4 sw=4:
10FF:
10FF:                isr_sci:
10FF: D6 11                          LDAB  TRCSR
1101: C5 40                          BITB  #TRCSR_ORFE_bm
1103: 27 02                          BEQ   isr_sci_receive
1105: 96 12                          LDAA  SCRDR           ; reset ORFE
1107:                isr_sci_receive:
1107: C5 80                          BITB  #TRCSR_RDRF_bm
1109: 27 08                          BEQ   isr_sci_send
110B: 96 12                          LDAA  SCRDR           ; receive character
110D: CE 20 00                       LDX   #rx_queue
1110: BD 10 C7                       JSR   queue_add
1113:                isr_sci_send:
1113: C5 20                          BITB  #TRCSR_TDRE_bm
1115: 27 0A                          BEQ   isr_sci_exit
1117: CE 20 80                       LDX   #tx_queue
111A: BD 10 E3                       JSR   queue_remove
111D: 24 03                          BCC   isr_sci_send_empty
111F: 97 13                          STAA  SCTDR           ; send character
1121:                isr_sci_exit:
1121: 3B                             RTI
1122:                isr_sci_send_empty:
1122: 86 1A                          LDAA  #RX_INT_TX_NO
1124: 97 11                          STAA  TRCSR           ; disable Tx interrupt
1126: 7F 21 00                       CLR   tx_int_control
1129: 3B                             RTI
112A:
FFF0:                                ORG   VEC_SCI
FFF0: 10 FF                          FDB   isr_sci
FFF2:
FFFE:                                ORG   VEC_RESET
FFFE: 10 00                          FDB   initialize

          0 :                            cpu     6801
          0 :                            include "mc6801.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6801/MC6803
(1)       0 :                    ;;; Condition Code Register (CC)
(1)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 CC_OVERFLOW   equ  %00000010   ; set to 1 if overflow occurred
(1)       0 : =4                 CC_ZERO       equ  %00000100   ; set to 1 if result is zero
(1)       0 : =8                 CC_NEGATIVE   equ  %00001000   ; set to 1 if result is negative
(1)       0 : =10                CC_IRQ        equ  %00010000   ; if 1, IRQ is masked
(1)       0 : =20                CC_HALF_CARRY equ  %00100000   ; if 1, decimal carry from least digit occurred
(1)       0 :
(1)       0 :                    ;;; Internal Register Area
(1)       0 : =0                 DDR1:   equ     $00          ; $00: Port 1 Data Direction Register
(1)       0 : =1                 DDR2:   equ     $01          ; $01: Port 2 Data Direction Register
(1)       0 : =2                 PORT1:  equ     $02          ; $02: Port 1 Data Register
(1)       0 : =3                 PORT2:  equ     $03          ; $03: Port 2 Data Register
(1)       0 : =4                 DDR3:   equ     $04          ; $04: Port 3 Data Direction Register
(1)       0 : =5                 DDR4:   equ     $05          ; $05: Port 4 Data Direction Register
(1)       0 : =6                 PORT3:  equ     $06          ; $06: Port 3 Data Register
(1)       0 : =7                 PORT4:  equ     $07          ; $07: Port 4 Data Register
(1)       0 : =8                 TCSR:   equ     $08          ; $08: Timer Control and Status Register
(1)       0 : =9                 TCNT:   equ     $09          ; $09: Timer Counter
(1)       0 : =B                 TOCR:   equ     $0B          ; $0B: Output Compare Register
(1)       0 : =D                 TCAP:   equ     $0D          ; $0D: Input Capture Register
(1)       0 : =F                 P3CSR:  equ     $0F          ; $0F: Port 3 Control and Status Register
(1)       0 : =10                RMCR:   equ     $10          ; $10: Rate and Mode Control Registers
(1)       0 : =11                TRCSR:  equ     $11          ; $11: Transmit Receive Control and Status Register
(1)       0 : =12                SCRDR:  equ     $12          ; $12: Receiver Data Register
(1)       0 : =13                SCTDR:  equ     $13          ; $13: Transmit Data Register
(1)       0 : =14                RAMCR:  equ     $14          ; $14: RAM Control Register
(1)       0 :
(1)       0 :                    ;;; Port 2 Data Register
(1)       0 : =E0                PC_gm:  equ     %11100000       ; PC group mask
(1)       0 : =5                 PC_gp:  equ     5               ; PC group position
(1)       0 : =20                PC0_bm: equ     %00100000       ; PC0
(1)       0 : =40                PC1_bm: equ     %01000000       ; PC1
(1)       0 : =80                PC2_bm: equ     %10000000       ; PC2
(1)       0 :
(1)       0 :                    ;;; Port 3 Control and Status Register
(1)       0 : =8                 P3_LATCH_bm:    equ     %00001000 ; Latch Enable
(1)       0 : =10                P3_OSS_bm:      equ     %00010000 ; Output Strobe Select
(1)       0 : =40                P3_IS3IE_bm:    equ     %01000000 ; IS3 IRQ1 Enable
(1)       0 : =80                P3_IS3F_bm:     equ     %10000000 ; IS3 Flag
(1)       0 :
(1)       0 :                    ;;; RAM Control Register
(1)       0 : =40                RAME_bm:        equ     %01000000 ; RAM Enable
(1)       0 : =80                STBY_PWR_bm:    equ     %10000000 ; Standby Power status
(1)       0 :
(1)       0 :                    ;;; Timer Control and Status Register
(1)       0 : =1                 TCSR_OLVL_bm:   equ     %00000001 ; Output Level
(1)       0 : =2                 TCSR_IEDG_bm:   equ     %00000010 ; Input Edge. 0=negative/1=positive
(1)       0 : =4                 TCSR_ETOI_bm:   equ     %00000100 ; Enable Timer Overflow Interrupt for IRQ2
(1)       0 : =8                 TCSR_EOCI_bm:   equ     %00001000 ; Enable Output Compare Interrupt for IRQ2
(1)       0 : =10                TCSR_EICI_bm:   equ     %00010000 ; Enable Input Capture Interrupt for IRQ2
(1)       0 : =20                TCSR_TOF_bm:    equ     %00100000 ; Timer Overflow Flag
(1)       0 : =40                TCSR_OCF_bm:    equ     %01000000 ; Output Compare Flag
(1)       0 : =80                TCSR_ICF_bm:    equ     %10000000 ; Input Capture Flag
(1)       0 :
(1)       0 :                    ;;; Serial Communication Interface
(1)       0 :                    ;;; Rate and Mode Control Registers
(1)       0 :                            ;; Speed Select
(1)       0 : =3                 SS_gm:          equ     %00000011 ; Group mask
(1)       0 : =0                 SS_DIV16_gc:    equ     %00000000 ; E/16
(1)       0 : =1                 SS_DIV128_gc:   equ     %00000001 ; E/128
(1)       0 : =2                 SS_DIV1024_gc:  equ     %00000010 ; E/1024
(1)       0 : =3                 SS_DIV4096_gc:  equ     %00000011 ; E/4096
(1)       0 :                            ;; Clock Control and Format Select
(1)       0 : =C                 CCFS_gm:        equ     %00001100 ; Group mask
(1)       0 : =0                 CCFS_BIPH_gc:   equ     %00000000 ; Bi-Phase
(1)       0 : =4                 CCFS_NRZ_gc:    equ     %00000100 ; NRZ
(1)       0 : =8                 CCFS_NRZO_gc:   equ     %00001000 ; NRZ P22=Clock Output
(1)       0 : =C                 CCFS_NRZI_gc:   equ     %00001100 ; NRZ P22=Clock Input
(1)       0 :                    ;;; Transmit/Receive Control and Status Register
(1)       0 : =1                 TRCSR_WU_bm:    equ     %00000001 ; Wake-up on idle line
(1)       0 : =2                 TRCSR_TE_bm:    equ     %00000010 ; Transmit Enable; if set, P24 is output
(1)       0 : =4                 TRCSR_TIE_bm:   equ     %00000100 ; Transmit Interrupt Enable for IRQ2
(1)       0 : =8                 TRCSR_RE_bm:    equ     %00001000 ; Receiver Enable; if set, P23 is input
(1)       0 : =10                TRCSR_RIE_bm:   equ     %00010000 ; Receiver Interrupt Enable for IRQ2
(1)       0 : =20                TRCSR_TDRE_bm:  equ     %00100000 ; Transmit Data Register Empty
(1)       0 : =40                TRCSR_ORFE_bm:  equ     %01000000 ; Overrun Framing Error
(1)       0 : =80                TRCSR_RDRF_bm:  equ     %10000000 ; Receive Data Register Full
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =FFF0              VEC_SCI:        equ     $FFF0  ; $FFF0: SCI Interrupt (TDRE+RDRF+ORFE)
(1)       0 : =FFF2              VEC_TOF:        equ     $FFF2  ; $FFF2: Timer Overflow Interrupt
(1)       0 : =FFF4              VEC_OCF:        equ     $FFF4  ; $FFF4: Output Compare Interrupt
(1)       0 : =FFF6              VEC_ICF:        equ     $FFF6  ; $FFF6: Input Capture Interrupt
(1)       0 : =FFF8              VEC_IRQ1:       equ     $FFF8  ; $FFF8: Maskable Interrupt Request 1
(1)       0 : =FFFA              VEC_SWI:        equ     $FFFA  ; $FFFA: Software Interrupt
(1)       0 : =FFFC              VEC_NMI:        equ     $FFFC  ; $FFFC: Non Maskable Interrupt
(1)       0 : =FFFE              VEC_RESET:      equ     $FFFE  ; $FFFE: Reset
          0 :
       2000 :                            org     $2000
       2000 :
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       rmb     rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       rmb     tx_queue_size
       2100 :                    tx_int_control: rmb     1
       2101 :
       2101 :                    ;;; SCI: Enable Rx interrupt
       2101 : =1A                RX_INT_TX_NO:   equ     TRCSR_TE_bm|TRCSR_RE_bm|TRCSR_RIE_bm
       2101 : =1E                RX_INT_TX_INT:  equ     RX_INT_TX_NO|TRCSR_TIE_bm
       2101 :
       1000 :                            org     $1000
       1000 : =FFF               stack:  equ     *-1             ; MC6801's SP is post-decrement/pre-increment
       1000 :
       1000 :                            org     $1000
       1000 :                    initialize:
       1000 : 8E 0F FF                   lds     #stack
       1003 : CE 20 00                   ldx     #rx_queue
       1006 : C6 80                      ldab    #rx_queue_size
       1008 : BD 10 B8                   jsr     queue_init
       100B : CE 20 80                   ldx     #tx_queue
       100E : C6 80                      ldab    #tx_queue_size
       1010 : BD 10 B8                   jsr     queue_init
       1013 :                            ;; Initialize SCI
       1013 : 86 04                      ldaa    #CCFS_NRZ_gc|SS_DIV16_gc
       1015 : 97 10                      staa    RMCR            ; set NRZ and E/16
       1017 : 86 1A                      ldaa    #RX_INT_TX_NO
       1019 : 97 11                      staa    TRCSR           ; Enable Tx and Rx/Interrupt
       101B : 7F 21 00                   clr     tx_int_control  ; disable Tx interrupt
       101E : 0E                         cli                     ; enable IRQ
       101F :
       101F :                    receive_loop:
       101F : 8D 59                      bsr     getchar
       1021 : 24 FC                      bcc     receive_loop
       1023 :                    echo_back:
       1023 : 16                         tab
       1024 : 8D 6E                      bsr     putchar         ; echo
       1026 : 86 20                      ldaa    #' '            ; space
       1028 : 8D 6A                      bsr     putchar
       102A : 8D 12                      bsr     put_hex8        ; print in hex
       102C : 86 20                      ldaa    #' '            ; space
       102E : 8D 64                      bsr     putchar
       1030 : 8D 2A                      bsr     put_bin8        ; print in binary
       1032 : 8D 02                      bsr     newline
       1034 : 20 E9                      bra     receive_loop
       1036 :
       1036 :                    ;;; Put newline
       1036 :                    ;;; @clobber A
       1036 :                    newline:
       1036 : 86 0D                      ldaa    #$0d
       1038 : 8D 5A                      bsr     putchar
       103A : 86 0A                      ldaa    #$0a
       103C : 20 56                      bra     putchar
       103E :
       103E :                    ;;; Print uint8_t in hex
       103E :                    ;;; @param B uint8_t value to be printed in hex.
       103E :                    ;;; @clobber A
       103E :                    put_hex8:
       103E : 86 30                      ldaa    #'0'
       1040 : 8D 52                      bsr     putchar
       1042 : 86 78                      ldaa    #'x'
       1044 : 8D 4E                      bsr    putchar
       1046 : 17                         tba
       1047 : 44                         lsra
       1048 : 44                         lsra
       1049 : 44                         lsra
       104A : 44                         lsra
       104B : 8D 01                      bsr     put_hex4
       104D : 17                         tba
       104E :                    put_hex4:
       104E : 84 0F                      anda    #$0f
       1050 : 81 0A                      cmpa    #10
       1052 : 25 04                      blo     put_hex8_dec
       1054 : 8B 37                      adda    #'A'-10
       1056 : 20 3C                      bra     putchar
       1058 :                    put_hex8_dec:
       1058 : 8B 30                      adda    #'0'
       105A : 20 38                      bra    putchar
       105C :
       105C :                    ;;; Print uint8_t in binary
       105C :                    ;;; @param B uint8_t value to be printed in binary.
       105C :                    ;;; @clobber A
       105C :                    put_bin8:
       105C : 37                         pshb
       105D : 86 30                      ldaa    #'0'
       105F : 8D 33                      bsr     putchar
       1061 : 86 62                      ldaa    #'b'
       1063 : 8D 2F                      bsr     putchar
       1065 : 8D 05                      bsr     put_bin4
       1067 : 58                         lslb
       1068 : 8D 02                      bsr     put_bin4
       106A : 33                         pulb
       106B : 39                         rts
       106C :                    put_bin4:
       106C : 8D 01                      bsr     put_bin2
       106E : 58                         lslb
       106F :                    put_bin2:
       106F : 8D 01                      bsr     put_bin1
       1071 : 58                         lslb
       1072 :                    put_bin1:
       1072 : 86 30                      ldaa    #'0'
       1074 : 5D                         tstb                    ; chech MSB
       1075 : 2A 01                      bpl     put_bin0        ; MSB=0
       1077 : 4C                         inca                    ; MSB=1
       1078 :                    put_bin0:
       1078 : 20 1A                      bra     putchar
       107A :
       107A :                    ;;; Get character
       107A :                    ;;; @return A
       107A :                    ;;; @return CC.C 0 if no character
       107A :                    getchar:
       107A : 3C                         pshx
       107B : 37                         pshb
       107C : 07                         tpa
       107D : 36                         psha                    ; save CC
       107E : 0F                         sei                     ; disable IRQ
       107F : CE 20 00                   ldx     #rx_queue
       1082 : BD 10 E3                   jsr     queue_remove
       1085 : 16                         tab                     ; char? in B
       1086 : 32                         pula                    ; restore CC to A
       1087 : 25 05                      bcs     getchar_exit
       1089 : 06                         tap
       108A : 0C                         clc                     ; clear carry
       108B : 33                         pulb
       108C : 38                         pulx
       108D : 39                         rts
       108E :                    getchar_exit:
       108E : 06                         tap
       108F : 0D                         sec                     ; set carry
       1090 : 17                         tba
       1091 : 33                         pulb
       1092 : 38                         pulx
       1093 : 39                         rts
       1094 :
       1094 :                    ;;; Put character
       1094 :                    ;;; @param A
       1094 :                    putchar:
       1094 : 3C                         pshx
       1095 : 37                         pshb
       1096 : 36                         psha
       1097 : 16                         tab                     ; char in B
       1098 : 07                         tpa
       1099 : 36                         psha                    ; save CC
       109A :                    putchar_retry:
       109A : 17                         tba                     ; char in A
       109B : CE 20 80                   ldx     #tx_queue
       109E : 0F                         sei                     ; disable IRQ
       109F : BD 10 C7                   jsr     queue_add
       10A2 : 0E                         cli                     ; enable IRQ
       10A3 : 24 F5                      bcc     putchar_retry   ; branch if queue is full
       10A5 : 0F                         sei                     ; disable IRQ
       10A6 : 7D 21 00                   tst     tx_int_control
       10A9 : 26 07                      bne     putchar_exit
       10AB : 86 1E                      ldaa    #RX_INT_TX_INT  ; Enable Tx interrupt
       10AD : 97 11                      staa    TRCSR
       10AF : 73 21 00                   com     tx_int_control
       10B2 :                    putchar_exit:
       10B2 : 32                         pula                    ; restore CC
       10B3 : 06                         tap
       10B4 : 32                         pula
       10B5 : 33                         pulb
       10B6 : 38                         pulx
       10B7 : 39                         rts
       10B8 :
       10B8 :                            include "queue.inc"
(1)    10B8 :                    ;;; [queue] queue structure
(1)    10B8 : =0                 queue_len:      equ     0       ; queue length
(1)    10B8 : =1                 queue_size:     equ     1       ; buffer size
(1)    10B8 : =2                 queue_put:      equ     2       ; queue put index
(1)    10B8 : =3                 queue_get:      equ     3       ; queue get index
(1)    10B8 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    10B8 :
(1)    10B8 :                    ;;; [queue] Initialize queue
(1)    10B8 :                    ;;; @param X queue work space pointer
(1)    10B8 :                    ;;; @param B queue work space size
(1)    10B8 :                    ;;; @clobber B
(1)    10B8 :                    queue_init:
(1)    10B8 : 37                         pshb
(1)    10B9 : 3C                         pshx
(1)    10BA :                    queue_init_loop:
(1)    10BA : 6F 00                      clr     0,x
(1)    10BC : 08                         inx
(1)    10BD : 5A                         decb
(1)    10BE : 26 FA                      bne     queue_init_loop
(1)    10C0 : 38                         pulx
(1)    10C1 : 33                         pulb
(1)    10C2 : C0 04                      subb    #queue_buf
(1)    10C4 : E7 01                      stab    queue_size,x
(1)    10C6 : 39                         rts
(1)    10C7 :
(1)    10C7 :                    ;;; [queue] Add an element to queue
(1)    10C7 :                    ;;; @param X queue work space pointer
(1)    10C7 :                    ;;; @param A an element
(1)    10C7 :                    ;;; @return CC.C 0 if queue is full
(1)    10C7 :                    queue_add:
(1)    10C7 : 37                 	pshb
(1)    10C8 : E6 00                      ldab    queue_len,x
(1)    10CA : E1 01                      cmpb    queue_size,x
(1)    10CC : 24 13                      bhs     queue_add_return ; carry is cleared
(1)    10CE : E6 02                      ldab    queue_put,x     ; 8 bits offset
(1)    10D0 : 3C                         pshx
(1)    10D1 : 3A                         abx                     ; X+=B
(1)    10D2 : A7 04                      staa    queue_buf,x     ; store an element
(1)    10D4 : 38                         pulx
(1)    10D5 : 6C 00                      inc     queue_len,x
(1)    10D7 : 5C                         incb
(1)    10D8 : E7 02                      stab    queue_put,x
(1)    10DA : E1 01                      cmpb    queue_size,x
(1)    10DC : 25 03                      blo     queue_add_return ; carry is set
(1)    10DE : 6F 02                      clr     queue_put,x
(1)    10E0 : 0D                         sec                     ; set carry
(1)    10E1 :                    queue_add_return:
(1)    10E1 : 33                 	pulb
(1)    10E2 : 39                         rts
(1)    10E3 :
(1)    10E3 :                    ;;; [queue] Remove an element from queue
(1)    10E3 :                    ;;; @param X queue work space pointer
(1)    10E3 :                    ;;; @return A an element
(1)    10E3 :                    ;;; @return CC.C 0 if queue is empty
(1)    10E3 :                    queue_remove:
(1)    10E3 : 6D 00                      tst     queue_len,x
(1)    10E5 : 26 02                      bne     queue_remove_elem
(1)    10E7 : 0C                         clc                     ; clear carry
(1)    10E8 : 39                         rts
(1)    10E9 :                    queue_remove_elem
(1)    10E9 : 37                 	pshb
(1)    10EA : E6 03                      ldab    queue_get,x     ; 8 bits offset
(1)    10EC : 3C                         pshx
(1)    10ED : 3A                         abx                     ; X+=B
(1)    10EE : A6 04                      ldaa    queue_buf,x     ; read an element
(1)    10F0 : 38                         pulx
(1)    10F1 : 6A 00                      dec     queue_len,x
(1)    10F3 : 5C                         incb
(1)    10F4 : E7 03                      stab    queue_get,x
(1)    10F6 : E1 01                      cmpb    queue_size,x
(1)    10F8 : 25 03                      blo     queue_remove_return ; carry is set
(1)    10FA : 6F 03                      clr     queue_get,x
(1)    10FC : 0D                         sec                     ; set carry
(1)    10FD :                    queue_remove_return:
(1)    10FD : 33                         pulb
(1)    10FE : 39                         rts
(1)    10FF :
(1)    10FF :                    ;;; Local Variables:
(1)    10FF :                    ;;; mode: asm
(1)    10FF :                    ;;; End:
(1)    10FF :                    ;;; vim: set ft=asm et ts=4 sw=4:
       10FF :
       10FF :                    isr_sci:
       10FF : D6 11                      ldab    TRCSR
       1101 : C5 40                      bitb    #TRCSR_ORFE_bm
       1103 : 27 02                      beq     isr_sci_receive
       1105 : 96 12                      ldaa    SCRDR           ; reset ORFE
       1107 :                    isr_sci_receive:
       1107 : C5 80                      bitb    #TRCSR_RDRF_bm
       1109 : 27 08                      beq     isr_sci_send
       110B : 96 12                      ldaa    SCRDR           ; receive character
       110D : CE 20 00                   ldx     #rx_queue
       1110 : BD 10 C7                   jsr     queue_add
       1113 :                    isr_sci_send:
       1113 : C5 20                      bitb    #TRCSR_TDRE_bm
       1115 : 27 0A                      beq     isr_sci_exit
       1117 : CE 20 80                   ldx     #tx_queue
       111A : BD 10 E3                   jsr     queue_remove
       111D : 24 03                      bcc     isr_sci_send_empty
       111F : 97 13                      staa    SCTDR           ; send character
       1121 :                    isr_sci_exit:
       1121 : 3B                         rti
       1122 :                    isr_sci_send_empty:
       1122 : 86 1A                      ldaa    #RX_INT_TX_NO
       1124 : 97 11                      staa    TRCSR           ; disable Tx interrupt
       1126 : 7F 21 00                   clr     tx_int_control
       1129 : 3B                         rti
       112A :
       FFF0 :                            org     VEC_SCI
       FFF0 : 10 FF                      fdb     isr_sci
       FFF2 :
       FFFE :                            org     VEC_RESET
       FFFE : 10 00                      fdb     initialize

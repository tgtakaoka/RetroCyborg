          0 :                            cpu     6502
          0 :                            include "w65c816s.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                            include "mos6502.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :
(2)       0 :                    ;;; MOS6502
(2)       0 :                    ;;; Processor Status Register P
(2)       0 : =1                 P_CARRY:        equ     %00000001   ; set to 1 if carry occurred
(2)       0 : =2                 P_ZERO:         equ     %00000010   ; set to 1 if result is zero
(2)       0 : =4                 P_IRQ:          equ     %00000100   ; if 1, IRQ is disabled
(2)       0 : =8                 P_DECIMAL:      equ     %00001000   ; if 1, decimal mode
(2)       0 : =10                P_BRK:          equ     %00010000   ; if 1, BRK command
(2)       0 : =2                 P_OVERFLOW:     equ     %00000010   ; set to 1 if overflow occurred
(2)       0 : =8                 P_NEGATIVE:     equ     %00001000   ; set to 1 if result is negative
(2)       0 :
(2)       0 :                    ;;; Vector
(2)       0 : =FFFA              VEC_NMI:        equ     $FFFA  ; $FFFA: Non Maskable Interrupt
(2)       0 : =FFFC              VEC_RESET:      equ     $FFFC  ; $FFFE: Reset
(2)       0 : =FFFE              VEC_IRQ:        equ     $FFFE  ; $FFFE: Interrupt Request and BRK command
(1)       0 :
(1)       0 :                    ;;; W65C816S
(1)       0 :                    ;;; Processor Status Register P
(1)       0 : =10                P_X:    equ     %00010000       ; if 0, X and Y are 16 bit.
(1)       0 : =20                P_M:    equ     %00100000       ; if 0, A is 16 bit.
(1)       0 :
(1)       0 :                    ;;; Emulation Mode Vector Locations
(1)       0 : =FFF8              VEC_ABORT:      equ     $FFF8   ; $FFF8: Abort
(1)       0 : =FFF4              VEC_COP:        equ     $FFF4   ; $FFF4: COP command
(1)       0 :
(1)       0 :                    ;;; Native Mode Vector Locations
(1)       0 : =FFEE              NVEC_IRQ:       equ     $FFEE   ; $FFEE: Interrupt Request
(1)       0 : =FFEA              NVEC_NMI:       equ     $FFEA   ; $FFEA: Non Maskable Interrupt
(1)       0 : =FFE8              NVEC_ABORT:     equ     $FFE8   ; $FFE8: Abort
(1)       0 : =FFE6              NVEC_BRK:       equ     $FFE6   ; $FFE6: BRK command
(1)       0 : =FFE4              NVEC_COP:       equ     $FFE4   ; $FFE4: COP command
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     $DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 :
          0 :                            org     0
          0 :                    queue_tmp:
          0 :                            rmb     2
          2 :                    rx_queue:
          2 :                            rmb     queue_buf
          6 : 00 20                      fdb     $2000
          8 : =80                rx_queue_size:  equ     128
          8 :                    tx_queue:
          8 :                            rmb     queue_buf
          C : 80 20                      fdb     $2000 + rx_queue_size
          E : =80                tx_queue_size:  equ     128
          E :                    tx_int_control:
          E :                            rmb     1
          F :                    isr_irq_work:
          F :                            rmb     1
         10 :
         10 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
         10 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
         10 :
         10 : =1FF               stack:  equ     $01ff
         10 :
       1000 :                            org     $1000
       1000 :                    initialize:
       1000 : A2 FF                      ldx     #stack
       1002 : 9A                         txs
       1003 : D8                         cld                     ; clear decimal flag
       1004 : A2 02                      ldx     #rx_queue
       1006 : A9 80                      lda     #rx_queue_size
       1008 : 20 C6 10                   jsr     queue_init
       100B : A2 08                      ldx     #tx_queue
       100D : A9 80                      lda     #tx_queue_size
       100F : 20 C6 10                   jsr     queue_init
       1012 :                            ;; initialize ACIA
       1012 : A9 03                      lda     #CDS_RESET_gc   ; master reset
       1014 : 8D 00 DF                   sta     ACIA_control
       1017 : A9 94                      lda     #RX_INT_TX_NO
       1019 : 8D 00 DF                   sta     ACIA_control
       101C : A9 00                      lda     #0
       101E : 85 0E                      sta     tx_int_control  ; disable Tx interrupt
       1020 : 58                         cli                     ; enable IRQ
       1021 :
       1021 :                    receive_loop:
       1021 : 20 9E 10                   jsr     getchar
       1024 : B0 FB                      bcs     receive_loop
       1026 :                    echo_back:
       1026 : 48                         pha
       1027 : 20 AD 10                   jsr     putchar         ; echo
       102A : A9 20                      lda     #' '            ; space
       102C : 20 AD 10                   jsr     putchar
       102F : 68                         pla
       1030 : 48                         pha
       1031 : 20 4D 10                   jsr     put_hex8        ; print in hex
       1034 : A9 20                      lda     #' '            ; space
       1036 : 20 AD 10                   jsr     putchar
       1039 : 68                         pla
       103A : 20 72 10                   jsr     put_bin8        ; print in binary
       103D : 20 43 10                   jsr     newline
       1040 : 4C 21 10                   jmp     receive_loop
       1043 :
       1043 :                    ;;; Put newline
       1043 :                    ;;; @clobber A
       1043 :                    newline:
       1043 : A9 0D                      lda     #$0d
       1045 : 20 AD 10                   jsr     putchar
       1048 : A9 0A                      lda     #$0a
       104A : 4C AD 10                   jmp     putchar
       104D :
       104D :                    ;;; Print uint8_t in hex
       104D :                    ;;; @param A uint8_t value to be printed in hex.
       104D :                    ;;; @clobber A
       104D :                    put_hex8:
       104D : 48                         pha
       104E : A9 30                      lda     #'0'
       1050 : 20 AD 10                   jsr     putchar
       1053 : A9 78                      lda     #'x'
       1055 : 20 AD 10                   jsr    putchar
       1058 : 68                         pla
       1059 : 48                         pha
       105A : 4A                         lsr     a
       105B : 4A                         lsr     a
       105C : 4A                         lsr     a
       105D : 4A                         lsr     a
       105E : 20 62 10                   jsr     put_hex4
       1061 : 68                         pla
       1062 :                    put_hex4:
       1062 : 29 0F                      and     #$0f
       1064 : C9 0A                      cmp     #10
       1066 : 90 05                      bcc     put_hex8_dec    ; <10
       1068 : 69 36                      adc     #'A'-10-1       ; C=1
       106A : 4C AD 10                   jmp     putchar
       106D :                    put_hex8_dec:
       106D : 69 30                      adc     #'0'
       106F : 4C AD 10                   jmp     putchar
       1072 :
       1072 :                    ;;; Print uint8_t in binary
       1072 :                    ;;; @param A uint8_t value to be printed in binary.
       1072 :                    ;;; @clobber A
       1072 :                    put_bin8:
       1072 : 48                         pha
       1073 : A9 30                      lda     #'0'
       1075 : 20 AD 10                   jsr     putchar
       1078 : A9 62                      lda     #'b'
       107A : 20 AD 10                   jsr     putchar
       107D : 68                         pla
       107E : 20 86 10                   jsr     put_bin4
       1081 : 0A                         asl     a
       1082 : 20 86 10                   jsr     put_bin4
       1085 : 60                         rts
       1086 :                    put_bin4:
       1086 : 20 8A 10                   jsr     put_bin2
       1089 : 0A                         asl     a
       108A :                    put_bin2:
       108A : 20 8E 10                   jsr     put_bin1
       108D : 0A                         asl     a
       108E :                    put_bin1:
       108E : 48                         pha
       108F : 09 00                      ora     #0
       1091 : 10 04                      bpl     put_bin0
       1093 : A9 31                      lda     #'1'
       1095 : D0 02                      bne     put_binchar
       1097 :                    put_bin0:
       1097 : A9 30                      lda     #'0'
       1099 :                    put_binchar:
       1099 : 20 AD 10                   jsr     putchar
       109C : 68                         pla
       109D : 60                         rts
       109E :
       109E :                    ;;; Get character
       109E :                    ;;; @return A
       109E :                    ;;; @return P.C 1 if no character
       109E :                    ;;; @clobber X
       109E :                    getchar:
       109E : 08                         php                     ; save P
       109F : A2 02                      ldx     #rx_queue
       10A1 : 78                         sei                     ; disable IRQ
       10A2 : 20 04 11                   jsr     queue_remove
       10A5 : 90 03                      bcc     getchar_exit
       10A7 : 28                         plp                     ; restore P
       10A8 : 38                         sec
       10A9 : 60                         rts
       10AA :                    getchar_exit:
       10AA : 28                         plp
       10AB : 18                         clc
       10AC : 60                         rts
       10AD :
       10AD :                    ;;; Put character
       10AD :                    ;;; @param A
       10AD :                    ;;; @clobber X
       10AD :                    putchar:
       10AD : 08                         php                     ; save P
       10AE : 48                         pha
       10AF :                    putchar_retry:
       10AF : A2 08                      ldx     #tx_queue
       10B1 : 78                         sei                     ; disable IRQ
       10B2 : 20 E3 10                   jsr     queue_add
       10B5 : 58                         cli                     ; enable IRQ
       10B6 : B0 F7                      bcs     putchar_retry   ; queue is full
       10B8 : A5 0E                      lda     tx_int_control
       10BA : D0 07                      bne     putchar_exit
       10BC : A9 B4                      lda     #RX_INT_TX_INT  ; enable Tx interrupt
       10BE : 8D 00 DF                   sta     ACIA_control
       10C1 : E6 0E                      inc     tx_int_control
       10C3 :                    putchar_exit:
       10C3 : 68                         pla
       10C4 : 28                         plp                     ; restore P
       10C5 : 60                         rts
       10C6 :
       10C6 :                            include "queue.inc"
(1)    10C6 :                    ;;; [queue_tmp] must be allocated 2 bytes on zero page
(1)    10C6 :                    ;;; [queue] queue structure
(1)    10C6 : =0                 queue_len:      equ     0       ; queue length
(1)    10C6 : =1                 queue_size:     equ     1       ; buffer size
(1)    10C6 : =2                 queue_put:      equ     2       ; queue put index
(1)    10C6 : =3                 queue_get:      equ     3       ; queue get index
(1)    10C6 : =4                 queue_buf:      equ     4       ; buffer start address
(1)    10C6 :
(1)    10C6 :                    ;;; [queue] Initialize queue
(1)    10C6 :                    ;;; @param X queue work space pointer
(1)    10C6 :                    ;;; @param A queue work space size
(1)    10C6 :                    ;;; @clobber A, Y
(1)    10C6 :                    queue_init:
(1)    10C6 : 95 01                      sta     queue_size,x
(1)    10C8 : 20 DA 10                   jsr     init_queue_tmp
(1)    10CB : A8                         tay                     ; Y is queue size
(1)    10CC : A9 00                      lda     #0
(1)    10CE : 95 00                      sta     queue_len,x
(1)    10D0 : 95 02                      sta     queue_put,x
(1)    10D2 : 95 03                      sta     queue_get,x
(1)    10D4 :                    queue_init_loop:
(1)    10D4 : 91 00                      sta     (queue_tmp),y
(1)    10D6 : 88                         dey
(1)    10D7 : D0 FB                      bne     queue_init_loop
(1)    10D9 : 60                         rts
(1)    10DA :
(1)    10DA :                    ;;; init_tmp
(1)    10DA :                    ;;; @param X queue work space pointer
(1)    10DA :                    ;;; store [queue_buf,x] to queue_tmp
(1)    10DA :                    ;;; @clobber Y
(1)    10DA :                    init_queue_tmp:
(1)    10DA : B4 04                      ldy     queue_buf,x
(1)    10DC : 84 00                      sty     queue_tmp
(1)    10DE : B4 05                      ldy     queue_buf+1,x
(1)    10E0 : 84 01                      sty     queue_tmp+1
(1)    10E2 : 60                         rts
(1)    10E3 :
(1)    10E3 :                    ;;; [queue] Add an element to queue
(1)    10E3 :                    ;;; @param X queue work space pointer
(1)    10E3 :                    ;;; @param A an element
(1)    10E3 :                    ;;; @return P.C 1 if queue is full
(1)    10E3 :                    queue_add:
(1)    10E3 : 48                         pha                     ; save an element
(1)    10E4 : 20 DA 10                   jsr     init_queue_tmp
(1)    10E7 : B5 00                      lda     queue_len,x
(1)    10E9 : D5 01                      cmp     queue_size,x
(1)    10EB : B0 15                      bcs     queue_add_return  ; queue_len >= queue_size
(1)    10ED : B4 02                      ldy     queue_put,x
(1)    10EF : 68                         pla
(1)    10F0 : 48                         pha
(1)    10F1 : 91 00                      sta     (queue_tmp),y   ; store an element
(1)    10F3 : F6 00                      inc     queue_len,x
(1)    10F5 : C8                         iny
(1)    10F6 : 94 02                      sty     queue_put,x
(1)    10F8 : 98                         tya
(1)    10F9 : D5 01                      cmp     queue_size,x
(1)    10FB : 90 05                      bcc     queue_add_return ; queue_put < queue_size
(1)    10FD : A9 00                      lda     #0
(1)    10FF : 95 02                      sta     queue_put,x
(1)    1101 : 18                         clc                     ;  C=0
(1)    1102 :                    queue_add_return:
(1)    1102 : 68                         pla
(1)    1103 : 60                         rts
(1)    1104 :
(1)    1104 :                    ;;; [queue] Remove an element from queue
(1)    1104 :                    ;;; @param X queue work space pointer
(1)    1104 :                    ;;; @return A an element
(1)    1104 :                    ;;; @return P.C 1 if queue is empty
(1)    1104 :                    ;;; @clobber Y
(1)    1104 :                    queue_remove:
(1)    1104 : B5 00                      lda     queue_len,x
(1)    1106 : D0 02                      bne     queue_remove_elem
(1)    1108 : 38                         sec                     ; C=1
(1)    1109 : 60                         rts
(1)    110A :                    queue_remove_elem
(1)    110A : 20 DA 10                   jsr     init_queue_tmp
(1)    110D : B4 03                      ldy     queue_get,x     ; 8 bits offset
(1)    110F : B1 00                      lda     (queue_tmp),y   ; read an element
(1)    1111 : 48                         pha                     ; save an element
(1)    1112 : D6 00                      dec     queue_len,x
(1)    1114 : C8                         iny
(1)    1115 : 94 03                      sty     queue_get,x
(1)    1117 : 98                         tya
(1)    1118 : D5 01                      cmp     queue_size,x
(1)    111A : 90 05                      bcc     queue_remove_return ; queue_get < queue_size
(1)    111C : A9 00                      lda     #0
(1)    111E : 95 03                      sta     queue_get,x
(1)    1120 : 18                         clc                     ; C=0
(1)    1121 :                    queue_remove_return:
(1)    1121 : 68                         pla                     ; restore an element
(1)    1122 : 60                         rts
(1)    1123 :
(1)    1123 :                    ;;; Local Variables:
(1)    1123 :                    ;;; mode: asm
(1)    1123 :                    ;;; End:
(1)    1123 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       1123 :
       1123 :                    isr_irq:
       1123 : D8                         cld                     ; clear decimal flag
       1124 : 48                         pha                     ; save A
       1125 : 8A                         txa
       1126 : 48                         pha                     ; save X
       1127 : 98                         tya
       1128 : 48                         pha                     ; save Y
       1129 : AD 00 DF                   lda     ACIA_status
       112C : 85 0F                      sta     isr_irq_work    ; save ACIA status
       112E : 29 80                      and     #IRQF_bm
       1130 : F0 27                      beq     isr_irq_exit
       1132 : A5 0F                      lda     isr_irq_work
       1134 : 29 70                      and     #FERR_bm|OVRN_bm|PERR_bm
       1136 : F0 03                      beq     isr_irq_receive
       1138 : AD 01 DF                   lda     ACIA_data       ; reset error flags
       113B :                    isr_irq_receive:
       113B : A5 0F                      lda     isr_irq_work
       113D : 29 01                      and     #RDRF_bm
       113F : F0 08                      beq     isr_irq_send
       1141 : AD 01 DF                   lda     ACIA_data       ; receive character
       1144 : A2 02                      ldx     #rx_queue
       1146 : 20 E3 10                   jsr     queue_add
       1149 :                    isr_irq_send:
       1149 : A5 0F                      lda     isr_irq_work
       114B : 29 02                      and     #TDRE_bm
       114D : F0 0A                      beq     isr_irq_exit
       114F : A2 08                      ldx     #tx_queue
       1151 : 20 04 11                   jsr     queue_remove
       1154 : B0 09                      bcs     isr_irq_send_empty
       1156 : 8D 01 DF                   sta     ACIA_data       ; send character
       1159 :                    isr_irq_exit:
       1159 : 68                         pla                     ; restore Y
       115A : A8                         tay
       115B : 68                         pla                     ; restore X
       115C : AA                         tax
       115D : 68                         pla                     ; restore Y
       115E : 40                         rti                     ; restore P and PC
       115F :                    isr_irq_send_empty:
       115F : A9 94                      lda     #RX_INT_TX_NO
       1161 : 8D 00 DF                   sta     ACIA_control    ; disable Tx interrupt
       1164 : A9 00                      lda     #0
       1166 : 85 0E                      sta     tx_int_control
       1168 : F0 EF                      beq     isr_irq_exit    ; always branch
       116A :
       FFEE :                            org     NVEC_IRQ
       FFEE : 23 11                      fdb     isr_irq
       FFF0 :
       FFFE :                            org     VEC_IRQ
       FFFE : 23 11                      fdb     isr_irq
      10000 :
       FFFC :                            org     VEC_RESET
       FFFC : 00 10                      fdb     initialize

   0:                             CPU  6502
   0:                             INCLUDE              "mos6502.inc"
   0:             ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:             ;;; MOS6502
   0:             ;;; Processor Status Register P
   0: =$1         P_CARRY:        EQU  %00000001       ; set to 1 if carry occurred
   0: =$2         P_ZERO:         EQU  %00000010       ; set to 1 if result is zero
   0: =$4         P_IRQ:          EQU  %00000100       ; if 1, IRQ is disabled
   0: =$8         P_DECIMAL:      EQU  %00001000       ; if 1, decimal mode
   0: =$10        P_BRK:          EQU  %00010000       ; if 1, BRK command
   0: =$2         P_OVERFLOW:     EQU  %00000010       ; set to 1 if overflow occurred
   0: =$8         P_NEGATIVE:     EQU  %00001000       ; set to 1 if result is negative
   0:
   0:             ;;; Vector
   0: =$FFFA      VEC_NMI:        EQU  $FFFA           ; $FFFA: Non Maskable Interrupt
   0: =$FFFC      VEC_RESET:      EQU  $FFFC           ; $FFFE: Reset
   0: =$FFFE      VEC_IRQ:        EQU  $FFFE           ; $FFFE: Interrupt Request and BRK command
   0:
   0:             ;;; MC6850 Asynchronous Communication Interface Adapter
   0: =$DF00      ACIA:           EQU  $DF00
   0:                             INCLUDE              "mc6850.inc"
   0:             ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:             ;;; MC6850
   0:             ;;; Asynchronous Communication Interface Adapter
   0:
   0:             ;;; Control register
   0: =$DF00      ACIA_control:   EQU  ACIA+0
   0:             ;; Counter Divider Select Bits
   0: =$3         CDS_gm:         EQU  %11             ; Group mask
   0: =$0         CDS_DIV1_gc:    EQU  %00000000       ; /1
   0: =$1         CDS_DIV16_gc:   EQU  %00000001       ; /16
   0: =$2         CDS_DIV64_gc:   EQU  %00000010       ; /64
   0: =$3         CDS_RESET_gc:   EQU  %00000011       ; Master Reset
   0:             ;; Word Select Bits
   0: =$1C        WSB_gm:         EQU  %00011100       ; Group mask
   0: =$0         WSB_7E2_gc:     EQU  %00000000       ; 7 Bits + Even Parity + 2 Stop Bits
   0: =$4         WSB_7O2_gc:     EQU  %00000100       ; 7 bits + Odd Parity  + 2 Stop Bits
   0: =$8         WSB_7E1_gc:     EQU  %00001000       ; 7 bits + Even Parity + 1 Stop Bits
   0: =$C         WSB_7O1_gc:     EQU  %00001100       ; 7 bits + Odd Parity  + 1 Stop Bits
   0: =$10        WSB_8N2_gc:     EQU  %00010000       ; 8 bits + No Parity   + 2 Stop Bits
   0: =$14        WSB_8N1_gc:     EQU  %00010100       ; 8 bits + No Parity   + 1 Stop Bits
   0: =$18        WSB_8E1_gc:     EQU  %00011000       ; 8 bits + Even Parity + 1 Stop Bits
   0: =$1C        WSB_8O1_gc:     EQU  %00011100       ; 8 bits + Odd Parity  + 1 Stop Bits
   0:             ;; Transmit Control Bits
   0: =$60        TCB_gm:         EQU  %01100000       ; Group mask
   0: =$0         TCB_DI_gc:      EQU  %00000000       ; RTS=Low,  Tx Interrupt Disabled
   0: =$20        TCB_EI_gc:      EQU  %00100000       ; RTS=Low,  Tx Interrupt Enabled
   0: =$40        TCB_RTS_gc:     EQU  %01000000       ; RTS=High, Tx Interrupt Disabled
   0: =$60        TCB_BREAK_gc:   EQU  %01100000       ; RTS=Low,  Tx Interrupt Disabled
   0:             ; Transmit Break Level
   0: =$80        RIEB_bm:        EQU  %10000000       ; Receive Interrupt Enable Bit mask
   0:
   0:             ;;; Status register
   0: =$DF00      ACIA_status:    EQU  ACIA+0
   0: =$1         RDRF_bm:        EQU  %00000001       ; Receive Data Register Full
   0: =$2         TDRE_bm:        EQU  %00000010       ; Transmit Data Register Empty
   0: =$4         DCDF_bm:        EQU  %00000100       ; Data Carrier Detect Flag
   0: =$8         CTSF_bm:        EQU  %00001000       ; Clear To Send Flag
   0: =$10        FERR_bm:        EQU  %00010000       ; Frame Error Flag
   0: =$20        OVRN_bm:        EQU  %00100000       ; Receiver Overrun Flag
   0: =$40        PERR_bm:        EQU  %01000000       ; Parity Error Flag
   0: =$80        IRQF_bm:        EQU  %10000000       ; Interrupt Request Flag
   0:
   0:             ;;; Data register
   0: =$DF01      ACIA_data:      EQU  ACIA+1          ; Data register
   0:
   0:                             ORG  0
   0:             queue_tmp:
   0:                             RMB  2
   2:             rx_queue:
   2:                             RMB  queue_buf
   6: 00 20                       FDB  $2000
   8: =$80        rx_queue_size:  EQU  128
   8:             tx_queue:
   8:                             RMB  queue_buf
   C: 80 20                       FDB  $2000 + rx_queue_size
   E: =$80        tx_queue_size:  EQU  128
   E:             tx_int_control:
   E:                             RMB  1
   F: =$94        RX_INT_TX_NO:   EQU  WSB_8N1_gc|RIEB_bm
   F: =$B4        RX_INT_TX_INT:  EQU  WSB_8N1_gc|RIEB_bm|TCB_EI_gc
   F:
   F: =$1FF       stack:          EQU  $01ff
   F:
1000:                             ORG  $1000
1000:             initialize:
1000: A2 FF                       LDX  #stack
1002: 9A                          TXS
1003: D8                          CLD                  ; clear decimal flag
1004: A2 02                       LDX  #rx_queue
1006: A9 80                       LDA  #rx_queue_size
1008: 20 C7 10                    JSR  queue_init
100B: A2 08                       LDX  #tx_queue
100D: A9 80                       LDA  #tx_queue_size
100F: 20 C7 10                    JSR  queue_init
1012:             ;; initialize ACIA
1012: A9 03                       LDA  #CDS_RESET_gc   ; master reset
1014: 8D 00 DF                    STA  ACIA_control
1017: A9 94                       LDA  #RX_INT_TX_NO
1019: 8D 00 DF                    STA  ACIA_control
101C: A9 00                       LDA  #0
101E: 85 0E                       STA  tx_int_control  ; disable Tx interrupt
1020: 58                          CLI                  ; enable IRQ
1021:
1021:             receive_loop:
1021: 20 9E 10                    JSR  getchar
1024: B0 FB                       BCS  receive_loop
1026:             echo_back:
1026: 48                          PHA
1027: 20 AD 10                    JSR  putchar         ; echo
102A: A9 20                       LDA  #' '            ; space
102C: 20 AD 10                    JSR  putchar
102F: 68                          PLA
1030: 48                          PHA
1031: 20 4D 10                    JSR  put_hex8        ; print in hex
1034: A9 20                       LDA  #' '            ; space
1036: 20 AD 10                    JSR  putchar
1039: 68                          PLA
103A: 20 72 10                    JSR  put_bin8        ; print in binary
103D: 20 43 10                    JSR  newline
1040: 4C 21 10                    JMP  receive_loop
1043:
1043:             ;;; Put newline
1043:             ;;; @clobber A
1043:             newline:
1043: A9 0D                       LDA  #$0d
1045: 20 AD 10                    JSR  putchar
1048: A9 0A                       LDA  #$0a
104A: 4C AD 10                    JMP  putchar
104D:
104D:             ;;; Print uint8_t in hex
104D:             ;;; @param A uint8_t value to be printed in hex.
104D:             ;;; @clobber A
104D:             put_hex8:
104D: 48                          PHA
104E: A9 30                       LDA  #'0'
1050: 20 AD 10                    JSR  putchar
1053: A9 78                       LDA  #'x'
1055: 20 AD 10                    JSR  putchar
1058: 68                          PLA
1059: 48                          PHA
105A: 4A                          LSR  a
105B: 4A                          LSR  a
105C: 4A                          LSR  a
105D: 4A                          LSR  a
105E: 20 62 10                    JSR  put_hex4
1061: 68                          PLA
1062:             put_hex4:
1062: 29 0F                       AND  #$0f
1064: C9 0A                       CMP  #10
1066: 90 05                       BCC  put_hex8_dec    ; <10
1068: 69 36                       ADC  #'A'-10-1       ; C=1
106A: 4C AD 10                    JMP  putchar
106D:             put_hex8_dec:
106D: 69 30                       ADC  #'0'
106F: 4C AD 10                    JMP  putchar
1072:
1072:             ;;; Print uint8_t in binary
1072:             ;;; @param A uint8_t value to be printed in binary.
1072:             ;;; @clobber A
1072:             put_bin8:
1072: 48                          PHA
1073: A9 30                       LDA  #'0'
1075: 20 AD 10                    JSR  putchar
1078: A9 62                       LDA  #'b'
107A: 20 AD 10                    JSR  putchar
107D: 68                          PLA
107E: 20 86 10                    JSR  put_bin4
1081: 0A                          ASL  a
1082: 20 86 10                    JSR  put_bin4
1085: 60                          RTS
1086:             put_bin4:
1086: 20 8A 10                    JSR  put_bin2
1089: 0A                          ASL  a
108A:             put_bin2:
108A: 20 8E 10                    JSR  put_bin1
108D: 0A                          ASL  a
108E:             put_bin1:
108E: 48                          PHA
108F: 09 00                       ORA  #0
1091: 10 04                       BPL  put_bin0
1093: A9 31                       LDA  #'1'
1095: D0 02                       BNE  put_binchar
1097:             put_bin0:
1097: A9 30                       LDA  #'0'
1099:             put_binchar:
1099: 20 AD 10                    JSR  putchar
109C: 68                          PLA
109D: 60                          RTS
109E:
109E:             ;;; Get character
109E:             ;;; @return A
109E:             ;;; @return P.C 1 if no character
109E:             ;;; @clobber X
109E:             getchar:
109E: 08                          PHP                  ; save P
109F: 78                          SEI                  ; disable IRQ
10A0: A2 02                       LDX  #rx_queue
10A2: 20 05 11                    JSR  queue_remove
10A5: 90 03                       BCC  getchar_end
10A7: 28                          PLP                  ; restore P
10A8: 38                          SEC
10A9: 60                          RTS
10AA:             getchar_end:
10AA: 28                          PLP
10AB: 18                          CLC
10AC: 60                          RTS
10AD:
10AD:             ;;; Put character
10AD:             ;;; @param A
10AD:             ;;; @clobber X
10AD:             putchar:
10AD: 48                          PHA
10AE: 08                          PHP                  ; save P
10AF:             putchar_retry:
10AF: 58                          CLI                  ; enable IRQ
10B0: EA                          NOP
10B1: A2 08                       LDX  #tx_queue
10B3: 78                          SEI                  ; disable IRQ
10B4: 20 E4 10                    JSR  queue_add
10B7: B0 F6                       BCS  putchar_retry   ; queue is full
10B9: A5 0E                       LDA  tx_int_control
10BB: D0 07                       BNE  putchar_end
10BD: A9 B4                       LDA  #RX_INT_TX_INT  ; enable Tx interrupt
10BF: 8D 00 DF                    STA  ACIA_control
10C2: E6 0E                       INC  tx_int_control
10C4:             putchar_end:
10C4: 28                          PLP                  ; restore P
10C5: 68                          PLA
10C6: 60                          RTS
10C7:
10C7:                             INCLUDE              "queue.inc"
10C7:             ;;; [queue_tmp] must be allocated 2 bytes on zero page
10C7:             ;;; [queue] queue structure
10C7: =$0         queue_len:      EQU  0               ; queue length
10C7: =$1         queue_size:     EQU  1               ; buffer size
10C7: =$2         queue_put:      EQU  2               ; queue put index
10C7: =$3         queue_get:      EQU  3               ; queue get index
10C7: =$4         queue_buf:      EQU  4               ; buffer start address
10C7:
10C7:             ;;; [queue] Initialize queue
10C7:             ;;; @param X queue work space pointer
10C7:             ;;; @param A queue work space size
10C7:             ;;; @clobber A, Y
10C7:             queue_init:
10C7: 95 01                       STA  queue_size,x
10C9: 20 DB 10                    JSR  init_queue_tmp
10CC: A8                          TAY                  ; Y is queue size
10CD: A9 00                       LDA  #0
10CF: 95 00                       STA  queue_len,x
10D1: 95 02                       STA  queue_put,x
10D3: 95 03                       STA  queue_get,x
10D5:             queue_init_loop:
10D5: 91 00                       STA  (queue_tmp),y
10D7: 88                          DEY
10D8: D0 FB                       BNE  queue_init_loop
10DA: 60                          RTS
10DB:
10DB:             ;;; init_tmp
10DB:             ;;; @param X queue work space pointer
10DB:             ;;; store [queue_buf,x] to queue_tmp
10DB:             ;;; @clobber Y
10DB:             init_queue_tmp:
10DB: B4 04                       LDY  queue_buf,x
10DD: 84 00                       STY  queue_tmp
10DF: B4 05                       LDY  queue_buf+1,x
10E1: 84 01                       STY  queue_tmp+1
10E3: 60                          RTS
10E4:
10E4:             ;;; [queue] Add an element to queue
10E4:             ;;; @param X queue work space pointer
10E4:             ;;; @param A an element
10E4:             ;;; @return P.C 1 if queue is full
10E4:             queue_add:
10E4: 48                          PHA                  ; save an element
10E5: 20 DB 10                    JSR  init_queue_tmp
10E8: B5 00                       LDA  queue_len,x
10EA: D5 01                       CMP  queue_size,x
10EC: B0 15                       BCS  queue_add_return    ; queue_len >= queue_size
10EE: B4 02                       LDY  queue_put,x
10F0: 68                          PLA
10F1: 48                          PHA
10F2: 91 00                       STA  (queue_tmp),y   ; store an element
10F4: F6 00                       INC  queue_len,x
10F6: C8                          INY
10F7: 94 02                       STY  queue_put,x
10F9: 98                          TYA
10FA: D5 01                       CMP  queue_size,x
10FC: 90 05                       BCC  queue_add_return    ; queue_put < queue_size
10FE: A9 00                       LDA  #0
1100: 95 02                       STA  queue_put,x
1102: 18                          CLC                  ;  C=0
1103:             queue_add_return:
1103: 68                          PLA
1104: 60                          RTS
1105:
1105:             ;;; [queue] Remove an element from queue
1105:             ;;; @param X queue work space pointer
1105:             ;;; @return A an element
1105:             ;;; @return P.C 1 if queue is empty
1105:             ;;; @clobber Y
1105:             queue_remove:
1105: B5 00                       LDA  queue_len,x
1107: D0 02                       BNE  queue_remove_elem
1109: 38                          SEC                  ; C=1
110A: 60                          RTS
110B:             queue_remove_elem
110B: 20 DB 10                    JSR  init_queue_tmp
110E: B4 03                       LDY  queue_get,x     ; 8 bits offset
1110: B1 00                       LDA  (queue_tmp),y   ; read an element
1112: 48                          PHA                  ; save an element
1113: D6 00                       DEC  queue_len,x
1115: C8                          INY
1116: 94 03                       STY  queue_get,x
1118: 98                          TYA
1119: D5 01                       CMP  queue_size,x
111B: 90 05                       BCC  queue_remove_return ; queue_get < queue_size
111D: A9 00                       LDA  #0
111F: 95 03                       STA  queue_get,x
1121: 18                          CLC                  ; C=0
1122:             queue_remove_return:
1122: 68                          PLA                  ; restore an element
1123: 60                          RTS
1124:
1124:             ;;; Local Variables:
1124:             ;;; mode: asm
1124:             ;;; End:
1124:             ;;; vim: set ft=asm et ts=4 sw=4:
1124:
1124:             isr_irq:
1124: D8                          CLD                  ; clear decimal flag
1125: 48                          PHA                  ; save A
1126: 8A                          TXA
1127: 48                          PHA                  ; save X
1128: 98                          TYA
1129: 48                          PHA                  ; save Y
112A: AD 00 DF                    LDA  ACIA_status
112D: 48                          PHA                  ; save ACIA status
112E: 29 80                       AND  #IRQF_bm
1130: 68                          PLA                  ; restore ACIA status
1131: F0 28                       BEQ  isr_irq_return
1133: 48                          PHA                  ; save ACIA status
1134:             isr_irq_receive:
1134: 29 01                       AND  #RDRF_bm
1136: F0 08                       BEQ  isr_irq_recv_end
1138: AD 01 DF                    LDA  ACIA_data       ; receive character
113B: A2 02                       LDX  #rx_queue
113D: 20 E4 10                    JSR  queue_add
1140:             isr_irq_recv_end:
1140:             isr_irq_send:
1140: 68                          PLA                  ; restore ACIA status
1141: 29 02                       AND  #TDRE_bm
1143: F0 16                       BEQ  isr_irq_send_end
1145: A2 08                       LDX  #tx_queue
1147: 20 05 11                    JSR  queue_remove
114A: B0 06                       BCS  isr_irq_send_empty
114C: 8D 01 DF                    STA  ACIA_data       ; send character
114F: 4C 5B 11                    JMP  isr_irq_send_end
1152:             isr_irq_send_empty:
1152: A9 94                       LDA  #RX_INT_TX_NO
1154: 8D 00 DF                    STA  ACIA_control    ; disable Tx interrupt
1157: A9 00                       LDA  #0
1159: 85 0E                       STA  tx_int_control
115B:             isr_irq_send_end:
115B:             isr_irq_return:
115B: 68                          PLA                  ; restore Y
115C: A8                          TAY
115D: 68                          PLA                  ; restore X
115E: AA                          TAX
115F: 68                          PLA                  ; restore Y
1160: 40                          RTI
1161:
FFFE:                             ORG  VEC_IRQ
FFFE: 24 11                       FDB  isr_irq
   0:
FFFC:                             ORG  VEC_RESET
FFFC: 00 10                       FDB  initialize

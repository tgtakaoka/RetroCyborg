   0:                             CPU  6502
   0:                             INCLUDE              "w65c816s.inc"
   0:             ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:                             INCLUDE              "mos6502.inc"
   0:             ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:             ;;; MOS6502
   0:             ;;; Processor Status Register P
   0: =$1         P_CARRY:        EQU  %00000001       ; set to 1 if carry occurred
   0: =$2         P_ZERO:         EQU  %00000010       ; set to 1 if result is zero
   0: =$4         P_IRQ:          EQU  %00000100       ; if 1, IRQ is disabled
   0: =$8         P_DECIMAL:      EQU  %00001000       ; if 1, decimal mode
   0: =$10        P_BRK:          EQU  %00010000       ; if 1, BRK command
   0: =$2         P_OVERFLOW:     EQU  %00000010       ; set to 1 if overflow occurred
   0: =$8         P_NEGATIVE:     EQU  %00001000       ; set to 1 if result is negative
   0:
   0:             ;;; Vector
   0: =$FFFA      VEC_NMI:        EQU  $FFFA           ; $FFFA: Non Maskable Interrupt
   0: =$FFFC      VEC_RESET:      EQU  $FFFC           ; $FFFE: Reset
   0: =$FFFE      VEC_IRQ:        EQU  $FFFE           ; $FFFE: Interrupt Request and BRK command
   0:
   0:             ;;; W65C816S
   0:             ;;; Processor Status Register P
   0: =$10        P_X:            EQU  %00010000       ; if 0, X and Y are 16 bit.
   0: =$20        P_M:            EQU  %00100000       ; if 0, A is 16 bit.
   0:
   0:             ;;; Emulation Mode Vector Locations
   0: =$FFF8      VEC_ABORT:      EQU  $FFF8           ; $FFF8: Abort
   0: =$FFF4      VEC_COP:        EQU  $FFF4           ; $FFF4: COP command
   0:
   0:             ;;; Native Mode Vector Locations
   0: =$FFEE      NVEC_IRQ:       EQU  $FFEE           ; $FFEE: Interrupt Request
   0: =$FFEA      NVEC_NMI:       EQU  $FFEA           ; $FFEA: Non Maskable Interrupt
   0: =$FFE8      NVEC_ABORT:     EQU  $FFE8           ; $FFE8: Abort
   0: =$FFE6      NVEC_BRK:       EQU  $FFE6           ; $FFE6: BRK command
   0: =$FFE4      NVEC_COP:       EQU  $FFE4           ; $FFE4: COP command
   0:
   0:             ;;; MC6850 Asynchronous Communication Interface Adapter
   0: =$DF00      ACIA:           EQU  $DF00
   0:                             INCLUDE              "mc6850.inc"
   0:             ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:             ;;; MC6850
   0:             ;;; Asynchronous Communication Interface Adapter
   0:
   0:             ;;; Control register
   0: =$DF00      ACIA_control:   EQU  ACIA+0
   0:             ;; Counter Divider Select Bits
   0: =$3         CDS_gm:         EQU  %11             ; Group mask
   0: =$0         CDS_DIV1_gc:    EQU  %00000000       ; /1
   0: =$1         CDS_DIV16_gc:   EQU  %00000001       ; /16
   0: =$2         CDS_DIV64_gc:   EQU  %00000010       ; /64
   0: =$3         CDS_RESET_gc:   EQU  %00000011       ; Master Reset
   0:             ;; Word Select Bits
   0: =$1C        WSB_gm:         EQU  %00011100       ; Group mask
   0: =$0         WSB_7E2_gc:     EQU  %00000000       ; 7 Bits + Even Parity + 2 Stop Bits
   0: =$4         WSB_7O2_gc:     EQU  %00000100       ; 7 bits + Odd Parity  + 2 Stop Bits
   0: =$8         WSB_7E1_gc:     EQU  %00001000       ; 7 bits + Even Parity + 1 Stop Bits
   0: =$C         WSB_7O1_gc:     EQU  %00001100       ; 7 bits + Odd Parity  + 1 Stop Bits
   0: =$10        WSB_8N2_gc:     EQU  %00010000       ; 8 bits + No Parity   + 2 Stop Bits
   0: =$14        WSB_8N1_gc:     EQU  %00010100       ; 8 bits + No Parity   + 1 Stop Bits
   0: =$18        WSB_8E1_gc:     EQU  %00011000       ; 8 bits + Even Parity + 1 Stop Bits
   0: =$1C        WSB_8O1_gc:     EQU  %00011100       ; 8 bits + Odd Parity  + 1 Stop Bits
   0:             ;; Transmit Control Bits
   0: =$60        TCB_gm:         EQU  %01100000       ; Group mask
   0: =$0         TCB_DI_gc:      EQU  %00000000       ; RTS=Low,  Tx Interrupt Disabled
   0: =$20        TCB_EI_gc:      EQU  %00100000       ; RTS=Low,  Tx Interrupt Enabled
   0: =$40        TCB_RTS_gc:     EQU  %01000000       ; RTS=High, Tx Interrupt Disabled
   0: =$60        TCB_BREAK_gc:   EQU  %01100000       ; RTS=Low,  Tx Interrupt Disabled
   0:             ; Transmit Break Level
   0: =$80        RIEB_bm:        EQU  %10000000       ; Receive Interrupt Enable Bit mask
   0:
   0:             ;;; Status register
   0: =$DF00      ACIA_status:    EQU  ACIA+0
   0: =$1         RDRF_bm:        EQU  %00000001       ; Receive Data Register Full
   0: =$2         TDRE_bm:        EQU  %00000010       ; Transmit Data Register Empty
   0: =$4         DCDF_bm:        EQU  %00000100       ; Data Carrier Detect Flag
   0: =$8         CTSF_bm:        EQU  %00001000       ; Clear To Send Flag
   0: =$10        FERR_bm:        EQU  %00010000       ; Frame Error Flag
   0: =$20        OVRN_bm:        EQU  %00100000       ; Receiver Overrun Flag
   0: =$40        PERR_bm:        EQU  %01000000       ; Parity Error Flag
   0: =$80        IRQF_bm:        EQU  %10000000       ; Interrupt Request Flag
   0:
   0:             ;;; Data register
   0: =$DF01      ACIA_data:      EQU  ACIA+1          ; Data register
   0:
   0:                             ORG  0
   0:             queue_tmp:
   0:                             RMB  2
   2:             rx_queue:
   2:                             RMB  queue_buf
   6: 00 20                       FDB  $2000
   8: =$80        rx_queue_size:  EQU  128
   8: =$94        RX_INT_TX_NO:   EQU  WSB_8N1_gc|RIEB_bm
   8:
   8: =$1FF       stack:          EQU  $01ff
   8:
1000:                             ORG  $1000
1000:             initialize:
1000: A2 FF                       LDX  #stack
1002: 9A                          TXS
1003: D8                          CLD                  ; clear decimal flag
1004: A2 02                       LDX  #rx_queue
1006: A9 80                       LDA  #rx_queue_size
1008: 20 34 10                    JSR  queue_init
100B:             ;; initialize ACIA
100B: A9 03                       LDA  #CDS_RESET_gc   ; Master reset
100D: 8D 00 DF                    STA  ACIA_control
1010: A9 94                       LDA  #RX_INT_TX_NO
1012: 8D 00 DF                    STA  ACIA_control
1015: 58                          CLI                  ; Enable IRQ
1016:
1016: A2 02                       LDX  #rx_queue
1018:             receive_loop:
1018: 78                          SEI                  ; Disable IRQ
1019: 20 72 10                    JSR  queue_remove
101C: 58                          CLI                  ; Enable IRQ
101D: B0 F9                       BCS  receive_loop
101F: 48                          PHA
1020:             transmit_loop:
1020: AD 00 DF                    LDA  ACIA_status
1023: 29 02                       AND  #TDRE_bm
1025: F0 F9                       BEQ  transmit_loop
1027:             transmit_data:
1027: 68                          PLA
1028: 8D 01 DF                    STA  ACIA_data
102B: C9 0D                       CMP  #$0d
102D: D0 E9                       BNE  receive_loop
102F: A9 0A                       LDA  #$0a
1031: 48                          PHA
1032: D0 EC                       BNE  transmit_loop
1034:
1034:                             INCLUDE              "queue.inc"
1034:             ;;; [queue_tmp] must be allocated 2 bytes on zero page
1034:             ;;; [queue] queue structure
1034: =$0         queue_len:      EQU  0               ; queue length
1034: =$1         queue_size:     EQU  1               ; buffer size
1034: =$2         queue_put:      EQU  2               ; queue put index
1034: =$3         queue_get:      EQU  3               ; queue get index
1034: =$4         queue_buf:      EQU  4               ; buffer start address
1034:
1034:             ;;; [queue] Initialize queue
1034:             ;;; @param X queue work space pointer
1034:             ;;; @param A queue work space size
1034:             ;;; @clobber A, Y
1034:             queue_init:
1034: 95 01                       STA  queue_size,x
1036: 20 48 10                    JSR  init_queue_tmp
1039: A8                          TAY                  ; Y is queue size
103A: A9 00                       LDA  #0
103C: 95 00                       STA  queue_len,x
103E: 95 02                       STA  queue_put,x
1040: 95 03                       STA  queue_get,x
1042:             queue_init_loop:
1042: 91 00                       STA  (queue_tmp),y
1044: 88                          DEY
1045: D0 FB                       BNE  queue_init_loop
1047: 60                          RTS
1048:
1048:             ;;; init_tmp
1048:             ;;; @param X queue work space pointer
1048:             ;;; store [queue_buf,x] to queue_tmp
1048:             ;;; @clobber Y
1048:             init_queue_tmp:
1048: B4 04                       LDY  queue_buf,x
104A: 84 00                       STY  queue_tmp
104C: B4 05                       LDY  queue_buf+1,x
104E: 84 01                       STY  queue_tmp+1
1050: 60                          RTS
1051:
1051:             ;;; [queue] Add an element to queue
1051:             ;;; @param X queue work space pointer
1051:             ;;; @param A an element
1051:             ;;; @return P.C 1 if queue is full
1051:             queue_add:
1051: 48                          PHA                  ; save an element
1052: 20 48 10                    JSR  init_queue_tmp
1055: B5 00                       LDA  queue_len,x
1057: D5 01                       CMP  queue_size,x
1059: B0 15                       BCS  queue_add_return    ; queue_len >= queue_size
105B: B4 02                       LDY  queue_put,x
105D: 68                          PLA
105E: 48                          PHA
105F: 91 00                       STA  (queue_tmp),y   ; store an element
1061: F6 00                       INC  queue_len,x
1063: C8                          INY
1064: 94 02                       STY  queue_put,x
1066: 98                          TYA
1067: D5 01                       CMP  queue_size,x
1069: 90 05                       BCC  queue_add_return    ; queue_put < queue_size
106B: A9 00                       LDA  #0
106D: 95 02                       STA  queue_put,x
106F: 18                          CLC                  ;  C=0
1070:             queue_add_return:
1070: 68                          PLA
1071: 60                          RTS
1072:
1072:             ;;; [queue] Remove an element from queue
1072:             ;;; @param X queue work space pointer
1072:             ;;; @return A an element
1072:             ;;; @return P.C 1 if queue is empty
1072:             ;;; @clobber Y
1072:             queue_remove:
1072: B5 00                       LDA  queue_len,x
1074: D0 02                       BNE  queue_remove_elem
1076: 38                          SEC                  ; C=1
1077: 60                          RTS
1078:             queue_remove_elem
1078: 20 48 10                    JSR  init_queue_tmp
107B: B4 03                       LDY  queue_get,x     ; 8 bits offset
107D: B1 00                       LDA  (queue_tmp),y   ; read an element
107F: 48                          PHA                  ; save an element
1080: D6 00                       DEC  queue_len,x
1082: C8                          INY
1083: 94 03                       STY  queue_get,x
1085: 98                          TYA
1086: D5 01                       CMP  queue_size,x
1088: 90 05                       BCC  queue_remove_return ; queue_get < queue_size
108A: A9 00                       LDA  #0
108C: 95 03                       STA  queue_get,x
108E: 18                          CLC                  ; C=0
108F:             queue_remove_return:
108F: 68                          PLA                  ; restore an element
1090: 60                          RTS
1091:
1091:             ;;; Local Variables:
1091:             ;;; mode: asm
1091:             ;;; End:
1091:             ;;; vim: set ft=asm et ts=4 sw=4:
1091:
1091:             isr_irq:
1091: D8                          CLD                  ; clear decimal flag
1092: 48                          PHA                  ; save A
1093: 8A                          TXA
1094: 48                          PHA                  ; save X
1095: 98                          TYA
1096: 48                          PHA                  ; save Y
1097: AD 00 DF                    LDA  ACIA_status
109A: AA                          TAX
109B: 29 80                       AND  #IRQF_bm
109D: F0 0D                       BEQ  isr_irq_return
109F:             isr_irq_receive:
109F: 8A                          TXA
10A0: 29 01                       AND  #RDRF_bm
10A2: F0 08                       BEQ  isr_irq_recv_end
10A4: AD 01 DF                    LDA  ACIA_data
10A7: A2 02                       LDX  #rx_queue
10A9: 20 51 10                    JSR  queue_add
10AC:             isr_irq_recv_end:
10AC:             isr_irq_return:
10AC: 68                          PLA                  ; restore Y
10AD: A8                          TAY
10AE: 68                          PLA                  ; restore X
10AF: AA                          TAX
10B0: 68                          PLA                  ; restore Y
10B1: 40                          RTI
10B2:
FFEE:                             ORG  NVEC_IRQ
FFEE: 91 10                       FDB  isr_irq
FFF0:
FFFE:                             ORG  VEC_IRQ
FFFE: 91 10                       FDB  isr_irq
   0:
FFFC:                             ORG  VEC_RESET
FFFC: 00 10                       FDB  initialize

          0 :                            cpu     6502
          0 :                            include "w65c816s.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                            include "mos6502.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :
(2)       0 :                    ;;; MOS6502
(2)       0 :                    ;;; Processor Status Register P
(2)       0 : =1                 P_CARRY:        equ     %00000001   ; set to 1 if carry occurred
(2)       0 : =2                 P_ZERO:         equ     %00000010   ; set to 1 if result is zero
(2)       0 : =4                 P_IRQ:          equ     %00000100   ; if 1, IRQ is disabled
(2)       0 : =8                 P_DECIMAL:      equ     %00001000   ; if 1, decimal mode
(2)       0 : =10                P_BRK:          equ     %00010000   ; if 1, BRK command
(2)       0 : =2                 P_OVERFLOW:     equ     %00000010   ; set to 1 if overflow occurred
(2)       0 : =8                 P_NEGATIVE:     equ     %00001000   ; set to 1 if result is negative
(2)       0 :
(2)       0 :                    ;;; Vector
(2)       0 : =FFFA              VEC_NMI:        equ     $FFFA  ; $FFFA: Non Maskable Interrupt
(2)       0 : =FFFC              VEC_RESET:      equ     $FFFC  ; $FFFE: Reset
(2)       0 : =FFFE              VEC_IRQ:        equ     $FFFE  ; $FFFE: Interrupt Request and BRK command
(1)       0 :
(1)       0 :                    ;;; W65C816S
(1)       0 :                    ;;; Processor Status Register P
(1)       0 : =10                P_X:    equ     %00010000       ; if 0, X and Y are 16 bit.
(1)       0 : =20                P_M:    equ     %00100000       ; if 0, A is 16 bit.
(1)       0 :
(1)       0 :                    ;;; Emulation Mode Vector Locations
(1)       0 : =FFF8              VEC_ABORT:      equ     $FFF8   ; $FFF8: Abort
(1)       0 : =FFF4              VEC_COP:        equ     $FFF4   ; $FFF4: COP command
(1)       0 :
(1)       0 :                    ;;; Native Mode Vector Locations
(1)       0 : =FFEE              NVEC_IRQ:       equ     $FFEE   ; $FFEE: Interrupt Request
(1)       0 : =FFEA              NVEC_NMI:       equ     $FFEA   ; $FFEA: Non Maskable Interrupt
(1)       0 : =FFE8              NVEC_ABORT:     equ     $FFE8   ; $FFE8: Abort
(1)       0 : =FFE6              NVEC_BRK:       equ     $FFE6   ; $FFE6: BRK command
(1)       0 : =FFE4              NVEC_COP:       equ     $FFE4   ; $FFE4: COP command
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     $DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 :
          0 :                            org     0
          0 :                    queue_tmp:
          0 :                            rmb     2
          2 :                    rx_queue:
          2 :                            rmb     queue_buf
          6 : 00 20                      fdb     $2000
          8 : =80                rx_queue_size:  equ     128
          8 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          8 :
          8 : =1FF               stack:  equ     $01ff
          8 :
       1000 :                            org     $1000
       1000 :                    initialize:
       1000 : A2 FF                      ldx     #stack & $FF
       1002 : 9A                         txs
       1003 : D8                         cld                     ; clear decimal flag
       1004 : A2 02                      ldx     #rx_queue
       1006 : A9 80                      lda     #rx_queue_size
       1008 : 20 34 10                   jsr     queue_init
       100B :                            ;; initialize ACIA
       100B : A9 03                      lda     #CDS_RESET_gc   ; Master reset
       100D : 8D 00 DF                   sta     ACIA_control
       1010 : A9 94                      lda     #RX_INT_TX_NO
       1012 : 8D 00 DF                   sta     ACIA_control
       1015 : 58                         cli                     ; Enable IRQ
       1016 :
       1016 : A2 02                      ldx     #rx_queue
       1018 :                    receive_loop:
       1018 : 78                         sei                     ; Disable IRQ
       1019 : 20 72 10                   jsr     queue_remove
       101C : 58                         cli                     ; Enable IRQ
       101D : B0 F9                      bcs     receive_loop
       101F : 48                         pha
       1020 :                    transmit_loop:
       1020 : AD 00 DF                   lda     ACIA_status
       1023 : 29 02                      and     #TDRE_bm
       1025 : F0 F9                      beq     transmit_loop
       1027 :                    transmit_data:
       1027 : 68                         pla
       1028 : 8D 01 DF                   sta     ACIA_data
       102B : C9 0D                      cmp     #$0d
       102D : D0 E9                      bne     receive_loop
       102F : A9 0A                      lda     #$0a
       1031 : 48                         pha
       1032 : D0 EC                      bne     transmit_loop
       1034 :
       1034 :                            include "queue.inc"
(1)    1034 :                    ;;; [queue_tmp] must be allocated 2 bytes on zero page
(1)    1034 :                    ;;; [queue] queue structure
(1)    1034 : =0                 queue_len:      equ     0       ; queue length
(1)    1034 : =1                 queue_size:     equ     1       ; buffer size
(1)    1034 : =2                 queue_put:      equ     2       ; queue put index
(1)    1034 : =3                 queue_get:      equ     3       ; queue get index
(1)    1034 : =4                 queue_buf:      equ     4       ; buffer start address
(1)    1034 :
(1)    1034 :                    ;;; [queue] Initialize queue
(1)    1034 :                    ;;; @param X queue work space pointer
(1)    1034 :                    ;;; @param A queue work space size
(1)    1034 :                    ;;; @clobber A, Y
(1)    1034 :                    queue_init:
(1)    1034 : 95 01                      sta     queue_size,x
(1)    1036 : 20 48 10                   jsr     init_queue_tmp
(1)    1039 : A8                         tay                     ; Y is queue size
(1)    103A : A9 00                      lda     #0
(1)    103C : 95 00                      sta     queue_len,x
(1)    103E : 95 02                      sta     queue_put,x
(1)    1040 : 95 03                      sta     queue_get,x
(1)    1042 :                    queue_init_loop:
(1)    1042 : 91 00                      sta     (queue_tmp),y
(1)    1044 : 88                         dey
(1)    1045 : D0 FB                      bne     queue_init_loop
(1)    1047 : 60                         rts
(1)    1048 :
(1)    1048 :                    ;;; init_tmp
(1)    1048 :                    ;;; @param X queue work space pointer
(1)    1048 :                    ;;; store [queue_buf,x] to queue_tmp
(1)    1048 :                    ;;; @clobber Y
(1)    1048 :                    init_queue_tmp:
(1)    1048 : B4 04                      ldy     queue_buf,x
(1)    104A : 84 00                      sty     queue_tmp
(1)    104C : B4 05                      ldy     queue_buf+1,x
(1)    104E : 84 01                      sty     queue_tmp+1
(1)    1050 : 60                         rts
(1)    1051 :
(1)    1051 :                    ;;; [queue] Add an element to queue
(1)    1051 :                    ;;; @param X queue work space pointer
(1)    1051 :                    ;;; @param A an element
(1)    1051 :                    ;;; @return P.C 1 if queue is full
(1)    1051 :                    queue_add:
(1)    1051 : 48                         pha                     ; save an element
(1)    1052 : 20 48 10                   jsr     init_queue_tmp
(1)    1055 : B5 00                      lda     queue_len,x
(1)    1057 : D5 01                      cmp     queue_size,x
(1)    1059 : B0 15                      bcs     queue_add_return  ; queue_len >= queue_size
(1)    105B : B4 02                      ldy     queue_put,x
(1)    105D : 68                         pla
(1)    105E : 48                         pha
(1)    105F : 91 00                      sta     (queue_tmp),y   ; store an element
(1)    1061 : F6 00                      inc     queue_len,x
(1)    1063 : C8                         iny
(1)    1064 : 94 02                      sty     queue_put,x
(1)    1066 : 98                         tya
(1)    1067 : D5 01                      cmp     queue_size,x
(1)    1069 : 90 05                      bcc     queue_add_return ; queue_put < queue_size
(1)    106B : A9 00                      lda     #0
(1)    106D : 95 02                      sta     queue_put,x
(1)    106F : 18                         clc                     ;  C=0
(1)    1070 :                    queue_add_return:
(1)    1070 : 68                         pla
(1)    1071 : 60                         rts
(1)    1072 :
(1)    1072 :                    ;;; [queue] Remove an element from queue
(1)    1072 :                    ;;; @param X queue work space pointer
(1)    1072 :                    ;;; @return A an element
(1)    1072 :                    ;;; @return P.C 1 if queue is empty
(1)    1072 :                    ;;; @clobber Y
(1)    1072 :                    queue_remove:
(1)    1072 : B5 00                      lda     queue_len,x
(1)    1074 : D0 02                      bne     queue_remove_elem
(1)    1076 : 38                         sec                     ; C=1
(1)    1077 : 60                         rts
(1)    1078 :                    queue_remove_elem
(1)    1078 : 20 48 10                   jsr     init_queue_tmp
(1)    107B : B4 03                      ldy     queue_get,x     ; 8 bits offset
(1)    107D : B1 00                      lda     (queue_tmp),y   ; read an element
(1)    107F : 48                         pha                     ; save an element
(1)    1080 : D6 00                      dec     queue_len,x
(1)    1082 : C8                         iny
(1)    1083 : 94 03                      sty     queue_get,x
(1)    1085 : 98                         tya
(1)    1086 : D5 01                      cmp     queue_size,x
(1)    1088 : 90 05                      bcc     queue_remove_return ; queue_get < queue_size
(1)    108A : A9 00                      lda     #0
(1)    108C : 95 03                      sta     queue_get,x
(1)    108E : 18                         clc                     ; C=0
(1)    108F :                    queue_remove_return:
(1)    108F : 68                         pla                     ; restore an element
(1)    1090 : 60                         rts
(1)    1091 :
(1)    1091 :                    ;;; Local Variables:
(1)    1091 :                    ;;; mode: asm
(1)    1091 :                    ;;; End:
(1)    1091 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       1091 :
       1091 :                    isr_irq:
       1091 : D8                         cld                     ; clear decimal flag
       1092 : 48                         pha                     ; save A
       1093 : 8A                         txa
       1094 : 48                         pha                     ; save X
       1095 : 98                         tya
       1096 : 48                         pha                     ; save Y
       1097 : AD 00 DF                   lda     ACIA_status
       109A : AA                         tax
       109B : 29 80                      and     #IRQF_bm
       109D : F0 0D                      beq     isr_irq_return
       109F :                    isr_irq_receive:
       109F : 8A                         txa
       10A0 : 29 01                      and     #RDRF_bm
       10A2 : F0 08                      beq     isr_irq_recv_end
       10A4 : AD 01 DF                   lda     ACIA_data
       10A7 : A2 02                      ldx     #rx_queue
       10A9 : 20 51 10                   jsr     queue_add
       10AC :                    isr_irq_recv_end:
       10AC :                    isr_irq_return:
       10AC : 68                         pla                     ; restore Y
       10AD : A8                         tay
       10AE : 68                         pla                     ; restore X
       10AF : AA                         tax
       10B0 : 68                         pla                     ; restore Y
       10B1 : 40                         rti
       10B2 :
       FFEE :                            org     NVEC_IRQ
       FFEE : 91 10                      fdb     isr_irq
       FFF0 :
       FFFE :                            org     VEC_IRQ
       FFFE : 91 10                      fdb     isr_irq
      10000 :
       FFFC :                            org     VEC_RESET
       FFFC : 00 10                      fdb     initialize

          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     z8
          0 :                            option  "reg-alias", "disable"
          0 :
          0 :                            include "z8.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; Z8
(1)       0 : =FC                FLAGS:  equ     252               ; R/W: Flags register
(1)       0 : =80                F_CARRY:        equ     %(2)10000000 ; set to 1 if carry
(1)       0 : =40                F_ZERO:         equ     %(2)01000000 ; set to 1 if zero
(1)       0 : =20                F_SIGN:         equ     %(2)00100000 ; set to 1 if negative
(1)       0 : =10                F_OVERFLOW:     equ     %(2)00010000 ; set to 1 if overflow
(1)       0 : =8                 F_DECIMAL_ADJ:  equ     %(2)00001000 ; decimal adjust
(1)       0 : =4                 F_HALF_CARRY:   equ     %(2)00000100 ; set to 1 if carry from bit-3
(1)       0 : =2                 F_USER2:        equ     %(2)00000010 ; User flag F2
(1)       0 : =1                 F_USER1:        equ     %(2)00000001 ; User flah F1
(1)       0 :                    ;;; Interrupt vectors
(1)       0 : =0                 VEC_IRQ0:       equ     %0000   ; IRQ0
(1)       0 : =2                 VEC_IRQ1:       equ     %0002   ; IRQ1
(1)       0 : =4                 VEC_IRQ2:       equ     %0004   ; IRQ2/Tin
(1)       0 : =6                 VEC_IRQ3:       equ     %0006   ; IRQ3/Serial in
(1)       0 : =8                 VEC_IRQ4:       equ     %0008   ; IRQ4/Serial out/T0
(1)       0 : =A                 VEC_IRQ5:       equ     %000A   ; IRQ5/T1
(1)       0 :                    ;;; Reset origin
(1)       0 : =C                 ORG_RESET:      equ     %000C   ; RESET
(1)       0 :                    ;;; I/O Ports
(1)       0 : =2                 PORT2:          equ     2       ; Port 2
(1)       0 : =3                 PORT3:          equ     3       ; Port 3
(1)       0 : =F7                P3M:            equ     247       ; W/O: Port 3 Mode Register
(1)       0 : =80                P3M_PARITY:     equ     %(2)10000000 ; 1=Parity on
(1)       0 : =40                P3M_SERIAL:     equ     %(2)01000000 ; 1=P30 is serial in, P37 is serial out
(1)       0 : =1                 P3M_P2PUSHPULL: equ     %(2)00000001 ; 1=Port 2 is push-pull, 0=open drain
(1)       0 : =F6                P2M:            equ     246       ; W/O: Port 2 Mode Register, 0=output, 1=input
(1)       0 : =F8                P01M:           equ     248       ; W/O: Port 0 and 1 Mode Register
(1)       0 : =82                P01M_P0ADDR:    equ     %(2)10000010 ; Port 0 is A8~A15
(1)       0 : =10                P01M_P1DATA:    equ     %(2)00010000 ; Port 1 is AD0~AD7
(1)       0 : =4                 P01M_INTERNAL:  equ     %(2)00000100 ; Stack is on internal memory
(1)       0 :                    ;;; Interrupt
(1)       0 : =F9                IPR:    equ     249             ; W/O: Interrupt Priority
(1)       0 : =1                 IPR_CAB:        equ     %(2)000001 ; C > A > B
(1)       0 : =8                 IPR_ABC:        equ     %(2)001000 ; A > B > C
(1)       0 : =9                 IPR_ACB:        equ     %(2)001001 ; A > C > B
(1)       0 : =10                IPR_BCA:        equ     %(2)010000 ; B > C > A
(1)       0 : =11                IPR_CBA:        equ     %(2)010001 ; C > B > A
(1)       0 : =18                IPR_BAC:        equ     %(2)011000 ; B > A > C
(1)       0 : =0                 IPR_A53:        equ     %(2)000000 ; A: IRQ5 > IRQ3
(1)       0 : =20                IPR_A35:        equ     %(2)100000 ; A: IRQ3 > IRQ5
(1)       0 : =0                 IPR_B20:        equ     %(2)000000 ; B: IRQ2 > IRQ0
(1)       0 : =4                 IPR_B02:        equ     %(2)000100 ; B: IRQ0 > IRQ2
(1)       0 : =0                 IPR_C14:        equ     %(2)000000 ; C: IRQ0 > IRQ4
(1)       0 : =2                 IPR_C41:        equ     %(2)000010 ; C: IRQ4 > IRQ0
(1)       0 : =FB                IMR:    equ     251             ; R/W: Interrupt Mask
(1)       0 : =80                IMR_ENABLE:     equ     %(2)10000000 ; Interrupt enable
(1)       0 : =1                 IMR_IRQ0:       equ     (1 SHL 0)
(1)       0 : =2                 IMR_IRQ1:       equ     (1 SHL 1)
(1)       0 : =4                 IMR_IRQ2:       equ     (1 SHL 2)
(1)       0 : =8                 IMR_IRQ3:       equ     (1 SHL 3)
(1)       0 : =10                IMR_IRQ4:       equ     (1 SHL 4)
(1)       0 : =20                IMR_IRQ5:       equ     (1 SHL 5)
(1)       0 : =FA                IRQ:    equ     250             ; R/W: Interrupt Request
(1)       0 : =1                 IRQ_IRQ0:       equ     IMR_IRQ0
(1)       0 : =2                 IRQ_IRQ1:       equ     IMR_IRQ1
(1)       0 : =4                 IRQ_IRQ2:       equ     IMR_IRQ2
(1)       0 : =8                 IRQ_IRQ3:       equ     IMR_IRQ3
(1)       0 : =10                IRQ_IRQ4:       equ     IMR_IRQ4
(1)       0 : =20                IRQ_IRQ5:       equ     IMR_IRQ5
(1)       0 :                    ;;; Counter/Timers
(1)       0 : =F5                PRE0:   equ     245             ; W/O: Prescaler 0 register
(1)       0 : =1                 PRE0_MODULO:    equ     %(2)00000001 ; 1=Modulo-N, 0=Single-pass
(1)       0 : =FC                PRE0_gm:        equ     %(2)11111100 ; Modulo mask
(1)       0 : =2                 PRE0_gp:        equ     2         ; Modulo bit position
(1)       0 : =F3                PRE1:   equ     243               ; W/O: Prescaler 1 register
(1)       0 : =1                 PRE1_MODULO:    equ     %(2)00000001 ; 1=Modulo-N, 0=SinglePass
(1)       0 : =2                 PRE1_INTERNAL:  equ     %(2)00000010 ; 1=T1 internal, 0=T1 external
(1)       0 : =FC                PRE1_gm:        equ     %(2)11111100 ; Modulo mask
(1)       0 : =2                 PRE1_gp:        equ     2         ; Modulo bit position
(1)       0 : =F2                T1:     equ     242               ; R/W: Counter/Timer 1 Register
(1)       0 : =F4                T0:     equ     244               ; R/W: Counter/Timer 0 Register
(1)       0 : =F1                TMR:    equ     241               ; R/W: Timer Mode Register
(1)       0 : =1                 TMR_LOAD_T0:    equ     %(2)00000001 ; 1=Load T0
(1)       0 : =2                 TMR_ENABLE_T0:  equ     %(2)00000010 ; 1=Enable T0
(1)       0 : =4                 TMR_LOAD_T1:    equ     %(2)00000100 ; 1=Load T1
(1)       0 : =8                 TMR_ENABLE_T1:  equ     %(2)00001000 ; 1=Enable T1
(1)       0 : =0                 TMR_TOUT_OFF:   equ     %(2)00000000 ; TOUT off
(1)       0 : =40                TMR_TOUT_T0:    equ     %(2)01000000 ; TOUT=T0
(1)       0 : =80                TMR_TOUT_T1:    equ     %(2)10000000 ; TOUT=T1
(1)       0 : =C0                TMR_TOUT_CLOCK: equ     %(2)11000000 ; TOUT=internal clock
(1)       0 :                    ;;;
(1)       0 : =F0                SIO:    equ     240             ; R/W: Serial I/O Register
(1)       0 : =FD                RP:     equ     253             ; R/W: Register pointer
(1)       0 : =FE                SPH:    equ     254             ; R/W: Stack Pointer High
(1)       0 : =FF                SPL:    equ     255             ; R/W: Stack Pointer Low
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =FF00              USART:          equ     %FF00
          0 : =FF00              USARTD:         equ     USART+0 ; Receive/Transmit data
          0 : =FF01              USARTS:         equ     USART+1 ; Srtatus register
          0 : =FF01              USARTC:         equ     USART+1 ; Control register
          0 : =FF02              USARTRI:        equ     USART+2 ; Receive interrupt name (IRQ0~2)
          0 : =FF03              USARTTI:        equ     USART+3 ; Transmit interrupt name (IRQ0~2)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     %(2)11000000
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 SHL MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 SHL MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 SHL MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     %(2)00100000
(1)       0 : =10                MODE_PARITY_bm: equ     %(2)00010000
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     %(2)00001100
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 SHL MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 SHL MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 SHL MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 SHL MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     %(2)00000011
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 SHL MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ     (2 SHL MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ     (3 SHL MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     %(2)10000000   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     %(2)01000000   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     %(2)00100000   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     %(2)00010000   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     %(2)00001000   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     %(2)00000100   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     %(2)00000010   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     %(2)00000001   ; Transmit enable
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     %(2)10000000   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     %(2)01000000   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     %(2)00100000   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     %(2)00010000   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     %(2)00001000   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     %(2)00000100   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     %(2)00000010   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     %(2)00000001   ; Transmitter ready
(1)       0 :                    ;;; Interrupt name for receive/transmit interrupt
(1)       0 : =0                 INTR_NONE:      equ     0
(1)       0 : =1                 INTR_IRQ0:      equ     1
(1)       0 : =2                 INTR_IRQ1:      equ     2
(1)       0 : =3                 INTR_IRQ2:      equ     3
          0 :
          0 : =27                TXRX_ENABLE:    equ     CMD_RTS_bm LOR CMD_DTR_bm LOR CMD_RxEN_bm LOR CMD_TxEN_bm
          0 : =37                RXERR_RESET:    equ     TXRX_ENABLE LOR CMD_ER_bm
          0 :
       2000 :                            org     %2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       ds      tx_queue_size
       2100 :
       2100 : =20                tx_intr_enable: equ     %20     ; R32
       2100 :
       1000 :                            org     %1000
       1000 : =1000              stack:  equ     $
       1000 :
          0 :                            org     VEC_IRQ0
          0 : 01 C9                      dw      isr_intr_rx
          2 :
          2 :                            org     VEC_IRQ1
          2 : 01 F5                      dw      isr_intr_tx
          4 :
          C :                            org     ORG_RESET
          C :                    init_config:
          C : 31 F0                      srp     #%F0
          E :                            setrp   %F0
          E :                            ;; Stack is on external memory
          E : 8C 92                      ld      P01M, #P01M_P0ADDR LOR P01M_P1DATA
         10 : 6C FF                      ld      P2M, #%FF       ; Port 2 is input
         12 : 31 10                      srp     #%10
         14 :                            setrp   %10
         14 : E6 FE 10                   ld      SPH, #HIGH stack
         17 : E6 FF 00                   ld      SPL, #LOW stack
         1A : 2C 20                      ld      r2, #HIGH rx_queue
         1C : 3C 00                      ld      r3, #LOW rx_queue
         1E : 1C 80                      ld      r1, #rx_queue_size
         20 : D6 01 1C                   call    queue_init
         23 : 2C 20                      ld      r2, #HIGH tx_queue
         25 : 3C 80                      ld      r3, #LOW tx_queue
         27 : 1C 80                      ld      r1, #tx_queue_size
         29 : D6 01 1C                   call    queue_init
         2C :
         2C :                    init_usart:
         2C : CC FF                      ld      r12, #HIGH USARTC
         2E : DC 01                      ld      r13, #LOW USARTC
         30 : B0 E0                      clr     r0
         32 : 92 0C                      lde     @rr12, r0
         34 : 92 0C                      lde     @rr12, r0
         36 : 92 0C                      lde     @rr12, r0       ; safest way to sync mode
         38 : 0C 40                      ld      r0, #CMD_IR_bm
         3A : 92 0C                      lde     @rr12, r0       ; reset
         3C : FF                         nop
         3D : FF                         nop
         3E : 0C 4E                      ld      r0, # MODE_STOP1_gc LOR MODE_LEN8_gc LOR MODE_BAUD_X16
         40 : 92 0C                      lde     @rr12, r0       ; async 1stop 8data x16
         42 : FF                         nop
         43 : FF                         nop
         44 : 0C 27                      ld      r0, #TXRX_ENABLE
         46 : 92 0C                      lde     @rr12, r0 ; RTS/DTR, error reset, Rx enable, Tx enable
         48 : 0C 01                      ld      r0, #INTR_IRQ0
         4A : DC 02                      ld      r13, #LOW USARTRI
         4C : 92 0C                      lde     @rr12, r0 ; enable RxRDY interrupt using IRQ0
         4E : 0C 00                      ld      r0, #INTR_NONE
         50 : DC 03                      ld      r13, #LOW USARTTI
         52 : 92 0C                      lde     @rr12, r0 ; disable TxRDY interrupt
         54 : DC 01                      ld      r13, #LOW USARTS
         56 : B0 20                      clr     tx_intr_enable
         58 : AC FF                      ld      r10, #HIGH USARTD
         5A : BC 00                      ld      r11, #LOW USARTD
         5C :
         5C : E6 F9 34                   ld      IPR, #IPR_BCA LOR IPR_B02 LOR IPR_C14 LOR IPR_A35
         5F :                            ;; enable IRQ0 and IRQ1
         5F : E6 FB 03                   ld      IMR, #IMR_IRQ0 LOR IMR_IRQ1
         62 : 9F                         ei
         63 :
         63 :                    receive_loop:
         63 : D6 00 DE                   call    getchar
         66 : FB FB                      jr      nc, receive_loop
         68 :                    echo_back:
         68 : 18 E0                      ld      r1, r0          ; save letter
         6A : D6 00 F0                   call    putchar         ; echo
         6D : 0C 20                      ld      r0, #' '        ; space
         6F : D6 00 F0                   call    putchar
         72 : D6 00 8B                   call    put_hex8        ; print in hex
         75 : 0C 20                      ld      r0, #' '        ; space
         77 : D6 00 F0                   call    putchar
         7A : D6 00 B0                   call    put_bin8        ; print in binary
         7D : D6 00 82                   call    newline
         80 : 8B E1                      jr      receive_loop
         82 :
         82 :                    ;;; Put newline
         82 :                    ;;; @clobber r0
         82 :                    newline:
         82 : 0C 0D                      ld      r0, #%0D
         84 : D6 00 F0                   call    putchar
         87 : 0C 0A                      ld      r0, #%0A
         89 : 8B 65                      jr      putchar
         8B :
         8B :                    ;;; Print uint8_t in hex
         8B :                    ;;; @param r1 uint8_t value to be printed in hex.
         8B :                    ;;; @clobber r0
         8B :                    put_hex8:
         8B : 0C 30                      ld      r0, #'0'
         8D : D6 00 F0                   call    putchar
         90 : 0C 78                      ld      r0, #'x'
         92 : D6 00 F0                   call    putchar
         95 : 08 E1                      ld      r0, r1
         97 : F0 E0                      swap    r0
         99 : D6 00 9E                   call    put_hex4
         9C : 08 E1                      ld      r0, r1
         9E :                    put_hex4:
         9E : 56 E0 0F                   and     r0, #%F
         A1 : A6 E0 0A                   cp      r0, #10
         A4 : 7B 05                      jr      c, put_hex8_dec ; A<10
         A6 : 06 E0 37                   add     r0, #'A'-10
         A9 : 8B 45                      jr      putchar
         AB :                    put_hex8_dec:
         AB : 06 E0 30                   add     r0, #'0'
         AE : 8B 40                      jr      putchar
         B0 :
         B0 :                    ;;; Print uint8_t in binary
         B0 :                    ;;; @param r1 uint8_t value to be printed in binary.
         B0 :                    ;;; @clobber r0
         B0 :                    put_bin8:
         B0 : 70 E4                      push    r4
         B2 : 0C 30                      ld      r0, #'0'
         B4 : D6 00 F0                   call    putchar
         B7 : 0C 62                      ld      r0, #'b'
         B9 : D6 00 F0                   call    putchar
         BC : 48 E1                      ld      r4, r1
         BE : D6 00 C9                   call    put_bin4
         C1 : 90 E4                      rl      r4
         C3 : D6 00 C9                   call    put_bin4
         C6 : 50 E4                      pop     r4
         C8 : AF                         ret
         C9 :                    put_bin4:
         C9 : D6 00 CE                   call    put_bin2
         CC : 90 E4                      rl      r4
         CE :                    put_bin2:
         CE : D6 00 D3                   call    put_bin1
         D1 : 90 E4                      rl      r4
         D3 :                    put_bin1:
         D3 : 0C 30                      ld      r0, #'0'
         D5 : 42 44                      or      r4, r4
         D7 : DD 00 DC                   jp      pl, put_bin0    ; MSB=0
         DA : 0C 31                      ld      r0, #'1'        ; MSB=1
         DC :                    put_bin0:
         DC : 8B 12                      jr      putchar
         DE :
         DE :                    ;;; Get character
         DE :                    ;;; @return r0
         DE :                    ;;; @return FLAGS.C 0 if no character
         DE :                    getchar:
         DE : 70 E3                      push    r3
         E0 : 70 E2                      push    r2
         E2 : 2C 20                      ld      r2, #HIGH rx_queue
         E4 : 3C 00                      ld      r3, #LOW rx_queue
         E6 : 8F                         di
         E7 : D6 01 87                   call    queue_remove
         EA : 9F                         ei
         EB : 50 E2                      pop     r2
         ED : 50 E3                      pop     r3
         EF : AF                         ret
         F0 :
         F0 :                    ;;; Put character
         F0 :                    ;;; @param r0
         F0 :                    putchar:
         F0 : 70 E0                      push    r0
         F2 : 70 E3                      push    r3
         F4 : 70 E2                      push    r2
         F6 : 2C 20                      ld      r2, #HIGH tx_queue
         F8 : 3C 80                      ld      r3, #LOW tx_queue
         FA :                    putchar_retry:
         FA : 8F                         di
         FB : D6 01 43                   call    queue_add
         FE : 9F                         ei
         FF : FB F9                      jr      nc, putchar_retry ; branch if queue is full
        101 : 50 E2                      pop     r2
        103 : 50 E3                      pop     r3
        105 : 76 20 01                   tm      tx_intr_enable, #1
        108 : EB 0F                      jr      nz, putchar_exit ; already enabled
        10A : 0C 02                      ld      r0, #INTR_IRQ1
        10C : 70 ED                      push    r13
        10E : 8F                         di
        10F : DC 03                      ld      r13, #LOW USARTTI
        111 : 92 0C                      lde     @rr12, r0
        113 : 50 ED                      pop     r13
        115 : 46 20 01                   or      tx_intr_enable, #1
        118 : 9F                         ei
        119 :                    putchar_exit:
        119 : 50 E0                      pop     r0
        11B : AF                         ret
        11C :
        11C :                            include "queue.inc"
(1)     11C :                    ;;; [queue] queue structure
(1)     11C : =0                 queue_len:      equ     0       ; queue length
(1)     11C : =1                 queue_size:     equ     1       ; buffer size
(1)     11C : =2                 queue_put:      equ     2       ; queue put index
(1)     11C : =3                 queue_get:      equ     3       ; queue get index
(1)     11C : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     11C :
(1)     11C :                    ;;; [queue] Initialize queue
(1)     11C :                    ;;; @param rr2 queue work space pointer
(1)     11C :                    ;;; @param r1 queue work space size
(1)     11C :                    ;;; @clobber r1
(1)     11C :                    queue_init:
(1)     11C : 70 E0                      push    r0
(1)     11E : 70 E2                      push    r2
(1)     120 : 70 E3                      push    r3
(1)     122 : B0 E0                      clr     r0
(1)     124 : 92 02                      lde     @rr2, r0        ; queue_len
(1)     126 : A0 E2                      incw    rr2
(1)     128 : 08 E1                      ld      r0, r1
(1)     12A : 26 E0 04                   sub     r0, #queue_buf
(1)     12D : 92 02                      lde     @rr2, r0        ; queue_size
(1)     12F : A0 E2                      incw    rr2
(1)     131 : 06 E0 02                   add     r0, #2          ; for queue_put and queue_get
(1)     134 : B0 E1                      clr     r1
(1)     136 :                    queue_init_loop:
(1)     136 : 92 12                      lde     @rr2, r1
(1)     138 : A0 E2                      incw    rr2
(1)     13A : 0A FA                      djnz    r0, queue_init_loop
(1)     13C : 50 E3                      pop     r3
(1)     13E : 50 E2                      pop     r2
(1)     140 : 50 E0                      pop     r0
(1)     142 : AF                         ret
(1)     143 :
(1)     143 :                    ;;; [queue] Add an element to queue
(1)     143 :                    ;;; @param rr2 queue work space pointer
(1)     143 :                    ;;; @param r0 an element
(1)     143 :                    ;;; @return FLAGS.C 0 if queue is full
(1)     143 :                    queue_add:
(1)     143 : 70 E1                      push    r1
(1)     145 : 70 E4                      push    r4              ; save r1, r4
(1)     147 : 82 12                      lde     r1, @rr2        ; queue_len
(1)     149 : 1E                         inc     r1              ; queue_len++
(1)     14A : A0 E2                      incw    rr2             ; rr2 points queue_size
(1)     14C : 82 42                      lde     r4, @rr2        ; r4=queue_size
(1)     14E : A2 14                      cp      r1, r4
(1)     150 : 80 E2                      decw    rr2                ; rr2 points queue_len
(1)     152 : 7B 05                      jr      c, queue_add_store ; queue_len < queue_size
(1)     154 : 50 E4                      pop     r4                 ; restore r1, r4
(1)     156 : 50 E1                      pop     r1
(1)     158 : AF                         ret                     ; return with FLAGS.C=0
(1)     159 :                    queue_add_store:
(1)     159 : 92 12                      lde     @rr2, r1        ; update queue_len
(1)     15B : A0 E2                      incw    rr2
(1)     15D : A0 E2                      incw    rr2             ; rr2 points to queue_put
(1)     15F : 82 12                      lde     r1, @rr2        ; queue_put
(1)     161 : 70 E3                      push    r3              ; save rr2
(1)     163 : 70 E2                      push    r2
(1)     165 : A0 E2                      incw    rr2
(1)     167 : A0 E2                      incw    rr2             ; rr2 points to queue_buf
(1)     169 : 02 31                      add     r3, r1
(1)     16B : 16 E2 00                   adc     r2, #0          ; rr2=&queue_buf[queue_put]
(1)     16E : 92 02                      lde     @rr2, r0        ; store an element
(1)     170 : 50 E2                      pop     r2              ; restore rr2 points to queue_put
(1)     172 : 50 E3                      pop     r3
(1)     174 : 1E                         inc     r1              ; queue_put++
(1)     175 : A2 14                      cp      r1, r4
(1)     177 : 7B 02                      jr      c, queue_add_update ; queue_put < queue_size
(1)     179 : B0 E1                      clr     r1
(1)     17B :                    queue_add_update:
(1)     17B : 92 12                      lde     @rr2, r1        ; queue_put
(1)     17D : 80 E2                      decw    rr2
(1)     17F : 80 E2                      decw    rr2             ; rr2 points queue_len
(1)     181 : DF                         scf                     ; set carry flag
(1)     182 : 50 E4                      pop     r4              ; restpre r1, r4
(1)     184 : 50 E1                      pop     r1              ; restore r1
(1)     186 : AF                         ret
(1)     187 :
(1)     187 :                    ;;; [queue] Remove an element from queue
(1)     187 :                    ;;; @param rr2 queue work space pointer
(1)     187 :                    ;;; @return r0 an element
(1)     187 :                    ;;; @return FLAGS.C 0 if queue is empty
(1)     187 :                    queue_remove:
(1)     187 : 70 E1                      push    r1              ; save r1
(1)     189 : 82 12                      lde     r1, @rr2        ; queue_len
(1)     18B : 42 11                      or      r1, r1
(1)     18D : EB 04                      jr      nz, queue_remove_elem ; queue_len > 0
(1)     18F : CF                         rcf                           ; reset carry flag
(1)     190 : 50 E1                      pop     r1
(1)     192 : AF                         ret
(1)     193 :                    queue_remove_elem:
(1)     193 : 70 E4                      push    r4              ; save r4
(1)     195 : 00 E1                      dec     r1              ; queue_len--
(1)     197 : 92 12                      lde     @rr2, r1        ; update queue_len
(1)     199 : A0 E2                      incw    rr2
(1)     19B : 82 42                      lde     r4, @rr2        ; r4=queue_size
(1)     19D : A0 E2                      incw    rr2
(1)     19F : A0 E2                      incw    rr2             ; rr2 points queue_get
(1)     1A1 : 70 E3                      push    r3
(1)     1A3 : 70 E2                      push    r2
(1)     1A5 : 82 12                      lde     r1, @rr2        ; queue_get
(1)     1A7 : A0 E2                      incw    rr2             ; rr2 points queue_buf
(1)     1A9 : 02 31                      add     r3, r1
(1)     1AB : 16 E2 00                   adc     r2, #0          ; rr2=&queue_buf[queue_get]
(1)     1AE : 82 02                      lde     r0, @rr2        ; read an element
(1)     1B0 : 50 E2                      pop     r2              ; restore rr2 points to queue_get
(1)     1B2 : 50 E3                      pop     r3
(1)     1B4 : 1E                         inc     r1              ; queue_get++
(1)     1B5 : A2 14                      cp      r1, r4
(1)     1B7 : 7B 02                      jr      c, queue_remove_update ; queue_get < queue_size
(1)     1B9 : B0 E1                      clr     r1
(1)     1BB :                    queue_remove_update:
(1)     1BB : 92 12                      lde     @rr2, r1        ; update queue_get
(1)     1BD : 80 E2                      decw    rr2
(1)     1BF : 80 E2                      decw    rr2
(1)     1C1 : 80 E2                      decw    rr2             ; rr2 points queue_len
(1)     1C3 : 50 E4                      pop     r4              ; restore r1, r4
(1)     1C5 : 50 E1                      pop     r1
(1)     1C7 : DF                         scf                     ; set carry
(1)     1C8 : AF                         ret
(1)     1C9 :
(1)     1C9 :                    ;;; Local Variables:
(1)     1C9 :                    ;;; mode: asm
(1)     1C9 :                    ;;; End:
(1)     1C9 :                    ;;; vim: set ft=asm et ts=4 sw=4:
        1C9 :
        1C9 :                            setrp   -1
        1C9 :                    isr_intr_rx:
        1C9 : 70 E0                      push    r0
        1CB : 70 E1                      push    r1
        1CD : 82 0C                      lde     r0, @rr12       ; USARTS
        1CF : 18 E0                      ld      r1, r0
        1D1 : 56 E0 38                   and     r0, #ST_FE_bm LOR ST_OE_bm LOR ST_PE_bm
        1D4 : 6B 04                      jr      z, isr_intr_receive
        1D6 : 0C 37                      ld      r0, #RXERR_RESET
        1D8 : 92 0C                      lde     @rr12, r0       ; reset error flags
        1DA :                    isr_intr_receive:
        1DA : 56 E1 02                   and     r1, #ST_RxRDY_bm
        1DD : 6B 11                      jr      z, isr_intr_rx_exit
        1DF : 82 0A                      lde     r0, @rr10       ; USARTD
        1E1 : 70 E3                      push    r3
        1E3 : 70 E2                      push    r2
        1E5 : 2C 20                      ld      r2, #HIGH rx_queue
        1E7 : 3C 00                      ld      r3, #LOW rx_queue
        1E9 : D6 01 43                   call    queue_add
        1EC : 50 E2                      pop     r2
        1EE : 50 E3                      pop     r3
        1F0 :                    isr_intr_rx_exit:
        1F0 : 50 E1                      pop     r1
        1F2 : 50 E0                      pop     r0
        1F4 : BF                         iret
        1F5 :
        1F5 :                    isr_intr_tx:
        1F5 : 70 E0                      push    r0
        1F7 : 82 0C                      lde     r0, @rr12       ; USARTS
        1F9 : 56 E0 01                   and     r0, #ST_TxRDY_bm
        1FC : 6B 13                      jr      z, isr_intr_tx_exit
        1FE : 70 E3                      push    r3
        200 : 70 E2                      push    r2
        202 : 2C 20                      ld      r2, #HIGH tx_queue
        204 : 3C 80                      ld      r3, #LOW tx_queue
        206 : D6 01 87                   call    queue_remove
        209 : 50 E2                      pop     r2
        20B : 50 E3                      pop     r3
        20D : FB 05                      jr      nc, isr_intr_send_empty
        20F : 92 0A                      lde     @rr10, r0       ; USARTD
        211 :                    isr_intr_tx_exit:
        211 : 50 E0                      pop     r0
        213 : BF                         iret
        214 :                    isr_intr_send_empty:
        214 : 0C 00                      ld      r0, #INTR_NONE
        216 : 70 ED                      push    r13
        218 : DC 03                      ld      r13, #LOW USARTTI
        21A : 92 0C                      lde     @rr12, r0       ; disable Tx interrupt
        21C : 50 ED                      pop     r13
        21E : B0 20                      clr     tx_intr_enable
        220 : 50 E0                      pop     r0
        222 : BF                         iret

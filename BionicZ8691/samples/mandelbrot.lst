          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     z86c
          0 :                            option  "reg-alias", "disable"
          0 :
          0 :                            include "z8.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; Z8
(1)       0 : =FC                FLAGS:  equ     252               ; R/W: Flags register
(1)       0 : =80                F_CARRY:        equ     %(2)10000000 ; set to 1 if carry
(1)       0 : =40                F_ZERO:         equ     %(2)01000000 ; set to 1 if zero
(1)       0 : =20                F_SIGN:         equ     %(2)00100000 ; set to 1 if negative
(1)       0 : =10                F_OVERFLOW:     equ     %(2)00010000 ; set to 1 if overflow
(1)       0 : =8                 F_DECIMAL_ADJ:  equ     %(2)00001000 ; decimal adjust
(1)       0 : =4                 F_HALF_CARRY:   equ     %(2)00000100 ; set to 1 if carry from bit-3
(1)       0 : =2                 F_USER2:        equ     %(2)00000010 ; User flag F2
(1)       0 : =1                 F_USER1:        equ     %(2)00000001 ; User flah F1
(1)       0 :                    ;;; Interrupt vectors
(1)       0 : =0                 VEC_IRQ0:       equ     %0000   ; IRQ0
(1)       0 : =2                 VEC_IRQ1:       equ     %0002   ; IRQ1
(1)       0 : =4                 VEC_IRQ2:       equ     %0004   ; IRQ2/Tin
(1)       0 : =6                 VEC_IRQ3:       equ     %0006   ; IRQ3/Serial in
(1)       0 : =8                 VEC_IRQ4:       equ     %0008   ; IRQ4/Serial out/T0
(1)       0 : =A                 VEC_IRQ5:       equ     %000A   ; IRQ5/T1
(1)       0 :                    ;;; Reset origin
(1)       0 : =C                 ORG_RESET:      equ     %000C   ; RESET
(1)       0 :                    ;;; I/O Ports
(1)       0 : =2                 PORT2:          equ     2       ; Port 2
(1)       0 : =3                 PORT3:          equ     3       ; Port 3
(1)       0 : =F7                P3M:            equ     247       ; W/O: Port 3 Mode Register
(1)       0 : =80                P3M_PARITY:     equ     %(2)10000000 ; 1=Parity on
(1)       0 : =40                P3M_SERIAL:     equ     %(2)01000000 ; 1=P30 is serial in, P37 is serial out
(1)       0 : =1                 P3M_P2PUSHPULL: equ     %(2)00000001 ; 1=Port 2 is push-pull, 0=open drain
(1)       0 : =F6                P2M:            equ     246       ; W/O: Port 2 Mode Register, 0=output, 1=input
(1)       0 : =F8                P01M:           equ     248       ; W/O: Port 0 and 1 Mode Register
(1)       0 : =82                P01M_P0ADDR:    equ     %(2)10000010 ; Port 0 is A8~A15
(1)       0 : =10                P01M_P1DATA:    equ     %(2)00010000 ; Port 1 is AD0~AD7
(1)       0 : =4                 P01M_INTERNAL:  equ     %(2)00000100 ; Stack is on internal memory
(1)       0 :                    ;;; Interrupt
(1)       0 : =F9                IPR:    equ     249             ; W/O: Interrupt Priority
(1)       0 : =1                 IPR_CAB:        equ     %(2)000001 ; C > A > B
(1)       0 : =8                 IPR_ABC:        equ     %(2)001000 ; A > B > C
(1)       0 : =9                 IPR_ACB:        equ     %(2)001001 ; A > C > B
(1)       0 : =10                IPR_BCA:        equ     %(2)010000 ; B > C > A
(1)       0 : =11                IPR_CBA:        equ     %(2)010001 ; C > B > A
(1)       0 : =18                IPR_BAC:        equ     %(2)011000 ; B > A > C
(1)       0 : =0                 IPR_A53:        equ     %(2)000000 ; A: IRQ5 > IRQ3
(1)       0 : =20                IPR_A35:        equ     %(2)100000 ; A: IRQ3 > IRQ5
(1)       0 : =0                 IPR_B20:        equ     %(2)000000 ; B: IRQ2 > IRQ0
(1)       0 : =4                 IPR_B02:        equ     %(2)000100 ; B: IRQ0 > IRQ2
(1)       0 : =0                 IPR_C14:        equ     %(2)000000 ; C: IRQ0 > IRQ4
(1)       0 : =2                 IPR_C41:        equ     %(2)000010 ; C: IRQ4 > IRQ0
(1)       0 : =FB                IMR:    equ     251             ; R/W: Interrupt Mask
(1)       0 : =80                IMR_ENABLE:     equ     %(2)10000000 ; Interrupt enable
(1)       0 : =1                 IMR_IRQ0:       equ     (1 SHL 0)
(1)       0 : =2                 IMR_IRQ1:       equ     (1 SHL 1)
(1)       0 : =4                 IMR_IRQ2:       equ     (1 SHL 2)
(1)       0 : =8                 IMR_IRQ3:       equ     (1 SHL 3)
(1)       0 : =10                IMR_IRQ4:       equ     (1 SHL 4)
(1)       0 : =20                IMR_IRQ5:       equ     (1 SHL 5)
(1)       0 : =FA                IRQ:    equ     250             ; R/W: Interrupt Request
(1)       0 : =1                 IRQ_IRQ0:       equ     IMR_IRQ0
(1)       0 : =2                 IRQ_IRQ1:       equ     IMR_IRQ1
(1)       0 : =4                 IRQ_IRQ2:       equ     IMR_IRQ2
(1)       0 : =8                 IRQ_IRQ3:       equ     IMR_IRQ3
(1)       0 : =10                IRQ_IRQ4:       equ     IMR_IRQ4
(1)       0 : =20                IRQ_IRQ5:       equ     IMR_IRQ5
(1)       0 :                    ;;; Counter/Timers
(1)       0 : =F5                PRE0:   equ     245             ; W/O: Prescaler 0 register
(1)       0 : =1                 PRE0_MODULO:    equ     %(2)00000001 ; 1=Modulo-N, 0=Single-pass
(1)       0 : =FC                PRE0_gm:        equ     %(2)11111100 ; Modulo mask
(1)       0 : =2                 PRE0_gp:        equ     2         ; Modulo bit position
(1)       0 : =F3                PRE1:   equ     243               ; W/O: Prescaler 1 register
(1)       0 : =1                 PRE1_MODULO:    equ     %(2)00000001 ; 1=Modulo-N, 0=SinglePass
(1)       0 : =2                 PRE1_INTERNAL:  equ     %(2)00000010 ; 1=T1 internal, 0=T1 external
(1)       0 : =FC                PRE1_gm:        equ     %(2)11111100 ; Modulo mask
(1)       0 : =2                 PRE1_gp:        equ     2         ; Modulo bit position
(1)       0 : =F2                T1:     equ     242               ; R/W: Counter/Timer 1 Register
(1)       0 : =F4                T0:     equ     244               ; R/W: Counter/Timer 0 Register
(1)       0 : =F1                TMR:    equ     241               ; R/W: Timer Mode Register
(1)       0 : =1                 TMR_LOAD_T0:    equ     %(2)00000001 ; 1=Load T0
(1)       0 : =2                 TMR_ENABLE_T0:  equ     %(2)00000010 ; 1=Enable T0
(1)       0 : =4                 TMR_LOAD_T1:    equ     %(2)00000100 ; 1=Load T1
(1)       0 : =8                 TMR_ENABLE_T1:  equ     %(2)00001000 ; 1=Enable T1
(1)       0 : =0                 TMR_TOUT_OFF:   equ     %(2)00000000 ; TOUT off
(1)       0 : =40                TMR_TOUT_T0:    equ     %(2)01000000 ; TOUT=T0
(1)       0 : =80                TMR_TOUT_T1:    equ     %(2)10000000 ; TOUT=T1
(1)       0 : =C0                TMR_TOUT_CLOCK: equ     %(2)11000000 ; TOUT=internal clock
(1)       0 :                    ;;;
(1)       0 : =F0                SIO:    equ     240             ; R/W: Serial I/O Register
(1)       0 : =FD                RP:     equ     253             ; R/W: Register pointer
(1)       0 : =FE                SPH:    equ     254             ; R/W: Stack Pointer High
(1)       0 : =FF                SPL:    equ     255             ; R/W: Stack Pointer Low
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =FF00              USART:  equ     %FF00
          0 : =FF00              USARTD: equ     USART+0         ; Data register
          0 : =FF01              USARTS: equ     USART+1         ; Status register
          0 : =FF01              USARTC: equ     USART+1         ; Control register
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     %(2)11000000
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 SHL MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 SHL MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 SHL MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     %(2)00100000
(1)       0 : =10                MODE_PARITY_bm: equ     %(2)00010000
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     %(2)00001100
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 SHL MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 SHL MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 SHL MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 SHL MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     %(2)00000011
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 SHL MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ     (2 SHL MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ     (3 SHL MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     %(2)10000000   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     %(2)01000000   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     %(2)00100000   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     %(2)00010000   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     %(2)00001000   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     %(2)00000100   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     %(2)00000010   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     %(2)00000001   ; Transmit enable
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     %(2)10000000   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     %(2)01000000   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     %(2)00100000   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     %(2)00010000   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     %(2)00001000   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     %(2)00000100   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     %(2)00000010   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     %(2)00000001   ; Transmitter ready
(1)       0 :                    ;;; Interrupt name for receive/transmit interrupt
(1)       0 : =0                 INTR_NONE:      equ     0
(1)       0 : =1                 INTR_IRQ0:      equ     1
(1)       0 : =2                 INTR_IRQ1:      equ     2
(1)       0 : =3                 INTR_IRQ2:      equ     3
          0 :
       1000 :                            org     %1000
       1000 : =1000              stack:  equ     $
       1000 :
          C :                            org     ORG_RESET
          C : 8D 01 00                   jp      init_config
          F :
        100 :                            org     %0100
        100 :                    init_config:
        100 : 31 F0                      srp     #%F0
        102 :                            setrp   %F0
        102 :                            ;; Stack is on external memory
        102 : 8C 92                      ld      P01M, #P01M_P0ADDR LOR P01M_P1DATA
        104 : 6C FF                      ld      P2M, #%FF       ; Port 2 is input
        106 : EC 10                      ld      SPH, #HIGH stack
        108 : FC 00                      ld      SPL, #LOW stack
        10A :
        10A :                    init_usart:
        10A : 31 10                      srp     #%10
        10C :                            setrp   %10
        10C : CC FF                      ld      r12, #HIGH USARTC
        10E : DC 01                      ld      r13, #LOW USARTC
        110 : B0 E0                      clr     r0
        112 : 92 0C                      lde     @rr12, r0
        114 : 92 0C                      lde     @rr12, r0
        116 : 92 0C                      lde     @rr12, r0       ; safest way to sync mode
        118 : 0C 40                      ld      r0, #CMD_IR_bm
        11A : 92 0C                      lde     @rr12, r0       ; reset
        11C : FF                         nop
        11D : FF                         nop
        11E : 0C 4E                      ld      r0, #MODE_STOP1_gc LOR MODE_LEN8_gc LOR MODE_BAUD_X16
        120 : 92 0C                      lde     @rr12, r0       ; async 1stop 8data x16
        122 : FF                         nop
        123 : FF                         nop
        124 : 0C 37                      ld      r0, #CMD_RTS_bm LOR CMD_DTR_bm LOR CMD_ER_bm LOR CMD_RxEN_bm LOR CMD_TxEN_bm
        126 : 92 0C                      lde     @rr12, r0 ; RTS/DTR, error reset, Rx enable, Tx enable
        128 : 8C FF                      ld      r8, #HIGH USARTD
        12A : 9C 00                      ld      r9, #LOW USARTD
        12C :
        12C : D6 10 00                   call      mandelbrot
        12F : 7F                         halt
        130 :
        130 :                    putchar:
        130 : 70 E0                      push    r0
        132 : A0 E8                      incw    rr8
        134 :                    putchar_loop:
        134 : 82 08                      lde     r0, @rr8
        136 : 76 E0 01                   tm      r0, #ST_TxRDY_bm
        139 : 6B F9                      jr      z, putchar_loop
        13B : 50 E0                      pop     r0
        13D : 80 E8                      decw    rr8
        13F : 92 08                      lde     @rr8, r0
        141 : AF                         ret
        142 :
        142 :                            include "mandelbrot.inc"
(1)      40 :                            org     %40
(1)      40 :                    vF:     ds      2
(1)      42 :                    vC:     ds      2
(1)      44 :                    vD:     ds      2
(1)      46 :                    vA:     ds      2
(1)      48 :                    vB:     ds      2
(1)      4A :                    vP:     ds      2
(1)      4C :                    vQ:     ds      2
(1)      4E :                    vS:     ds      2
(1)      50 :                    vT:     ds      2
(1)      52 :                    tmp:    ds      2
(1)      54 :                    vY:     ds      2
(1)      56 :                    vX:     ds      2
(1)      58 :                    vI:     ds      2
(1)      5A :
(1)    1000 :                            org     %1000
(1)    1000 :                    mandelbrot:
(1)    1000 : E6 40 00                   ld      vF, #HIGH 50    ; F=50
(1)    1003 : E6 41 32                   ld      vF+1, #LOW 50
(1)    1006 : E6 54 FF                   ld      vY, #HIGH -12   ; Y=-12
(1)    1009 : E6 55 F4                   ld      vY+1, #LOW -12
(1)    100C :                    loop_y:
(1)    100C : E6 56 FF                   ld      vX, #HIGH -49   ; X=-49
(1)    100F : E6 57 CF                   ld      vX+1, #LOW -49
(1)    1012 :                    loop_x:
(1)    1012 : E4 56 42                   ld      vC, vX          ; C=X
(1)    1015 : E4 57 43                   ld      vC+1, vX+1      ; C=X
(1)    1018 : E6 52 00                   ld      tmp, #HIGH 229
(1)    101B : E6 53 E5                   ld      tmp+1, #LOW 229
(1)    101E : 4C 42                      ld      r4, #vC
(1)    1020 : 5C 52                      ld      r5, #tmp
(1)    1022 : D6 12 13                   call    mulsi2          ; C=X*229
(1)    1025 : E6 52 00                   ld      tmp, #HIGH 100
(1)    1028 : E6 53 64                   ld      tmp+1, #LOW 100
(1)    102B : D6 12 9A                   call    divsi2          ; C=X*229/100
(1)    102E : E4 54 44                   ld      vD, vY          ; D=Y
(1)    1031 : E4 55 45                   ld      vD+1, vY+1
(1)    1034 : E6 52 01                   ld      tmp, #HIGH 416
(1)    1037 : E6 53 A0                   ld      tmp+1, #LOW 416
(1)    103A : 4C 44                      ld      r4, #vD
(1)    103C : D6 12 13                   call    mulsi2          ; D=Y*416
(1)    103F : E6 52 00                   ld      tmp, #HIGH 100
(1)    1042 : E6 53 64                   ld      tmp+1, #LOW 100
(1)    1045 : D6 12 9A                   call    divsi2          ; D=Y*416/100
(1)    1048 : E4 42 46                   ld      vA, vC          ; A=C
(1)    104B : E4 43 47                   ld      vA+1, vC+1
(1)    104E : E4 44 48                   ld      vB, vD          ; B=D
(1)    1051 : E4 45 49                   ld      vB+1, vD+1
(1)    1054 : E6 58 00                   ld      vI, #HIGH 0     ; I=0
(1)    1057 : E6 59 00                   ld      vI+1, #LOW 0
(1)    105A :                    loop_i:
(1)    105A : E4 48 4C                   ld      vQ, vB          ; Q=B
(1)    105D : E4 49 4D                   ld      vQ+1, vB+1
(1)    1060 : 4C 4C                      ld      r4, #vQ
(1)    1062 : 5C 40                      ld      r5, #vF
(1)    1064 : D6 12 9A                   call    divsi2          ; Q=B/F
(1)    1067 : 4C 4E                      ld      r4, #vS
(1)    1069 : 5C 4C                      ld      r5, #vQ
(1)    106B : D6 11 71                   call    negsi2          ; S=-Q
(1)    106E : 5C 40                      ld      r5, #vF
(1)    1070 : D6 12 13                   call    mulsi2          ; S=-Q*F
(1)    1073 : 5C 48                      ld      r5, #vB
(1)    1075 : D6 11 82                   call    addsi2          ; S=B-Q*F
(1)    1078 : E4 48 52                   ld      tmp, vB
(1)    107B : E4 49 53                   ld      tmp+1, vB+1
(1)    107E : 4C 52                      ld      r4, #tmp
(1)    1080 : D6 12 13                   call    mulsi2          ; tmp=B*B
(1)    1083 : E4 46 50                   ld      vT, vA
(1)    1086 : E4 47 51                   ld      vT+1, vA+1
(1)    1089 : 4C 50                      ld      r4, #vT
(1)    108B : 5C 46                      ld      r5, #vA
(1)    108D : D6 12 13                   call    mulsi2          ; T=A*A
(1)    1090 : 5C 52                      ld      r5, #tmp
(1)    1092 : D6 11 94                   call    subsi2          ; T=A*A-B*B
(1)    1095 : 5C 40                      ld      r5, #vF
(1)    1097 : D6 12 9A                   call    divsi2          ; T=(A*A-B*B)/F
(1)    109A : 5C 42                      ld      r5, #vC
(1)    109C : D6 11 82                   call    addsi2          ; T=(A*A-B*B)/F+C
(1)    109F : E4 46 52                   ld      tmp, vA
(1)    10A2 : E4 47 53                   ld      tmp+1, vA+1
(1)    10A5 : 4C 52                      ld      r4, #tmp
(1)    10A7 : 5C 4E                      ld      r5, #vS
(1)    10A9 : D6 12 13                   call    mulsi2          ; tmp=A*S
(1)    10AC : 5C 40                      ld      r5, #vF
(1)    10AE : D6 12 9A                   call    divsi2          ; tmp=A*S/F
(1)    10B1 : E4 46 48                   ld      vB, vA          ; B=A
(1)    10B4 : E4 47 49                   ld      vB+1, vA+1
(1)    10B7 : 4C 48                      ld      r4, #vB
(1)    10B9 : 5C 4C                      ld      r5, #vQ
(1)    10BB : D6 12 13                   call    mulsi2          ; B=A*Q
(1)    10BE : 5C 52                      ld      r5, #tmp
(1)    10C0 : D6 11 82                   call    addsi2          ; B=A*Q+A*S/F
(1)    10C3 : 5C 48                      ld      r5, #vB
(1)    10C5 : D6 11 82                   call    addsi2          ; B=2*(A*Q+A*S/F)
(1)    10C8 : 5C 44                      ld      r5, #vD
(1)    10CA : D6 11 82                   call    addsi2          ; B=2*(A*Q+A*S/F)+D
(1)    10CD : E4 50 46                   ld      vA, vT          ; A=T
(1)    10D0 : E4 51 47                   ld      vA+1, vT+1
(1)    10D3 : E4 46 4A                   ld      vP, vA
(1)    10D6 : E4 47 4B                   ld      vP+1, vA+1
(1)    10D9 : 4C 4A                      ld      r4, #vP
(1)    10DB : 5C 40                      ld      r5, #vF
(1)    10DD : D6 12 9A                   call    divsi2          ; P=A/F
(1)    10E0 : E4 48 4C                   ld      vQ, vB
(1)    10E3 : E4 49 4D                   ld      vQ+1, vB+1
(1)    10E6 : 4C 4C                      ld      r4, #vQ
(1)    10E8 : D6 12 9A                   call    divsi2          ; Q=B/F
(1)    10EB : E4 4C 52                   ld      tmp, vQ
(1)    10EE : E4 4D 53                   ld      tmp+1, vQ+1
(1)    10F1 : 4C 52                      ld      r4, #tmp
(1)    10F3 : 5C 4C                      ld      r5, #vQ
(1)    10F5 : D6 12 13                   call    mulsi2          ; tmp=Q*Q
(1)    10F8 : E4 4A 50                   ld      vT, vP
(1)    10FB : E4 4B 51                   ld      vT+1, vP+1
(1)    10FE : 4C 50                      ld      r4, #vT
(1)    1100 : 5C 4A                      ld      r5, #vP
(1)    1102 : D6 12 13                   call    mulsi2          ; T=P*P
(1)    1105 : 5C 52                      ld      r5, #tmp
(1)    1107 : D6 11 82                   call    addsi2          ; T=P*P+Q*Q
(1)    110A : E6 52 00                   ld      tmp, #HIGH 4
(1)    110D : E6 53 04                   ld      tmp+1, #LOW 4
(1)    1110 : 4C 52                      ld      r4, #tmp
(1)    1112 : 5C 50                      ld      r5, #vT
(1)    1114 : D6 11 A6                   call    cmpsi2          ; 4-T
(1)    1117 : 7B 19                      jr      c, print_i      ; if 4<T
(1)    1119 : A0 58                      incw    vI
(1)    111B : E6 52 00                   ld      tmp, #HIGH 16
(1)    111E : E6 53 10                   ld      tmp+1, #LOW 16
(1)    1121 : 4C 58                      ld      r4, #vI
(1)    1123 : 5C 52                      ld      r5, #tmp
(1)    1125 : D6 11 A6                   call    cmpsi2
(1)    1128 : 1D 10 5A                   jp      lt, loop_i      ; if I<16
(1)    112B : 0C 20                      ld      r0, #' '
(1)    112D : D6 01 30                   call    putchar
(1)    1130 : 8B 10                      jr      next_x
(1)    1132 :                    print_i:
(1)    1132 : 08 59                      ld      r0, vI+1
(1)    1134 : 06 E0 30                   add     r0, #'0'
(1)    1137 : A6 E0 3A                   cp      r0, #'9'+1
(1)    113A : 7B 03                      jr      c, print_i2     ; if I<'9'+1
(1)    113C : 06 E0 07                   add     r0, #'A'-'0'-10
(1)    113F :                    print_i2:
(1)    113F : D6 01 30                   call    putchar
(1)    1142 :                    next_x:
(1)    1142 : A0 56                      incw    vX
(1)    1144 : E6 52 00                   ld      tmp, #HIGH 30
(1)    1147 : E6 53 1E                   ld      tmp+1, #LOW 30
(1)    114A : 4C 56                      ld      r4, #vX
(1)    114C : 5C 52                      ld      r5, #tmp
(1)    114E : D6 11 A6                   call    cmpsi2
(1)    1151 : 1D 10 12                   jp      lt, loop_x      ; if X<30
(1)    1154 : 0C 0D                      ld      r0, #%0D
(1)    1156 : D6 01 30                   call    putchar
(1)    1159 : 0C 0A                      ld      r0, #%0A
(1)    115B : D6 01 30                   call    putchar
(1)    115E : A0 54                      incw    vY
(1)    1160 : E6 52 00                   ld      tmp, #HIGH 13
(1)    1163 : E6 53 0D                   ld      tmp+1, #LOW 13
(1)    1166 : 4C 54                      ld      r4, #vY
(1)    1168 : 5C 52                      ld      r5, #tmp
(1)    116A : D6 11 A6                   call    cmpsi2
(1)    116D : 1D 10 0C                   jp      lt, loop_y      ; if X<13
(1)    1170 : AF                         ret
(1)    1171 :
(1)    1171 :                    ;;; Local Variables:
(1)    1171 :                    ;;; mode: asm
(1)    1171 :                    ;;; End:
(1)    1171 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       1171 :                            include "arith.inc"
(1)    1171 :                            cpu     z86c
(1)    1171 :                            option  optimize-index, on
(1)    1171 :
(1)    1171 :                    ;;; Negation; result = -value
(1)    1171 :                    ;;; @param @r4: result
(1)    1171 :                    ;;; @param @r5: value
(1)    1171 :                    ;;; @clobber r14, r15
(1)    1171 :                    negsi2:
(1)    1171 : E3 E5                      ld      r14, 0(r5)
(1)    1173 : C7 F5 01                   ld      r15, 1(r5)
(1)    1176 : 60 EE                      com     r14
(1)    1178 : 60 EF                      com     r15
(1)    117A : A0 EE                      incw    rr14
(1)    117C : F3 4E                      ld      0(r4), r14
(1)    117E : D7 F4 01                   ld      1(r4), r15
(1)    1181 : AF                         ret
(1)    1182 :
(1)    1182 :                    ;;; Signed addition: summand += addend
(1)    1182 :                    ;;; @param @r4: summand
(1)    1182 :                    ;;; @param @r5: addend
(1)    1182 :                    ;;; @clobber r14, r15
(1)    1182 :                    addsi2:
(1)    1182 : E3 E4                      ld      r14, 0(r4)
(1)    1184 : C7 F4 01                   ld      r15, 1(r4)
(1)    1187 : 5E                         inc     r5
(1)    1188 : 03 F5                      add     r15, @r5
(1)    118A : 00 E5                      dec     r5
(1)    118C : 13 E5                      adc     r14, @r5
(1)    118E : F3 4E                      ld      0(r4), r14
(1)    1190 : D7 F4 01                   ld      1(r4), r15
(1)    1193 : AF                         ret
(1)    1194 :
(1)    1194 :                    ;;; Singed subtraction: minuend -= subtrahend
(1)    1194 :                    ;;; @param @r4: minuend
(1)    1194 :                    ;;; @param @r5: subtrahend
(1)    1194 :                    ;;; @clobber r14, r15
(1)    1194 :                    subsi2:
(1)    1194 : E3 E4                      ld      r14, 0(r4)
(1)    1196 : C7 F4 01                   ld      r15, 1(r4)
(1)    1199 : 5E                         inc     r5
(1)    119A : 23 F5                      sub     r15, @r5
(1)    119C : 00 E5                      dec     r5
(1)    119E : 33 E5                      sbc     r14, @r5
(1)    11A0 : F3 4E                      ld      0(r4), r14
(1)    11A2 : D7 F4 01                   ld      1(r4), r15
(1)    11A5 : AF                         ret
(1)    11A6 :
(1)    11A6 :                    ;;; Signed comparison: minuend - subtrahend
(1)    11A6 :                    ;;; @param @r4: minuend
(1)    11A6 :                    ;;; @param @r5: subtrahend
(1)    11A6 :                    ;;; @clobber r14, r15
(1)    11A6 :                    cmpsi2:
(1)    11A6 : E3 E4                      ld      r14, 0(r4)
(1)    11A8 : C7 F4 01                   ld      r15, 1(r4)
(1)    11AB : 5E                         inc     r5
(1)    11AC : 23 F5                      sub     r15, @r5
(1)    11AE : 00 E5                      dec     r5
(1)    11B0 : 33 E5                      sbc     r14, @r5        ; rr14=@r4-@r5
(1)    11B2 : D6 11 B6                   call    addsub_flags    ; set C,Z,S,V
(1)    11B5 : AF                         ret
(1)    11B6 :
(1)    11B6 :                    ;;; Set add/sub flags
(1)    11B6 :                    ;;; @param @r4: operand 1
(1)    11B6 :                    ;;; @param @r5: operand 2
(1)    11B6 :                    ;;; @param rr14: result
(1)    11B6 :                    ;;; @param FLAGS
(1)    11B6 :                    ;;; @return FLAGS: C, Z, S, V
(1)    11B6 :                    addsub_flags:
(1)    11B6 : 70 EF                      push    r15
(1)    11B8 : 70 EE                      push    r14
(1)    11BA : 70 ED                      push    r13
(1)    11BC : D8 FC                      ld      r13, FLAGS
(1)    11BE : 46 ED 50                   or      r13, #F_ZERO LOR F_OVERFLOW ; set Z, V
(1)    11C1 : 42 FE                      or      r15, r14
(1)    11C3 : 6B 03                      jr      z, addsub_flags_z
(1)    11C5 : B6 ED 40                   xor     r13, #F_ZERO    ; clear Z
(1)    11C8 :                    addsub_flags_z:
(1)    11C8 : B3 E4                      xor     r14, @r4
(1)    11CA : B3 E5                      xor     r14, @r5        ; r14:7 carry into S
(1)    11CC : FB 03                      jr      nc, addsub_flags_nc
(1)    11CE : B6 EE 80                   xor     r14, #%80       ; r14:7=C^(carry into S)
(1)    11D1 :                    addsub_flags_nc:
(1)    11D1 : 5B 03                      jr      mi, addsub_flags_v
(1)    11D3 : B6 ED 10                   xor     r13, #F_OVERFLOW ; clear V
(1)    11D6 :                    addsub_flags_v:
(1)    11D6 : D9 FC                      ld      FLAGS, r13
(1)    11D8 : 50 ED                      pop     r13
(1)    11DA : 50 EE                      pop     r14
(1)    11DC : 50 EF                      pop     r15
(1)    11DE : AF                         ret
(1)    11DF :
(1)    11DF :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    11DF :                    ;;; @param rr14: multiplicand
(1)    11DF :                    ;;; @param rr12: multiplier
(1)    11DF :                    ;;; @return rr14: result
(1)    11DF :                    ;;; @clobber r10-r15
(1)    11DF :                    umul16:
(1)    11DF : A8 EE                      ld      r10, r14        ; rr10=multiplicand
(1)    11E1 : B8 EF                      ld      r11, r15
(1)    11E3 : EC 00                      ld      r14, #0         ; result=0
(1)    11E5 : FC 00                      ld      r15, #0
(1)    11E7 : 8B 10                      jr      umul16_check
(1)    11E9 :                    umul16_loop:
(1)    11E9 : CF                         rcf                     ; multiplier >>= 1
(1)    11EA : C0 EC                      rrc     r12
(1)    11EC : C0 ED                      rrc     r13
(1)    11EE : FB 04                      jr      nc, umul16_next ; if lsb(multiplier) == 0
(1)    11F0 : 02 FB                      add     r15, r11
(1)    11F2 : 12 EA                      adc     r14, r10        ; result += multiplicand
(1)    11F4 :                    umul16_next:
(1)    11F4 : CF                         rcf                     ; multiplicand <<= 1
(1)    11F5 : 10 EB                      rlc     r11
(1)    11F7 : 10 EA                      rlc     r10
(1)    11F9 :                    umul16_check:
(1)    11F9 : A0 EC                      incw    rr12
(1)    11FB : 80 EC                      decw    rr12
(1)    11FD : EB EA                      jr      nz, umul16_loop ; while multiplier != 0
(1)    11FF :                    umul16_end:
(1)    11FF : AF                         ret
(1)    1200 :
(1)    1200 :                    ;;; Unsigned multiplication: multiplicand *= multiplier
(1)    1200 :                    ;;; @param @r4: multiplicand
(1)    1200 :                    ;;; @param @r5: multiplier
(1)    1200 :                    ;;; @clobber r10-r15
(1)    1200 :                    umulsi2:
(1)    1200 : E3 E4                      ld      r14, 0(r4)
(1)    1202 : C7 F4 01                   ld      r15, 1(r4)
(1)    1205 : E3 C5                      ld      r12, 0(r5)
(1)    1207 : C7 D5 01                   ld      r13, 1(r5)
(1)    120A : D6 11 DF                   call    umul16          ; rr10=multiplicand * multiplier
(1)    120D : F3 4E                      ld      0(r4), r14
(1)    120F : D7 F4 01                   ld      1(r4), r15
(1)    1212 : AF                         ret
(1)    1213 :
(1)    1213 :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)    1213 :                    ;;; @param @r4: multiplicand
(1)    1213 :                    ;;; @param @r5: multiplier
(1)    1213 :                    ;;; @clobber r10-r15
(1)    1213 :                    mulsi2:
(1)    1213 : E3 E4                      ld      r14, 0(r4)
(1)    1215 : C7 F4 01                   ld      r15, 1(r4)
(1)    1218 : E3 C5                      ld      r12, 0(r5)
(1)    121A : C7 D5 01                   ld      r13, 1(r5)
(1)    121D : 42 CC                      or      r12, r12
(1)    121F : DB 06                      jr      pl, mulsi2_abs_muliplicand
(1)    1221 : 60 EC                      com     r12
(1)    1223 : 60 ED                      com     r13
(1)    1225 : A0 EC                      incw    rr12            ; multiplicand = -multiplicand
(1)    1227 :                    mulsi2_abs_muliplicand:
(1)    1227 : 42 EE                      or      r14, r14
(1)    1229 : DB 06                      jr      pl, mulsi2_multiply
(1)    122B : 60 EE                      com     r14
(1)    122D : 60 EF                      com     r15
(1)    122F : A0 EE                      incw    rr14            ; multiplier = -multiplier
(1)    1231 :                    mulsi2_multiply:
(1)    1231 : D6 11 DF                   call    umul16          ; result = multiplicand * multiplier
(1)    1234 : E3 C4                      ld      r12, @r4
(1)    1236 : B3 C5                      xor     r12, @r5        ; r12=sign(@r4)^sign(@r5)
(1)    1238 : DB 06                      jr      pl, mulsi2_end
(1)    123A : 60 EE                      com     r14
(1)    123C : 60 EF                      com     r15
(1)    123E : A0 EE                      incw    rr14            ; result = -result
(1)    1240 :                    mulsi2_end:
(1)    1240 : F3 4E                      ld      0(r4), r14
(1)    1242 : D7 F4 01                   ld      1(r4), r15
(1)    1245 : AF                         ret
(1)    1246 :
(1)    1246 :                    ;;; Unsigned division: divident / divisor = quotient ... reminder
(1)    1246 :                    ;;; @praram rr14: divident
(1)    1246 :                    ;;; @praram rr12: divisor
(1)    1246 :                    ;;; @return rr14: reminder
(1)    1246 :                    ;;; @return rr12: quotient
(1)    1246 :                    ;;; @clobber r10-r15
(1)    1246 :                    udiv16:
(1)    1246 : 70 E9                      push    r9
(1)    1248 : A0 EC                      incw    rr12
(1)    124A : 80 EC                      decw    rr12
(1)    124C : 6D 12 84                   jp      z, udiv16_end
(1)    124F : 9C 01                      ld      r9, #1          ; r9=bits
(1)    1251 : 8D 12 5A                   jp      udiv16_prep
(1)    1254 :                    udiv16_prep_loop:
(1)    1254 : CF                         rcf                     ; divisor <<= 1
(1)    1255 : 10 ED                      rlc     r13
(1)    1257 : 10 EC                      rlc     r12
(1)    1259 : 9E                         inc     r9
(1)    125A :                    udiv16_prep:                    ; while msb(divisor) == 0
(1)    125A : 42 CC                      or      r12, r12
(1)    125C : DB F6                      jr      pl, udiv16_prep_loop
(1)    125E : AC 00                      ld      r10, #0
(1)    1260 : BC 00                      ld      r11, #0         ; rr10=quotient
(1)    1262 : 8D 12 6F                   jp      udiv16_enter_loop
(1)    1265 :                    udiv16_loop:
(1)    1265 : CF                         rcf                     ; divisor >>= 1
(1)    1266 : C0 EC                      rrc     r12
(1)    1268 : C0 ED                      rrc     r13
(1)    126A : CF                         rcf                     ; quotient <<= 1
(1)    126B : 10 EB                      rlc     r11
(1)    126D : 10 EA                      rlc     r10
(1)    126F :                    udiv16_enter_loop:
(1)    126F : 22 FD                      sub     r15, r13        ; divident -= divisor
(1)    1271 : 32 EC                      sbc     r14, r12
(1)    1273 : 7D 12 7A                   jp      c, udiv16_readd ; if divident < 0
(1)    1276 : BE                         inc     r11             ; quotient |= 1
(1)    1277 : 8D 12 7E                   jp      udiv16_next
(1)    127A :                    udiv16_readd:
(1)    127A : 02 FD                      add     r15, r13        ; divident += divisor
(1)    127C : 12 EC                      adc     r14, r12        ; FLAG.D is always cleared
(1)    127E :                    udiv16_next:
(1)    127E : 9A E5                      djnz    r9, udiv16_loop ; rr14=reminder
(1)    1280 : C8 EA                      ld      r12, r10        ; rr12=quotient
(1)    1282 : D8 EB                      ld      r13, r11
(1)    1284 :                    udiv16_end:
(1)    1284 : 50 E9                      pop     r9
(1)    1286 : AF                         ret
(1)    1287 :
(1)    1287 :                    ;;; Unsigned division: dividend /= divisor
(1)    1287 :                    ;;; @praram @r4: dividend
(1)    1287 :                    ;;; @praram @r5: divisor
(1)    1287 :                    ;;; @clobber r10-r15
(1)    1287 :                    udivsi2:
(1)    1287 : E3 E4                      ld      r14, 0(r4)
(1)    1289 : C7 F4 01                   ld      r15, 1(r4)
(1)    128C : E3 C5                      ld      r12, 0(r5)
(1)    128E : C7 D5 01                   ld      r13, 1(r5)
(1)    1291 : D6 12 46                   call    udiv16
(1)    1294 : F3 4C                      ld      0(r4), r12
(1)    1296 : D7 D4 01                   ld      1(r4), r13
(1)    1299 : AF                         ret
(1)    129A :
(1)    129A :                    ;;; Signed division: divident *= divisor
(1)    129A :                    ;;; @param @r4: divident
(1)    129A :                    ;;; @param @r5: divisor
(1)    129A :                    ;;; @clobber r10-r15
(1)    129A :                    divsi2:
(1)    129A : E3 E4                      ld      r14, 0(r4)
(1)    129C : C7 F4 01                   ld      r15, 1(r4)
(1)    129F : E3 C5                      ld      r12, 0(r5)
(1)    12A1 : C7 D5 01                   ld      r13, 1(r5)
(1)    12A4 : 42 EE                      or      r14, r14
(1)    12A6 : DB 06                      jr      pl, divsi2_abs_divident
(1)    12A8 : 60 EE                      com     r14
(1)    12AA : 60 EF                      com     r15
(1)    12AC : A0 EE                      incw    rr14            ; divident = -divident
(1)    12AE :                    divsi2_abs_divident:
(1)    12AE : 42 CC                      or      r12, r12
(1)    12B0 : DB 06                      jr      pl, divsi2_divide
(1)    12B2 : 60 EC                      com     r12
(1)    12B4 : 60 ED                      com     r13
(1)    12B6 : A0 EC                      incw    rr12            ; divisor = -divisor
(1)    12B8 :                    divsi2_divide:
(1)    12B8 : D6 12 46                   call    udiv16
(1)    12BB : E3 E4                      ld      r14, @r4
(1)    12BD : B3 E5                      xor     r14, @r5        ; r14=sign(@r4)^sign(@r5)
(1)    12BF : DB 06                      jr      pl, divsi2_end
(1)    12C1 : 60 EC                      com     r12
(1)    12C3 : 60 ED                      com     r13
(1)    12C5 : A0 EC                      incw    rr12            ; divident = = -divident
(1)    12C7 :                    divsi2_end:
(1)    12C7 : F3 4C                      ld      0(r4), r12
(1)    12C9 : D7 D4 01                   ld      1(r4), r13
(1)    12CC : AF                         ret
(1)    12CD :
(1)    12CD :                    ;;; Local Variables:
(1)    12CD :                    ;;; mode: asm
(1)    12CD :                    ;;; End:
(1)    12CD :                    ;;; vim: set ft=asm et ts=4 sw=4:
       12CD :
       12CD :                            end

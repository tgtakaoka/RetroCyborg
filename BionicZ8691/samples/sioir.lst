          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     z8
          0 :                            option  "reg-alias", "disable"
          0 :
          0 :                            include "z8.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; Z8
(1)       0 : =FC                FLAGS:  equ     252               ; R/W: Flags register
(1)       0 : =80                F_CARRY:        equ     %(2)10000000 ; set to 1 if carry
(1)       0 : =40                F_ZERO:         equ     %(2)01000000 ; set to 1 if zero
(1)       0 : =20                F_SIGN:         equ     %(2)00100000 ; set to 1 if negative
(1)       0 : =10                F_OVERFLOW:     equ     %(2)00010000 ; set to 1 if overflow
(1)       0 : =8                 F_DECIMAL_ADJ:  equ     %(2)00001000 ; decimal adjust
(1)       0 : =4                 F_HALF_CARRY:   equ     %(2)00000100 ; set to 1 if carry from bit-3
(1)       0 : =2                 F_USER2:        equ     %(2)00000010 ; User flag F2
(1)       0 : =1                 F_USER1:        equ     %(2)00000001 ; User flah F1
(1)       0 :                    ;;; Interrupt vectors
(1)       0 : =0                 VEC_IRQ0:       equ     %0000   ; IRQ0
(1)       0 : =2                 VEC_IRQ1:       equ     %0002   ; IRQ1
(1)       0 : =4                 VEC_IRQ2:       equ     %0004   ; IRQ2/Tin
(1)       0 : =6                 VEC_IRQ3:       equ     %0006   ; IRQ3/Serial in
(1)       0 : =8                 VEC_IRQ4:       equ     %0008   ; IRQ4/Serial out/T0
(1)       0 : =A                 VEC_IRQ5:       equ     %000A   ; IRQ5/T1
(1)       0 :                    ;;; Reset origin
(1)       0 : =C                 ORG_RESET:      equ     %000C   ; RESET
(1)       0 :                    ;;; I/O Ports
(1)       0 : =2                 PORT2:          equ     2       ; Port 2
(1)       0 : =3                 PORT3:          equ     3       ; Port 3
(1)       0 : =F7                P3M:            equ     247       ; W/O: Port 3 Mode Register
(1)       0 : =80                P3M_PARITY:     equ     %(2)10000000 ; 1=Parity on
(1)       0 : =40                P3M_SERIAL:     equ     %(2)01000000 ; 1=P30 is serial in, P37 is serial out
(1)       0 : =1                 P3M_P2PUSHPULL: equ     %(2)00000001 ; 1=Port 2 is push-pull, 0=open drain
(1)       0 : =F6                P2M:            equ     246       ; W/O: Port 2 Mode Register, 0=output, 1=input
(1)       0 : =F8                P01M:           equ     248       ; W/O: Port 0 and 1 Mode Register
(1)       0 : =82                P01M_P0ADDR:    equ     %(2)10000010 ; Port 0 is A8~A15
(1)       0 : =10                P01M_P1DATA:    equ     %(2)00010000 ; Port 1 is AD0~AD7
(1)       0 : =4                 P01M_INTERNAL:  equ     %(2)00000100 ; Stack is on internal memory
(1)       0 :                    ;;; Interrupt
(1)       0 : =F9                IPR:    equ     249             ; W/O: Interrupt Priority
(1)       0 : =1                 IPR_CAB:        equ     %(2)000001 ; C > A > B
(1)       0 : =8                 IPR_ABC:        equ     %(2)001000 ; A > B > C
(1)       0 : =9                 IPR_ACB:        equ     %(2)001001 ; A > C > B
(1)       0 : =10                IPR_BCA:        equ     %(2)010000 ; B > C > A
(1)       0 : =11                IPR_CBA:        equ     %(2)010001 ; C > B > A
(1)       0 : =18                IPR_BAC:        equ     %(2)011000 ; B > A > C
(1)       0 : =0                 IPR_A53:        equ     %(2)000000 ; A: IRQ5 > IRQ3
(1)       0 : =20                IPR_A35:        equ     %(2)100000 ; A: IRQ3 > IRQ5
(1)       0 : =0                 IPR_B20:        equ     %(2)000000 ; B: IRQ2 > IRQ0
(1)       0 : =4                 IPR_B02:        equ     %(2)000100 ; B: IRQ0 > IRQ2
(1)       0 : =0                 IPR_C14:        equ     %(2)000000 ; C: IRQ0 > IRQ4
(1)       0 : =2                 IPR_C41:        equ     %(2)000010 ; C: IRQ4 > IRQ0
(1)       0 : =FB                IMR:    equ     251             ; R/W: Interrupt Mask
(1)       0 : =80                IMR_ENABLE:     equ     %(2)10000000 ; Interrupt enable
(1)       0 : =1                 IMR_IRQ0:       equ     (1 SHL 0)
(1)       0 : =2                 IMR_IRQ1:       equ     (1 SHL 1)
(1)       0 : =4                 IMR_IRQ2:       equ     (1 SHL 2)
(1)       0 : =8                 IMR_IRQ3:       equ     (1 SHL 3)
(1)       0 : =10                IMR_IRQ4:       equ     (1 SHL 4)
(1)       0 : =20                IMR_IRQ5:       equ     (1 SHL 5)
(1)       0 : =FA                IRQ:    equ     250             ; R/W: Interrupt Request
(1)       0 : =1                 IRQ_IRQ0:       equ     IMR_IRQ0
(1)       0 : =2                 IRQ_IRQ1:       equ     IMR_IRQ1
(1)       0 : =4                 IRQ_IRQ2:       equ     IMR_IRQ2
(1)       0 : =8                 IRQ_IRQ3:       equ     IMR_IRQ3
(1)       0 : =10                IRQ_IRQ4:       equ     IMR_IRQ4
(1)       0 : =20                IRQ_IRQ5:       equ     IMR_IRQ5
(1)       0 :                    ;;; Counter/Timers
(1)       0 : =F5                PRE0:   equ     245             ; W/O: Prescaler 0 register
(1)       0 : =1                 PRE0_MODULO:    equ     %(2)00000001 ; 1=Modulo-N, 0=Single-pass
(1)       0 : =FC                PRE0_gm:        equ     %(2)11111100 ; Modulo mask
(1)       0 : =2                 PRE0_gp:        equ     2         ; Modulo bit position
(1)       0 : =F3                PRE1:   equ     243               ; W/O: Prescaler 1 register
(1)       0 : =1                 PRE1_MODULO:    equ     %(2)00000001 ; 1=Modulo-N, 0=SinglePass
(1)       0 : =2                 PRE1_INTERNAL:  equ     %(2)00000010 ; 1=T1 internal, 0=T1 external
(1)       0 : =FC                PRE1_gm:        equ     %(2)11111100 ; Modulo mask
(1)       0 : =2                 PRE1_gp:        equ     2         ; Modulo bit position
(1)       0 : =F2                T1:     equ     242               ; R/W: Counter/Timer 1 Register
(1)       0 : =F4                T0:     equ     244               ; R/W: Counter/Timer 0 Register
(1)       0 : =F1                TMR:    equ     241               ; R/W: Timer Mode Register
(1)       0 : =1                 TMR_LOAD_T0:    equ     %(2)00000001 ; 1=Load T0
(1)       0 : =2                 TMR_ENABLE_T0:  equ     %(2)00000010 ; 1=Enable T0
(1)       0 : =4                 TMR_LOAD_T1:    equ     %(2)00000100 ; 1=Load T1
(1)       0 : =8                 TMR_ENABLE_T1:  equ     %(2)00001000 ; 1=Enable T1
(1)       0 : =0                 TMR_TOUT_OFF:   equ     %(2)00000000 ; TOUT off
(1)       0 : =40                TMR_TOUT_T0:    equ     %(2)01000000 ; TOUT=T0
(1)       0 : =80                TMR_TOUT_T1:    equ     %(2)10000000 ; TOUT=T1
(1)       0 : =C0                TMR_TOUT_CLOCK: equ     %(2)11000000 ; TOUT=internal clock
(1)       0 :                    ;;;
(1)       0 : =F0                SIO:    equ     240             ; R/W: Serial I/O Register
(1)       0 : =FD                RP:     equ     253             ; R/W: Register pointer
(1)       0 : =FE                SPH:    equ     254             ; R/W: Stack Pointer High
(1)       0 : =FF                SPL:    equ     255             ; R/W: Stack Pointer Low
          0 :
       2000 :                            org     %2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 :
       1000 :                            org     %1000
       1000 : =1000              stack:  equ     $
       1000 :
          6 :                            org     VEC_IRQ3
          6 : 00 FC                      dw      isr_intr
          8 :
          C :                            org     ORG_RESET
          C :                    init_config:
          C : 31 F0                      srp     #%F0
          E :                            setrp   %F0
          E :                            ;; Stack is on external memory
          E : 8C 92                      ld      P01M, #P01M_P0ADDR LOR P01M_P1DATA
         10 : EC 10                      ld      SPH, #HIGH stack
         12 : FC 00                      ld      SPL, #LOW stack
         14 : 31 10                      srp     #%10
         16 :                            setrp   %10
         16 : 2C 20                      ld      r2, #HIGH rx_queue
         18 : 3C 00                      ld      r3, #LOW rx_queue
         1A : 1C 80                      ld      r1, #rx_queue_size
         1C : D6 00 4F                   call    queue_init
         1F :
         1F :                    ;;; XTAL=14.7546MHz
         1F :                    ;;; p=1 for PRE0, t=12 for T0
         1F :                    ;;; bit rate = 14754600 / (2 x 4 x p x t x 16) = 9600 bps
         1F :                    init_sio:
         1F : E6 F7 40                   ld      P3M, #P3M_SERIAL ; enable SIO I/O
         22 : E6 F4 0C                   ld      T0, #12
         25 : E6 F5 05                   ld      PRE0, #(1 SHL PRE0_gp) LOR PRE0_MODULO ; modulo-N
         28 : 46 F1 03                   or      TMR, #TMR_LOAD_T0 LOR TMR_ENABLE_T0
         2B :
         2B :                    init_irq:
         2B : E6 F9 2F                   ld      IPR, #IPR_ACB LOR IPR_A35 LOR IPR_C41 LOR IPR_B02
         2E : E6 FB 08                   ld      IMR, #IMR_IRQ3 ; enable IRQ3
         31 : 9F                         ei                     ; clear IRQ and enable interrupt system
         32 : 46 FA 10                   or      IRQ, #IRQ_IRQ4
         35 :
         35 :                    receive_loop:
         35 : 8F                         di                      ; Disable INTR
         36 : D6 00 BA                   call    queue_remove
         39 : 9F                         ei                      ; Enable INTR
         3A : FB F9                      jr      nc, receive_loop
         3C :                    transmit_loop:
         3C : 76 FA 10                   tm      IRQ, #IRQ_IRQ4  ; check IRQ4
         3F : 6B FB                      jr      z, transmit_loop
         41 :                    transmit_data:
         41 : 09 F0                      ld      SIO, r0
         43 : 56 FA EF                   and     IRQ, #LNOT IRQ_IRQ4 ; clear IRQ4
         46 : A6 E0 0D                   cp      r0, #%0D
         49 : EB EA                      jr      nz, receive_loop
         4B : 0C 0A                      ld      r0, #%0A
         4D : 8B ED                      jr      transmit_loop
         4F :
         4F :                            include "queue.inc"
(1)      4F :                    ;;; [queue] queue structure
(1)      4F : =0                 queue_len:      equ     0       ; queue length
(1)      4F : =1                 queue_size:     equ     1       ; buffer size
(1)      4F : =2                 queue_put:      equ     2       ; queue put index
(1)      4F : =3                 queue_get:      equ     3       ; queue get index
(1)      4F : =4                 queue_buf:      equ     4       ; buffer start offset
(1)      4F :
(1)      4F :                    ;;; [queue] Initialize queue
(1)      4F :                    ;;; @param rr2 queue work space pointer
(1)      4F :                    ;;; @param r1 queue work space size
(1)      4F :                    ;;; @clobber r1
(1)      4F :                    queue_init:
(1)      4F : 70 E0                      push    r0
(1)      51 : 70 E2                      push    r2
(1)      53 : 70 E3                      push    r3
(1)      55 : B0 E0                      clr     r0
(1)      57 : 92 02                      lde     @rr2, r0        ; queue_len
(1)      59 : A0 E2                      incw    rr2
(1)      5B : 08 E1                      ld      r0, r1
(1)      5D : 26 E0 04                   sub     r0, #queue_buf
(1)      60 : 92 02                      lde     @rr2, r0        ; queue_size
(1)      62 : A0 E2                      incw    rr2
(1)      64 : 06 E0 02                   add     r0, #2          ; for queue_put and queue_get
(1)      67 : B0 E1                      clr     r1
(1)      69 :                    queue_init_loop:
(1)      69 : 92 12                      lde     @rr2, r1
(1)      6B : A0 E2                      incw    rr2
(1)      6D : 0A FA                      djnz    r0, queue_init_loop
(1)      6F : 50 E3                      pop     r3
(1)      71 : 50 E2                      pop     r2
(1)      73 : 50 E0                      pop     r0
(1)      75 : AF                         ret
(1)      76 :
(1)      76 :                    ;;; [queue] Add an element to queue
(1)      76 :                    ;;; @param rr2 queue work space pointer
(1)      76 :                    ;;; @param r0 an element
(1)      76 :                    ;;; @return FLAGS.C 0 if queue is full
(1)      76 :                    queue_add:
(1)      76 : 70 E1                      push    r1
(1)      78 : 70 E4                      push    r4              ; save r1, r4
(1)      7A : 82 12                      lde     r1, @rr2        ; queue_len
(1)      7C : 1E                         inc     r1              ; queue_len++
(1)      7D : A0 E2                      incw    rr2             ; rr2 points queue_size
(1)      7F : 82 42                      lde     r4, @rr2        ; r4=queue_size
(1)      81 : A2 14                      cp      r1, r4
(1)      83 : 80 E2                      decw    rr2                ; rr2 points queue_len
(1)      85 : 7B 05                      jr      c, queue_add_store ; queue_len < queue_size
(1)      87 : 50 E4                      pop     r4                 ; restore r1, r4
(1)      89 : 50 E1                      pop     r1
(1)      8B : AF                         ret                     ; return with FLAGS.C=0
(1)      8C :                    queue_add_store:
(1)      8C : 92 12                      lde     @rr2, r1        ; update queue_len
(1)      8E : A0 E2                      incw    rr2
(1)      90 : A0 E2                      incw    rr2             ; rr2 points to queue_put
(1)      92 : 82 12                      lde     r1, @rr2        ; queue_put
(1)      94 : 70 E3                      push    r3              ; save rr2
(1)      96 : 70 E2                      push    r2
(1)      98 : A0 E2                      incw    rr2
(1)      9A : A0 E2                      incw    rr2             ; rr2 points to queue_buf
(1)      9C : 02 31                      add     r3, r1
(1)      9E : 16 E2 00                   adc     r2, #0          ; rr2=&queue_buf[queue_put]
(1)      A1 : 92 02                      lde     @rr2, r0        ; store an element
(1)      A3 : 50 E2                      pop     r2              ; restore rr2 points to queue_put
(1)      A5 : 50 E3                      pop     r3
(1)      A7 : 1E                         inc     r1              ; queue_put++
(1)      A8 : A2 14                      cp      r1, r4
(1)      AA : 7B 02                      jr      c, queue_add_update ; queue_put < queue_size
(1)      AC : B0 E1                      clr     r1
(1)      AE :                    queue_add_update:
(1)      AE : 92 12                      lde     @rr2, r1        ; queue_put
(1)      B0 : 80 E2                      decw    rr2
(1)      B2 : 80 E2                      decw    rr2             ; rr2 points queue_len
(1)      B4 : DF                         scf                     ; set carry flag
(1)      B5 : 50 E4                      pop     r4              ; restpre r1, r4
(1)      B7 : 50 E1                      pop     r1              ; restore r1
(1)      B9 : AF                         ret
(1)      BA :
(1)      BA :                    ;;; [queue] Remove an element from queue
(1)      BA :                    ;;; @param rr2 queue work space pointer
(1)      BA :                    ;;; @return r0 an element
(1)      BA :                    ;;; @return FLAGS.C 0 if queue is empty
(1)      BA :                    queue_remove:
(1)      BA : 70 E1                      push    r1              ; save r1
(1)      BC : 82 12                      lde     r1, @rr2        ; queue_len
(1)      BE : 42 11                      or      r1, r1
(1)      C0 : EB 04                      jr      nz, queue_remove_elem ; queue_len > 0
(1)      C2 : CF                         rcf                           ; reset carry flag
(1)      C3 : 50 E1                      pop     r1
(1)      C5 : AF                         ret
(1)      C6 :                    queue_remove_elem:
(1)      C6 : 70 E4                      push    r4              ; save r4
(1)      C8 : 00 E1                      dec     r1              ; queue_len--
(1)      CA : 92 12                      lde     @rr2, r1        ; update queue_len
(1)      CC : A0 E2                      incw    rr2
(1)      CE : 82 42                      lde     r4, @rr2        ; r4=queue_size
(1)      D0 : A0 E2                      incw    rr2
(1)      D2 : A0 E2                      incw    rr2             ; rr2 points queue_get
(1)      D4 : 70 E3                      push    r3
(1)      D6 : 70 E2                      push    r2
(1)      D8 : 82 12                      lde     r1, @rr2        ; queue_get
(1)      DA : A0 E2                      incw    rr2             ; rr2 points queue_buf
(1)      DC : 02 31                      add     r3, r1
(1)      DE : 16 E2 00                   adc     r2, #0          ; rr2=&queue_buf[queue_get]
(1)      E1 : 82 02                      lde     r0, @rr2        ; read an element
(1)      E3 : 50 E2                      pop     r2              ; restore rr2 points to queue_get
(1)      E5 : 50 E3                      pop     r3
(1)      E7 : 1E                         inc     r1              ; queue_get++
(1)      E8 : A2 14                      cp      r1, r4
(1)      EA : 7B 02                      jr      c, queue_remove_update ; queue_get < queue_size
(1)      EC : B0 E1                      clr     r1
(1)      EE :                    queue_remove_update:
(1)      EE : 92 12                      lde     @rr2, r1        ; update queue_get
(1)      F0 : 80 E2                      decw    rr2
(1)      F2 : 80 E2                      decw    rr2
(1)      F4 : 80 E2                      decw    rr2             ; rr2 points queue_len
(1)      F6 : 50 E4                      pop     r4              ; restore r1, r4
(1)      F8 : 50 E1                      pop     r1
(1)      FA : DF                         scf                     ; set carry
(1)      FB : AF                         ret
(1)      FC :
(1)      FC :                    ;;; Local Variables:
(1)      FC :                    ;;; mode: asm
(1)      FC :                    ;;; End:
(1)      FC :                    ;;; vim: set ft=asm et ts=4 sw=4:
         FC :
         FC :                            setrp   -1
         FC :                    isr_intr:
         FC : 70 E0                      push    r0
         FE : 08 F0                      ld      r0, SIO
        100 : 56 FA F7                   and     IRQ, #LNOT IRQ_IRQ3
        103 : 70 E3                      push    r3
        105 : 70 E2                      push    r2
        107 : 2C 20                      ld      r2, #HIGH rx_queue
        109 : 3C 00                      ld      r3, #LOW rx_queue
        10B : D6 00 76                   call    queue_add
        10E : 50 E2                      pop     r2
        110 : 50 E3                      pop     r3
        112 : 50 E0                      pop     r0
        114 : BF                         iret

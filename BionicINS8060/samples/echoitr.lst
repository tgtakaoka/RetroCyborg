          0 :
          0 :                            include "ins8060.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; INS8060
(1)       0 :                    ;;; Status Register
(1)       0 : =80                S_CY:   equ     0x80            ; Carry bit
(1)       0 : =80                S_L:    equ     0x80            ; Link bit
(1)       0 : =40                S_OV:   equ     0x40            ; Overflow bit
(1)       0 : =20                S_SB:   equ     0x20            ; Sense B bit
(1)       0 : =10                S_SA:   equ     0x10            ; Sense A bit
(1)       0 : =8                 S_IE:   equ     0x08            ; Interrupt Enable bit
(1)       0 : =4                 S_F2:   equ     0x04            ; Flag 2 bit
(1)       0 : =2                 S_F1:   equ     0x02            ; Flag 1 bit
(1)       0 : =1                 S_F0:   equ     0x01            ; Flag 0 bit
(1)       0 :
(1)       0 :                    ;;; Dynamic Offset by E register
(1)       0 : =80                OFFSET_E:       equ     0x80    ; offset by E register
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =1                 ORG_RESTART:    equ     0x0001  ; Restart transfer location
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     0xDF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     0b11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     0b00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     0b00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     0b00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     0b00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     0b00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     0b00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     0b00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     0b00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     0b00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     0b00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     0b00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     0b00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     0b00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     0b01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     0b00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     0b00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     0b01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     0b01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     0b10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     0b00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     0b00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     0b00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     0b00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     0b00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     0b00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     0b01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     0b10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 : =0                 ACIA_C: equ     0               ; ACIA control offset
          0 : =0                 ACIA_S: equ     0               ; ACIA status offset
          0 : =1                 ACIA_D: equ     1               ; ACIA data register offset
          0 :
          0 : =10                rx_queue_size:  equ     16
          0 : =30                tx_queue_size:  equ     48
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
       2000 :                            org     0x2000
       2000 :                    rx_queue:
       2000 :                            ds      rx_queue_size
       2010 :                    tx_queue:
       2010 :                            ds      tx_queue_size
       2040 :                    tx_int_control:
       2040 :                            ds      1
       2041 :
       1000 :                            org     0x1000
       1000 : =FFF               stack:  equ     $-1
       1000 :                    initialize:
       1000 : C4 57                      ldi     l(addr(queue_init))
       1002 : 31                         xpal    P1
       1003 : C4 11                      ldi     h(addr(queue_init))
       1005 : 35                         xpah    P1
       1006 : C4 10                      ldi     rx_queue_size
       1008 : 3D                         xppc    P1              ; call queue_init
       1009 : 00 20                      dw      rx_queue
       100B : C4 30                      ldi     tx_queue_size
       100D : 3D                         xppc    P1              ; call queue init
       100E : 10 20                      dw      tx_queue
       1010 :
       1010 :                            ;; initialize ACIA
       1010 : C4 00                      ldi     l(ACIA)
       1012 : 31                         xpal    P1
       1013 : C4 DF                      ldi     h(ACIA)
       1015 : 35                         xpah    P1
       1016 : C4 03                      ldi     CDS_RESET_gc    ; Master reset
       1018 : C9 00                      st      ACIA_C(P1)
       101A : C4 94                      ldi     RX_INT_TX_NO   ; 8 bits + No Parity + 1 Stop Bits
       101C :                                                    ; Transmit, Receive interrupts disabled
       101C : C9 00                      st      ACIA_C(P1)
       101E :
       101E : C4 40                      ldi     l(tx_int_control)
       1020 : 31                         xpal    P1
       1021 : C4 20                      ldi     h(tx_int_control)
       1023 : 35                         xpah    P1
       1024 : C4 00                      ldi     0
       1026 : C9 00                      st      0(P1)           ; disable Tx interrupt
       1028 : 05                         ien                     ; enable interrupt
       1029 :
       1029 :                    loop:
       1029 : C4 FA                      ldi     l(addr(getchar))
       102B : 31                         xpal    P1
       102C : C4 10                      ldi     h(addr(getchar))
       102E : 35                         xpah    P1
       102F :                    wait_char:
       102F : 3D                         xppc    P1              ; call getchar
       1030 : 98 FD                      jz      wait_char
       1032 : C4 1B                      ldi     l(addr(putchar))
       1034 : 31                         xpal    P1
       1035 : C4 11                      ldi     h(addr(putchar))
       1037 : 35                         xpah    P1
       1038 : 40                         lde
       1039 : 3D                         xppc    P1              ; call putchar
       103A : C4 20                      ldi     ' '             ; space
       103C : 3D                         xppc    P1              ; call putchar
       103D : C4 68                      ldi     l(addr(put_hex8))
       103F : 31                         xpal    P1
       1040 : C4 10                      ldi     h(addr(put_hex8))
       1042 : 35                         xpah    P1
       1043 : 3D                         xppc    P1              ; call put_hex8
       1044 : C4 1B                      ldi     l(addr(putchar))
       1046 : 31                         xpal    P1
       1047 : C4 11                      ldi     h(addr(putchar))
       1049 : 35                         xpah    P1
       104A : C4 20                      ldi     ' '             ; space
       104C : 3D                         xppc    P1              ; call putchar
       104D : C4 C5                      ldi     l(addr(put_bin8))
       104F : 31                         xpal    P1
       1050 : C4 10                      ldi     h(addr(put_bin8))
       1052 : 35                         xpah    P1
       1053 : 3D                         xppc    P1              ; call put_bin8
       1054 : C4 1B                      ldi     l(addr(putchar))
       1056 : 31                         xpal    P1
       1057 : C4 11                      ldi     h(addr(putchar))
       1059 : 35                         xpah    P1
       105A : C4 0D                      ldi     '\r'
       105C : 3D                         xppc    P1              ; call putchar
       105D : C4 0A                      ldi     '\n'
       105F : 3D                         xppc    P1              ; call putchar
       1060 : 90 C7                      jmp     loop
       1062 :
       1062 :                    ;;; Print uint8_t in hex
       1062 :                    ;;; @param E uint8_t value to be printed in hex.
       1062 :                    put_hex8_exit:
       1062 : C6 01                      ld      @1(P2)          ; pop P1
       1064 : 31                         xpal    P1
       1065 : C6 01                      ld      @1(P2)
       1067 : 35                         xpah    P1
       1068 : 3D                         xppc    P1
       1069 :                    put_hex8:
       1069 : C4 11                      ldi     h(addr(putchar))
       106B : 35                         xpah    P1
       106C : CE FF                      st      @-1(P2)         ; push P1
       106E : C4 1B                      ldi     l(addr(putchar))
       1070 : 31                         xpal    P1
       1071 : CE FF                      st      @-1(P2)
       1073 : C4 30                      ldi     '0'
       1075 : 3D                         xppc    P1              ; call putchar
       1076 : C4 78                      ldi     'x'
       1078 : 3D                         xppc    P1              ; call putchar
       1079 : C4 97                      ldi     l(addr(put_hex4))
       107B : 31                         xpal    P1
       107C : C4 10                      ldi     h(addr(put_hex4))
       107E : 35                         xpah    P1
       107F : 40                         lde
       1080 : CE FF                      st      @-1(P2)         ; push E
       1082 : 1C                         sr
       1083 : 1C                         sr
       1084 : 1C                         sr
       1085 : 1C                         sr
       1086 : 01                         xae
       1087 : 3D                         xppc    P1              ; call put_hex4
       1088 : C6 01                      ld      @1(P2)          ; pop E
       108A : 01                         xae
       108B : 3D                         xppc    P1              ; call put_hex4
       108C : 90 D4                      jmp     put_hex8_exit
       108E :
       108E :                    put_hex4_exit:
       108E : C6 01                      ld      @1(P2)          ; pop P1
       1090 : 31                         xpal    P1
       1091 : C6 01                      ld      @1(P2)
       1093 : 35                         xpah    P1
       1094 : C6 01                      ld      @1(P2)          ; pop E
       1096 : 01                         xae
       1097 : 3D                         xppc    P1
       1098 :                    put_hex4:
       1098 : 40                         lde
       1099 : CE FF                      st      @-1(P2)         ; push E
       109B : D4 0F                      ani     0xf
       109D : 01                         xae                     ; E=4 bit data
       109E : C4 11                      ldi     h(addr(putchar))
       10A0 : 35                         xpah    P1
       10A1 : CE FF                      st      @-1(P2)         ; push P1
       10A3 : C4 1B                      ldi     l(addr(putchar))
       10A5 : 31                         xpal    P1
       10A6 : CE FF                      st      @-1(P2)
       10A8 : 40                         lde
       10A9 : 03                         scl
       10AA : FC 0A                      cai     10
       10AC : 06                         csa
       10AD : 02                         ccl
       10AE : 94 06                      jp      put_hex4_dec    ; branch if A<10
       10B0 : 40                         lde
       10B1 : F4 37                      adi     'A'-10
       10B3 : 3D                         xppc    P1              ; call putchar
       10B4 : 90 D8                      jmp     put_hex4_exit
       10B6 :                    put_hex4_dec:
       10B6 : 40                         lde
       10B7 : F4 30                      adi     '0'
       10B9 : 3D                         xppc    P1              ; call putchar
       10BA : 90 D2                      jmp     put_hex4_exit
       10BC :
       10BC :                    ;;; Print uint8_t in binary
       10BC :                    ;;; @param E uint8_t value to be printed in binary.
       10BC :                    put_bin8_exit:
       10BC : C6 01                      ld      @1(P2)          ; pop P1
       10BE : 31                         xpal    P1
       10BF : C6 01                      ld      @1(P2)
       10C1 : 35                         xpah    P1
       10C2 : C6 01                      ld      @1(P2)          ; pop E
       10C4 : 01                         xae
       10C5 : 3D                         xppc    P1
       10C6 :                    put_bin8:
       10C6 : 40                         lde
       10C7 : CE FF                      st      @-1(P2)         ; push E
       10C9 : C4 11                      ldi     h(addr(putchar))
       10CB : 35                         xpah    P1
       10CC : CE FF                      st      @-1(P2)         ; push P1
       10CE : C4 1B                      ldi     l(addr(putchar))
       10D0 : 31                         xpal    P1
       10D1 : CE FF                      st      @-1(P2)
       10D3 : C4 30                      ldi     '0'
       10D5 : 3D                         xppc    P1              ; call putchar
       10D6 : C4 62                      ldi     'b'
       10D8 : 3D                         xppc    P1              ; call putchar
       10D9 : C4 08                      ldi     8
       10DB : CE FF                      st      @-1(P2)         ; bit count
       10DD :                    put_bin8_loop:
       10DD : 40                         lde
       10DE : 94 04                      jp      put_bin8_zero
       10E0 : C4 31                      ldi     '1'
       10E2 : 90 02                      jmp     put_bin8_char
       10E4 :                    put_bin8_zero:
       10E4 : C4 30                      ldi     '0'
       10E6 :                    put_bin8_char:
       10E6 : 3D                         xppc    P1              ; call putchar
       10E7 : 40                         lde
       10E8 : 70                         ade
       10E9 : 01                         xae                     ; E<<=1
       10EA : BA 00                      dld     0(P2)           ; decrement bit count
       10EC : 9C EF                      jnz     put_bin8_loop
       10EE : C6 01                      ld      @1(P2)          ; discard bit count
       10F0 : 90 CA                      jmp     put_bin8_exit
       10F2 :
       10F2 :                    ;;; Get character
       10F2 :                    ;;; @return E char
       10F2 :                    ;;; @return A 0 if no char received
       10F2 :                    getchar_exit:
       10F2 : C6 01                      ld      @1(P2)          ; pop P1
       10F4 : 31                         xpal    P1
       10F5 : C6 01                      ld      @1(P2)
       10F7 : 35                         xpah    P1
       10F8 : C6 01                      ld      @1(P2)          ; pop return value
       10FA : 3D                         xppc    P1
       10FB :                    getchar:
       10FB : CE FF                      st      @-1(P2)         ; for return value
       10FD : C4 11                      ldi     h(addr(queue_remove))
       10FF : 35                         xpah    P1
       1100 : CE FF                      st      @-1(P2)         ; push P1
       1102 : C4 E3                      ldi     l(addr(queue_remove))
       1104 : 31                         xpal    P1
       1105 : CE FF                      st      @-1(P2)
       1107 : 04                         dint                    ; disable IRQ
       1108 : 3D                         xppc    P1              ; call queue_remove
       1109 : 00 20                      dw      rx_queue
       110B : 05                         ien                     ; enable IRQ
       110C : CA 02                      st      2(P2)           ; save return value
       110E : 90 E2                      jmp     getchar_exit
       1110 :
       1110 :                    ;;; Put character
       1110 :                    ;;; @param A char
       1110 :                    putchar_exit:
       1110 : C6 01                      ld      @1(P2)          ; pop P1
       1112 : 31                         xpal    P1
       1113 : C6 01                      ld      @1(P2)
       1115 : 35                         xpah    P1
       1116 : C6 01                      ld      @1(P2)          ; pop E
       1118 : 01                         xae
       1119 : C6 01                      ld      @1(P2)          ; pop A
       111B : 3D                         xppc    P1
       111C :                    putchar:
       111C : CE FF                      st      @-1(P2)         ; push A
       111E : 40                         lde
       111F : CE FF                      st      @-1(P2)         ; push E
       1121 : C4 11                      ldi     h(addr(queue_add))
       1123 : 35                         xpah    P1
       1124 : CE FF                      st      @-1(P2)         ; push P1
       1126 : C4 96                      ldi     l(addr(queue_add))
       1128 : 31                         xpal    P1
       1129 : CE FF                      st      @-1(P2)
       112B : C2 03                      ld      3(P2)           ; restore char
       112D : 01                         xae
       112E :                    putchar_retry:
       112E : 04                         dint                    ; disable interrupt
       112F : 3D                         xppc    P1              ; call queue_add
       1130 : 10 20                      dw      tx_queue
       1132 : 05                         ien                     ; enable interrupt
       1133 : 98 F9                      jz      putchar_retry   ; queue is full
       1135 : 04                         dint                    ; disable interrupt
       1136 : C4 40                      ldi     tx_int_control & 0xff
       1138 : 31                         xpal    p1
       1139 : C4 20                      ldi     h(tx_int_control)
       113B : 35                         xpah    p1
       113C : C1 00                      ld      0(P1)           ; check tx interrupt state
       113E : 9C 0C                      jnz     putchar_return
       1140 : A9 00                      ild     0(P1)           ; Tx interrupt is enabled
       1142 : C4 00                      ldi     l(ACIA)
       1144 : 31                         xpal    P1
       1145 : C4 DF                      ldi     h(ACIA)
       1147 : 35                         xpah    P1
       1148 : C4 B4                      ldi     RX_INT_TX_INT   ; enable Tx interrupt
       114A : C9 00                      st      ACIA_C(P1)
       114C :                    putchar_return:
       114C : 05                         ien                     ; enable interrupt
       114D : 90 C1                      jmp     putchar_exit
       114F :
       114F :                            include "queue.inc"
(1)    114F :                    ;;; [queue] queue structure
(1)    114F : =0                 queue_len:      equ     0       ; queue length
(1)    114F : =1                 queue_size:     equ     1       ; buffer size
(1)    114F : =2                 queue_put:      equ     2       ; queue put index
(1)    114F : =3                 queue_get:      equ     3       ; queue get index
(1)    114F : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    114F :
(1)    114F :                    ;;; [queue] Initialize queue
(1)    114F :                    ;;; @param A queue space size
(1)    114F :                    ;;; @param P1 return address pointer
(1)    114F :                    ;;; @param P1[1:2] queue space pointer
(1)    114F :                    ;;; @clobber A
(1)    114F :                    queue_init_exit:
(1)    114F : C6 01                      ld      @1(P2)          ; pop P1
(1)    1151 : 31                         xpal    P1
(1)    1152 : C6 01                      ld      @1(P2)
(1)    1154 : 35                         xpah    P1
(1)    1155 : C6 01                      ld      @1(P2)          ; discard work area
(1)    1157 : 3D                         xppc    P1
(1)    1158 :                    queue_init:
(1)    1158 : CE FF                      st      @-1(P2)         ; save queue space size
(1)    115A : C5 01                      ld      @1(P1)          ; advance to queue space pointer
(1)    115C : C5 01                      ld      @1(P1)          ; load queue work space pointer (le16)
(1)    115E : CE FE                      st      @-2(P2)         ; save lo(queue space)
(1)    1160 : C1 00                      ld      0(P1)
(1)    1162 : 35                         xpah    P1
(1)    1163 : CA 01                      st      1(P2)           ; P[1:0] push P1
(1)    1165 : C2 00                      ld      0(P2)
(1)    1167 : 31                         xpal    P1              ; P1=queue space pointer
(1)    1168 : CA 00                      st      0(P2)
(1)    116A : C4 00                      ldi     0
(1)    116C : C9 00                      st      queue_len(P1)   ; clear queue_len
(1)    116E : C9 02                      st      queue_put(P1)
(1)    1170 : C9 03                      st      queue_get(P1)
(1)    1172 : C2 02                      ld      2(P2)           ; queue space size
(1)    1174 : 03                         scl
(1)    1175 : FC 04                      cai     queue_buf
(1)    1177 : C9 01                      st      queue_size(P1)
(1)    1179 : CA 02                      st      2(P2)           ; counter
(1)    117B : C5 04                      ld      @queue_buf(P1)  ; advanced pointer
(1)    117D :                    queue_init_loop:
(1)    117D : C4 00                      ldi     0
(1)    117F : CD 01                      st      @1(P1)
(1)    1181 : BA 02                      dld     2(P2)
(1)    1183 : 9C F8                      jnz     queue_init_loop
(1)    1185 : 90 C8                      jmp     queue_init_exit
(1)    1187 :
(1)    1187 :                    ;;; [queue] Add an element to queue
(1)    1187 :                    ;;; @param E an element
(1)    1187 :                    ;;; @param P1 return address pointer
(1)    1187 :                    ;;; @param P1[1:2] queue space pointer
(1)    1187 :                    ;;; @return E an element
(1)    1187 :                    ;;; @return A 0 if queue is full
(1)    1187 :                    ;;; @clobber P1
(1)    1187 :                    queue_add_exit:
(1)    1187 : CA 05                      st      5(P2)           ; P2[5] return flag
(1)    1189 : C6 02                      ld      @2(P2)          ; discard queue space pointer
(1)    118B : C6 01                      ld      @1(P2)          ; pop P1
(1)    118D : 31                         xpal    P1
(1)    118E : C6 01                      ld      @1(P2)
(1)    1190 : 35                         xpah    P1
(1)    1191 : C6 01                      ld      @1(P2)          ; restore E
(1)    1193 : 01                         xae
(1)    1194 : C6 01                      ld      @1(P2)          ; return flag
(1)    1196 : 3D                         xppc    P1
(1)    1197 :                    queue_add:
(1)    1197 : C5 01                      ld      @1(P1)          ; advanced to queue space pointer
(1)    1199 : C5 01                      ld      @1(P1)          ; load queue space pointer (le16)
(1)    119B : CE FA                      st      @-6(P2)         ; param, P1, elem, return flag
(1)    119D : C1 00                      ld      0(P1)
(1)    119F : CA 01                      st      1(P2)           ; P2[1:0] queue space pointer
(1)    11A1 : 35                         xpah    P1
(1)    11A2 : CA 03                      st      3(P2)           ; P2[3:2] saved P1
(1)    11A4 : C2 00                      ld      0(P2)
(1)    11A6 : 31                         xpal    P1
(1)    11A7 : CA 02                      st      2(P2)
(1)    11A9 : 40                         lde
(1)    11AA : CA 04                      st      4(P2)           ; P2[4] save an element
(1)    11AC : C1 00                      ld      queue_len(P1)
(1)    11AE : E1 01                      xor     queue_size(P1)
(1)    11B0 : 98 D5                      jz      queue_add_exit  ; queue is full, A=0
(1)    11B2 :                    queue_not_full:
(1)    11B2 : A9 00                      ild     queue_len(P1)    ; update queue_len
(1)    11B4 : C2 00                      ld      0(P2)
(1)    11B6 : 02                         ccl
(1)    11B7 : F1 02                      add     queue_put(P1)
(1)    11B9 : 01                         xae
(1)    11BA : C2 01                      ld      1(P2)
(1)    11BC : F4 00                      adi     0
(1)    11BE : 35                         xpah    P1
(1)    11BF : 01                         xae
(1)    11C0 : 31                         xpal    P1
(1)    11C1 : C2 04                      ld      4(P2)           ; an element
(1)    11C3 : C9 04                      st      queue_buf(P1)   ; store element
(1)    11C5 : C2 00                      ld      0(P2)
(1)    11C7 : 31                         xpal    P1
(1)    11C8 : C2 01                      ld      1(P2)
(1)    11CA : 35                         xpah    P1
(1)    11CB : A9 02                      ild     queue_put(P1)   ; advanced queue_put
(1)    11CD : E1 01                      xor     queue_size(P1)
(1)    11CF : 9C 02                      jnz     queue_add_end   ; branch if queue_put != queue_size
(1)    11D1 : C9 02                      st      queue_put(P1)   ; reset queue_put
(1)    11D3 :                    queue_add_end:
(1)    11D3 : C4 01                      ldi     1
(1)    11D5 : 90 B0                      jmp     queue_add_exit  ; an element added, A=1
(1)    11D7 :
(1)    11D7 :                    ;;; [queue] Remove an element from queue
(1)    11D7 :                    ;;; @param P1 return address pointer
(1)    11D7 :                    ;;; @param P1[1:2] queue space pointer
(1)    11D7 :                    ;;; @return E an element
(1)    11D7 :                    ;;; @return A 0 if queue is empty
(1)    11D7 :                    ;;; @clobber P1
(1)    11D7 :                    queue_remove_exit:
(1)    11D7 : CA 04                      st      4(P2)           ; return flag
(1)    11D9 : C6 02                      ld      @2(P2)          ; discard work area
(1)    11DB : C6 01                      ld      @1(P2)          ; pop P1
(1)    11DD : 31                         xpal    P1
(1)    11DE : C6 01                      ld      @1(P2)
(1)    11E0 : 35                         xpah    P1
(1)    11E1 : C6 01                      ld      @1(P2)          ; return flag
(1)    11E3 : 3D                         xppc    P1              ; return
(1)    11E4 :                    queue_remove:
(1)    11E4 : C5 01                      ld      @1(P1)          ; advanced to queue space pointer
(1)    11E6 : C5 01                      ld      @1(P1)          ; load queue space pointer (le16)
(1)    11E8 : CE FB                      st      @-5(P2)         ; param, P1, return flag
(1)    11EA : C1 00                      ld      0(P1)
(1)    11EC : CA 01                      st      1(P2)           ; P2[1:0] queue space pointer
(1)    11EE : 35                         xpah    P1
(1)    11EF : CA 03                      st      3(P2)           ; P2[3:2] saved P1
(1)    11F1 : C2 00                      ld      0(P2)
(1)    11F3 : 31                         xpal    P1
(1)    11F4 : CA 02                      st      2(P2)
(1)    11F6 : C1 00                      ld      queue_len(P1)
(1)    11F8 : 98 DD                      jz      queue_remove_exit ; queue is empty, A=0
(1)    11FA :                    queue_not_empty:
(1)    11FA : B9 00                      dld     queue_len(P1)    ; update queue_len
(1)    11FC : C2 00                      ld      0(P2)
(1)    11FE : 02                         ccl
(1)    11FF : F1 03                      add     queue_get(P1)
(1)    1201 : 01                         xae
(1)    1202 : C2 01                      ld      1(P2)
(1)    1204 : F4 00                      adi     0
(1)    1206 : 35                         xpah    P1
(1)    1207 : 40                         lde
(1)    1208 : 31                         xpal    P1
(1)    1209 : C1 04                      ld      queue_buf(P1)   ; load element
(1)    120B : 01                         xae                     ; E=element
(1)    120C : C2 00                      ld      0(P2)
(1)    120E : 31                         xpal    P1
(1)    120F : C2 01                      ld      1(P2)
(1)    1211 : 35                         xpah    P1
(1)    1212 : A9 03                      ild     queue_get(P1)   ; advanced queue_get
(1)    1214 : E1 01                      xor     queue_size(P1)
(1)    1216 : 9C 02                      jnz     queue_remove_end ; branch if queue_put != queue_size
(1)    1218 : C9 03                      st      queue_get(P1)   ; reset queue_get
(1)    121A :                    queue_remove_end:
(1)    121A : C4 01                      ldi     1
(1)    121C : 90 B9                      jmp     queue_remove_exit
(1)    121E :
(1)    121E :                    ;;; Local Variables:
(1)    121E :                    ;;; mode: asm
(1)    121E :                    ;;; End:
(1)    121E :                    ;;; vim: set ft=asm et ts=4 sw=4:
       121E :
       121E :                    isr_sensea_exit:
       121E : C6 01                      ld      @1(P2)          ; pop P1
       1220 : 31                         xpal    P1
       1221 : C6 01                      ld      @1(P2)
       1223 : 35                         xpah    P1
       1224 : C6 01                      ld      @1(P2)          ; pop E
       1226 : 01                         xae
       1227 : C6 01                      ld      @1(P2)          ; pop D
       1229 : 05                         ien                     ; enable interrupt
       122A : 3F                         xppc    P3              ; return from interrupt
       122B :                    isr_sensea:
       122B : CE FF                      st      @-1(P2)         ; save A
       122D : 40                         lde
       122E : CE FF                      st      @-1(P2)         ; save E
       1230 : C4 DF                      ldi     h(ACIA)
       1232 : 35                         xpah    P1
       1233 : CE FF                      st      @-1(P2)
       1235 : C4 00                      ldi     l(ACIA)     ; save P1 and load P1
       1237 : 31                         xpal    P1
       1238 : CE FF                      st      @-1(P2)
       123A : C1 00                      ld      ACIA_S(P1)
       123C : 01                         xae
       123D : 40                         lde
       123E : D4 70                      ani     FERR_bm|OVRN_bm|PERR_bm
       1240 : 98 02                      jz      isr_receive
       1242 : C1 01                      ld      ACIA_D(P1)      ; clear errors
       1244 :                    isr_receive:
       1244 : 40                         lde
       1245 : D4 01                      ani     RDRF_bm
       1247 : 98 11                      jz      isr_send
       1249 : C1 01                      ld      ACIA_D(P1)      ; receive character
       124B : 01                         xae                     ; E=char
       124C : CE FF                      st      @-1(P2)         ; push ACIA status
       124E : C4 96                      ldi     l(addr(queue_add))
       1250 : 31                         xpal    P1
       1251 : C4 11                      ldi     h(addr(queue_add))
       1253 : 35                         xpah    P1
       1254 : 3D                         xppc    P1              ; call queue_add
       1255 : 00 20                      dw      rx_queue
       1257 : C6 01                      ld      @1(P2)          ; pop ACIA status
       1259 : 01                         xae
       125A :                    isr_send:
       125A : 40                         lde
       125B : D4 02                      ani     TDRE_bm
       125D : 98 BF                      jz      isr_sensea_exit
       125F : C4 E3                      ldi     l(addr(queue_remove))
       1261 : 31                         xpal    P1
       1262 : C4 11                      ldi     h(addr(queue_remove))
       1264 : 35                         xpah    P1
       1265 : 3D                         xppc    P1              ; call queue_remove
       1266 : 10 20                      dw      tx_queue
       1268 : 98 0B                      jz      isr_send_empty
       126A : C4 00                      ldi     l(ACIA)
       126C : 31                         xpal    P1
       126D : C4 DF                      ldi     h(ACIA)
       126F : 35                         xpah    P1
       1270 : 40                         lde
       1271 : C9 01                      st      ACIA_D(P1)      ; send character
       1273 : 90 A9                      jmp     isr_sensea_exit
       1275 :                    isr_send_empty:
       1275 : C4 00                      ldi     l(ACIA)
       1277 : 31                         xpal    P1
       1278 : C4 DF                      ldi     h(ACIA)
       127A : 35                         xpah    P1
       127B : C4 94                      ldi     RX_INT_TX_NO
       127D : C9 00                      st      ACIA_C(P1)      ; disable Tx interrupt
       127F : C4 40                      ldi     tx_int_control & 0xff
       1281 : 31                         xpal    P1
       1282 : C4 20                      ldi     h(tx_int_control)
       1284 : 35                         xpah    P1
       1285 : C4 00                      ldi     0
       1287 : C9 00                      st      0(P1)           ; mark Tx interrupt disabled
       1289 : 90 93                      jmp     isr_sensea_exit
       128B :
          1 :                            org     ORG_RESTART
          1 : C4 FF                      ldi     l(stack)
          3 : 32                         xpal    P2
          4 : C4 0F                      ldi     h(stack)
          6 : 36                         xpah    P2
          7 : C4 2A                      ldi     l(addr(isr_sensea))
          9 : 33                         xpal    P3              ; setup interrupt entry P3
          A : C4 12                      ldi     h(addr(isr_sensea))
          C : 37                         xpah    P3
          D : C4 FF                      ldi     l(addr(initialize))
          F : 31                         xpal    P1
         10 : C4 1F                      ldi     h(addr(initialize))
         12 : 35                         xpah    P1
         13 : 3D                         xppc    P1

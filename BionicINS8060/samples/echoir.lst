          0 :                            cpu     ins8060
          0 :                            include "ins8060.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; INS8060
(1)       0 :                    ;;; Status Register
(1)       0 : =80                S_CY:   equ     0x80            ; Carry bit
(1)       0 : =80                S_L:    equ     0x80            ; Link bit
(1)       0 : =40                S_OV:   equ     0x40            ; Overflow bit
(1)       0 : =20                S_SB:   equ     0x20            ; Sense B bit
(1)       0 : =10                S_SA:   equ     0x10            ; Sense A bit
(1)       0 : =8                 S_IE:   equ     0x08            ; Interrupt Enable bit
(1)       0 : =4                 S_F2:   equ     0x04            ; Flag 2 bit
(1)       0 : =2                 S_F1:   equ     0x02            ; Flag 1 bit
(1)       0 : =1                 S_F0:   equ     0x01            ; Flag 0 bit
(1)       0 :
(1)       0 :                    ;;; Dynamic Offset by E register
(1)       0 : =80                OFFSET_E:       equ     0x80    ; offset by E register
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =1                 ORG_RESTART:    equ     0x0001  ; Restart transfer location
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     0xDF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     0b11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     0b00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     0b00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     0b00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     0b00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     0b00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     0b00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     0b00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     0b00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     0b00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     0b00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     0b00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     0b00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     0b00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     0b01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     0b00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     0b00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     0b01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     0b01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     0b10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     0b00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     0b00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     0b00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     0b00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     0b00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     0b00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     0b01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     0b10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 : =0                 ACIA_C: equ     0               ; ACIA control offset
          0 : =0                 ACIA_S: equ     0               ; ACIA status offset
          0 : =1                 ACIA_D: equ     1               ; ACIA data register offset
          0 :
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
          0 : =10                rx_queue_size:  equ     16
          0 : =30                tx_queue_size:  equ     48
          0 :
       2000 :                            org     0x2000
       2000 :                    rx_queue:
       2000 :                            ds      rx_queue_size
       2010 :                    tx_queue:
       2010 :                            ds      tx_queue_size
       2040 :
       1000 :                            org     0x1000
       1000 : =FFF               stack:  equ     $-1
       1000 :                    initialize:
       1000 : C4 5C                      ldi     l(addr(queue_init))
       1002 : 31                         xpal    P1
       1003 : C4 10                      ldi     h(addr(queue_init))
       1005 : 35                         xpah    P1
       1006 : C4 10                      ldi     rx_queue_size
       1008 : 3D                         xppc    P1              ; call queue_init
       1009 : 00 20                      dw      rx_queue
       100B :
       100B :                            ;; initialize ACIA
       100B : C4 00                      ldi     l(ACIA)
       100D : 31                         xpal    P1
       100E : C4 DF                      ldi     h(ACIA)
       1010 : 35                         xpah    P1
       1011 : C4 03                      ldi     CDS_RESET_gc    ; Master reset
       1013 : C9 00                      st      ACIA_C(P1)
       1015 : C4 94                      ldi     RX_INT_TX_NO   ; 8 bits + No Parity + 1 Stop Bits
       1017 :                                                    ; Transmit, Receive interrupts disabled
       1017 : C9 00                      st      ACIA_C(P1)
       1019 : 05                         ien                     ; enable interrupt
       101A :
       101A :                    loop:
       101A : C4 E8                      ldi     l(addr(queue_remove))
       101C : 31                         xpal    P1
       101D : C4 10                      ldi     h(addr(queue_remove))
       101F : 35                         xpah    P1
       1020 : 04                         dint                    ; Disable IRQ
       1021 : 3D                         xppc    P1              ; call queue_remote
       1022 : 00 20                      dw      rx_queue
       1024 : 05                         ien                     ; Enable IRQ
       1025 : 98 F3                      jz      loop
       1027 :                    echo:
       1027 : C4 38                      ldi     l(addr(putchar))
       1029 : 31                         xpal    p1
       102A : C4 10                      ldi     h(addr(putchar))
       102C : 35                         xpah    p1
       102D : 3D                         xppc    p1
       102E : 40                         lde
       102F : E4 0D                      xri     0x0D            ; carriage return
       1031 : 9C E7                      jnz     loop
       1033 : C4 0A                      ldi     0x0A
       1035 : 01                         xae                     ; E=newline
       1036 : 90 EF                      jmp     echo
       1038 :
       1038 :                    ;;; @param E char
       1038 :                    putchar_exit:
       1038 : 3D                         xppc    P1              ; return
       1039 :                    putchar:
       1039 : C4 DF                      ldi     h(ACIA)
       103B : 35                         xpah    P1
       103C : CE FF                      st      @-1(P2)
       103E : C4 00                      ldi     l(ACIA)     ; save P1 and load P1
       1040 : 31                         xpal    P1
       1041 : CE FF                      st      @-1(P2)
       1043 :                    transmit_loop:
       1043 : C1 00                      ld      ACIA_S(P1)
       1045 : D4 02                      ani     TDRE_bm
       1047 : 98 FA                      jz      transmit_loop
       1049 :                    transmit_data:
       1049 : 40                         lde
       104A : C9 01                      st      ACIA_D(P1)
       104C : C6 01                      ld      @1(P2)
       104E : 31                         xpal    P1
       104F : C6 01                      ld      @1(P2)          ; restore P1
       1051 : 35                         xpah    P1
       1052 : 90 E4                      jmp     putchar_exit
       1054 :
       1054 :                            include "queue.inc"
(1)    1054 :                    ;;; [queue] queue structure
(1)    1054 : =0                 queue_len:      equ     0       ; queue length
(1)    1054 : =1                 queue_size:     equ     1       ; buffer size
(1)    1054 : =2                 queue_put:      equ     2       ; queue put index
(1)    1054 : =3                 queue_get:      equ     3       ; queue get index
(1)    1054 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    1054 :
(1)    1054 :                    ;;; [queue] Initialize queue
(1)    1054 :                    ;;; @param A queue space size
(1)    1054 :                    ;;; @param P1 return address pointer
(1)    1054 :                    ;;; @param P1[1:2] queue space pointer
(1)    1054 :                    ;;; @clobber A
(1)    1054 :                    queue_init_exit:
(1)    1054 : C6 01                      ld      @1(P2)          ; pop P1
(1)    1056 : 31                         xpal    P1
(1)    1057 : C6 01                      ld      @1(P2)
(1)    1059 : 35                         xpah    P1
(1)    105A : C6 01                      ld      @1(P2)          ; discard work area
(1)    105C : 3D                         xppc    P1
(1)    105D :                    queue_init:
(1)    105D : CE FF                      st      @-1(P2)         ; save queue space size
(1)    105F : C5 01                      ld      @1(P1)          ; advance to queue space pointer
(1)    1061 : C5 01                      ld      @1(P1)          ; load queue work space pointer (le16)
(1)    1063 : CE FE                      st      @-2(P2)         ; save lo(queue space)
(1)    1065 : C1 00                      ld      0(P1)
(1)    1067 : 35                         xpah    P1
(1)    1068 : CA 01                      st      1(P2)           ; P[1:0] push P1
(1)    106A : C2 00                      ld      0(P2)
(1)    106C : 31                         xpal    P1              ; P1=queue space pointer
(1)    106D : CA 00                      st      0(P2)
(1)    106F : C4 00                      ldi     0
(1)    1071 : C9 00                      st      queue_len(P1)   ; clear queue_len
(1)    1073 : C9 02                      st      queue_put(P1)
(1)    1075 : C9 03                      st      queue_get(P1)
(1)    1077 : C2 02                      ld      2(P2)           ; queue space size
(1)    1079 : 03                         scl
(1)    107A : FC 04                      cai     queue_buf
(1)    107C : C9 01                      st      queue_size(P1)
(1)    107E : CA 02                      st      2(P2)           ; counter
(1)    1080 : C5 04                      ld      @queue_buf(P1)  ; advanced pointer
(1)    1082 :                    queue_init_loop:
(1)    1082 : C4 00                      ldi     0
(1)    1084 : CD 01                      st      @1(P1)
(1)    1086 : BA 02                      dld     2(P2)
(1)    1088 : 9C F8                      jnz     queue_init_loop
(1)    108A : 90 C8                      jmp     queue_init_exit
(1)    108C :
(1)    108C :                    ;;; [queue] Add an element to queue
(1)    108C :                    ;;; @param E an element
(1)    108C :                    ;;; @param P1 return address pointer
(1)    108C :                    ;;; @param P1[1:2] queue space pointer
(1)    108C :                    ;;; @return E an element
(1)    108C :                    ;;; @return A 0 if queue is full
(1)    108C :                    ;;; @clobber P1
(1)    108C :                    queue_add_exit:
(1)    108C : CA 05                      st      5(P2)           ; P2[5] return flag
(1)    108E : C6 02                      ld      @2(P2)          ; discard queue space pointer
(1)    1090 : C6 01                      ld      @1(P2)          ; pop P1
(1)    1092 : 31                         xpal    P1
(1)    1093 : C6 01                      ld      @1(P2)
(1)    1095 : 35                         xpah    P1
(1)    1096 : C6 01                      ld      @1(P2)          ; restore E
(1)    1098 : 01                         xae
(1)    1099 : C6 01                      ld      @1(P2)          ; return flag
(1)    109B : 3D                         xppc    P1
(1)    109C :                    queue_add:
(1)    109C : C5 01                      ld      @1(P1)          ; advanced to queue space pointer
(1)    109E : C5 01                      ld      @1(P1)          ; load queue space pointer (le16)
(1)    10A0 : CE FA                      st      @-6(P2)         ; param, P1, elem, return flag
(1)    10A2 : C1 00                      ld      0(P1)
(1)    10A4 : CA 01                      st      1(P2)           ; P2[1:0] queue space pointer
(1)    10A6 : 35                         xpah    P1
(1)    10A7 : CA 03                      st      3(P2)           ; P2[3:2] saved P1
(1)    10A9 : C2 00                      ld      0(P2)
(1)    10AB : 31                         xpal    P1
(1)    10AC : CA 02                      st      2(P2)
(1)    10AE : 40                         lde
(1)    10AF : CA 04                      st      4(P2)           ; P2[4] save an element
(1)    10B1 : C1 00                      ld      queue_len(P1)
(1)    10B3 : E1 01                      xor     queue_size(P1)
(1)    10B5 : 98 D5                      jz      queue_add_exit  ; queue is full, A=0
(1)    10B7 :                    queue_not_full:
(1)    10B7 : A9 00                      ild     queue_len(P1)    ; update queue_len
(1)    10B9 : C2 00                      ld      0(P2)
(1)    10BB : 02                         ccl
(1)    10BC : F1 02                      add     queue_put(P1)
(1)    10BE : 01                         xae
(1)    10BF : C2 01                      ld      1(P2)
(1)    10C1 : F4 00                      adi     0
(1)    10C3 : 35                         xpah    P1
(1)    10C4 : 01                         xae
(1)    10C5 : 31                         xpal    P1
(1)    10C6 : C2 04                      ld      4(P2)           ; an element
(1)    10C8 : C9 04                      st      queue_buf(P1)   ; store element
(1)    10CA : C2 00                      ld      0(P2)
(1)    10CC : 31                         xpal    P1
(1)    10CD : C2 01                      ld      1(P2)
(1)    10CF : 35                         xpah    P1
(1)    10D0 : A9 02                      ild     queue_put(P1)   ; advanced queue_put
(1)    10D2 : E1 01                      xor     queue_size(P1)
(1)    10D4 : 9C 02                      jnz     queue_add_end   ; branch if queue_put != queue_size
(1)    10D6 : C9 02                      st      queue_put(P1)   ; reset queue_put
(1)    10D8 :                    queue_add_end:
(1)    10D8 : C4 01                      ldi     1
(1)    10DA : 90 B0                      jmp     queue_add_exit  ; an element added, A=1
(1)    10DC :
(1)    10DC :                    ;;; [queue] Remove an element from queue
(1)    10DC :                    ;;; @param P1 return address pointer
(1)    10DC :                    ;;; @param P1[1:2] queue space pointer
(1)    10DC :                    ;;; @return E an element
(1)    10DC :                    ;;; @return A 0 if queue is empty
(1)    10DC :                    ;;; @clobber P1
(1)    10DC :                    queue_remove_exit:
(1)    10DC : CA 04                      st      4(P2)           ; return flag
(1)    10DE : C6 02                      ld      @2(P2)          ; discard work area
(1)    10E0 : C6 01                      ld      @1(P2)          ; pop P1
(1)    10E2 : 31                         xpal    P1
(1)    10E3 : C6 01                      ld      @1(P2)
(1)    10E5 : 35                         xpah    P1
(1)    10E6 : C6 01                      ld      @1(P2)          ; return flag
(1)    10E8 : 3D                         xppc    P1              ; return
(1)    10E9 :                    queue_remove:
(1)    10E9 : C5 01                      ld      @1(P1)          ; advanced to queue space pointer
(1)    10EB : C5 01                      ld      @1(P1)          ; load queue space pointer (le16)
(1)    10ED : CE FB                      st      @-5(P2)         ; param, P1, return flag
(1)    10EF : C1 00                      ld      0(P1)
(1)    10F1 : CA 01                      st      1(P2)           ; P2[1:0] queue space pointer
(1)    10F3 : 35                         xpah    P1
(1)    10F4 : CA 03                      st      3(P2)           ; P2[3:2] saved P1
(1)    10F6 : C2 00                      ld      0(P2)
(1)    10F8 : 31                         xpal    P1
(1)    10F9 : CA 02                      st      2(P2)
(1)    10FB : C1 00                      ld      queue_len(P1)
(1)    10FD : 98 DD                      jz      queue_remove_exit ; queue is empty, A=0
(1)    10FF :                    queue_not_empty:
(1)    10FF : B9 00                      dld     queue_len(P1)    ; update queue_len
(1)    1101 : C2 00                      ld      0(P2)
(1)    1103 : 02                         ccl
(1)    1104 : F1 03                      add     queue_get(P1)
(1)    1106 : 01                         xae
(1)    1107 : C2 01                      ld      1(P2)
(1)    1109 : F4 00                      adi     0
(1)    110B : 35                         xpah    P1
(1)    110C : 40                         lde
(1)    110D : 31                         xpal    P1
(1)    110E : C1 04                      ld      queue_buf(P1)   ; load element
(1)    1110 : 01                         xae                     ; E=element
(1)    1111 : C2 00                      ld      0(P2)
(1)    1113 : 31                         xpal    P1
(1)    1114 : C2 01                      ld      1(P2)
(1)    1116 : 35                         xpah    P1
(1)    1117 : A9 03                      ild     queue_get(P1)   ; advanced queue_get
(1)    1119 : E1 01                      xor     queue_size(P1)
(1)    111B : 9C 02                      jnz     queue_remove_end ; branch if queue_put != queue_size
(1)    111D : C9 03                      st      queue_get(P1)   ; reset queue_get
(1)    111F :                    queue_remove_end:
(1)    111F : C4 01                      ldi     1
(1)    1121 : 90 B9                      jmp     queue_remove_exit
(1)    1123 :
(1)    1123 :                    ;;; Local Variables:
(1)    1123 :                    ;;; mode: asm
(1)    1123 :                    ;;; End:
(1)    1123 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       1123 :
       1123 :                    isr_sensea_exit:
       1123 : C6 01                      ld      @1(P2)          ; pop P1
       1125 : 31                         xpal    P1
       1126 : C6 01                      ld      @1(P2)
       1128 : 35                         xpah    P1
       1129 : C6 01                      ld      @1(P2)          ; pop E
       112B : 01                         xae
       112C : C6 01                      ld      @1(P2)          ; pop D
       112E : 05                         ien                     ; enable interrupt
       112F : 3F                         xppc    P3              ; return from interrupt
       1130 :                    isr_sensea:
       1130 : CE FF                      st      @-1(P2)         ; save A
       1132 : 40                         lde
       1133 : CE FF                      st      @-1(P2)         ; save E
       1135 : C4 DF                      ldi     h(ACIA)
       1137 : 35                         xpah    P1
       1138 : CE FF                      st      @-1(P2)
       113A : C4 00                      ldi     l(ACIA)     ; save P1 and load P1
       113C : 31                         xpal    P1
       113D : CE FF                      st      @-1(P2)
       113F : C1 00                      ld      ACIA_S(P1)
       1141 : 01                         xae
       1142 : 40                         lde
       1143 : D4 80                      ani     IRQF_bm
       1145 : 98 DC                      jz      isr_sensea_exit
       1147 : 40                         lde
       1148 : D4 70                      ani     FERR_bm|OVRN_bm|PERR_bm
       114A : 98 02                      jz      isr_receive
       114C : C1 01                      ld      ACIA_D(P1)      ; clear errors
       114E :                    isr_receive:
       114E : 40                         lde
       114F : D4 01                      ani     RDRF_bm
       1151 : 98 D0                      jz      isr_sensea_exit
       1153 : C1 01                      ld      ACIA_D(P1)
       1155 : 01                         xae                     ; E=char
       1156 : C4 10                      ldi     h(addr(queue_add))
       1158 : 35                         xpah    P1
       1159 : C4 9B                      ldi     l(addr(queue_add))
       115B : 31                         xpal    P1
       115C : 3D                         xppc    P1              ; call queue_add
       115D : 00 20                      dw      rx_queue
       115F : 90 C2                      jmp     isr_sensea_exit
       1161 :
          1 :                            org     ORG_RESTART
          1 : C4 FF                      ldi     l(stack)
          3 : 32                         xpal    P2
          4 : C4 0F                      ldi     h(stack)
          6 : 36                         xpah    P2
          7 : C4 2F                      ldi     l(addr(isr_sensea))
          9 : 33                         xpal    P3              ; setup interrupt entry P3
          A : C4 11                      ldi     h(addr(isr_sensea))
          C : 37                         xpah    P3
          D : C4 FF                      ldi     l(addr(initialize))
          F : 31                         xpal    P1
         10 : C4 1F                      ldi     h(addr(initialize))
         12 : 35                         xpah    P1
         13 : 3D                         xppc    P1

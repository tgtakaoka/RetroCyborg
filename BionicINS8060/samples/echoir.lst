   0:                       CPU  ins8060
   0:                       INCLUDE              "ins8060.inc"
   0:       ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:       ;;; INS8060
   0:       ;;; Status Register
   0: =$80  S_CY:           EQU  0x80            ; Carry bit
   0: =$80  S_L:            EQU  0x80            ; Link bit
   0: =$40  S_OV:           EQU  0x40            ; Overflow bit
   0: =$20  S_SB:           EQU  0x20            ; Sense B bit
   0: =$10  S_SA:           EQU  0x10            ; Sense A bit
   0: =$8   S_IE:           EQU  0x08            ; Interrupt Enable bit
   0: =$4   S_F2:           EQU  0x04            ; Flag 2 bit
   0: =$2   S_F1:           EQU  0x02            ; Flag 1 bit
   0: =$1   S_F0:           EQU  0x01            ; Flag 0 bit
   0:
   0:       ;;; Dynamic Offset by E register
   0: =$80  OFFSET_E:       EQU  0x80            ; offset by E register
   0:
   0:       ;;; Transfer locations
   0: =$1   ORG_RESTART:    EQU  0x0001          ; Restart transfer location
   0:
   0:       ;;; MC6850 Asynchronous Communication Interface Adapter
   0: =$DF00    ACIA:       EQU  0xDF00
   0:                       INCLUDE              "mc6850.inc"
   0:       ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:       ;;; MC6850
   0:       ;;; Asynchronous Communication Interface Adapter
   0:
   0:       ;;; Control register
   0: =$DF00    ACIA_control:       EQU  ACIA+0
   0:       ;; Counter Divider Select Bits
   0: =$3   CDS_gm:         EQU  0b11            ; Group mask
   0: =$0   CDS_DIV1_gc:    EQU  0b00000000      ; /1
   0: =$1   CDS_DIV16_gc:   EQU  0b00000001      ; /16
   0: =$2   CDS_DIV64_gc:   EQU  0b00000010      ; /64
   0: =$3   CDS_RESET_gc:   EQU  0b00000011      ; Master Reset
   0:       ;; Word Select Bits
   0: =$1C  WSB_gm:         EQU  0b00011100      ; Group mask
   0: =$0   WSB_7E2_gc:     EQU  0b00000000      ; 7 Bits + Even Parity + 2 Stop Bits
   0: =$4   WSB_7O2_gc:     EQU  0b00000100      ; 7 bits + Odd Parity  + 2 Stop Bits
   0: =$8   WSB_7E1_gc:     EQU  0b00001000      ; 7 bits + Even Parity + 1 Stop Bits
   0: =$C   WSB_7O1_gc:     EQU  0b00001100      ; 7 bits + Odd Parity  + 1 Stop Bits
   0: =$10  WSB_8N2_gc:     EQU  0b00010000      ; 8 bits + No Parity   + 2 Stop Bits
   0: =$14  WSB_8N1_gc:     EQU  0b00010100      ; 8 bits + No Parity   + 1 Stop Bits
   0: =$18  WSB_8E1_gc:     EQU  0b00011000      ; 8 bits + Even Parity + 1 Stop Bits
   0: =$1C  WSB_8O1_gc:     EQU  0b00011100      ; 8 bits + Odd Parity  + 1 Stop Bits
   0:       ;; Transmit Control Bits
   0: =$60  TCB_gm:         EQU  0b01100000      ; Group mask
   0: =$0   TCB_DI_gc:      EQU  0b00000000      ; RTS=Low,  Tx Interrupt Disabled
   0: =$20  TCB_EI_gc:      EQU  0b00100000      ; RTS=Low,  Tx Interrupt Enabled
   0: =$40  TCB_RTS_gc:     EQU  0b01000000      ; RTS=High, Tx Interrupt Disabled
   0: =$60  TCB_BREAK_gc:   EQU  0b01100000      ; RTS=Low,  Tx Interrupt Disabled
   0:       ; Transmit Break Level
   0: =$80  RIEB_bm:        EQU  0b10000000      ; Receive Interrupt Enable Bit mask
   0:
   0:       ;;; Status register
   0: =$DF00    ACIA_status:        EQU  ACIA+0
   0: =$1   RDRF_bm:        EQU  0b00000001      ; Receive Data Register Full
   0: =$2   TDRE_bm:        EQU  0b00000010      ; Transmit Data Register Empty
   0: =$4   DCDF_bm:        EQU  0b00000100      ; Data Carrier Detect Flag
   0: =$8   CTSF_bm:        EQU  0b00001000      ; Clear To Send Flag
   0: =$10  FERR_bm:        EQU  0b00010000      ; Frame Error Flag
   0: =$20  OVRN_bm:        EQU  0b00100000      ; Receiver Overrun Flag
   0: =$40  PERR_bm:        EQU  0b01000000      ; Parity Error Flag
   0: =$80  IRQF_bm:        EQU  0b10000000      ; Interrupt Request Flag
   0:
   0:       ;;; Data register
   0: =$DF01    ACIA_data:  EQU  ACIA+1          ; Data register
   0: =$0   ACIA_C:         EQU  0               ; ACIA control offset
   0: =$0   ACIA_S:         EQU  0               ; ACIA status offset
   0: =$1   ACIA_D:         EQU  1               ; ACIA data register offset
   0:
   0: =$94  RX_INT_TX_NO:   EQU  WSB_8N1_gc|RIEB_bm
   0: =$B4  RX_INT_TX_INT:  EQU  WSB_8N1_gc|RIEB_bm|TCB_EI_gc
   0:
   0: =$10  rx_queue_size:  EQU  16
   0: =$30  tx_queue_size:  EQU  48
   0:
2000:                       ORG  0x2000
2000:       rx_queue:
2000:                       DS   rx_queue_size
2010:       tx_queue:
2010:                       DS   tx_queue_size
2040:
1000:                       ORG  0x1000
1000: =$FFF stack:          EQU  $-1
1000:       initialize:
1000: C4 5C                 LDI  lo(addr(queue_init))
1002: 31                    XPAL P1
1003: C4 10                 LDI  hi(addr(queue_init))
1005: 35                    XPAH P1
1006: C4 10                 LDI  rx_queue_size
1008: 3D                    XPPC P1              ; call queue_init
1009: 00 20                 DW   rx_queue
100B:
100B:       ;; initialize ACIA
100B: C4 00                 LDI  lo(ACIA)
100D: 31                    XPAL P1
100E: C4 DF                 LDI  hi(ACIA)
1010: 35                    XPAH P1
1011: C4 03                 LDI  CDS_RESET_gc    ; Master reset
1013: C9 00                 ST   ACIA_C(P1)
1015: C4 94                 LDI  RX_INT_TX_NO    ; 8 bits + No Parity + 1 Stop Bits
1017:       ; Transmit, Receive interrupts disabled
1017: C9 00                 ST   ACIA_C(P1)
1019: 05                    IEN                  ; enable interrupt
101A:
101A:       loop:
101A: C4 E8                 LDI  lo(addr(queue_remove))
101C: 31                    XPAL P1
101D: C4 10                 LDI  hi(addr(queue_remove))
101F: 35                    XPAH P1
1020: 04                    DINT                 ; Disable IRQ
1021: 3D                    XPPC P1              ; call queue_remote
1022: 00 20                 DW   rx_queue
1024: 05                    IEN                  ; Enable IRQ
1025: 98 F3                 JZ   loop
1027:       echo:
1027: C4 38                 LDI  lo(addr(putchar))
1029: 31                    XPAL p1
102A: C4 10                 LDI  hi(addr(putchar))
102C: 35                    XPAH p1
102D: 3D                    XPPC p1
102E: 40                    LDE
102F: E4 0D                 XRI  0x0D            ; carriage return
1031: 9C E7                 JNZ  loop
1033: C4 0A                 LDI  0x0A
1035: 01                    XAE                  ; E=newline
1036: 90 EF                 JMP  echo
1038:
1038:       ;;; @param E char
1038:       putchar_exit:
1038: 3D                    XPPC P1              ; return
1039:       putchar:
1039: C4 DF                 LDI  hi(ACIA)
103B: 35                    XPAH P1
103C: CE FF                 ST   @-1(P2)
103E: C4 00                 LDI  lo(ACIA)        ; save P1 and load P1
1040: 31                    XPAL P1
1041: CE FF                 ST   @-1(P2)
1043:       transmit_loop:
1043: C1 00                 LD   ACIA_S(P1)
1045: D4 02                 ANI  TDRE_bm
1047: 98 FA                 JZ   transmit_loop
1049:       transmit_data:
1049: 40                    LDE
104A: C9 01                 ST   ACIA_D(P1)
104C: C6 01                 LD   @1(P2)
104E: 31                    XPAL P1
104F: C6 01                 LD   @1(P2)          ; restore P1
1051: 35                    XPAH P1
1052: 90 E4                 JMP  putchar_exit
1054:
1054:                       INCLUDE              "queue.inc"
1054:       ;;; [queue] queue structure
1054: =$0   queue_len:      EQU  0               ; queue length
1054: =$1   queue_size:     EQU  1               ; buffer size
1054: =$2   queue_put:      EQU  2               ; queue put index
1054: =$3   queue_get:      EQU  3               ; queue get index
1054: =$4   queue_buf:      EQU  4               ; buffer start offset
1054:
1054:       ;;; [queue] Initialize queue
1054:       ;;; @param A queue space size
1054:       ;;; @param P1 return address pointer
1054:       ;;; @param P1[1:2] queue space pointer
1054:       ;;; @clobber A
1054:       queue_init_exit:
1054: C6 01                 LD   @1(P2)          ; pop P1
1056: 31                    XPAL P1
1057: C6 01                 LD   @1(P2)
1059: 35                    XPAH P1
105A: C6 01                 LD   @1(P2)          ; discard work area
105C: 3D                    XPPC P1
105D:       queue_init:
105D: CE FF                 ST   @-1(P2)         ; save queue space size
105F: C5 01                 LD   @1(P1)          ; advance to queue space pointer
1061: C5 01                 LD   @1(P1)          ; load queue work space pointer (le16)
1063: CE FE                 ST   @-2(P2)         ; save lo(queue space)
1065: C1 00                 LD   0(P1)
1067: 35                    XPAH P1
1068: CA 01                 ST   1(P2)           ; P[1:0] push P1
106A: C2 00                 LD   0(P2)
106C: 31                    XPAL P1              ; P1=queue space pointer
106D: CA 00                 ST   0(P2)
106F: C4 00                 LDI  0
1071: C9 00                 ST   queue_len(P1)   ; clear queue_len
1073: C9 02                 ST   queue_put(P1)
1075: C9 03                 ST   queue_get(P1)
1077: C2 02                 LD   2(P2)           ; queue space size
1079: 03                    SCL
107A: FC 04                 CAI  queue_buf
107C: C9 01                 ST   queue_size(P1)
107E: CA 02                 ST   2(P2)           ; counter
1080: C5 04                 LD   @queue_buf(P1)  ; advanced pointer
1082:       queue_init_loop:
1082: C4 00                 LDI  0
1084: CD 01                 ST   @1(P1)
1086: BA 02                 DLD  2(P2)
1088: 9C F8                 JNZ  queue_init_loop
108A: 90 C8                 JMP  queue_init_exit
108C:
108C:       ;;; [queue] Add an element to queue
108C:       ;;; @param E an element
108C:       ;;; @param P1 return address pointer
108C:       ;;; @param P1[1:2] queue space pointer
108C:       ;;; @return E an element
108C:       ;;; @return A 0 if queue is full
108C:       ;;; @clobber P1
108C:       queue_add_exit:
108C: CA 05                 ST   5(P2)           ; P2[5] return flag
108E: C6 02                 LD   @2(P2)          ; discard queue space pointer
1090: C6 01                 LD   @1(P2)          ; pop P1
1092: 31                    XPAL P1
1093: C6 01                 LD   @1(P2)
1095: 35                    XPAH P1
1096: C6 01                 LD   @1(P2)          ; restore E
1098: 01                    XAE
1099: C6 01                 LD   @1(P2)          ; return flag
109B: 3D                    XPPC P1
109C:       queue_add:
109C: C5 01                 LD   @1(P1)          ; advanced to queue space pointer
109E: C5 01                 LD   @1(P1)          ; load queue space pointer (le16)
10A0: CE FA                 ST   @-6(P2)         ; param, P1, elem, return flag
10A2: C1 00                 LD   0(P1)
10A4: CA 01                 ST   1(P2)           ; P2[1:0] queue space pointer
10A6: 35                    XPAH P1
10A7: CA 03                 ST   3(P2)           ; P2[3:2] saved P1
10A9: C2 00                 LD   0(P2)
10AB: 31                    XPAL P1
10AC: CA 02                 ST   2(P2)
10AE: 40                    LDE
10AF: CA 04                 ST   4(P2)           ; P2[4] save an element
10B1: C1 00                 LD   queue_len(P1)
10B3: E1 01                 XOR  queue_size(P1)
10B5: 98 D5                 JZ   queue_add_exit  ; queue is full, A=0
10B7:       queue_not_full:
10B7: A9 00                 ILD  queue_len(P1)   ; update queue_len
10B9: C2 00                 LD   0(P2)
10BB: 02                    CCL
10BC: F1 02                 ADD  queue_put(P1)
10BE: 01                    XAE
10BF: C2 01                 LD   1(P2)
10C1: F4 00                 ADI  0
10C3: 35                    XPAH P1
10C4: 01                    XAE
10C5: 31                    XPAL P1
10C6: C2 04                 LD   4(P2)           ; an element
10C8: C9 04                 ST   queue_buf(P1)   ; store element
10CA: C2 00                 LD   0(P2)
10CC: 31                    XPAL P1
10CD: C2 01                 LD   1(P2)
10CF: 35                    XPAH P1
10D0: A9 02                 ILD  queue_put(P1)   ; advanced queue_put
10D2: E1 01                 XOR  queue_size(P1)
10D4: 9C 02                 JNZ  queue_add_end   ; branch if queue_put != queue_size
10D6: C9 02                 ST   queue_put(P1)   ; reset queue_put
10D8:       queue_add_end:
10D8: C4 01                 LDI  1
10DA: 90 B0                 JMP  queue_add_exit  ; an element added, A=1
10DC:
10DC:       ;;; [queue] Remove an element from queue
10DC:       ;;; @param P1 return address pointer
10DC:       ;;; @param P1[1:2] queue space pointer
10DC:       ;;; @return E an element
10DC:       ;;; @return A 0 if queue is empty
10DC:       ;;; @clobber P1
10DC:       queue_remove_exit:
10DC: CA 04                 ST   4(P2)           ; return flag
10DE: C6 02                 LD   @2(P2)          ; discard work area
10E0: C6 01                 LD   @1(P2)          ; pop P1
10E2: 31                    XPAL P1
10E3: C6 01                 LD   @1(P2)
10E5: 35                    XPAH P1
10E6: C6 01                 LD   @1(P2)          ; return flag
10E8: 3D                    XPPC P1              ; return
10E9:       queue_remove:
10E9: C5 01                 LD   @1(P1)          ; advanced to queue space pointer
10EB: C5 01                 LD   @1(P1)          ; load queue space pointer (le16)
10ED: CE FB                 ST   @-5(P2)         ; param, P1, return flag
10EF: C1 00                 LD   0(P1)
10F1: CA 01                 ST   1(P2)           ; P2[1:0] queue space pointer
10F3: 35                    XPAH P1
10F4: CA 03                 ST   3(P2)           ; P2[3:2] saved P1
10F6: C2 00                 LD   0(P2)
10F8: 31                    XPAL P1
10F9: CA 02                 ST   2(P2)
10FB: C1 00                 LD   queue_len(P1)
10FD: 98 DD                 JZ   queue_remove_exit   ; queue is empty, A=0
10FF:       queue_not_empty:
10FF: B9 00                 DLD  queue_len(P1)   ; update queue_len
1101: C2 00                 LD   0(P2)
1103: 02                    CCL
1104: F1 03                 ADD  queue_get(P1)
1106: 01                    XAE
1107: C2 01                 LD   1(P2)
1109: F4 00                 ADI  0
110B: 35                    XPAH P1
110C: 40                    LDE
110D: 31                    XPAL P1
110E: C1 04                 LD   queue_buf(P1)   ; load element
1110: 01                    XAE                  ; E=element
1111: C2 00                 LD   0(P2)
1113: 31                    XPAL P1
1114: C2 01                 LD   1(P2)
1116: 35                    XPAH P1
1117: A9 03                 ILD  queue_get(P1)   ; advanced queue_get
1119: E1 01                 XOR  queue_size(P1)
111B: 9C 02                 JNZ  queue_remove_end    ; branch if queue_put != queue_size
111D: C9 03                 ST   queue_get(P1)   ; reset queue_get
111F:       queue_remove_end:
111F: C4 01                 LDI  1
1121: 90 B9                 JMP  queue_remove_exit
1123:
1123:       ;;; Local Variables:
1123:       ;;; mode: asm
1123:       ;;; End:
1123:       ;;; vim: set ft=asm et ts=4 sw=4:
1123:
1123:       isr_sensea_exit:
1123: C6 01                 LD   @1(P2)          ; pop P1
1125: 31                    XPAL P1
1126: C6 01                 LD   @1(P2)
1128: 35                    XPAH P1
1129: C6 01                 LD   @1(P2)          ; pop E
112B: 01                    XAE
112C: C6 01                 LD   @1(P2)          ; pop D
112E: 05                    IEN                  ; enable interrupt
112F: 3F                    XPPC P3              ; return from interrupt
1130:       isr_sensea:
1130: CE FF                 ST   @-1(P2)         ; save A
1132: 40                    LDE
1133: CE FF                 ST   @-1(P2)         ; save E
1135: C4 DF                 LDI  hi(ACIA)
1137: 35                    XPAH P1
1138: CE FF                 ST   @-1(P2)
113A: C4 00                 LDI  lo(ACIA)        ; save P1 and load P1
113C: 31                    XPAL P1
113D: CE FF                 ST   @-1(P2)
113F: C1 00                 LD   ACIA_S(P1)
1141: 01                    XAE
1142: 40                    LDE
1143: D4 80                 ANI  IRQF_bm
1145: 98 DC                 JZ   isr_sensea_exit
1147: 40                    LDE
1148: D4 70                 ANI  FERR_bm|OVRN_bm|PERR_bm
114A: 98 02                 JZ   isr_receive
114C: C1 01                 LD   ACIA_D(P1)      ; clear errors
114E:       isr_receive:
114E: 40                    LDE
114F: D4 01                 ANI  RDRF_bm
1151: 98 D0                 JZ   isr_sensea_exit
1153: C1 01                 LD   ACIA_D(P1)
1155: 01                    XAE                  ; E=char
1156: C4 10                 LDI  hi(addr(queue_add))
1158: 35                    XPAH P1
1159: C4 9B                 LDI  lo(addr(queue_add))
115B: 31                    XPAL P1
115C: 3D                    XPPC P1              ; call queue_add
115D: 00 20                 DW   rx_queue
115F: 90 C2                 JMP  isr_sensea_exit
1161:
   1:                       ORG  ORG_RESTART
   1: C4 FF                 LDI  lo(stack)
   3: 32                    XPAL P2
   4: C4 0F                 LDI  hi(stack)
   6: 36                    XPAH P2
   7: C4 2F                 LDI  lo(addr(isr_sensea))
   9: 33                    XPAL P3              ; setup interrupt entry P3
   A: C4 11                 LDI  hi(addr(isr_sensea))
   C: 37                    XPAH P3
   D: C4 FF                 LDI  lo(addr(initialize))
   F: 31                    XPAL P1
  10: C4 1F                 LDI  hi(addr(initialize))
  12: 35                    XPAH P1
  13: 3D                    XPPC P1

   0:                                CPU   6811
   0:                                INCLUDE               "mc68hc11d.inc"
   0:                ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:                ;;; MC68HC11D
   0:                ;;; Condition Code Register (CC)
   0: =$1            CC_CARRY        EQU   %00000001       ; set to 1 if carry occurred
   0: =$2            CC_OVERFLOW     EQU   %00000010       ; set to 1 if overflow occurred
   0: =$4            CC_ZERO         EQU   %00000100       ; set to 1 if result is zero
   0: =$8            CC_NEGATIVE     EQU   %00001000       ; set to 1 if result is negative
   0: =$10           CC_IRQ          EQU   %00010000       ; if 1, IRQ is masked
   0: =$20           CC_HALF_CARRY   EQU   %00100000       ; if 1, decimal carry from least digit occurred
   0: =$40           CC_XIRQ         EQU   %01000000       ; if 1, XIRQ is masked
   0: =$80           CC_STOP         EQU   %10000000       ; if 1, STOP instruction is disabled
   0:
   0:                ;;; Internal Register Area
   0: =$0            PORTA:          EQU   $00             ; $00: Port A Data Register
   0: =$2            PIOC:           EQU   $02             ; $02: Parallel I/O Control
   0: =$3            PORTC:          EQU   $03             ; $03: Port C Data Register
   0: =$4            PORTB:          EQU   $04             ; $04: Port B Data Register
   0: =$6            DDRB:           EQU   $06             ; $06: Port B Data Direction Register
   0: =$7            DDRC:           EQU   $07             ; $07: Port C Data Direction Register
   0: =$8            PORTD:          EQU   $08             ; $08: Port D Data Register
   0: =$9            DDRD:           EQU   $09             ; $09: Port D Data Direction Register
   0: =$B            CFORC:          EQU   $0B             ; $0B: Timer Compare Force
   0: =$C            OC1M:           EQU   $0C             ; $0C: Output Compare 1 Mask
   0: =$D            OC1D:           EQU   $0D             ; $0D: Output Compare 1 Data
   0: =$E            TCNT:           EQU   $0E             ; $0E-$0F: Timer Counter
   0: =$10           TIC1:           EQU   $10             ; $10-$11: Timer Input Capture 1
   0: =$12           TIC2:           EQU   $12             ; $12-$13: Timer Input Capture 2
   0: =$14           TIC3:           EQU   $14             ; $14-$15: Timer Input Capture 3
   0: =$16           TOC1:           EQU   $16             ; $16-$17: Timer Output Compare 1
   0: =$18           TOC2:           EQU   $18             ; $18-$19: Timer Output Compare 2
   0: =$1A           TOC3:           EQU   $1A             ; $1A-$1B: Timer Output Compare 3
   0: =$1C           TOC4:           EQU   $1C             ; $1C-$1D: Timer Output Compare 4
   0: =$1E           TI4O5:          EQU   $1E             ; $1E-$1F: Timer Input Capture 4/Timer Output Compare 5
   0: =$20           TCTL1:          EQU   $20             ; $20: Timer Control 1
   0: =$21           TCTL2:          EQU   $21             ; $21: Timer Control 2
   0: =$22           TMSK1:          EQU   $22             ; $22: Timer Interrupt Mask 1
   0: =$23           TFLG1:          EQU   $23             ; $23: Timer Interrupt Flag 1
   0: =$24           TMSK2:          EQU   $24             ; $24: Timer Interrupt Mask 2
   0: =$25           TFLG2:          EQU   $25             ; $25: Timer Interrupt Flag 2
   0: =$26           PACTL:          EQU   $26             ; $26: Pulse Accumulator Control
   0: =$27           PACNT:          EQU   $27             ; $27: Pulse Accumulator Count
   0: =$28           SPCR:           EQU   $28             ; $28: Serial Peripheral Control Register
   0: =$29           SPSR:           EQU   $29             ; $29: Serial Peripheral Status Register
   0: =$2A           SPDR:           EQU   $2A             ; $2A: SPI Data Register 
   0: =$2B           BAUD:           EQU   $2B             ; $2B: Baud Rate
   0: =$2C           SCCR1:          EQU   $2C             ; $2C: SCI Control Register 1
   0: =$2D           SCCR2:          EQU   $2D             ; $2D: SCI Control Register 2
   0: =$2E           SCSR:           EQU   $2E             ; $2E: SCI Status Register
   0: =$2F           SCDR:           EQU   $2F             ; $2F: SCI Data Register
   0: =$39           OPTION:         EQU   $39             ; $39: System Configuration Options
   0: =$3A           COPRST:         EQU   $3A             ; $3A: Arm/Reset COP Timer Circuitry
   0: =$3C           HPRIO:          EQU   $3C             ; $3C: Highest Priority I-Bit Interrupt and Miscellaneous
   0: =$3D           INIT:           EQU   $3D             ; $3D: RAM and I/O Mapping Register
   0: =$3E           TEST1:          EQU   $3E
   0: =$3F           CONFIG:         EQU   $3F             ; $3F: System Configuration
   0:
   0:                ;;; PIOC: Parallel I/O Control
   0: =$20           PIOC_CWOM_bm:   EQU   %00100000       ; Port C Wired-Or Mode (1=open-drain)
   0:
   0:                ;;; CFORC: Timer Compare Force
   0: =$80           CFORC_FOC1_bm:  EQU   %10000000       ; Write One to Force Compare 1
   0: =$40           CFORC_FOC2_bm:  EQU   %01000000       ; Write One to Force Compare 2
   0: =$20           CFORC_FOC3_bm:  EQU   %00100000       ; Write One to Force Compare 3
   0: =$10           CFORC_FOC4_bm:  EQU   %00010000       ; Write One to Force Compare 4
   0: =$8            CFORC_FOC5_bm:  EQU   %00001000       ; Write One to Force Compare 5
   0:
   0:                ;;; OC1M: Timer Compare 1 Mask
   0: =$80           OC1M_PA7_bm:    EQU   %10000000       ; Output Compare enabled on Port A Bit 7
   0: =$40           OC1M_PA6_bm:    EQU   %01000000       ; Output Compare enabled on Port A Bit 6
   0: =$20           OC1M_PA5_bm:    EQU   %00100000       ; Output Compare enabled on Port A Bit 5
   0: =$10           OC1M_PA4_bm:    EQU   %00010000       ; Output Compare enabled on Port A Bit 4
   0: =$8            OC1M_PA3_bm:    EQU   %00001000       ; Output Compare enabled on Port A Bit 3
   0:
   0:                ;;; OC1D: Timer Compare 1 Data
   0: =$80           OC1D_PA7_bm:    EQU   %10000000       ; Output Compare Data for Port A Bit 7
   0: =$40           OC1D_PA6_bm:    EQU   %01000000       ; Output Compare Data for Port A Bit 6
   0: =$20           OC1D_PA5_bm:    EQU   %00100000       ; Output Compare Data for Port A Bit 5
   0: =$10           OC1D_PA4_bm:    EQU   %00010000       ; Output Compare Data for Port A Bit 4
   0: =$8            OC1D_PA3_bm:    EQU   %00001000       ; Output Compare Data for Port A Bit 3
   0:
   0:                ;;; TCTL1: Timer Control 1
   0: =$6            TCTL1_OC2_gp:   EQU   6               ; Output Compare Mode and Level for OC2
   0: =$4            TCTL1_OC3_gp:   EQU   4               ; Output Compare Mode and Level for OC3
   0: =$2            TCTL1_OC4_gp:   EQU   2               ; Output Compare Mode and Level for OC4
   0: =$0            TCTL1_OC5_gp:   EQU   0               ; Output Compare Mode and Level for OC5
   0: =$0            TCTL1_MODE_DIS_gc:      EQU   %00     ; Timer disconnected from output pin logic
   0: =$1            TCTL1_MODE_TOGGLE_gc:   EQU   %01     ; Toggle OCx output line
   0: =$2            TCTL1_MODE_CLEAR_gc:    EQU   %10     ; Clear OCx output line to 0
   0: =$3            TCTL1_MODE_SET_gc:      EQU   %11     ; Set OCx output line to 1
   0:
   0:                ;;; TCTL2: Timer Control 2
   0: =$6            TCTL2_IC4_gp:   EQU   6               ; Input Capture Edge Control for IC4
   0: =$4            TCTL2_IC1_gp:   EQU   4               ; Input Capture Edge Control for IC1
   0: =$2            TCTL2_IC2_gp:   EQU   2               ; Input Capture Edge Control for IC2
   0: =$0            TCTL2_IC3_gp:   EQU   0               ; Input Capture Edge Control for IC3
   0: =$0            TCTL2_EDG_DIS_gc:       EQU   %00     ; Capture Disabled
   0: =$1            TCTL2_EDG_RISING_gc:    EQU   %01     ; Capture on rising edges only
   0: =$2            TCTL2_EDG_FALLING_gc:   EQU   %10     ; Capture on falling edges only
   0: =$3            TCTL2_EDG_BOTH_gc:      EQU   %11     ; Capture on any edge
   0:
   0:                ;;; TMSK1: Timer Interrupt Mask 1
   0: =$80           TMSK1_OC1I_bm:  EQU   %10000000       ; Enable OC1 interrupt
   0: =$40           TMSK1_OC2I_bm:  EQU   %01000000       ; Enable OC2 interrupt
   0: =$20           TMSK1_OC3I_bm:  EQU   %00100000       ; Enable OC3 interrupt
   0: =$10           TMSK1_OC4I_bm:  EQU   %00010000       ; Enable OC4 interrupt
   0: =$8            TMSK1_OC5I_bm:  EQU   %00001000       ; Enable OC5 interrupt
   0: =$8            TMSK1_IC4I_bm:  EQU   %00001000       ; Enable IC4 interrupt
   0: =$4            TMSK1_IC1I_bm:  EQU   %00000100       ; Enable IC1 interrupt
   0: =$2            TMSK1_IC2I_bm:  EQU   %00000010       ; Enable IC2 interrupt
   0: =$1            TMSK1_IC3I_bm:  EQU   %00000001       ; Enable IC3 interrupt
   0:
   0:                ;;; TFLG1: Timer Interrupt Flag 1
   0: =$80           TFLG1_OC1F_bm:  EQU   %10000000       ; OC1 interrupt Flag
   0: =$40           TFLG1_OC2F_bm:  EQU   %01000000       ; OC2 interrupt Flag
   0: =$20           TFLG1_OC3F_bm:  EQU   %00100000       ; OC3 interrupt Flag
   0: =$10           TFLG1_OC4F_bm:  EQU   %00010000       ; OC4 interrupt Flag
   0: =$8            TFLG1_OC5F_bm:  EQU   %00001000       ; OC5 interrupt Flag
   0: =$8            TFLG1_IC4F_bm:  EQU   %00001000       ; IC4 interrupt Flag
   0: =$4            TFLG1_IC1F_bm:  EQU   %00000100       ; IC1 interrupt Flag
   0: =$2            TFLG1_IC2F_bm:  EQU   %00000010       ; IC2 interrupt Flag
   0: =$1            TFLG1_IC3F_bm:  EQU   %00000001       ; IC3 interrupt Flag
   0:
   0:                ;;; TMSK2: Timer Interrupt Mask 2
   0: =$80           TMSK2_TOI_bm:   EQU   %10000000       ; Timer Overflow Interrupt Enable
   0: =$40           TMSK2_RTII_bm:  EQU   %01000000       ; Real-time Interrupt Enable
   0: =$20           TMSK2_PAOVI_bm: EQU   %00100000       ; Pulse Accumulator Overflow Interrupt Enable
   0: =$10           TMSK2_PAII_bm:  EQU   %00010000       ; Pulse Accumulator Input Edge Interrupt Enable
   0: =$3            TMSK2_PR_gm:    EQU   %00000011       ; Timer Prescaler Select
   0: =$0            TMSK2_PR1_gc:   EQU   %00000000       ; prescaler 1
   0: =$1            TMSK2_PR4_gc:   EQU   %00000001       ; prescaler 4
   0: =$2            TMSK2_PR8_gc:   EQU   %00000010       ; prescaler 8
   0: =$3            TMSK2_PR16_gc:  EQU   %00000011       ; prescaler 16
   0:
   0:                ;;; TFLG2: Timer Interrupt Flag 2
   0: =$80           TFLG2_TOF_gm:   EQU   %10000000       ; Timer Overflow Interrupt FLag
   0: =$40           TFLG2_RTIF_gm:  EQU   %01000000       ; Real-time Interrupt FLag
   0: =$20           TFLG2_PAOVF_gm: EQU   %00100000       ; Pulse Accumulator Overflow Interrupt FLag
   0: =$10           TFLG2_PAIF_gm:  EQU   %00010000       ; Pulse Accumulator Input Edge Interrupt FLag
   0:
   0:                ;;; PACTL: Pulse Accumulator Control
   0: =$80           PACTL_DDRA7_bm: EQU   %10000000       ; Data Direction Control for Port A Bit 7
   0: =$40           PACTL_PAEN_bm:  EQU   %01000000       ; Pulse Accumulator System Enable
   0: =$30           PACTL_PAMOD_gm: EQU   %00110000       ; Pulse Accumulator Mode
   0: =$0            PACTL_PAMOD_FALLING_gc: EQU   %00000000   ; PAI Falling Edge Increments the Counter
   0: =$10           PACTL_PAMOD_RISING_gc:  EQU   %00010000   ; PAI Rising Edge Increments the Counter
   0: =$20           PACTL_PAMOD_ZERO_gc:    EQU   %00100000   ; A Zero on PAI Inhibits Counting
   0: =$30           PACTL_PAMOD_ONE_gc:     EQU   %00110000   ; A One on PAI Inhibits Counting
   0: =$8            PACTL_DDRA3_bm: EQU   %00001000       ; Data Direction Control for Port A Bit 3
   0: =$4            PACTL_I4O5_bm:  EQU   %00000100       ; Configure TI4/O5 Register (0=OC5, 1=IC4)
   0: =$3            PACTL_RTR_gm:   EQU   %00000011       ; Real_Time interrupt Rate
   0: =$0            PACTL_RTR13_gc: EQU   %00000000       ; E/2^13
   0: =$1            PACTL_RTR14_gc: EQU   %00000001       ; E/2^14
   0: =$2            PACTL_RTR15_gc: EQU   %00000010       ; E/2^15
   0: =$3            PACTL_RTR16_gc: EQU   %00000011       ; E/2^16
   0:
   0:                ;;; SPCR: Serial Peripheral Control Register
   0: =$80           SPCR_SPIE_bm:   EQU   %10000000       ; Serial Peripheral Interrupt Enable
   0: =$40           SPCR_SPE_bm:    EQU   %01000000       ; Serial Peripheral System Enable
   0: =$20           SPCR_DWOM_bm:   EQU   %00100000       ; Port D Wired-Or Mode
   0: =$10           SPCR_MSTR_bm:   EQU   %00010000       ; Master Mode Select (0=slave, 1=master)
   0: =$8            SPCR_CPOL_bm:   EQU   %00001000       ; Clock Polarity
   0: =$4            SPCR_CPHA_bm:   EQU   %00000100       ; Clock Phase
   0: =$3            SPCR_SPR_gm:    EQU   %00000011       ; SPI Clock Rate Selects
   0: =$0            SPCR_SPR2_gc:   EQU   %00000000       ; E clock divided by 2
   0: =$1            SPCR_SPR4_gc:   EQU   %00000001       ; E clock divided by 4
   0: =$2            SPCR_SPR16_gc:  EQU   %00000010       ; E clock divided by 16
   0: =$3            SPCR_SPR32_gc:  EQU   %00000011       ; E clock divided by 32
   0:
   0:                ;;; SPSR: Serial Peripheral Status Register
   0: =$80           SPSR_SPIF_bm:   EQU   %10000000       ; SPI Transfer Complete Flag
   0: =$40           SPSR_WCOL_bm:   EQU   %01000000       ; Write Collision
   0: =$10           SPSR_MODF_bm:   EQU   %00010000       ; Mode Fault
   0:
   0:                ;;; BAUD: Baud Rate
   0: =$30           BAUD_SCP_gm:    EQU   %00110000       ; SCI Baud Rate Prescaler Selects
   0: =$0            BAUD_SCP1_gc:   EQU   %00000000       ; E is divided by 1
   0: =$10           BAUD_SCP3_gc:   EQU   %00010000       ; E is divided by 3
   0: =$20           BAUD_SCP4_gc:   EQU   %00100000       ; E is divided by 4
   0: =$30           BAUD_SCP13_gc:  EQU   %00110000       ; E is divided by 13
   0: =$7            BAUD_SCR_gm:    EQU   %00000111       ; SCI Baud Rate Selects (baud rate x16)
   0: =$0            BAUD_SCR1_gc:   EQU   %00000000       ; Divide Prescaler by 1
   0: =$1            BAUD_SCR2_gc:   EQU   %00000001       ; Divide Prescaler by 2
   0: =$2            BAUD_SCR4_gc:   EQU   %00000010       ; Divide Prescaler by 3
   0: =$3            BAUD_SCR8_gc:   EQU   %00000011       ; Divide Prescaler by 4
   0: =$4            BAUD_SCR16_gc:  EQU   %00000100       ; Divide Prescaler by 5
   0: =$5            BAUD_SCR32_gc:  EQU   %00000101       ; Divide Prescaler by 6
   0: =$6            BAUD_SCR64_gc:  EQU   %00000110       ; Divide Prescaler by 7
   0: =$7            BAUD_SCR128_gc: EQU   %00000111       ; Divide Prescaler by 8
   0:
   0:                ;;; SCCR1: SCI Control Register 1
   0: =$80           SCCR1_R8_bm:    EQU   %10000000       ; Receive Data Bit 8
   0: =$40           SCCR1_T8_bm:    EQU   %01000000       ; Transmit Data Bit 8
   0: =$10           SCCR1_M_bm:     EQU   %00010000       ; Mode (0=8data-1stop, 1=9data-1stop)
   0: =$8            SCCR1_WAKE_bm:  EQU   %00001000       ; Wake-up by Address Mar/Idle (0=idle, 1=mark)
   0:
   0:                ;;; SCCR2: SCI Control Register 2
   0: =$80           SCCR2_TIE_bm:   EQU   %10000000       ; Transmit Interrupt Enable
   0: =$40           SCCR2_TCIE_bm:  EQU   %01000000       ; Transmit Complete Interrupt Enable
   0: =$20           SCCR2_RIE_bm:   EQU   %00100000       ; Receive Interrupt Enable
   0: =$10           SCCR2_ILIE_bm:  EQU   %00010000       ; Idle Line Interrupt Enable
   0: =$8            SCCR2_TE_bm:    EQU   %00001000       ; Transmitter Enable
   0: =$4            SCCR2_RE_bm:    EQU   %00000100       ; Receiver Enable
   0: =$2            SCCR2_RWU_bm:   EQU   %00000010       ; Receiver Wake-Up Control
   0: =$1            SCCr2_SBK_bm:   EQU   %00000001       ; Send Break
   0:
   0:                ;;; SCSR: SCI Status Register
   0: =$80           SCSR_TDRE_bm:   EQU   %10000000       ; Transmit Data Register Empty Flag
   0: =$40           SCSR_TC_bm:     EQU   %01000000       ; Transmit Complete Flag
   0: =$20           SCSR_RDRF_bm:   EQU   %00100000       ; Receiver Data Register Full Flag
   0: =$10           SCSR_IDLE_bm:   EQU   %00010000       ; Idle Line Detected Flag
   0: =$8            SCSR_OR_bm:     EQU   %00001000       ; Overrun Error Flag
   0: =$4            SCSR_NF_bm:     EQU   %00000100       ; Noise Error Flag
   0: =$2            SCSR_FE_bm:     EQU   %00000010       ; Framing Error
   0:
   0:                ;;; OPTION: System Configuration Options
   0: =$20           OPTION_IRQE_bm: EQU   %00100000       ; #IRQ Select Edge Sensitivity only (0:level 1:edge)
   0: =$10           OPTION_DLY_bm:  EQU   %00010000       ; Enable Oscillator Startup Delay
   0: =$8            OPTION_CME_bm:  EQU   %00001000       ; Clock Monitor Enable
   0: =$3            OPTION_CR_gm:   EQU   %00000011       ; COP Timer Rate Select Bits
   0: =$0            OPTION_CR1_gc:  EQU   %00             ; Divide E/2 by 1
   0: =$1            OPTION_CR4_gc:  EQU   %01             ; Divide E/2 by 4
   0: =$2            OPTION_CR16_gc: EQU   %10             ; Divide E/2 by 16
   0: =$3            OPTION_CR64_gc: EQU   %11             ; Divide E/2 by 64
   0:
   0:                ;;; COPRST: Arm/Reset COP Timer Circuitry
   0: =$55           COPRST_ARM_gc:  EQU   $55             ; Arm the COP timer clearing mechanism, then
   0: =$AA           COPRST_RESET_gc:        EQU   $AA     ; Clear the COP timer.
   0:
   0:                ;;; HPRIO: Highest Priority I-Bit Interrupt and Miscellaneous
   0: =$80           HPRIO_RBOOT_bm: EQU   %10000000       ; Read Bootstrap ROM
   0: =$40           HPRIO_SMOD_bm:  EQU   %01000000       ; Special Mode Select
   0: =$20           HPRIO_MDA_bm:   EQU   %00100000       ; Mode Select A
   0: =$10           HPRIO_IRVNE_bm: EQU   %00010000       ; Internal Read Visibility Enable
   0: =$F            HPRIO_PSEL_gm:  EQU   %00001111       ; Priority Select Bits
   0: =$0            HPRIO_PSEL_TOVF_gc:     EQU   %0000   ; Timer Overflow
   0: =$1            HPRIO_PSEL_PAOVF_gc:    EQU   %0001   ; Pulse Accumulator Overflow
   0: =$2            HPRIO_PSEL_PAEDGE_gc:   EQU   %0010   ; Pulse Accumulator Input Edge
   0: =$3            HPRIO_PSEL_SPITX_gc:    EQU   %0011   ; SPI Serial Transfer Complete
   0: =$4            HPRIO_PSEL_SPI_gc:      EQU   %0100   ; SPI Serial System
   0: =$6            HPRIO_PSEL_IRQ_gc:      EQU   %0110   ; #IRQ
   0: =$7            HPRIO_PSEL_RTI_gc:      EQU   %0111   ; Real Time Interrupt
   0: =$8            HPRIO_PSEL_TIC1_gc:     EQU   %1000   ; Timer Input Capture 1
   0: =$9            HPRIO_PSEL_TIC2_gc:     EQU   %1001   ; Timer Input Capture 2
   0: =$A            HPRIO_PSEL_TIC3_gc:     EQU   %1010   ; Timer Input Capture 3
   0: =$F            HPRIO_PSEL_TIC4_gc:     EQU   %1111   ; Timer Input Capture 4
   0: =$B            HPRIO_PSEL_TOC1_gc:     EQU   %1011   ; Timer Output Compare 1
   0: =$C            HPRIO_PSEL_TOC2_gc:     EQU   %1100   ; Timer Output Compare 2
   0: =$D            HPRIO_PSEL_TOC3_gc:     EQU   %1101   ; Timer Output Compare 3
   0: =$E            HPRIO_PSEL_TOC4_gc:     EQU   %1110   ; Timer Output Compare 4
   0: =$F            HPRIO_PSEL_TOC5_gc:     EQU   %1111   ; Timer Output Compare 5
   0:
   0:                ;;; INIT: RAM and I/O Mapping Register
   0: =$F0           INIT_RAM_gm:    EQU   %11110000       ; RAM Map Position
   0: =$4            INIT_RAM_gp:    EQU   4
   0: =$F            INIT_REG_gm:    EQU   %00001111       ; 54-Byte Register Block Position
   0: =$0            INIT_REG_gp:    EQU   0
   0:
   0:                ;;; CONFIG: System configuration
   0: =$4            CONFIG_NOCOP_bm:        EQU   %00000100   ; COP System disable
   0: =$2            CONFIG_ROMON_bm:        EQU   %00000010   ; ROM enable
   0:
   0:                ;;; Vector
   0: =$FFD6         VEC_SCI:        EQU   $FFD6           ; $FFF0: SCI Interrupt (TDRE+TC+RDRF+IDLE+OR/NF/FE)
   0: =$FFD8         VEC_SPITX:      EQU   $FFD8           ; $FFD8: SPI Serial Transfer Complete
   0: =$FFDA         VEC_PAI:        EQU   $FFDA           ; $FFDA: Pulse Accumulator Input Edge
   0: =$FFDC         VEC_PAOV:       EQU   $FFDC           ; $FFDC: Pulse Accumulator Overflow
   0: =$FFDE         VEC_TO:         EQU   $FFDE           ; $FFDE: Timer Overflow
   0: =$FFE0         VEC_TOC5:       EQU   $FFE0           ; $FFE0: Timer Input Compare 5 (=VEC_TICAP4)
   0: =$FFE2         VEC_TOC4:       EQU   $FFE2           ; $FFE2: Timer Input Compare 4
   0: =$FFE4         VEC_TOC3:       EQU   $FFE4           ; $FFE4: Timer Input Compare 3
   0: =$FFE6         VEC_TOC2:       EQU   $FFE6           ; $FFE6: Timer Input Compare 2
   0: =$FFE8         VEC_TOC1:       EQU   $FFE8           ; $FFE8: Timer Input Compare 1
   0: =$FFE0         VEC_TIC4:       EQU   $FFE0           ; $FFE0: Timer Input Capture 4 (=VEC_TOCMP5)
   0: =$FFEA         VEC_TIC3:       EQU   $FFEA           ; $FFEA: Timer Input Capture 3
   0: =$FFEC         VEC_TIC2:       EQU   $FFEC           ; $FFEC: Timer Input Capture 2
   0: =$FFEE         VEC_TIC1:       EQU   $FFEE           ; $FFEE: Timer Input Capture 1
   0: =$FFF0         VEC_RTI:        EQU   $FFF0           ; $FFF0: Real Time Interrupt
   0: =$FFF2         VEC_IRQ:        EQU   $FFF2           ; $FFF2: #IRQ 
   0: =$FFF4         VEC_XIRQ:       EQU   $FFF4           ; $FFF4: #XIRQ
   0: =$FFF6         VEC_SWI:        EQU   $FFF6           ; $FFF6: Software Interrupt
   0: =$FFF8         VEC_ILOP:       EQU   $FFF8           ; $FFF8: Illegal Opecode Trap
   0: =$FFFA         VEC_COP:        EQU   $FFFA           ; $FFFA: COP (Watchdog) Failure
   0: =$FFFC         VEC_CMF:        EQU   $FFFC           ; $FFFC: Clock Monitor Fail
   0: =$FFFE         VEC_RESET:      EQU   $FFFE           ; $FFFE: Reset
   0:
2000:                                ORG   $2000
2000:
2000: =$80           rx_queue_size:  EQU   128
2000:                rx_queue:       RMB   rx_queue_size
2080: =$80           tx_queue_size:  EQU   128
2080:                tx_queue:       RMB   tx_queue_size
2100:
2100:                ;;; SCI: Enable Rx interrupt
2100: =$2C           RX_INT_TX_NO:   EQU   SCCR2_TE_bm|SCCR2_RE_bm|SCCR2_RIE_bm
2100: =$AC           RX_INT_TX_INT:  EQU   RX_INT_TX_NO|SCCR2_TIE_bm
2100:
1000:                                ORG   $1000
1000: =$FFF          stack:          EQU   *-1             ; MC6801's SP is post-decrement/pre-increment
1000:
1000:                                ORG   $1000
1000:                initialize:
1000: 8E 0F FF                       LDS   #stack
1003: CE 20 00                       LDX   #rx_queue
1006: C6 80                          LDAB  #rx_queue_size
1008: BD 10 AA                       JSR   queue_init
100B: CE 20 80                       LDX   #tx_queue
100E: C6 80                          LDAB  #tx_queue_size
1010: BD 10 AA                       JSR   queue_init
1013:                ;; Initialize SCI
1013: 7F 00 2C                       CLR   SCCR1           ; 8bit 1stop
1016: 86 00                          LDAA  #BAUD_SCP1_gc|BAUD_SCR1_gc  ; E/16
1018: 97 2B                          STAA  BAUD
101A: 86 2C                          LDAA  #RX_INT_TX_NO
101C: 97 2D                          STAA  SCCR2           ; enable Tx and Rx/Interrupt
101E: 0E                             CLI                   ; enable IRQ
101F:
101F:                receive_loop:
101F: 8D 59                          BSR   getchar
1021: 24 FC                          BCC   receive_loop
1023:                echo_back:
1023: 16                             TAB
1024: 8D 6C                          BSR   putchar         ; echo
1026: 86 20                          LDAA  #' '            ; space
1028: 8D 68                          BSR   putchar
102A: 8D 12                          BSR   put_hex8        ; print in hex
102C: 86 20                          LDAA  #' '            ; space
102E: 8D 62                          BSR   putchar
1030: 8D 2A                          BSR   put_bin8        ; print in binary
1032: 8D 02                          BSR   newline
1034: 20 E9                          BRA   receive_loop
1036:
1036:                ;;; Put newline
1036:                ;;; @clobber A
1036:                newline:
1036: 86 0D                          LDAA  #$0d
1038: 8D 58                          BSR   putchar
103A: 86 0A                          LDAA  #$0a
103C: 20 54                          BRA   putchar
103E:
103E:                ;;; Print uint8_t in hex
103E:                ;;; @param B uint8_t value to be printed in hex.
103E:                ;;; @clobber A
103E:                put_hex8:
103E: 86 30                          LDAA  #'0'
1040: 8D 50                          BSR   putchar
1042: 86 78                          LDAA  #'x'
1044: 8D 4C                          BSR   putchar
1046: 17                             TBA
1047: 44                             LSRA
1048: 44                             LSRA
1049: 44                             LSRA
104A: 44                             LSRA
104B: 8D 01                          BSR   put_hex4
104D: 17                             TBA
104E:                put_hex4:
104E: 84 0F                          ANDA  #$0f
1050: 81 0A                          CMPA  #10
1052: 25 04                          BLO   put_hex8_dec
1054: 8B 37                          ADDA  #'A'-10
1056: 20 3A                          BRA   putchar
1058:                put_hex8_dec:
1058: 8B 30                          ADDA  #'0'
105A: 20 36                          BRA   putchar
105C:
105C:                ;;; Print uint8_t in binary
105C:                ;;; @param B uint8_t value to be printed in binary.
105C:                ;;; @clobber A
105C:                put_bin8:
105C: 37                             PSHB
105D: 86 30                          LDAA  #'0'
105F: 8D 31                          BSR   putchar
1061: 86 62                          LDAA  #'b'
1063: 8D 2D                          BSR   putchar
1065: 8D 05                          BSR   put_bin4
1067: 58                             LSLB
1068: 8D 02                          BSR   put_bin4
106A: 33                             PULB
106B: 39                             RTS
106C:                put_bin4:
106C: 8D 01                          BSR   put_bin2
106E: 58                             LSLB
106F:                put_bin2:
106F: 8D 01                          BSR   put_bin1
1071: 58                             LSLB
1072:                put_bin1:
1072: 86 30                          LDAA  #'0'
1074: 5D                             TSTB                  ; chech MSB
1075: 2A 01                          BPL   put_bin0        ; MSB=0
1077: 4C                             INCA                  ; MSB=1
1078:                put_bin0:
1078: 20 18                          BRA   putchar
107A:
107A:                ;;; Get character
107A:                ;;; @return A
107A:                ;;; @return CC.C 0 if no character
107A:                getchar:
107A: 37                             PSHB
107B: 07                             TPA
107C: 36                             PSHA                  ; save CC
107D: 0F                             SEI                   ; disable IRQ
107E: 3C                             PSHX
107F: CE 20 00                       LDX   #rx_queue
1082: BD 10 D5                       JSR   queue_remove
1085: 38                             PULX
1086: 16                             TAB                   ; char? in B
1087: 32                             PULA                  ; restore CC to A
1088: 25 04                          BCS   getchar_end
108A: 06                             TAP
108B: 0C                             CLC                   ; clear carry
108C: 33                             PULB
108D: 39                             RTS
108E:                getchar_end:
108E: 06                             TAP
108F: 0D                             SEC                   ; set carry
1090: 17                             TBA
1091: 33                             PULB
1092:
1092:                ;;; Put character
1092:                ;;; @param A
1092:                putchar:
1092: 37                             PSHB
1093: 36                             PSHA
1094: 16                             TAB                   ; char in B
1095: 07                             TPA
1096: 36                             PSHA                  ; save CC
1097: 0F                             SEI                   ; disable IRQ
1098: 17                             TBA                   ; char in A
1099: 3C                             PSHX
109A: CE 20 80                       LDX   #tx_queue
109D: BD 10 B9                       JSR   queue_add
10A0: 38                             PULX
10A1: 86 AC                          LDAA  #RX_INT_TX_INT  ; Enable Tx interrupt
10A3: 97 2D                          STAA  SCCR2
10A5: 32                             PULA                  ; restore CC
10A6: 06                             TAP
10A7: 32                             PULA
10A8: 33                             PULB
10A9: 39                             RTS
10AA:
10AA:                                INCLUDE               "queue.inc"
10AA:                ;;; [queue] queue structure
10AA: =$0            queue_len:      EQU   0               ; queue length
10AA: =$1            queue_size:     EQU   1               ; buffer size
10AA: =$2            queue_put:      EQU   2               ; queue put index
10AA: =$3            queue_get:      EQU   3               ; queue get index
10AA: =$4            queue_buf:      EQU   4               ; buffer start offset
10AA:
10AA:                ;;; [queue] Initialize queue
10AA:                ;;; @param X queue work space pointer
10AA:                ;;; @param B queue work space size
10AA:                ;;; @clobber B
10AA:                queue_init:
10AA: 37                             PSHB
10AB: 3C                             PSHX
10AC:                queue_init_loop:
10AC: 6F 00                          CLR   0,x
10AE: 08                             INX
10AF: 5A                             DECB
10B0: 26 FA                          BNE   queue_init_loop
10B2: 38                             PULX
10B3: 33                             PULB
10B4: C0 04                          SUBB  #queue_buf
10B6: E7 01                          STAB  queue_size,x
10B8: 39                             RTS
10B9:
10B9:                ;;; [queue] Add an element to queue
10B9:                ;;; @param X queue work space pointer
10B9:                ;;; @param A an element
10B9:                ;;; @return CC.C 0 if queue is full
10B9:                queue_add:
10B9: 37                             PSHB
10BA: E6 00                          LDAB  queue_len,x
10BC: E1 01                          CMPB  queue_size,x
10BE: 24 13                          BHS   queue_add_return    ; carry is cleared
10C0: E6 02                          LDAB  queue_put,x     ; 8 bits offset
10C2: 3C                             PSHX
10C3: 3A                             ABX                   ; X+=B
10C4: A7 04                          STAA  queue_buf,x     ; store an element
10C6: 38                             PULX
10C7: 6C 00                          INC   queue_len,x
10C9: 5C                             INCB
10CA: E7 02                          STAB  queue_put,x
10CC: E1 01                          CMPB  queue_size,x
10CE: 25 03                          BLO   queue_add_return    ; carry is set
10D0: 6F 02                          CLR   queue_put,x
10D2: 0D                             SEC                   ; set carry
10D3:                queue_add_return:
10D3: 33                             PULB
10D4: 39                             RTS
10D5:
10D5:                ;;; [queue] Remove an element from queue
10D5:                ;;; @param X queue work space pointer
10D5:                ;;; @return A an element
10D5:                ;;; @return CC.C 0 if queue is empty
10D5:                queue_remove:
10D5: 6D 00                          TST   queue_len,x
10D7: 26 02                          BNE   queue_remove_elem
10D9: 0C                             CLC                   ; clear carry
10DA: 39                             RTS
10DB:                queue_remove_elem
10DB: 37                             PSHB
10DC: E6 03                          LDAB  queue_get,x     ; 8 bits offset
10DE: 3C                             PSHX
10DF: 3A                             ABX                   ; X+=B
10E0: A6 04                          LDAA  queue_buf,x     ; read an element
10E2: 38                             PULX
10E3: 6A 00                          DEC   queue_len,x
10E5: 5C                             INCB
10E6: E7 03                          STAB  queue_get,x
10E8: E1 01                          CMPB  queue_size,x
10EA: 25 03                          BLO   queue_remove_return ; carry is set
10EC: 6F 03                          CLR   queue_get,x
10EE: 0D                             SEC                   ; set carry
10EF:                queue_remove_return:
10EF: 33                             PULB
10F0: 39                             RTS
10F1:
10F1:                ;;; Local Variables:
10F1:                ;;; mode: asm
10F1:                ;;; End:
10F1:                ;;; vim: set ft=asm et ts=4 sw=4:
10F1:
10F1:                isr_sci:
10F1: D6 2E                          LDAB  SCSR
10F3: C5 0E                          BITB  #SCSR_OR_bm|SCSR_NF_bm|SCSR_FE_bm
10F5: 26 21                          BNE   isr_sci_error
10F7: C5 20                          BITB  #SCSR_RDRF_bm
10F9: 27 08                          BEQ   isr_sci_send
10FB:                isr_sci_receive:
10FB: 96 2F                          LDAA  SCDR            ; receive character
10FD: CE 20 00                       LDX   #rx_queue
1100: BD 10 B9                       JSR   queue_add
1103:                isr_sci_send:
1103: C5 80                          BITB  #SCSR_TDRE_bm
1105: 27 0A                          BEQ   isr_sci_return
1107: CE 20 80                       LDX   #tx_queue
110A: BD 10 D5                       JSR   queue_remove
110D: 24 03                          BCC   isr_sci_empty
110F: 97 2F                          STAA  SCDR            ; send character
1111:                isr_sci_return:
1111: 3B                             RTI
1112:                isr_sci_empty:
1112: 86 2C                          LDAA  #RX_INT_TX_NO
1114: 97 2D                          STAA  SCCR2           ; disable Tx interrupt
1116: 20 F9                          BRA   isr_sci_return
1118:                isr_sci_error:
1118: 96 2F                          LDAA  SCDR            ; reset ORFE
111A: 20 E7                          BRA   isr_sci_send
111C:
FFD6:                                ORG   VEC_SCI
FFD6: 10 F1                          FDB   isr_sci
FFD8:
FFFE:                                ORG   VEC_RESET
FFFE: 10 00                          FDB   initialize

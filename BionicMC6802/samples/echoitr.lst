          0 :                            cpu     6800
          0 :                            include "mc6800.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6800/MC6802/MC6808
(1)       0 :                    ;;; Condition Code Register (CC)
(1)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 CC_OVERFLOW   equ  %00000010   ; set to 1 if overflow occurred
(1)       0 : =4                 CC_ZERO       equ  %00000100   ; set to 1 if result is zero
(1)       0 : =8                 CC_NEGATIVE   equ  %00001000   ; set to 1 if result is negative
(1)       0 : =10                CC_IRQ        equ  %00010000   ; if 1, IRQ is masked
(1)       0 : =20                CC_HALF_CARRY equ  %00100000   ; if 1, decimal carry from least digit occurred
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =FFF8              VEC_IRQ:        equ     $FFF8  ; $FFF8: Maskable Interrupt Request
(1)       0 : =FFFA              VEC_SWI:        equ     $FFFA  ; $FFFA: Software Interrupt
(1)       0 : =FFFC              VEC_NMI:        equ     $FFFC  ; $FFFC: Non Maskable Interrupt
(1)       0 : =FFFE              VEC_RESET:      equ     $FFFE  ; $FFFE: Reset
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     $DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 :
       2000 :                            org     $2000
       2000 :
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       rmb     rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       rmb     tx_queue_size
       2100 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
       2100 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
       2100 :                    tx_int_control: rmb     1
       2101 :
       1000 :                            org     $1000
       1000 : =FFF               stack:  equ     *-1             ; MC6801's SP is post-decrement/pre-increment
       1000 :
       1000 :                            org     $1000
       1000 :                    initialize:
       1000 : 8E 0F FF                   lds     #stack
       1003 : CE 20 00                   ldx     #rx_queue
       1006 : C6 80                      ldab    #rx_queue_size
       1008 : BD 10 B8                   jsr     queue_init
       100B : CE 20 80                   ldx     #tx_queue
       100E : C6 80                      ldab    #tx_queue_size
       1010 : BD 10 B8                   jsr     queue_init
       1013 :                            ;; initialize ACIA
       1013 : 86 03                      ldaa    #CDS_RESET_gc   ; master reset
       1015 : B7 DF 00                   staa    ACIA_control
       1018 : 86 94                      ldaa    #RX_INT_TX_NO
       101A : B7 DF 00                   staa    ACIA_control
       101D : 7F 21 00                   clr     tx_int_control  ; disable Tx interrupt
       1020 : 0E                         cli                     ; enable IRQ
       1021 :
       1021 :                    receive_loop:
       1021 : 8D 59                      bsr     getchar
       1023 : 24 FC                      bcc     receive_loop
       1025 :                    echo_back:
       1025 : 16                         tab
       1026 : 8D 6B                      bsr     putchar         ; echo
       1028 : 86 20                      ldaa    #' '            ; space
       102A : 8D 67                      bsr     putchar
       102C : 8D 12                      bsr     put_hex8        ; print in hex
       102E : 86 20                      ldaa    #' '            ; space
       1030 : 8D 61                      bsr     putchar
       1032 : 8D 2A                      bsr     put_bin8        ; print in binary
       1034 : 8D 02                      bsr     newline
       1036 : 20 E9                      bra     receive_loop
       1038 :
       1038 :                    ;;; Put newline
       1038 :                    ;;; @clobber A
       1038 :                    newline:
       1038 : 86 0D                      ldaa    #$0d
       103A : 8D 57                      bsr     putchar
       103C : 86 0A                      ldaa    #$0a
       103E : 20 53                      bra     putchar
       1040 :
       1040 :                    ;;; Print uint8_t in hex
       1040 :                    ;;; @param B uint8_t value to be printed in hex.
       1040 :                    ;;; @clobber A
       1040 :                    put_hex8:
       1040 : 86 30                      ldaa    #'0'
       1042 : 8D 4F                      bsr     putchar
       1044 : 86 78                      ldaa    #'x'
       1046 : 8D 4B                      bsr    putchar
       1048 : 17                         tba
       1049 : 44                         lsra
       104A : 44                         lsra
       104B : 44                         lsra
       104C : 44                         lsra
       104D : 8D 01                      bsr     put_hex4
       104F : 17                         tba
       1050 :                    put_hex4:
       1050 : 84 0F                      anda    #$0f
       1052 : 81 0A                      cmpa    #10
       1054 : 25 04                      blo     put_hex8_dec
       1056 : 8B 37                      adda    #'A'-10
       1058 : 20 39                      bra     putchar
       105A :                    put_hex8_dec:
       105A : 8B 30                      adda    #'0'
       105C : 20 35                      bra    putchar
       105E :
       105E :                    ;;; Print uint8_t in binary
       105E :                    ;;; @param B uint8_t value to be printed in binary.
       105E :                    ;;; @clobber A
       105E :                    put_bin8:
       105E : 37                         pshb
       105F : 86 30                      ldaa    #'0'
       1061 : 8D 30                      bsr     putchar
       1063 : 86 62                      ldaa    #'b'
       1065 : 8D 2C                      bsr     putchar
       1067 : 8D 05                      bsr     put_bin4
       1069 : 58                         lslb
       106A : 8D 02                      bsr     put_bin4
       106C : 33                         pulb
       106D : 39                         rts
       106E :                    put_bin4:
       106E : 8D 01                      bsr     put_bin2
       1070 : 58                         lslb
       1071 :                    put_bin2:
       1071 : 8D 01                      bsr     put_bin1
       1073 : 58                         lslb
       1074 :                    put_bin1:
       1074 : 86 30                      ldaa    #'0'
       1076 : 5D                         tstb                    ; chech MSB
       1077 : 2A 01                      bpl     put_bin0        ; MSB=0
       1079 : 4C                         inca                    ; MSB=1
       107A :                    put_bin0:
       107A : 20 17                      bra     putchar
       107C :
       107C :                    ;;; Get character
       107C :                    ;;; @return A
       107C :                    ;;; @return CC.C 0 if no character
       107C :                    ;;; @clobber X
       107C :                    getchar:
       107C : 37                         pshb
       107D : 07                         tpa
       107E : 36                         psha                    ; save CC
       107F : 0F                         sei                     ; disable IRQ
       1080 : CE 20 00                   ldx     #rx_queue
       1083 : BD 11 08                   jsr     queue_remove
       1086 : 16                         tab                     ; char? in B
       1087 : 32                         pula                    ; restore CC to A
       1088 : 25 04                      bcs     getchar_exit
       108A : 06                         tap
       108B : 0C                         clc                     ; clear carry
       108C : 33                         pulb
       108D : 39                         rts
       108E :                    getchar_exit:
       108E : 06                         tap
       108F : 0D                         sec                     ; set carry
       1090 : 17                         tba
       1091 : 33                         pulb
       1092 : 39                         rts
       1093 :
       1093 :                    ;;; Put character
       1093 :                    ;;; @param A
       1093 :                    ;;; @clobber X
       1093 :                    putchar:
       1093 : 37                         pshb
       1094 : 36                         psha
       1095 : 16                         tab                     ; char in B
       1096 : 07                         tpa
       1097 : 36                         psha                    ; save CC
       1098 :                    putchar_retry:
       1098 : 17                         tba                     ; char in A
       1099 : CE 20 80                   ldx     #tx_queue
       109C : 0F                         sei                     ; disable IRQ
       109D : BD 10 E5                   jsr     queue_add
       10A0 : 0E                         cli                     ; enable IRQ
       10A1 : 24 F5                      bcc     putchar_retry   ; branch if queue is full
       10A3 : 0F                         sei                     ; disable IRQ
       10A4 : 7D 21 00                   tst     tx_int_control
       10A7 : 26 08                      bne     putchar_exit
       10A9 : 86 B4                      ldaa    #RX_INT_TX_INT  ; enable Tx interrupt
       10AB : B7 DF 00                   staa    ACIA_control
       10AE : 73 21 00                   com     tx_int_control
       10B1 :                    putchar_exit:
       10B1 : 32                         pula                    ; restore CC
       10B2 : 06                         tap
       10B3 : 32                         pula
       10B4 : 33                         pulb
       10B5 : 39                         rts
       10B6 :
       10B6 :                            include "queue.inc"
(1)    10B6 :                    ;;; [queue] queue structure
(1)    10B6 : =0                 queue_len:      equ     0       ; queue length
(1)    10B6 : =1                 queue_size:     equ     1       ; buffer size
(1)    10B6 : =2                 queue_put:      equ     2       ; queue put index
(1)    10B6 : =3                 queue_get:      equ     3       ; queue get index
(1)    10B6 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    10B6 :
(1)    10B6 :                    ;;; [queue] Initialize queue
(1)    10B6 :                    ;;; @param X queue work space pointer
(1)    10B6 :                    ;;; @param B queue work space size
(1)    10B6 :                    ;;; @clobber B
(1)    10B6 :                    queue_init_tmp:
(1)    10B6 :                            rmb     2
(1)    10B8 :                    queue_init:
(1)    10B8 : FF 10 B6                   stx     queue_init_tmp  ; save X
(1)    10BB : 37                         pshb
(1)    10BC :                    queue_init_loop:
(1)    10BC : 6F 00                      clr     0,x
(1)    10BE : 08                         inx
(1)    10BF : 5A                         decb
(1)    10C0 : 26 FA                      bne     queue_init_loop
(1)    10C2 : FE 10 B6                   ldx     queue_init_tmp  ; restore X
(1)    10C5 : 33                         pulb
(1)    10C6 : C0 04                      subb    #queue_buf
(1)    10C8 : E7 01                      stab    queue_size,x
(1)    10CA : 39                         rts
(1)    10CB :
(1)    10CB :                    ;;; [abx] Add B to X
(1)    10CB :                    ;;; @return X X+B
(1)    10CB :                    abx_tmp:
(1)    10CB :                            rmb     2
(1)    10CD :                    abx:
(1)    10CD : 37                 	pshb
(1)    10CE : FF 10 CB                   stx     abx_tmp
(1)    10D1 : FB 10 CC                   addb    abx_tmp+1
(1)    10D4 : F7 10 CC                   stab    abx_tmp+1
(1)    10D7 : 5F                         clrb
(1)    10D8 : F9 10 CB                   adcb    abx_tmp
(1)    10DB : F7 10 CB                   stab    abx_tmp
(1)    10DE : FE 10 CB                   ldx     abx_tmp
(1)    10E1 : 33                         pulb
(1)    10E2 : 39                         rts
(1)    10E3 :
(1)    10E3 :                    ;;; [queue] Add an element to queue
(1)    10E3 :                    ;;; @param X queue work space pointer
(1)    10E3 :                    ;;; @param A an element
(1)    10E3 :                    ;;; @return CC.C 0 if queue is full
(1)    10E3 :                    queue_add_tmp:
(1)    10E3 :                            rmb     2
(1)    10E5 :                    queue_add:
(1)    10E5 : 37                 	pshb
(1)    10E6 : E6 00                      ldab    queue_len,x
(1)    10E8 : E1 01                      cmpb    queue_size,x
(1)    10EA : 24 18                      bhs     queue_add_return ; carry is cleared
(1)    10EC : E6 02                      ldab    queue_put,x     ; 8 bits offset
(1)    10EE : FF 10 E3                   stx     queue_add_tmp   ; save X
(1)    10F1 : 8D DA                      bsr     abx
(1)    10F3 : A7 04                      staa    queue_buf,x     ; store an element
(1)    10F5 : FE 10 E3                   ldx     queue_add_tmp   ; restore X
(1)    10F8 : 6C 00                      inc     queue_len,x
(1)    10FA : 5C                         incb
(1)    10FB : E7 02                      stab    queue_put,x
(1)    10FD : E1 01                      cmpb    queue_size,x
(1)    10FF : 25 03                      blo     queue_add_return ; carry is set
(1)    1101 : 6F 02                      clr     queue_put,x
(1)    1103 : 0D                         sec                     ; set carry
(1)    1104 :                    queue_add_return:
(1)    1104 : 33                 	pulb
(1)    1105 : 39                         rts
(1)    1106 :
(1)    1106 :                    ;;; [queue] Remove an element from queue
(1)    1106 :                    ;;; @param X queue work space pointer
(1)    1106 :                    ;;; @return A an element
(1)    1106 :                    ;;; @return CC.C 0 if queue is empty
(1)    1106 :                    queue_remove_tmp:
(1)    1106 :                            rmb     2
(1)    1108 :                    queue_remove:
(1)    1108 : 6D 00                      tst     queue_len,x
(1)    110A : 26 02                      bne     queue_remove_elem
(1)    110C : 0C                         clc                     ; clear carry
(1)    110D : 39                         rts
(1)    110E :                    queue_remove_elem
(1)    110E : 37                 	pshb
(1)    110F : E6 03                      ldab    queue_get,x     ; 8 bits offset
(1)    1111 : FF 11 06                   stx     queue_remove_tmp ;save X
(1)    1114 : 8D B7                      bsr     abx
(1)    1116 : A6 04                      ldaa    queue_buf,x     ; read an element
(1)    1118 : FE 11 06                   ldx     queue_remove_tmp ; restore X
(1)    111B : 6A 00                      dec     queue_len,x
(1)    111D : 5C                         incb
(1)    111E : E7 03                      stab    queue_get,x
(1)    1120 : E1 01                      cmpb    queue_size,x
(1)    1122 : 25 03                      blo     queue_remove_return ; carry is set
(1)    1124 : 6F 03                      clr     queue_get,x
(1)    1126 : 0D                         sec                     ; set carry
(1)    1127 :                    queue_remove_return:
(1)    1127 : 33                         pulb
(1)    1128 : 39                         rts
(1)    1129 :
(1)    1129 :                    ;;; Local Variables:
(1)    1129 :                    ;;; mode: asm
(1)    1129 :                    ;;; End:
(1)    1129 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       1129 :
       1129 :                    isr_irq:
       1129 : F6 DF 00                   ldab    ACIA_status
       112C : C5 80                      bitb    #IRQF_bm
       112E : 27 23                      beq     isr_irq_exit
       1130 : C5 70                      bitb    #FERR_bm|OVRN_bm|PERR_bm
       1132 : 27 03                      beq     isr_irq_receive
       1134 : B6 DF 01                   ldaa    ACIA_data       ; reset error flags
       1137 :                    isr_irq_receive:
       1137 : C5 01                      bitb    #RDRF_bm
       1139 : 27 09                      beq     isr_irq_send
       113B : B6 DF 01                   ldaa    ACIA_data       ; receive character
       113E : CE 20 00                   ldx     #rx_queue
       1141 : BD 10 E5                   jsr     queue_add
       1144 :                    isr_irq_send:
       1144 : C5 02                      bitb    #TDRE_bm
       1146 : 27 0B                      beq     isr_irq_exit
       1148 : CE 20 80                   ldx     #tx_queue
       114B : BD 11 08                   jsr     queue_remove
       114E : 24 04                      bcc     isr_irq_send_empty
       1150 : B7 DF 01                   staa    ACIA_data       ; send character
       1153 :                    isr_irq_exit:
       1153 : 3B                         rti
       1154 :                    isr_irq_send_empty:
       1154 : 86 94                      ldaa    #RX_INT_TX_NO
       1156 : B7 DF 00                   staa    ACIA_control    ; disable Tx interrupt
       1159 : 7F 21 00                   clr     tx_int_control
       115C : 3B                         rti
       115D :
       FFF8 :                            org     VEC_IRQ
       FFF8 : 11 29                      fdb     isr_irq
       FFFA :
       FFFE :                            org     VEC_RESET
       FFFE : 10 00                      fdb     initialize

   0:                                CPU   6800
   0:                                INCLUDE               "mc6800.inc"
   0:                ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:                ;;; MC6800/MC6802/MC6808
   0:                ;;; Condition Code Register (CC)
   0: =$1            CC_CARRY        EQU   %00000001       ; set to 1 if carry occurred
   0: =$2            CC_OVERFLOW     EQU   %00000010       ; set to 1 if overflow occurred
   0: =$4            CC_ZERO         EQU   %00000100       ; set to 1 if result is zero
   0: =$8            CC_NEGATIVE     EQU   %00001000       ; set to 1 if result is negative
   0: =$10           CC_IRQ          EQU   %00010000       ; if 1, IRQ is masked
   0: =$20           CC_HALF_CARRY   EQU   %00100000       ; if 1, decimal carry from least digit occurred
   0:
   0:                ;;; Vector
   0: =$FFF8         VEC_IRQ:        EQU   $FFF8           ; $FFF8: Maskable Interrupt Request
   0: =$FFFA         VEC_SWI:        EQU   $FFFA           ; $FFFA: Software Interrupt
   0: =$FFFC         VEC_NMI:        EQU   $FFFC           ; $FFFC: Non Maskable Interrupt
   0: =$FFFE         VEC_RESET:      EQU   $FFFE           ; $FFFE: Reset
   0:
   0:                ;;; MC6850 Asynchronous Communication Interface Adapter
   0: =$DF00         ACIA:           EQU   $DF00
   0:                                INCLUDE               "mc6850.inc"
   0:                ;;; -*- mode: asm; mode: flyspell-prog; -*-
   0:
   0:                ;;; MC6850
   0:                ;;; Asynchronous Communication Interface Adapter
   0:
   0:                ;;; Control register
   0: =$DF00         ACIA_control:   EQU   ACIA+0
   0:                ;; Counter Divider Select Bits
   0: =$3            CDS_gm:         EQU   %11             ; Group mask
   0: =$0            CDS_DIV1_gc:    EQU   %00000000       ; /1
   0: =$1            CDS_DIV16_gc:   EQU   %00000001       ; /16
   0: =$2            CDS_DIV64_gc:   EQU   %00000010       ; /64
   0: =$3            CDS_RESET_gc:   EQU   %00000011       ; Master Reset
   0:                ;; Word Select Bits
   0: =$1C           WSB_gm:         EQU   %00011100       ; Group mask
   0: =$0            WSB_7E2_gc:     EQU   %00000000       ; 7 Bits + Even Parity + 2 Stop Bits
   0: =$4            WSB_7O2_gc:     EQU   %00000100       ; 7 bits + Odd Parity  + 2 Stop Bits
   0: =$8            WSB_7E1_gc:     EQU   %00001000       ; 7 bits + Even Parity + 1 Stop Bits
   0: =$C            WSB_7O1_gc:     EQU   %00001100       ; 7 bits + Odd Parity  + 1 Stop Bits
   0: =$10           WSB_8N2_gc:     EQU   %00010000       ; 8 bits + No Parity   + 2 Stop Bits
   0: =$14           WSB_8N1_gc:     EQU   %00010100       ; 8 bits + No Parity   + 1 Stop Bits
   0: =$18           WSB_8E1_gc:     EQU   %00011000       ; 8 bits + Even Parity + 1 Stop Bits
   0: =$1C           WSB_8O1_gc:     EQU   %00011100       ; 8 bits + Odd Parity  + 1 Stop Bits
   0:                ;; Transmit Control Bits
   0: =$60           TCB_gm:         EQU   %01100000       ; Group mask
   0: =$0            TCB_DI_gc:      EQU   %00000000       ; RTS=Low,  Tx Interrupt Disabled
   0: =$20           TCB_EI_gc:      EQU   %00100000       ; RTS=Low,  Tx Interrupt Enabled
   0: =$40           TCB_RTS_gc:     EQU   %01000000       ; RTS=High, Tx Interrupt Disabled
   0: =$60           TCB_BREAK_gc:   EQU   %01100000       ; RTS=Low,  Tx Interrupt Disabled
   0:                ; Transmit Break Level
   0: =$80           RIEB_bm:        EQU   %10000000       ; Receive Interrupt Enable Bit mask
   0:
   0:                ;;; Status register
   0: =$DF00         ACIA_status:    EQU   ACIA+0
   0: =$1            RDRF_bm:        EQU   %00000001       ; Receive Data Register Full
   0: =$2            TDRE_bm:        EQU   %00000010       ; Transmit Data Register Empty
   0: =$4            DCDF_bm:        EQU   %00000100       ; Data Carrier Detect Flag
   0: =$8            CTSF_bm:        EQU   %00001000       ; Clear To Send Flag
   0: =$10           FERR_bm:        EQU   %00010000       ; Frame Error Flag
   0: =$20           OVRN_bm:        EQU   %00100000       ; Receiver Overrun Flag
   0: =$40           PERR_bm:        EQU   %01000000       ; Parity Error Flag
   0: =$80           IRQF_bm:        EQU   %10000000       ; Interrupt Request Flag
   0:
   0:                ;;; Data register
   0: =$DF01         ACIA_data:      EQU   ACIA+1          ; Data register
   0:
2000:                                ORG   $2000
2000:
2000: =$80           rx_queue_size:  EQU   128
2000:                rx_queue:       RMB   rx_queue_size
2080: =$94           RX_INT_TX_NO:   EQU   WSB_8N1_gc|RIEB_bm
2080:
1000:                                ORG   $1000
1000: =$FFF          stack:          EQU   *-1             ; MC6801's SP is post-decrement/pre-increment
1000:
1000:                                ORG   $1000
1000:                initialize:
1000: 8E 0F FF                       LDS   #stack
1003: CE 20 00                       LDX   #rx_queue
1006: C6 80                          LDAB  #rx_queue_size
1008: BD 10 34                       JSR   queue_init
100B:                ;; initialize ACIA
100B: 86 03                          LDAA  #CDS_RESET_gc   ; Master reset
100D: B7 DF 00                       STAA  ACIA_control
1010: 86 94                          LDAA  #RX_INT_TX_NO
1012: B7 DF 00                       STAA  ACIA_control
1015: 0E                             CLI                   ; Enable IRQ
1016:
1016: CE 20 00                       LDX   #rx_queue
1019:                receive_loop:
1019: 0F                             SEI                   ; Disable IRQ
101A: BD 10 84                       JSR   queue_remove
101D: 0E                             CLI                   ; Enable IRQ
101E: 24 F9                          BCC   receive_loop
1020:                transmit_loop:
1020: F6 DF 00                       LDAB  ACIA_status
1023: C5 02                          BITB  #TDRE_bm
1025: 27 F9                          BEQ   transmit_loop
1027:                transmit_data:
1027: B7 DF 01                       STAA  ACIA_data
102A: 81 0D                          CMPA  #$0d
102C: 26 EB                          BNE   receive_loop
102E: 86 0A                          LDAA  #$0a
1030: 20 EE                          BRA   transmit_loop
1032:
1032:                                INCLUDE               "queue.inc"
1032:                ;;; [queue] queue structure
1032: =$0            queue_len:      EQU   0               ; queue length
1032: =$1            queue_size:     EQU   1               ; buffer size
1032: =$2            queue_put:      EQU   2               ; queue put index
1032: =$3            queue_get:      EQU   3               ; queue get index
1032: =$4            queue_buf:      EQU   4               ; buffer start offset
1032:
1032:                ;;; [queue] Initialize queue
1032:                ;;; @param X queue work space pointer
1032:                ;;; @param B queue work space size
1032:                ;;; @clobber B
1032:                queue_init_tmp:
1032:                                RMB   2
1034:                queue_init:
1034: FF 10 32                       STX   queue_init_tmp  ; save X
1037: 37                             PSHB
1038:                queue_init_loop:
1038: 6F 00                          CLR   0,x
103A: 08                             INX
103B: 5A                             DECB
103C: 26 FA                          BNE   queue_init_loop
103E: FE 10 32                       LDX   queue_init_tmp  ; restore X
1041: 33                             PULB
1042: C0 04                          SUBB  #queue_buf
1044: E7 01                          STAB  queue_size,x
1046: 39                             RTS
1047:
1047:                ;;; [abx] Add B to X
1047:                ;;; @return X X+B
1047:                abx_tmp:
1047:                                RMB   2
1049:                abx:
1049: 37                             PSHB
104A: FF 10 47                       STX   abx_tmp
104D: FB 10 48                       ADDB  abx_tmp+1
1050: F7 10 48                       STAB  abx_tmp+1
1053: 5F                             CLRB
1054: F9 10 47                       ADCB  abx_tmp
1057: F7 10 47                       STAB  abx_tmp
105A: FE 10 47                       LDX   abx_tmp
105D: 33                             PULB
105E: 39                             RTS
105F:
105F:                ;;; [queue] Add an element to queue
105F:                ;;; @param X queue work space pointer
105F:                ;;; @param A an element
105F:                ;;; @return CC.C 0 if queue is full
105F:                queue_add_tmp:
105F:                                RMB   2
1061:                queue_add:
1061: 37                             PSHB
1062: E6 00                          LDAB  queue_len,x
1064: E1 01                          CMPB  queue_size,x
1066: 24 18                          BHS   queue_add_return    ; carry is cleared
1068: E6 02                          LDAB  queue_put,x     ; 8 bits offset
106A: FF 10 5F                       STX   queue_add_tmp   ; save X
106D: 8D DA                          BSR   abx
106F: A7 04                          STAA  queue_buf,x     ; store an element
1071: FE 10 5F                       LDX   queue_add_tmp   ; restore X
1074: 6C 00                          INC   queue_len,x
1076: 5C                             INCB
1077: E7 02                          STAB  queue_put,x
1079: E1 01                          CMPB  queue_size,x
107B: 25 03                          BLO   queue_add_return    ; carry is set
107D: 6F 02                          CLR   queue_put,x
107F: 0D                             SEC                   ; set carry
1080:                queue_add_return:
1080: 33                             PULB
1081: 39                             RTS
1082:
1082:                ;;; [queue] Remove an element from queue
1082:                ;;; @param X queue work space pointer
1082:                ;;; @return A an element
1082:                ;;; @return CC.C 0 if queue is empty
1082:                queue_remove_tmp:
1082:                                RMB   2
1084:                queue_remove:
1084: 6D 00                          TST   queue_len,x
1086: 26 02                          BNE   queue_remove_elem
1088: 0C                             CLC                   ; clear carry
1089: 39                             RTS
108A:                queue_remove_elem
108A: 37                             PSHB
108B: E6 03                          LDAB  queue_get,x     ; 8 bits offset
108D: FF 10 82                       STX   queue_remove_tmp    ;save X
1090: 8D B7                          BSR   abx
1092: A6 04                          LDAA  queue_buf,x     ; read an element
1094: FE 10 82                       LDX   queue_remove_tmp    ; restore X
1097: 6A 00                          DEC   queue_len,x
1099: 5C                             INCB
109A: E7 03                          STAB  queue_get,x
109C: E1 01                          CMPB  queue_size,x
109E: 25 03                          BLO   queue_remove_return ; carry is set
10A0: 6F 03                          CLR   queue_get,x
10A2: 0D                             SEC                   ; set carry
10A3:                queue_remove_return:
10A3: 33                             PULB
10A4: 39                             RTS
10A5:
10A5:                ;;; Local Variables:
10A5:                ;;; mode: asm
10A5:                ;;; End:
10A5:                ;;; vim: set ft=asm et ts=4 sw=4:
10A5:
10A5:                isr_irq:
10A5: F6 DF 00                       LDAB  ACIA_status
10A8: C5 80                          BITB  #IRQF_bm
10AA: 27 0D                          BEQ   isr_irq_return
10AC:                isr_irq_receive:
10AC: C5 01                          BITB  #RDRF_bm
10AE: 27 09                          BEQ   isr_irq_recv_end
10B0: B6 DF 01                       LDAA  ACIA_data
10B3: CE 20 00                       LDX   #rx_queue
10B6: BD 10 61                       JSR   queue_add
10B9:                isr_irq_recv_end:
10B9:                isr_irq_return:
10B9: 3B                             RTI
10BA:
FFF8:                                ORG   VEC_IRQ
FFF8: 10 A5                          FDB   isr_irq
FFFA:
FFFE:                                ORG   VEC_RESET
FFFE: 10 00                          FDB   initialize

          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     z88
          0 :                            option  "reg-alias", "disable"
          0 :                            option  "optimize-index", "enable"
          0 :
          0 :                            include "z88.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; Z88
(1)       0 : =D5                FLAGS:  equ     %D5                  ; R/W: Flags register
(1)       0 : =80                F_CARRY:        equ     %(2)10000000 ; set to 1 if carry
(1)       0 : =40                F_ZERO:         equ     %(2)01000000 ; set to 1 if zero
(1)       0 : =20                F_SIGN:         equ     %(2)00100000 ; set to 1 if negative
(1)       0 : =10                F_OVERFLOW:     equ     %(2)00010000 ; set to 1 if overflow
(1)       0 : =8                 F_DECIMAL_ADJ:  equ     %(2)00001000 ; decimal adjust
(1)       0 : =4                 F_HALF_CARRY:   equ     %(2)00000100 ; set to 1 if carry from bit-3
(1)       0 : =2                 F_FAST_INTR:    equ     %(2)00000010 ; fast interrupt status
(1)       0 : =1                 F_BANK:         equ     %(2)00000001 ; bank address
(1)       0 :                    ;;;
(1)       0 : =D6                RP0:    equ     %D6             ; R/W: Register Pointer 0
(1)       0 : =D7                RP1:    equ     %D7             ; R/W: Register Pointer 1
(1)       0 : =D8                SPH:    equ     %D8             ; R/W: Stack Pointer High
(1)       0 : =D9                SPL:    equ     %D9             ; R/W: Stack Pointer Low
(1)       0 : =DA                IPH:    equ     %DA             ; R/W: Instruction Pointer High
(1)       0 : =DB                IPL:    equ     %DB             ; R/W: Instruction Pointer Low
(1)       0 :                    ;;; Interrupt
(1)       0 : =DC                IRQ:    equ     %DC             ; R/W: Interrupt Request
(1)       0 : =1                 IRQ_IRQ0:       equ     IMR_IRQ0
(1)       0 : =2                 IRQ_IRQ1:       equ     IMR_IRQ1
(1)       0 : =4                 IRQ_IRQ2:       equ     IMR_IRQ2
(1)       0 : =8                 IRQ_IRQ3:       equ     IMR_IRQ3
(1)       0 : =10                IRQ_IRQ4:       equ     IMR_IRQ4
(1)       0 : =20                IRQ_IRQ5:       equ     IMR_IRQ5
(1)       0 : =40                IRQ_IRQ6:       equ     IMR_IRQ6
(1)       0 : =80                IRQ_IRQ7:       equ     IMR_IRQ7
(1)       0 : =DD                IMR:    equ     %DD             ; R/W: Interrupt Mask
(1)       0 : =1                 IMR_IRQ0:       equ     (1 SHL 0)
(1)       0 : =2                 IMR_IRQ1:       equ     (1 SHL 1)
(1)       0 : =4                 IMR_IRQ2:       equ     (1 SHL 2)
(1)       0 : =8                 IMR_IRQ3:       equ     (1 SHL 3)
(1)       0 : =10                IMR_IRQ4:       equ     (1 SHL 4)
(1)       0 : =20                IMR_IRQ5:       equ     (1 SHL 5)
(1)       0 : =40                IMR_IRQ6:       equ     (1 SHL 6)
(1)       0 : =80                IMR_IRQ7:       equ     (1 SHL 7)
(1)       0 : =DE                SYM:    equ     %DE                  ; R/W; System Mode
(1)       0 : =1                 SYM_INTR:       equ     %(2)00000001 ; Global interrupt enable
(1)       0 : =2                 SYM_FAST:       equ     %(2)00000010 ; Fast interrupt enable
(1)       0 : =7                 SYM_FAST_gm:    equ     %(2)111      ; Fast interrupt select mask
(1)       0 : =2                 SYM_FAST_gp:    equ     2            ; Fast interrupt select position
(1)       0 :                    ;;; Interrupt vectors
(1)       0 : =0                 VEC_RESERVE0:   equ     %0000   ; Reserved
(1)       0 : =2                 VEC_RESERVE1:   equ     %0002   ; Reserved
(1)       0 : =4                 VEC_IRQ3_P32:   equ     %0004   ; IRQ3: P32 external
(1)       0 : =6                 VEC_IRQ3_P22:   equ     %0006   ; IRQ3: P22 external
(1)       0 : =8                 VEC_IRQ0_P23:   equ     %0008   ; IRQ0: P23 external
(1)       0 : =A                 VEC_IRQ0_P33:   equ     %000A   ; IRQ0: P33 external
(1)       0 : =C                 VEC_IRQ2:       equ     %000C   ; IRQ2: Counter 0 zero/P26,P27 external
(1)       0 : =E                 VEC_IRQ5:       equ     %000E   ; IRQ5: Counter 1 zero/P36,P37 external
(1)       0 : =10                VEC_UART_ERROR: equ     %0010   ; IRQ6: UART overrun/framing/parity error
(1)       0 : =12                VEC_UART_BREAK: equ     %0012   ; IRQ6: UART break/control char/wake-up
(1)       0 : =14                VEC_UART_RECV:  equ     %0014   ; IRQ6: UART receive/P30 external
(1)       0 : =16                VEC_IRQ6_P20:   equ     %0016   ; IRQ6: P20 external
(1)       0 : =18                VEC_IRQ1_P21:   equ     %0018   ; IRQ1: UART zero/P21 external
(1)       0 : =1A                VEC_UART_TRNS:  equ     %001A   ; IRQ1: UART transmit/P31 external
(1)       0 : =1C                VEC_IRQ4:       equ     %001C   ; IRQ4: P24/P25 external
(1)       0 : =1E                VEC_IRQ7:       equ     %001E   ; IRQ7: P34/P35 external
(1)       0 :                    ;;; Reset origin
(1)       0 : =20                ORG_RESET:      equ     %0020   ; RESET
(1)       0 :                    ;;; I/O Ports
(1)       0 : =D0                PORT0:  equ     %D0                  ; Port 0
(1)       0 : =D1                PORT1:  equ     %D1                  ; Port 1
(1)       0 : =D2                PORT2:  equ     %D2                  ; Port 2
(1)       0 : =D3                PORT3:  equ     %D3                  ; Port 3
(1)       0 : =D4                PORT4:  equ     %D4                  ; Port 4
(1)       0 : =F0                P0M:    equ     %F0                  ; W/O: Port 0 mode
(1)       0 : =FF                P0M_ADRH:       equ     %(2)11111111  ; Port 0 is A15-A8
(1)       0 : =F1                PM:     equ     %F1                   ; W/O: Port mode
(1)       0 : =80                PM_P1BUS:       equ     %(2)10000000  ; Port 1 is AD7-AD0
(1)       0 : =8                 PM_DM:          equ     %(2)00001000  ; P35: 1=#DM, 0=I/O
(1)       0 : =F4                H0C:    equ     %F4                   ; W/O: Handshake 0 Control
(1)       0 : =F5                H1C:    equ     %F5                   ; W/O: Handshake 1 Control
(1)       0 : =F6                P4D:    equ     %F6             ; W/O: Port 4 direction: 1=in, 0=out
(1)       0 : =F7                P4OD:   equ     %F7 ; W/O: Port 4 open-drain: 1=open-drain, 0=push-pull
(1)       0 : =F8                P2AM:   equ     %F8 ; W/O: Port 2/3 A mode; P31,P30,P21,P20
(1)       0 : =F9                P2BM:   equ     %F9 ; W/O: Port 2/3 B mode; P33,P32,P23,P21
(1)       0 : =FA                P2CM:   equ     %FA ; W/O: Port 2/3 C mode; P35,P34,P25,P24
(1)       0 : =FB                P2DM:   equ     %FB ; W/O: Port 2/3 D mode; P37,P36,P27,P26
(1)       0 : =0                 P2M_IN_gm:      equ     %(2)00     ; input
(1)       0 : =1                 P2M_INTR_gm:    equ     %(2)01     ; input, interrupt enabled
(1)       0 : =2                 P2M_OUTPP_gm:   equ     %(2)10     ; output, push-pull
(1)       0 : =3                 P2M_OUTOD_gm:   equ     %(2)11     ; output, open-drain
(1)       0 : =FC                P2AIP:  equ     %FC ; W/O: Port 2/3 A interrupt pending; P33,P32,P23,P22,P31,P30,P21,P20
(1)       0 : =FD                P2BIP:  equ     %FD ; W/O: Port 2/3 B interrupt pending; P37,P36,P27,P26,P35,P34,P25,P24
(1)       0 : =FE                EMT:    equ     %FE ; W/O: External Memory Timing
(1)       0 : =2                 EMT_STACK_DM:   equ     %(2)00000010 ; Stack is on data memory
(1)       0 : =FF                IPR:    equ     %FF             ; W/O: Interrupt Priority Register
(1)       0 : =2                 IPR_BCA:        equ     %(2)00000010 ; B > C > A
(1)       0 : =10                IPR_ABC:        equ     %(2)00010000 ; A > B > C
(1)       0 : =12                IPR_BAC:        equ     %(2)00010010 ; B > A > C
(1)       0 : =80                IPR_CAB:        equ     %(2)10000000 ; C > A > B
(1)       0 : =82                IPR_CBA:        equ     %(2)10000010 ; C > B > A
(1)       0 : =90                IPR_ACB:        equ     %(2)10010000 ; A > C > B
(1)       0 : =1                 IPR_A10:        equ     %(2)00000001 ; Group A: IRQ1 > IRQ0
(1)       0 : =0                 IPR_B234:       equ     %(2)00000000 ; Group B: IRQ2 > IRQ3 > IRQ4
(1)       0 : =8                 IPR_B243:       equ     %(2)00001000 ; Group B: IRQ2 > IRQ4 > IRQ3
(1)       0 : =4                 IPR_B342:       equ     %(2)00000100 ; Group B: IRQ3 > IRQ4 > IRQ2
(1)       0 : =C                 IPR_B432:       equ     %(2)00001100 ; Group B: IRQ4 > IRQ3 > IRQ2
(1)       0 : =0                 IPR_C567:       equ     %(2)00000000 ; Group C: IRQ5 > IRQ6 > IRQ7
(1)       0 : =40                IPR_C576:       equ     %(2)01000000 ; Group C: IRQ5 > IRQ7 > IRQ6
(1)       0 : =20                IPR_C675:       equ     %(2)00100000 ; Group C: IRQ6 > IRQ7 > IRQ5
(1)       0 : =60                IPR_C765:       equ     %(2)01100000 ; Group C: IRQ7 > IRQ6 > IRQ5
(1)       0 :                    ;;; UART
(1)       0 : =EB                UTC:    equ     %EB                  ; UART Transmit Control
(1)       0 : =1                 UTC_TDMAENB:    equ     %(2)00000001 ; Transmit DMA enable
(1)       0 : =2                 UTC_TBE:        equ     %(2)00000010 ; Transmit buffer empty
(1)       0 : =4                 UTC_ZC:         equ     %(2)00000100 ; Zero count
(1)       0 : =8                 UTC_TENB:       equ     %(2)00001000 ; Transmit enable
(1)       0 : =10                UTC_WUENB:      equ     %(2)00010000 ; Wake-up enable
(1)       0 : =20                UTC_STPBT2:     equ     %(2)00100000 ; 2 stop bits, 0=1 stop bit
(1)       0 : =40                UTC_SENBRK:     equ     %(2)01000000 ; Send break
(1)       0 : =80                UTC_TXDTSEL:    equ     %(2)10000000 ; Transmit data select, 1=P31 is TXD
(1)       0 : =EC                URC:    equ     %EC                  ; UART Receive Control
(1)       0 : =1                 URC_RCA:        equ     %(2)00000001 ; Receive character available
(1)       0 : =2                 URC_RENB:       equ     %(2)00000010 ; Receive enable
(1)       0 : =4                 URC_PERR:       equ     %(2)00000100 ; Parity error
(1)       0 : =8                 URC_OVERR:      equ     %(2)00001000 ; Overrun error
(1)       0 : =10                URC_FERR:       equ     %(2)00010000 ; Framing error
(1)       0 : =20                URC_BRKD:       equ     %(2)00100000 ; Break detect
(1)       0 : =40                URC_CCD:        equ     %(2)01000000 ; Control Character detect
(1)       0 : =80                URC_WUD:        equ     %(2)10000000 ; Wake-up detect
(1)       0 : =ED                UIE:    equ     %ED                  ; UART Interrupt Enable
(1)       0 : =1                 UIE_RCAIE:      equ     %(2)00000001 ; Receive character available interrupt enable
(1)       0 : =2                 UIE_RDMAENB:    equ     %(2)00000010 ; Receive DMA enable
(1)       0 : =4                 UIE_TIE:        equ     %(2)00000100 ; Transmit interrupt enable
(1)       0 : =8                 UIE_ZCIE:       equ     %(2)00001000 ; Zero count interrupt enable
(1)       0 : =10                UIE_REIE:       equ     %(2)00010000 ; Receive error interrupt enable
(1)       0 : =20                UIE_BRKIE:      equ     %(2)00100000 ; Break interrupt enable
(1)       0 : =40                UIE_CCIE:       equ     %(2)01000000 ; Control Character interrupt enable
(1)       0 : =80                UIE_WUIE:       equ     %(2)10000000 ; Wake-up interrupt enable
(1)       0 : =EF                UIO:    equ     %EF                  ; UART Data
(1)       0 : =FA                UMA:    equ     %FA                  ; BANK1: UART Mode A
(1)       0 : =4                 UMA_EVNPAR:     equ     %(2)00000100 ; Even parity
(1)       0 : =8                 UMA_PARENB:     equ     %(2)00001000 ; Parity enable
(1)       0 : =20                UMA_BCP7:       equ     %(2)00100000 ; 7 bits per Character
(1)       0 : =30                UMA_BCP8:       equ     %(2)00110000 ; 8 bits per Character
(1)       0 : =0                 UMA_CR1:        equ     %(2)00000000 ; Clock rate x1
(1)       0 : =40                UMA_CR16:       equ     %(2)01000000 ; Clock rate x16
(1)       0 : =80                UMA_CR32:       equ     %(2)10000000 ; Clock rate x32
(1)       0 : =C0                UMA_CR64:       equ     %(2)11000000 ; Clock rate x64
(1)       0 : =FB                UMB:    equ     %FB                  ; BANK1: UART Mode B
(1)       0 : =1                 UMB_LBENB:      equ     %(2)00000001 ; Loopback enable
(1)       0 : =2                 UMB_BRGENB:     equ     %(2)00000010 ; Baud-rate generator enable
(1)       0 : =4                 UMB_BRGSRC:     equ     %(2)00000100 ; Baud-rate generator source; 1=XTAL/4, 0=P20
(1)       0 : =8                 UMB_TCIS:       equ     %(2)00001000 ; Transmit clock input select; 1=Baud-rate G., 0=P21
(1)       0 : =10                UMB_RCIS:       equ     %(2)00010000 ; Receive clock input select; 1=Baud-rate G., 0=P20
(1)       0 : =20                UMB_AE:         equ     %(2)00100000 ; Auto-echo
(1)       0 : =0                 UMB_COS_P21:    equ     %(2)00000000 ; P21=I/O
(1)       0 : =40                UMB_COS_SYSTEM: equ     %(2)01000000 ; P21=System clock (XTAL/2)
(1)       0 : =80                UMB_COS_BAUD:   equ     %(2)10000000 ; P21=Baud-rate generator output
(1)       0 : =C0                UMB_COS_TDR:    equ     %(2)11000000 ; P21=Transmit data rate
(1)       0 :                    ;;; UBRG=1/(2 x baud-rate x UMA_CR x BRG-input) - 1
(1)       0 : =F8                UBG0:   equ     %F8             ; BANK1: UART Baud-Rate Generator 0
(1)       0 : =F9                UBG1:   equ     %f9             ; BANK1: UART Baud-Rate Generator 1
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =FF00              USART:          equ     %FF00
          0 : =0                 USARTD:         equ     0       ; Receive/Transmit data
          0 : =1                 USARTS:         equ     1       ; Status register
          0 : =1                 USARTC:         equ     1       ; Control register
          0 : =2                 USARTRI:        equ     2       ; Receive interrupt name (IRQ0~2)
          0 : =3                 USARTTI:        equ     3       ; Transmit interrupt name (IRQ0~2)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     %(2)11000000
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 SHL MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 SHL MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 SHL MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     %(2)00100000
(1)       0 : =10                MODE_PARITY_bm: equ     %(2)00010000
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     %(2)00001100
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 SHL MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 SHL MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 SHL MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 SHL MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     %(2)00000011
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 SHL MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ     (2 SHL MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ     (3 SHL MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     %(2)10000000   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     %(2)01000000   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     %(2)00100000   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     %(2)00010000   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     %(2)00001000   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     %(2)00000100   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     %(2)00000010   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     %(2)00000001   ; Transmit enable
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     %(2)10000000   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     %(2)01000000   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     %(2)00100000   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     %(2)00010000   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     %(2)00001000   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     %(2)00000100   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     %(2)00000010   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     %(2)00000001   ; Transmitter ready
(1)       0 :                    ;;; Interrupt name for receive/transmit interrupt
(1)       0 : =0                 INTR_NONE:      equ     0
(1)       0 : =1                 INTR_IRQ0:      equ     1
(1)       0 : =2                 INTR_IRQ1:      equ     2
(1)       0 : =3                 INTR_IRQ2:      equ     3
          0 :
          0 : =27                TXRX_ENABLE:    equ     CMD_RTS_bm LOR CMD_DTR_bm LOR CMD_RxEN_bm LOR CMD_TxEN_bm
          0 : =37                RXERR_RESET:    equ     TXRX_ENABLE LOR CMD_ER_bm
          0 :
       2000 :                            org     %2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       ds      tx_queue_size
       2100 :
       2100 : =20                tx_intr_enable: equ     %20     ; R32
       2100 :
       1000 :                            org     %1000
       1000 : =1000              stack:  equ     $
       1000 :
          8 :                            org     VEC_IRQ0_P23
          8 : 01 C6                      dw      isr_intr_rx
          A :
         18 :                            org     VEC_IRQ1_P21
         18 : 01 F7                      dw      isr_intr_tx
         1A :
         20 :                            org     ORG_RESET
         20 :                            setrp   %C0
         20 :                    init_config:
         20 : E6 FE 02                   ld      EMT, #EMT_STACK_DM ; stack is on external data memory
         23 : E6 F0 FF                   ld      P0M, #P0M_ADRH     ; Port 0 is address bus high
         26 : E6 F1 88                   ld      PM, #PM_P1BUS | PM_DM ; Port 1 is data bus and address bus low
         29 : C6 D8 10 00                ldw     SPH, #stack
         2D : C6 C2 20 00                ldw     rr2, #rx_queue
         31 : 1C 80                      ld      r1, #rx_queue_size
         33 : F6 01 2E                   call    queue_init
         36 : C6 C2 20 80                ldw     rr2, #tx_queue
         3A : 1C 80                      ld      r1, #tx_queue_size
         3C : F6 01 2E                   call    queue_init
         3F :
         3F :                    init_usart:
         3F : C6 CC FF 00                ldw     rr12, #USART
         43 : B0 C0                      clr     r0
         45 : F7 0D 01                   lde     USARTC(rr12), r0
         48 : F7 0D 01                   lde     USARTC(rr12), r0
         4B : F7 0D 01                   lde     USARTC(rr12), r0 ; safest way to sync mode
         4E : 0C 40                      ld      r0, #CMD_IR_bm
         50 : F7 0D 01                   lde     USARTC(rr12), r0 ; reset
         53 : FF                         nop
         54 : FF                         nop
         55 : 0C 4E                      ld      r0, # MODE_STOP1_gc LOR MODE_LEN8_gc LOR MODE_BAUD_X16
         57 : F7 0D 01                   lde     USARTC(rr12), r0 ; async 1stop 8data x16
         5A : FF                         nop
         5B : FF                         nop
         5C : 0C 27                      ld      r0, #TXRX_ENABLE
         5E : F7 0D 01                   lde     USARTC(rr12), r0 ; RTS/DTR, error reset, Rx enable, Tx enable
         61 : 0C 01                      ld      r0, #INTR_IRQ0
         63 : F7 0D 02                   lde     USARTRI(rr12), r0 ; enable RxRDY interrupt using IRQ0
         66 : 0C 00                      ld      r0, #INTR_NONE
         68 : F7 0D 03                   lde     USARTTI(rr12), r0 ; disable TxRDY interrupt
         6B : B0 20                      clr     tx_intr_enable
         6D :
         6D : E6 F9 04                   ld      P2BM, #P2M_INTR_gm SHL 2 ; P23=input, interrupt enabled
         70 : E6 F8 04                   ld      P2AM, #P2M_INTR_gm SHL 2 ; P21=input, interrupt enabled
         73 : E6 FF 10                   ld      IPR, #IPR_ABC ; (IRQ0 > IRQ1) > (IRQ2,3,4) > (IRQ5,6,7)
         76 : E6 DD 03                   ld      IMR, #IMR_IRQ0 LOR IMR_IRQ1 ; enable IRQ0, IRQ1
         79 : 9F                         ei
         7A :
         7A :                    receive_loop:
         7A : F6 00 F5                   call    getchar
         7D : FB FB                      jr      nc, receive_loop
         7F :                    echo_back:
         7F : 18 C0                      ld      r1, r0          ; save letter
         81 : F6 01 07                   call    putchar         ; echo
         84 : 0C 20                      ld      r0, #' '        ; space
         86 : F6 01 07                   call    putchar
         89 : F6 00 A2                   call    put_hex8        ; print in hex
         8C : 0C 20                      ld      r0, #' '        ; space
         8E : F6 01 07                   call    putchar
         91 : F6 00 C7                   call    put_bin8        ; print in binary
         94 : F6 00 99                   call    newline
         97 : 8B E1                      jr      receive_loop
         99 :
         99 :                    ;;; Put newline
         99 :                    ;;; @clobber r0
         99 :                    newline:
         99 : 0C 0D                      ld      r0, #%0D
         9B : F6 01 07                   call    putchar
         9E : 0C 0A                      ld      r0, #%0A
         A0 : 8B 65                      jr      putchar
         A2 :
         A2 :                    ;;; Print uint8_t in hex
         A2 :                    ;;; @param r1 uint8_t value to be printed in hex.
         A2 :                    ;;; @clobber r0
         A2 :                    put_hex8:
         A2 : 0C 30                      ld      r0, #'0'
         A4 : F6 01 07                   call    putchar
         A7 : 0C 78                      ld      r0, #'x'
         A9 : F6 01 07                   call    putchar
         AC : 08 C1                      ld      r0, r1
         AE : F0 C0                      swap    r0
         B0 : F6 00 B5                   call    put_hex4
         B3 : 08 C1                      ld      r0, r1
         B5 :                    put_hex4:
         B5 : 56 C0 0F                   and     r0, #%F
         B8 : A6 C0 0A                   cp      r0, #10
         BB : 7B 05                      jr      c, put_hex8_dec ; A<10
         BD : 06 C0 37                   add     r0, #'A'-10
         C0 : 8B 45                      jr      putchar
         C2 :                    put_hex8_dec:
         C2 : 06 C0 30                   add     r0, #'0'
         C5 : 8B 40                      jr      putchar
         C7 :
         C7 :                    ;;; Print uint8_t in binary
         C7 :                    ;;; @param r1 uint8_t value to be printed in binary.
         C7 :                    ;;; @clobber r0
         C7 :                    put_bin8:
         C7 : 70 C4                      push    r4
         C9 : 0C 30                      ld      r0, #'0'
         CB : F6 01 07                   call    putchar
         CE : 0C 62                      ld      r0, #'b'
         D0 : F6 01 07                   call    putchar
         D3 : 48 C1                      ld      r4, r1
         D5 : F6 00 E0                   call    put_bin4
         D8 : 90 C4                      rl      r4
         DA : F6 00 E0                   call    put_bin4
         DD : 50 C4                      pop     r4
         DF : AF                         ret
         E0 :                    put_bin4:
         E0 : F6 00 E5                   call    put_bin2
         E3 : 90 C4                      rl      r4
         E5 :                    put_bin2:
         E5 : F6 00 EA                   call    put_bin1
         E8 : 90 C4                      rl      r4
         EA :                    put_bin1:
         EA : 0C 30                      ld      r0, #'0'
         EC : 42 44                      or      r4, r4
         EE : DD 00 F3                   jp      pl, put_bin0    ; MSB=0
         F1 : 0C 31                      ld      r0, #'1'        ; MSB=1
         F3 :                    put_bin0:
         F3 : 8B 12                      jr      putchar
         F5 :
         F5 :                    ;;; Get character
         F5 :                    ;;; @return r0
         F5 :                    ;;; @return FLAGS.C 0 if no character
         F5 :                    getchar:
         F5 : 70 C3                      push    r3
         F7 : 70 C2                      push    r2
         F9 : C6 C2 20 00                ldw     rr2, #rx_queue
         FD : 8F                         di
         FE : F6 01 8E                   call    queue_remove
        101 : 9F                         ei
        102 : 50 C2                      pop     r2
        104 : 50 C3                      pop     r3
        106 : AF                         ret
        107 :
        107 :                    ;;; Put character
        107 :                    ;;; @param r0
        107 :                    putchar:
        107 : 70 C0                      push    r0
        109 : 70 C3                      push    r3
        10B : 70 C2                      push    r2
        10D : C6 C2 20 80                ldw     rr2, #tx_queue
        111 :                    putchar_retry:
        111 : 8F                         di
        112 : F6 01 56                   call    queue_add
        115 : 9F                         ei
        116 : FB F9                      jr      nc, putchar_retry ; branch if queue is full
        118 : 50 C2                      pop     r2
        11A : 50 C3                      pop     r3
        11C : 76 20 01                   tm      tx_intr_enable, #1
        11F : EB 0A                      jr      nz, putchar_exit ; already enabled
        121 : 0C 02                      ld      r0, #INTR_IRQ1
        123 : 8F                         di
        124 : F7 0D 03                   lde     USARTTI(rr12), r0
        127 : 46 20 01                   or      tx_intr_enable, #1
        12A : 9F                         ei
        12B :                    putchar_exit:
        12B : 50 C0                      pop     r0
        12D : AF                         ret
        12E :
        12E :                            include "queue.inc"
(1)     12E :                    ;;; [queue] queue structure
(1)     12E : =0                 queue_len:      equ     0       ; queue length
(1)     12E : =1                 queue_size:     equ     1       ; buffer size
(1)     12E : =2                 queue_put:      equ     2       ; queue put index
(1)     12E : =3                 queue_get:      equ     3       ; queue get index
(1)     12E : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     12E :
(1)     12E :                    ;;; [queue] Initialize queue
(1)     12E :                    ;;; @param rr2 queue work space pointer
(1)     12E :                    ;;; @param r1 queue work space size
(1)     12E :                    ;;; @clobber r1
(1)     12E :                    queue_init:
(1)     12E : 70 C0                      push    r0
(1)     130 : 70 C2                      push    r2
(1)     132 : 70 C3                      push    r3
(1)     134 : B0 C0                      clr     r0
(1)     136 : D3 03                      lde     queue_len(rr2), r0
(1)     138 : 08 C1                      ld      r0, r1
(1)     13A : 26 C0 04                   sub     r0, #queue_buf
(1)     13D : F7 03 01                   lde     queue_size(rr2), r0
(1)     140 : A0 C2                      incw    rr2
(1)     142 : A0 C2                      incw    rr2             ; rr2 points queue_put
(1)     144 : 06 C0 02                   add     r0, #2          ; for queue_put and queue_get
(1)     147 : B0 C1                      clr     r1
(1)     149 :                    queue_init_loop:
(1)     149 : D3 13                      lde     @rr2, r1
(1)     14B : A0 C2                      incw    rr2
(1)     14D : 0A FA                      djnz    r0, queue_init_loop
(1)     14F : 50 C3                      pop     r3
(1)     151 : 50 C2                      pop     r2
(1)     153 : 50 C0                      pop     r0
(1)     155 : AF                         ret
(1)     156 :
(1)     156 :                    ;;; [queue] Add an element to queue
(1)     156 :                    ;;; @param rr2 queue work space pointer
(1)     156 :                    ;;; @param r0 an element
(1)     156 :                    ;;; @return FLAGS.C 0 if queue is full
(1)     156 :                    queue_add:
(1)     156 : 70 C1                      push    r1
(1)     158 : 70 C4                      push    r4              ; save r1, r4
(1)     15A : C3 13                      lde     r1, queue_len(rr2)
(1)     15C : 1E                         inc     r1              ; queue_len++
(1)     15D : E7 43 01                   lde     r4, queue_size(rr2)
(1)     160 : A2 14                      cp      r1, r4
(1)     162 : 7B 05                      jr      c, queue_add_store ; queue_len < queue_size
(1)     164 : 50 C4                      pop     r4                 ; restore r1, r4
(1)     166 : 50 C1                      pop     r1
(1)     168 : AF                         ret                     ; return with FLAGS.C=0
(1)     169 :                    queue_add_store:
(1)     169 : D3 13                      lde     queue_len(rr2), r1 ; update queue_len
(1)     16B : E7 13 02                   lde     r1, queue_put(rr2)
(1)     16E : 70 C3                      push    r3              ; save rr2
(1)     170 : 70 C2                      push    r2
(1)     172 : 02 31                      add     r3, r1
(1)     174 : 16 C2 00                   adc     r2, #0          ; rr2=&queue_buf[queue_put]
(1)     177 : F7 03 04                   lde     queue_buf(rr2), r0 ; store an element
(1)     17A : 50 C2                      pop     r2              ; restore rr2 points to queue_put
(1)     17C : 50 C3                      pop     r3
(1)     17E : 1E                         inc     r1              ; queue_put++
(1)     17F : A2 14                      cp      r1, r4
(1)     181 : 7B 02                      jr      c, queue_add_update ; queue_put < queue_size
(1)     183 : B0 C1                      clr     r1
(1)     185 :                    queue_add_update:
(1)     185 : F7 13 02                   lde     queue_put(rr2), r1
(1)     188 : 50 C4                      pop     r4              ; restpre r1, r4
(1)     18A : 50 C1                      pop     r1
(1)     18C : DF                         scf                     ; set carry flag
(1)     18D : AF                         ret
(1)     18E :
(1)     18E :                    ;;; [queue] Remove an element from queue
(1)     18E :                    ;;; @param rr2 queue work space pointer
(1)     18E :                    ;;; @return r0 an element
(1)     18E :                    ;;; @return FLAGS.C 0 if queue is empty
(1)     18E :                    queue_remove:
(1)     18E : 70 C1                      push    r1              ; save r1
(1)     190 : C3 13                      lde     r1, queue_len(rr2)
(1)     192 : 42 11                      or      r1, r1
(1)     194 : EB 04                      jr      nz, queue_remove_elem ; queue_len > 0
(1)     196 : 50 C1                      pop     r1
(1)     198 : CF                         rcf                           ; reset carry flag
(1)     199 : AF                         ret
(1)     19A :                    queue_remove_elem:
(1)     19A : 00 C1                      dec     r1              ; queue_len--
(1)     19C : D3 13                      lde     queue_len(rr2), r1 ; update queue_len
(1)     19E : E7 13 03                   lde     r1, queue_get(rr2)
(1)     1A1 : 70 C3                      push    r3
(1)     1A3 : 70 C2                      push    r2
(1)     1A5 : 02 31                      add     r3, r1
(1)     1A7 : 16 C2 00                   adc     r2, #0          ; rr2=&queue_buf[queue_get]
(1)     1AA : E7 03 04                   lde     r0, queue_buf(rr2) ; read an element
(1)     1AD : 50 C2                      pop     r2              ; restore rr2 points to queue_get
(1)     1AF : 50 C3                      pop     r3
(1)     1B1 : 1E                         inc     r1              ; queue_get++
(1)     1B2 : 70 C4                      push    r4              ; save r4
(1)     1B4 : E7 43 01                   lde     r4, queue_size(rr2)
(1)     1B7 : A2 14                      cp      r1, r4
(1)     1B9 : 50 C4                      pop     r4              ; restore r4
(1)     1BB : 7B 02                      jr      c, queue_remove_update ; queue_get < queue_size
(1)     1BD : B0 C1                      clr     r1
(1)     1BF :                    queue_remove_update:
(1)     1BF : F7 13 03                   lde     queue_get(rr2), r1 ; update queue_get
(1)     1C2 : 50 C1                      pop     r1
(1)     1C4 : DF                         scf                     ; set carry
(1)     1C5 : AF                         ret
(1)     1C6 :
(1)     1C6 :                    ;;; Local Variables:
(1)     1C6 :                    ;;; mode: asm
(1)     1C6 :                    ;;; End:
(1)     1C6 :                    ;;; vim: set ft=asm et ts=4 sw=4:
        1C6 :
        1C6 :                            setrp   -1
        1C6 :                    isr_intr_rx:
        1C6 : E6 FC 20                   ld      P2AIP, #1 SHL 5 ; clear P23 IRQ0
        1C9 : 70 C0                      push    r0
        1CB : 70 C1                      push    r1
        1CD : E7 0D 01                   lde     r0, USARTS(rr12)
        1D0 : 18 C0                      ld      r1, r0
        1D2 : 56 C0 38                   and     r0, #ST_FE_bm LOR ST_OE_bm LOR ST_PE_bm
        1D5 : 6B 05                      jr      z, isr_intr_receive
        1D7 : 0C 37                      ld      r0, #RXERR_RESET
        1D9 : F7 0D 01                   lde     USARTC(rr12), r0 ; reset error flags
        1DC :                    isr_intr_receive:
        1DC : 56 C1 02                   and     r1, #ST_RxRDY_bm
        1DF : 6B 11                      jr      z, isr_intr_rx_exit
        1E1 : C3 0D                      lde     r0, USARTD(rr12)
        1E3 : 70 C3                      push    r3
        1E5 : 70 C2                      push    r2
        1E7 : C6 C2 20 00                ldw     rr2, #rx_queue
        1EB : F6 01 56                   call    queue_add
        1EE : 50 C2                      pop     r2
        1F0 : 50 C3                      pop     r3
        1F2 :                    isr_intr_rx_exit:
        1F2 : 50 C1                      pop     r1
        1F4 : 50 C0                      pop     r0
        1F6 : BF                         iret
        1F7 :
        1F7 :                    isr_intr_tx:
        1F7 : E6 FC 02                   ld      P2AIP, #1 SHL 1 ; clear P21 IRQ1
        1FA : 70 C0                      push    r0
        1FC : E7 0D 01                   lde     r0, USARTS(rr12)
        1FF : 56 C0 01                   and     r0, #ST_TxRDY_bm
        202 : 6B 13                      jr      z, isr_intr_tx_exit
        204 : 70 C3                      push    r3
        206 : 70 C2                      push    r2
        208 : C6 C2 20 80                ldw     rr2, #tx_queue
        20C : F6 01 8E                   call    queue_remove
        20F : 50 C2                      pop     r2
        211 : 50 C3                      pop     r3
        213 : FB 05                      jr      nc, isr_intr_send_empty
        215 : D3 0D                      lde     USARTD(rr12), r0
        217 :                    isr_intr_tx_exit:
        217 : 50 C0                      pop     r0
        219 : BF                         iret
        21A :                    isr_intr_send_empty:
        21A : 0C 00                      ld      r0, #INTR_NONE
        21C : F7 0D 03                   lde     USARTTI(rr12), r0 ; disable Tx interrupt
        21F : B0 20                      clr     tx_intr_enable
        221 : 50 C0                      pop     r0
        223 : BF                         iret

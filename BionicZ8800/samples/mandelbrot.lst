          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     z88
          0 :                            option  "reg-alias", "disable"
          0 :                            option  "optimize-index", "enable"
          0 :
          0 :                            include "z88.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; Z88
(1)       0 : =D5                FLAGS:  equ     %D5                  ; R/W: Flags register
(1)       0 : =80                F_CARRY:        equ     %(2)10000000 ; set to 1 if carry
(1)       0 : =40                F_ZERO:         equ     %(2)01000000 ; set to 1 if zero
(1)       0 : =20                F_SIGN:         equ     %(2)00100000 ; set to 1 if negative
(1)       0 : =10                F_OVERFLOW:     equ     %(2)00010000 ; set to 1 if overflow
(1)       0 : =8                 F_DECIMAL_ADJ:  equ     %(2)00001000 ; decimal adjust
(1)       0 : =4                 F_HALF_CARRY:   equ     %(2)00000100 ; set to 1 if carry from bit-3
(1)       0 : =2                 F_FAST_INTR:    equ     %(2)00000010 ; fast interrupt status
(1)       0 : =1                 F_BANK:         equ     %(2)00000001 ; bank address
(1)       0 :                    ;;;
(1)       0 : =D6                RP0:    equ     %D6             ; R/W: Register Pointer 0
(1)       0 : =D7                RP1:    equ     %D7             ; R/W: Register Pointer 1
(1)       0 : =D8                SPH:    equ     %D8             ; R/W: Stack Pointer High
(1)       0 : =D9                SPL:    equ     %D9             ; R/W: Stack Pointer Low
(1)       0 : =DA                IPH:    equ     %DA             ; R/W: Instruction Pointer High
(1)       0 : =DB                IPL:    equ     %DB             ; R/W: Instruction Pointer Low
(1)       0 :                    ;;; Interrupt
(1)       0 : =DC                IRQ:    equ     %DC             ; R/W: Interrupt Request
(1)       0 : =1                 IRQ_IRQ0:       equ     IMR_IRQ0
(1)       0 : =2                 IRQ_IRQ1:       equ     IMR_IRQ1
(1)       0 : =4                 IRQ_IRQ2:       equ     IMR_IRQ2
(1)       0 : =8                 IRQ_IRQ3:       equ     IMR_IRQ3
(1)       0 : =10                IRQ_IRQ4:       equ     IMR_IRQ4
(1)       0 : =20                IRQ_IRQ5:       equ     IMR_IRQ5
(1)       0 : =40                IRQ_IRQ6:       equ     IMR_IRQ6
(1)       0 : =80                IRQ_IRQ7:       equ     IMR_IRQ7
(1)       0 : =DD                IMR:    equ     %DD             ; R/W: Interrupt Mask
(1)       0 : =1                 IMR_IRQ0:       equ     (1 SHL 0)
(1)       0 : =2                 IMR_IRQ1:       equ     (1 SHL 1)
(1)       0 : =4                 IMR_IRQ2:       equ     (1 SHL 2)
(1)       0 : =8                 IMR_IRQ3:       equ     (1 SHL 3)
(1)       0 : =10                IMR_IRQ4:       equ     (1 SHL 4)
(1)       0 : =20                IMR_IRQ5:       equ     (1 SHL 5)
(1)       0 : =40                IMR_IRQ6:       equ     (1 SHL 6)
(1)       0 : =80                IMR_IRQ7:       equ     (1 SHL 7)
(1)       0 : =DE                SYM:    equ     %DE                  ; R/W; System Mode
(1)       0 : =1                 SYM_INTR:       equ     %(2)00000001 ; Global interrupt enable
(1)       0 : =2                 SYM_FAST:       equ     %(2)00000010 ; Fast interrupt enable
(1)       0 : =7                 SYM_FAST_gm:    equ     %(2)111      ; Fast interrupt select mask
(1)       0 : =2                 SYM_FAST_gp:    equ     2            ; Fast interrupt select position
(1)       0 :                    ;;; Interrupt vectors
(1)       0 : =0                 VEC_RESERVE0:   equ     %0000   ; Reserved
(1)       0 : =2                 VEC_RESERVE1:   equ     %0002   ; Reserved
(1)       0 : =4                 VEC_IRQ3_P32:   equ     %0004   ; IRQ3: P32 external
(1)       0 : =6                 VEC_IRQ3_P22:   equ     %0006   ; IRQ3: P22 external
(1)       0 : =8                 VEC_IRQ0_P23:   equ     %0008   ; IRQ0: P23 external
(1)       0 : =A                 VEC_IRQ0_P33:   equ     %000A   ; IRQ0: P33 external
(1)       0 : =C                 VEC_IRQ2:       equ     %000C   ; IRQ2: Counter 0 zero/P26,P27 external
(1)       0 : =E                 VEC_IRQ5:       equ     %000E   ; IRQ5: Counter 1 zero/P36,P37 external
(1)       0 : =10                VEC_UART_ERROR: equ     %0010   ; IRQ6: UART overrun/framing/parity error
(1)       0 : =12                VEC_UART_BREAK: equ     %0012   ; IRQ6: UART break/control char/wake-up
(1)       0 : =14                VEC_UART_RECV:  equ     %0014   ; IRQ6: UART receive/P30 external
(1)       0 : =16                VEC_IRQ6_P20:   equ     %0016   ; IRQ6: P20 external
(1)       0 : =18                VEC_IRQ1_P21:   equ     %0018   ; IRQ1: UART zero/P21 external
(1)       0 : =1A                VEC_UART_TRNS:  equ     %001A   ; IRQ1: UART transmit/P31 external
(1)       0 : =1C                VEC_IRQ4:       equ     %001C   ; IRQ4: P24/P25 external
(1)       0 : =1E                VEC_IRQ7:       equ     %001E   ; IRQ7: P34/P35 external
(1)       0 :                    ;;; Reset origin
(1)       0 : =20                ORG_RESET:      equ     %0020   ; RESET
(1)       0 :                    ;;; I/O Ports
(1)       0 : =D0                PORT0:  equ     %D0                  ; Port 0
(1)       0 : =D1                PORT1:  equ     %D1                  ; Port 1
(1)       0 : =D2                PORT2:  equ     %D2                  ; Port 2
(1)       0 : =D3                PORT3:  equ     %D3                  ; Port 3
(1)       0 : =D4                PORT4:  equ     %D4                  ; Port 4
(1)       0 : =F0                P0M:    equ     %F0                  ; W/O: Port 0 mode
(1)       0 : =FF                P0M_ADRH:       equ     %(2)11111111  ; Port 0 is A15-A8
(1)       0 : =F1                PM:     equ     %F1                   ; W/O: Port mode
(1)       0 : =80                PM_P1BUS:       equ     %(2)10000000  ; Port 1 is AD7-AD0
(1)       0 : =8                 PM_DM:          equ     %(2)00001000  ; P35: 1=#DM, 0=I/O
(1)       0 : =F4                H0C:    equ     %F4                   ; W/O: Handshake 0 Control
(1)       0 : =F5                H1C:    equ     %F5                   ; W/O: Handshake 1 Control
(1)       0 : =F6                P4D:    equ     %F6             ; W/O: Port 4 direction: 1=in, 0=out
(1)       0 : =F7                P4OD:   equ     %F7 ; W/O: Port 4 open-drain: 1=open-drain, 0=push-pull
(1)       0 : =F8                P2AM:   equ     %F8 ; W/O: Port 2/3 A mode; P31,P30,P21,P20
(1)       0 : =F9                P2BM:   equ     %F9 ; W/O: Port 2/3 B mode; P33,P32,P23,P21
(1)       0 : =FA                P2CM:   equ     %FA ; W/O: Port 2/3 C mode; P35,P34,P25,P24
(1)       0 : =FB                P2DM:   equ     %FB ; W/O: Port 2/3 D mode; P37,P36,P27,P26
(1)       0 : =0                 P2M_IN_gm:      equ     %(2)00     ; input
(1)       0 : =1                 P2M_INTR_gm:    equ     %(2)01     ; input, interrupt enabled
(1)       0 : =2                 P2M_OUTPP_gm:   equ     %(2)10     ; output, push-pull
(1)       0 : =3                 P2M_OUTOD_gm:   equ     %(2)11     ; output, open-drain
(1)       0 : =FC                P2AIP:  equ     %FC ; W/O: Port 2/3 A interrupt pending; P33,P32,P23,P22,P31,P30,P21,P20
(1)       0 : =FD                P2BIP:  equ     %FD ; W/O: Port 2/3 B interrupt pending; P37,P36,P27,P26,P35,P34,P25,P24
(1)       0 : =FE                EMT:    equ     %FE ; W/O: External Memory Timing
(1)       0 : =2                 EMT_STACK_DM:   equ     %(2)00000010 ; Stack is on data memory
(1)       0 : =FF                IPR:    equ     %FF             ; W/O: Interrupt Priority Register
(1)       0 : =2                 IPR_BCA:        equ     %(2)00000010 ; B > C > A
(1)       0 : =10                IPR_ABC:        equ     %(2)00010000 ; A > B > C
(1)       0 : =12                IPR_BAC:        equ     %(2)00010010 ; B > A > C
(1)       0 : =80                IPR_CAB:        equ     %(2)10000000 ; C > A > B
(1)       0 : =82                IPR_CBA:        equ     %(2)10000010 ; C > B > A
(1)       0 : =90                IPR_ACB:        equ     %(2)10010000 ; A > C > B
(1)       0 : =1                 IPR_A10:        equ     %(2)00000001 ; Group A: IRQ1 > IRQ0
(1)       0 : =0                 IPR_B234:       equ     %(2)00000000 ; Group B: IRQ2 > IRQ3 > IRQ4
(1)       0 : =8                 IPR_B243:       equ     %(2)00001000 ; Group B: IRQ2 > IRQ4 > IRQ3
(1)       0 : =4                 IPR_B342:       equ     %(2)00000100 ; Group B: IRQ3 > IRQ4 > IRQ2
(1)       0 : =C                 IPR_B432:       equ     %(2)00001100 ; Group B: IRQ4 > IRQ3 > IRQ2
(1)       0 : =0                 IPR_C567:       equ     %(2)00000000 ; Group C: IRQ5 > IRQ6 > IRQ7
(1)       0 : =40                IPR_C576:       equ     %(2)01000000 ; Group C: IRQ5 > IRQ7 > IRQ6
(1)       0 : =20                IPR_C675:       equ     %(2)00100000 ; Group C: IRQ6 > IRQ7 > IRQ5
(1)       0 : =60                IPR_C765:       equ     %(2)01100000 ; Group C: IRQ7 > IRQ6 > IRQ5
(1)       0 :                    ;;; UART
(1)       0 : =EB                UTC:    equ     %EB                  ; UART Transmit Control
(1)       0 : =1                 UTC_TDMAENB:    equ     %(2)00000001 ; Transmit DMA enable
(1)       0 : =2                 UTC_TBE:        equ     %(2)00000010 ; Transmit buffer empty
(1)       0 : =4                 UTC_ZC:         equ     %(2)00000100 ; Zero count
(1)       0 : =8                 UTC_TENB:       equ     %(2)00001000 ; Transmit enable
(1)       0 : =10                UTC_WUENB:      equ     %(2)00010000 ; Wake-up enable
(1)       0 : =20                UTC_STPBT2:     equ     %(2)00100000 ; 2 stop bits, 0=1 stop bit
(1)       0 : =40                UTC_SENBRK:     equ     %(2)01000000 ; Send break
(1)       0 : =80                UTC_TXDTSEL:    equ     %(2)10000000 ; Transmit data select, 1=P31 is TXD
(1)       0 : =EC                URC:    equ     %EC                  ; UART Receive Control
(1)       0 : =1                 URC_RCA:        equ     %(2)00000001 ; Receive character available
(1)       0 : =2                 URC_RENB:       equ     %(2)00000010 ; Receive enable
(1)       0 : =4                 URC_PERR:       equ     %(2)00000100 ; Parity error
(1)       0 : =8                 URC_OVERR:      equ     %(2)00001000 ; Overrun error
(1)       0 : =10                URC_FERR:       equ     %(2)00010000 ; Framing error
(1)       0 : =20                URC_BRKD:       equ     %(2)00100000 ; Break detect
(1)       0 : =40                URC_CCD:        equ     %(2)01000000 ; Control Character detect
(1)       0 : =80                URC_WUD:        equ     %(2)10000000 ; Wake-up detect
(1)       0 : =ED                UIE:    equ     %ED                  ; UART Interrupt Enable
(1)       0 : =1                 UIE_RCAIE:      equ     %(2)00000001 ; Receive character available interrupt enable
(1)       0 : =2                 UIE_RDMAENB:    equ     %(2)00000010 ; Receive DMA enable
(1)       0 : =4                 UIE_TIE:        equ     %(2)00000100 ; Transmit interrupt enable
(1)       0 : =8                 UIE_ZCIE:       equ     %(2)00001000 ; Zero count interrupt enable
(1)       0 : =10                UIE_REIE:       equ     %(2)00010000 ; Receive error interrupt enable
(1)       0 : =20                UIE_BRKIE:      equ     %(2)00100000 ; Break interrupt enable
(1)       0 : =40                UIE_CCIE:       equ     %(2)01000000 ; Control Character interrupt enable
(1)       0 : =80                UIE_WUIE:       equ     %(2)10000000 ; Wake-up interrupt enable
(1)       0 : =EF                UIO:    equ     %EF                  ; UART Data
(1)       0 : =FA                UMA:    equ     %FA                  ; BANK1: UART Mode A
(1)       0 : =4                 UMA_EVNPAR:     equ     %(2)00000100 ; Even parity
(1)       0 : =8                 UMA_PARENB:     equ     %(2)00001000 ; Parity enable
(1)       0 : =20                UMA_BCP7:       equ     %(2)00100000 ; 7 bits per Character
(1)       0 : =30                UMA_BCP8:       equ     %(2)00110000 ; 8 bits per Character
(1)       0 : =0                 UMA_CR1:        equ     %(2)00000000 ; Clock rate x1
(1)       0 : =40                UMA_CR16:       equ     %(2)01000000 ; Clock rate x16
(1)       0 : =80                UMA_CR32:       equ     %(2)10000000 ; Clock rate x32
(1)       0 : =C0                UMA_CR64:       equ     %(2)11000000 ; Clock rate x64
(1)       0 : =FB                UMB:    equ     %FB                  ; BANK1: UART Mode B
(1)       0 : =1                 UMB_LBENB:      equ     %(2)00000001 ; Loopback enable
(1)       0 : =2                 UMB_BRGENB:     equ     %(2)00000010 ; Baud-rate generator enable
(1)       0 : =4                 UMB_BRGSRC:     equ     %(2)00000100 ; Baud-rate generator source; 1=XTAL/4, 0=P20
(1)       0 : =8                 UMB_TCIS:       equ     %(2)00001000 ; Transmit clock input select; 1=Baud-rate G., 0=P21
(1)       0 : =10                UMB_RCIS:       equ     %(2)00010000 ; Receive clock input select; 1=Baud-rate G., 0=P20
(1)       0 : =20                UMB_AE:         equ     %(2)00100000 ; Auto-echo
(1)       0 : =0                 UMB_COS_P21:    equ     %(2)00000000 ; P21=I/O
(1)       0 : =40                UMB_COS_SYSTEM: equ     %(2)01000000 ; P21=System clock (XTAL/2)
(1)       0 : =80                UMB_COS_BAUD:   equ     %(2)10000000 ; P21=Baud-rate generator output
(1)       0 : =C0                UMB_COS_TDR:    equ     %(2)11000000 ; P21=Transmit data rate
(1)       0 :                    ;;; UBRG=1/(2 x baud-rate x UMA_CR x BRG-input) - 1
(1)       0 : =F8                UBG0:   equ     %F8             ; BANK1: UART Baud-Rate Generator 0
(1)       0 : =F9                UBG1:   equ     %f9             ; BANK1: UART Baud-Rate Generator 1
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =FF00              USART:  equ     %FF00
          0 : =0                 USARTD: equ     0               ; Data register
          0 : =1                 USARTS: equ     1               ; Status register
          0 : =1                 USARTC: equ     1               ; Control register
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     %(2)11000000
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 SHL MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 SHL MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 SHL MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     %(2)00100000
(1)       0 : =10                MODE_PARITY_bm: equ     %(2)00010000
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     %(2)00001100
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 SHL MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 SHL MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 SHL MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 SHL MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     %(2)00000011
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 SHL MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ     (2 SHL MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ     (3 SHL MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     %(2)10000000   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     %(2)01000000   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     %(2)00100000   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     %(2)00010000   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     %(2)00001000   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     %(2)00000100   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     %(2)00000010   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     %(2)00000001   ; Transmit enable
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     %(2)10000000   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     %(2)01000000   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     %(2)00100000   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     %(2)00010000   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     %(2)00001000   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     %(2)00000100   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     %(2)00000010   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     %(2)00000001   ; Transmitter ready
(1)       0 :                    ;;; Interrupt name for receive/transmit interrupt
(1)       0 : =0                 INTR_NONE:      equ     0
(1)       0 : =1                 INTR_IRQ0:      equ     1
(1)       0 : =2                 INTR_IRQ1:      equ     2
(1)       0 : =3                 INTR_IRQ2:      equ     3
          0 :
       1000 :                            org     %1000
       1000 : =1000              stack:  equ     $
       1000 :
         20 :                            org     ORG_RESET
         20 :                            setrp   %C0
         20 :                    init_config:
         20 : E6 FE 02                   ld      EMT, #EMT_STACK_DM ; stack is on external data memory
         23 : E6 F0 FF                   ld      P0M, #P0M_ADRH     ; Port 0 is address bus high
         26 : E6 F1 88                   ld      PM, #PM_P1BUS | PM_DM ; Port 1 is data bus and address bus low
         29 : C6 D8 10 00                ldw     SPH, #stack
         2D :
         2D :                    init_usart:
         2D : C6 CC FF 00                ldw     rr12, #USART
         31 : B0 C0                      clr     r0
         33 : F7 0D 01                   lde     USARTC(rr12), r0
         36 : F7 0D 01                   lde     USARTC(rr12), r0
         39 : F7 0D 01                   lde     USARTC(rr12), r0 ; safest way to sync mode
         3C : 0C 40                      ld      r0, #CMD_IR_bm
         3E : F7 0D 01                   lde     USARTC(rr12), r0 ; reset
         41 : FF                         nop
         42 : FF                         nop
         43 : 0C 4E                      ld      r0, #MODE_STOP1_gc LOR MODE_LEN8_gc LOR MODE_BAUD_X16
         45 : F7 0D 01                   lde     USARTC(rr12), r0 ; async 1stop 8data x16
         48 : FF                         nop
         49 : FF                         nop
         4A : 0C 37                      ld      r0, #CMD_RTS_bm LOR CMD_DTR_bm LOR CMD_ER_bm LOR CMD_RxEN_bm LOR CMD_TxEN_bm
         4C : F7 0D 01                   lde     USARTC(rr12), r0 ; RTS/DTR, error reset, Rx enable, Tx enable
         4F :
         4F : F6 10 00                   call    mandelbrot
         52 :
         52 : 7F                         db      %7F
         53 : 8B FE                      jr      $
         55 :
         55 :                    putchar:
         55 : 70 CD                      push    r13
         57 : 70 CC                      push    r12
         59 : C6 CC FF 00                ldw     rr12, #USART
         5D :                    putchar_loop:
         5D : E7 1D 01                   lde     r1, USARTS(rr12)
         60 : 76 C1 01                   tm      r1, #ST_TxRDY_bm
         63 : 6B F8                      jr      z, putchar_loop
         65 : D3 0D                      lde     USARTD(rr12), r0
         67 : A6 C0 0D                   cp      r0, #%0D
         6A : EB 04                      jr      nz, putchar_end
         6C : 0C 0A                      ld      r0, #%0A
         6E : 8B ED                      jr      putchar_loop
         70 :                    putchar_end:
         70 : 50 CC                      pop     r12
         72 : 50 CD                      pop     r13
         74 : AF                         ret
         75 :
         75 :                            include "mandelbrot.inc"
(1)      10 :                            org     %10
(1)      10 :                    vF:     ds      2
(1)      12 :                    vC:     ds      2
(1)      14 :                    vD:     ds      2
(1)      16 :                    vA:     ds      2
(1)      18 :                    vB:     ds      2
(1)      1A :                    vP:     ds      2
(1)      1C :                    vQ:     ds      2
(1)      1E :                    vS:     ds      2
(1)      20 :                    vT:     ds      2
(1)      22 :                    tmp:    ds      2
(1)      24 :                    vY:     ds      2
(1)      26 :                    vX:     ds      2
(1)      28 :                    vI:     ds      2
(1)      2A :
(1)    1000 :                            org     %1000
(1)    1000 :                    mandelbrot:
(1)    1000 : C6 10 00 32                ldw     vF, #50         ; F=50
(1)    1004 : C6 24 FF F4                ldw     vY, #-12        ; Y=-12
(1)    1008 :                    loop_y:
(1)    1008 : C6 26 FF CF                ldw     vX, #-49        ; X=-39
(1)    100C :                    loop_x:
(1)    100C : C4 26 12                   ldw     vC, vX          ; C=X
(1)    100F : C6 22 00 E5                ldw     tmp, #229
(1)    1013 : 4C 12                      ld      r4, #vC
(1)    1015 : 5C 22                      ld      r5, #tmp
(1)    1017 : F6 11 BF                   call    mulsi2          ; C=X*229
(1)    101A : C6 22 00 64                ldw     tmp, #100
(1)    101E : F6 12 3B                   call    divsi2          ; C=X*229/100
(1)    1021 : C4 24 14                   ldw     vD, vY          ; D=Y
(1)    1024 : C6 22 01 A0                ldw     tmp, #416
(1)    1028 : 4C 14                      ld      r4, #vD
(1)    102A : F6 11 BF                   call    mulsi2          ; D=Y*416
(1)    102D : C6 22 00 64                ldw     tmp, #100
(1)    1031 : F6 12 3B                   call    divsi2          ; D=Y*416/100
(1)    1034 : C4 12 16                   ldw     vA, vC          ; A=C
(1)    1037 : C4 14 18                   ldw     vB, vD          ; B=D
(1)    103A : C6 28 00 00                ldw     vI, #0          ; I=0
(1)    103E :                    loop_i:
(1)    103E : C4 18 1C                   ldw     vQ, vB          ; Q=B
(1)    1041 : 4C 1C                      ld      r4, #vQ
(1)    1043 : 5C 10                      ld      r5, #vF
(1)    1045 : F6 12 3B                   call    divsi2          ; Q=B/F
(1)    1048 : 4C 1E                      ld      r4, #vS
(1)    104A : 5C 1C                      ld      r5, #vQ
(1)    104C : F6 11 2A                   call    negsi2          ; S=-Q
(1)    104F : 5C 10                      ld      r5, #vF
(1)    1051 : F6 11 BF                   call    mulsi2          ; S=-Q*F
(1)    1054 : 5C 18                      ld      r5, #vB
(1)    1056 : F6 11 39                   call    addsi2          ; S=B-Q*F
(1)    1059 : C4 18 22                   ldw     tmp, vB
(1)    105C : 4C 22                      ld      r4, #tmp
(1)    105E : F6 11 BF                   call    mulsi2          ; tmp=B*B
(1)    1061 : C4 16 20                   ldw     vT, vA
(1)    1064 : 4C 20                      ld      r4, #vT
(1)    1066 : 5C 16                      ld      r5, #vA
(1)    1068 : F6 11 BF                   call    mulsi2          ; T=A*A
(1)    106B : 5C 22                      ld      r5, #tmp
(1)    106D : F6 11 49                   call    subsi2          ; T=A*A-B*B
(1)    1070 : 5C 10                      ld      r5, #vF
(1)    1072 : F6 12 3B                   call    divsi2          ; T=(A*A-B*B)/F
(1)    1075 : 5C 12                      ld      r5, #vC
(1)    1077 : F6 11 39                   call    addsi2          ; T=(A*A-B*B)/F+C
(1)    107A : C4 16 22                   ldw     tmp, vA
(1)    107D : 4C 22                      ld      r4, #tmp
(1)    107F : 5C 1E                      ld      r5, #vS
(1)    1081 : F6 11 BF                   call    mulsi2          ; tmp=A*S
(1)    1084 : 5C 10                      ld      r5, #vF
(1)    1086 : F6 12 3B                   call    divsi2          ; tmp=A*S/F
(1)    1089 : C4 16 18                   ldw     vB, vA          ; B=A
(1)    108C : 4C 18                      ld      r4, #vB
(1)    108E : 5C 1C                      ld      r5, #vQ
(1)    1090 : F6 11 BF                   call    mulsi2          ; B=A*Q
(1)    1093 : 5C 22                      ld      r5, #tmp
(1)    1095 : F6 11 39                   call    addsi2          ; B=A*Q+A*S/F
(1)    1098 : 5C 18                      ld      r5, #vB
(1)    109A : F6 11 39                   call    addsi2          ; B=2*(A*Q+A*S/F)
(1)    109D : 5C 14                      ld      r5, #vD
(1)    109F : F6 11 39                   call    addsi2          ; B=2*(A*Q+A*S/F)+D
(1)    10A2 : C4 20 16                   ldw     vA, vT          ; A=T
(1)    10A5 : C4 16 1A                   ldw     vP, vA
(1)    10A8 : 4C 1A                      ld      r4, #vP
(1)    10AA : 5C 10                      ld      r5, #vF
(1)    10AC : F6 12 3B                   call    divsi2          ; P=A/F
(1)    10AF : C4 18 1C                   ldw     vQ, vB
(1)    10B2 : 4C 1C                      ld      r4, #vQ
(1)    10B4 : F6 12 3B                   call    divsi2          ; Q=B/F
(1)    10B7 : C4 1C 22                   ldw     tmp, vQ
(1)    10BA : 4C 22                      ld      r4, #tmp
(1)    10BC : 5C 1C                      ld      r5, #vQ
(1)    10BE : F6 11 BF                   call    mulsi2          ; tmp=Q*Q
(1)    10C1 : C4 1A 20                   ldw     vT, vP
(1)    10C4 : 4C 20                      ld      r4, #vT
(1)    10C6 : 5C 1A                      ld      r5, #vP
(1)    10C8 : F6 11 BF                   call    mulsi2          ; T=P*P
(1)    10CB : 5C 22                      ld      r5, #tmp
(1)    10CD : F6 11 39                   call    addsi2          ; T=P*P+Q*Q
(1)    10D0 : C6 22 00 04                ldw     tmp, #4
(1)    10D4 : 4C 22                      ld      r4, #tmp
(1)    10D6 : 5C 20                      ld      r5, #vT
(1)    10D8 : F6 11 59                   call    cmpsi2          ; 4-T
(1)    10DB : 7B 17                      jr      c, print_i      ; if 4<T
(1)    10DD : A0 28                      incw    vI
(1)    10DF : C6 22 00 10                ldw     tmp, #16
(1)    10E3 : 4C 28                      ld      r4, #vI
(1)    10E5 : 5C 22                      ld      r5, #tmp
(1)    10E7 : F6 11 59                   call    cmpsi2
(1)    10EA : 1D 10 3E                   jp      lt, loop_i      ; if I<16
(1)    10ED : 0C 20                      ld      r0, #' '
(1)    10EF : F6 00 55                   call    putchar
(1)    10F2 : 8B 10                      jr      next_x
(1)    10F4 :                    print_i:
(1)    10F4 : 08 29                      ld      r0, vI+1
(1)    10F6 : 06 C0 30                   add     r0, #'0'
(1)    10F9 : A6 C0 3A                   cp      r0, #'9'+1
(1)    10FC : 7B 03                      jr      c, print_i2     ; if I<'9'+1
(1)    10FE : 06 C0 07                   add     r0, #'A'-'0'-10
(1)    1101 :                    print_i2:
(1)    1101 : F6 00 55                   call    putchar
(1)    1104 :                    next_x:
(1)    1104 : A0 26                      incw    vX
(1)    1106 : C6 22 00 1E                ldw     tmp, #30
(1)    110A : 4C 26                      ld      r4, #vX
(1)    110C : 5C 22                      ld      r5, #tmp
(1)    110E : F6 11 59                   call    cmpsi2
(1)    1111 : 1D 10 0C                   jp      lt, loop_x      ; if X<40
(1)    1114 : 0C 0D                      ld      r0, #%0D
(1)    1116 : F6 00 55                   call    putchar
(1)    1119 : A0 24                      incw    vY
(1)    111B : C6 22 00 0D                ldw     tmp, #13
(1)    111F : 4C 24                      ld      r4, #vY
(1)    1121 : 5C 22                      ld      r5, #tmp
(1)    1123 : F6 11 59                   call    cmpsi2
(1)    1126 : 1D 10 08                   jp      lt, loop_y      ; if X<13
(1)    1129 : AF                         ret
(1)    112A :
(1)    112A :                    ;;; Local Variables:
(1)    112A :                    ;;; mode: asm
(1)    112A :                    ;;; End:
(1)    112A :                    ;;; vim: set ft=asm et ts=4 sw=4:
       112A :                            include "arith.inc"
(1)    112A :                            cpu     z88
(1)    112A :                            option  optimize-index, on
(1)    112A :
(1)    112A :                    ;;; Negation; result = -value
(1)    112A :                    ;;; @param @r4: result
(1)    112A :                    ;;; @param @r5: value
(1)    112A :                    ;;; @clobber r14, r15
(1)    112A :                    negsi2:
(1)    112A : C5 C5 CE                   ldw     rr14, @r5
(1)    112D : 60 CE                      com     r14
(1)    112F : 60 CF                      com     r15
(1)    1131 : A0 CE                      incw    rr14
(1)    1133 : D7 4E                      ld      0(r4), r14
(1)    1135 : 97 F4 01                   ld      1(r4), r15
(1)    1138 : AF                         ret
(1)    1139 :
(1)    1139 :                    ;;; Signed addition: summand += addend
(1)    1139 :                    ;;; @param @r4: summand
(1)    1139 :                    ;;; @param @r5: addend
(1)    1139 :                    ;;; @clobber r14, r15
(1)    1139 :                    addsi2:
(1)    1139 : C5 C4 CE                   ldw     rr14, @r4
(1)    113C : 5E                         inc     r5
(1)    113D : 03 F5                      add     r15, @r5
(1)    113F : 00 C5                      dec     r5
(1)    1141 : 13 E5                      adc     r14, @r5
(1)    1143 : D7 4E                      ld      0(r4), r14
(1)    1145 : 97 F4 01                   ld      1(r4), r15
(1)    1148 : AF                         ret
(1)    1149 :
(1)    1149 :                    ;;; Singed subtraction: minuend -= subtrahend
(1)    1149 :                    ;;; @param @r4: minuend
(1)    1149 :                    ;;; @param @r5: subtrahend
(1)    1149 :                    ;;; @clobber r14, r15
(1)    1149 :                    subsi2:
(1)    1149 : C5 C4 CE                   ldw     rr14, @r4
(1)    114C : 5E                         inc     r5
(1)    114D : 23 F5                      sub     r15, @r5
(1)    114F : 00 C5                      dec     r5
(1)    1151 : 33 E5                      sbc     r14, @r5
(1)    1153 : D7 4E                      ld      0(r4), r14
(1)    1155 : 97 F4 01                   ld      1(r4), r15
(1)    1158 : AF                         ret
(1)    1159 :
(1)    1159 :                    ;;; Signed comparison: minuend - subtrahend
(1)    1159 :                    ;;; @param @r4: minuend
(1)    1159 :                    ;;; @param @r5: subtrahend
(1)    1159 :                    ;;; @clobber r14, r15
(1)    1159 :                    cmpsi2:
(1)    1159 : C5 C4 CE                   ldw     rr14, @r4
(1)    115C : 5E                         inc     r5
(1)    115D : 23 F5                      sub     r15, @r5
(1)    115F : 00 C5                      dec     r5
(1)    1161 : 33 E5                      sbc     r14, @r5        ; rr14=@r4-@r5
(1)    1163 : F6 11 67                   call    addsub_flags    ; set C,Z,S,V
(1)    1166 : AF                         ret
(1)    1167 :
(1)    1167 :                    ;;; Set add/sub flags
(1)    1167 :                    ;;; @param @r4: operand 1
(1)    1167 :                    ;;; @param @r5: operand 2
(1)    1167 :                    ;;; @param rr14: result
(1)    1167 :                    ;;; @param FLAGS
(1)    1167 :                    ;;; @return FLAGS: C, Z, S, V
(1)    1167 :                    addsub_flags:
(1)    1167 : 70 CF                      push    r15
(1)    1169 : 70 CE                      push    r14
(1)    116B : 70 CD                      push    r13
(1)    116D : D8 D5                      ld      r13, FLAGS
(1)    116F : 46 CD 50                   or      r13, #F_ZERO LOR F_OVERFLOW ; set Z, V
(1)    1172 : 42 FE                      or      r15, r14
(1)    1174 : 6B 03                      jr      z, addsub_flags_z
(1)    1176 : B6 CD 40                   xor     r13, #F_ZERO    ; clear Z
(1)    1179 :                    addsub_flags_z:
(1)    1179 : B3 E4                      xor     r14, @r4
(1)    117B : B3 E5                      xor     r14, @r5        ; r14:7 carry into S
(1)    117D : FB 03                      jr      nc, addsub_flags_nc
(1)    117F : B6 CE 80                   xor     r14, #%80       ; r14:7=C^(carry into S)
(1)    1182 :                    addsub_flags_nc:
(1)    1182 : 5B 03                      jr      mi, addsub_flags_v
(1)    1184 : B6 CD 10                   xor     r13, #F_OVERFLOW ; clear V
(1)    1187 :                    addsub_flags_v:
(1)    1187 : D9 D5                      ld      FLAGS, r13
(1)    1189 : 50 CD                      pop     r13
(1)    118B : 50 CE                      pop     r14
(1)    118D : 50 CF                      pop     r15
(1)    118F : AF                         ret
(1)    1190 :
(1)    1190 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    1190 :                    ;;; @param rr14: multiplicand
(1)    1190 :                    ;;; @param rr12: multiplier
(1)    1190 :                    ;;; @return rr14: result
(1)    1190 :                    ;;; @clobber r10-r15
(1)    1190 :                    umul16:
(1)    1190 : C4 CE CA                   ldw     rr10, rr14      ; rr10=multiplicand
(1)    1193 : C6 CE 00 00                ldw     rr14, #0        ; result=0
(1)    1197 : 8B 10                      jr      umul16_check
(1)    1199 :                    umul16_loop:
(1)    1199 : CF                         rcf                     ; multiplier >>= 1
(1)    119A : C0 CC                      rrc     r12
(1)    119C : C0 CD                      rrc     r13
(1)    119E : FB 04                      jr      nc, umul16_next ; if lsb(multiplier) == 0
(1)    11A0 : 02 FB                      add     r15, r11
(1)    11A2 : 12 EA                      adc     r14, r10        ; result += multiplicand
(1)    11A4 :                    umul16_next:
(1)    11A4 : CF                         rcf                     ; multiplicand <<= 1
(1)    11A5 : 10 CB                      rlc     r11
(1)    11A7 : 10 CA                      rlc     r10
(1)    11A9 :                    umul16_check:
(1)    11A9 : A0 CC                      incw    rr12
(1)    11AB : 80 CC                      decw    rr12
(1)    11AD : EB EA                      jr      nz, umul16_loop ; while multiplier != 0
(1)    11AF :                    umul16_end:
(1)    11AF : AF                         ret
(1)    11B0 :
(1)    11B0 :                    ;;; Unsigned multiplication: multiplicand *= multiplier
(1)    11B0 :                    ;;; @param @r4: multiplicand
(1)    11B0 :                    ;;; @param @r5: multiplier
(1)    11B0 :                    ;;; @clobber r10-r15
(1)    11B0 :                    umulsi2:
(1)    11B0 : C5 C4 CE                   ldw     rr14, @r4
(1)    11B3 : C5 C5 CC                   ldw     rr12, @r5
(1)    11B6 : F6 11 90                   call    umul16          ; rr10=multiplicand * multiplier
(1)    11B9 : D7 4E                      ld      0(r4), r14
(1)    11BB : 97 F4 01                   ld      1(r4), r15
(1)    11BE : AF                         ret
(1)    11BF :
(1)    11BF :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)    11BF :                    ;;; @param @r4: multiplicand
(1)    11BF :                    ;;; @param @r5: multiplier
(1)    11BF :                    ;;; @clobber r10-r15
(1)    11BF :                    mulsi2:
(1)    11BF : C5 C4 CE                   ldw     rr14, @r4
(1)    11C2 : C5 C5 CC                   ldw     rr12, @r5
(1)    11C5 : 37 CE 06                   btjrf   mulsi2_abs_muliplicand, r12, #7
(1)    11C8 : 60 CC                      com     r12
(1)    11CA : 60 CD                      com     r13
(1)    11CC : A0 CC                      incw    rr12            ; multiplicand = -multiplicand
(1)    11CE :                    mulsi2_abs_muliplicand:
(1)    11CE : 37 EE 06                   btjrf   mulsi2_multiply, r14, #7
(1)    11D1 : 60 CE                      com     r14
(1)    11D3 : 60 CF                      com     r15
(1)    11D5 : A0 CE                      incw    rr14            ; multiplier = -multiplier
(1)    11D7 :                    mulsi2_multiply:
(1)    11D7 : F6 11 90                   call    umul16          ; result = multiplicand * multiplier
(1)    11DA : C7 C4                      ld      r12, @r4
(1)    11DC : B3 C5                      xor     r12, @r5        ; r12=sign(@r4)^sign(@r5)
(1)    11DE : 37 CE 06                   btjrf   mulsi2_end, r12, #7
(1)    11E1 : 60 CE                      com     r14
(1)    11E3 : 60 CF                      com     r15
(1)    11E5 : A0 CE                      incw    rr14            ; result = -result
(1)    11E7 :                    mulsi2_end:
(1)    11E7 : D7 4E                      ld      0(r4), r14
(1)    11E9 : 97 F4 01                   ld      1(r4), r15
(1)    11EC : AF                         ret
(1)    11ED :
(1)    11ED :                    ;;; Unsigned division: divident / divisor = quotient ... reminder
(1)    11ED :                    ;;; @praram rr14: divident
(1)    11ED :                    ;;; @praram rr12: divisor
(1)    11ED :                    ;;; @return rr14: reminder
(1)    11ED :                    ;;; @return rr12: quotient
(1)    11ED :                    ;;; @clobber r10-r15
(1)    11ED :                    udiv16:
(1)    11ED : 70 C9                      push    r9
(1)    11EF : A0 CC                      incw    rr12
(1)    11F1 : 80 CC                      decw    rr12
(1)    11F3 : 6D 12 29                   jp      z, udiv16_end
(1)    11F6 : 9C 01                      ld      r9, #1          ; r9=bits
(1)    11F8 : 8D 12 01                   jp      udiv16_prep
(1)    11FB :                    udiv16_prep_loop:
(1)    11FB : CF                         rcf                     ; divisor <<= 1
(1)    11FC : 10 CD                      rlc     r13
(1)    11FE : 10 CC                      rlc     r12
(1)    1200 : 9E                         inc     r9
(1)    1201 :                    udiv16_prep:                    ; while msb(divisor) == 0
(1)    1201 : 37 CE F7                   btjrf   udiv16_prep_loop, r12, #7
(1)    1204 : C6 CA 00 00                ldw     rr10, #0        ; rr10=quotient
(1)    1208 : 8D 12 15                   jp      udiv16_enter_loop
(1)    120B :                    udiv16_loop:
(1)    120B : CF                         rcf                     ; divisor >>= 1
(1)    120C : C0 CC                      rrc     r12
(1)    120E : C0 CD                      rrc     r13
(1)    1210 : CF                         rcf                     ; quotient <<= 1
(1)    1211 : 10 CB                      rlc     r11
(1)    1213 : 10 CA                      rlc     r10
(1)    1215 :                    udiv16_enter_loop:
(1)    1215 : 22 FD                      sub     r15, r13        ; divident -= divisor
(1)    1217 : 32 EC                      sbc     r14, r12
(1)    1219 : 7D 12 20                   jp      c, udiv16_readd ; if divident < 0
(1)    121C : BE                         inc     r11             ; quotient |= 1
(1)    121D : 8D 12 24                   jp      udiv16_next
(1)    1220 :                    udiv16_readd:
(1)    1220 : 02 FD                      add     r15, r13        ; divident += divisor
(1)    1222 : 12 EC                      adc     r14, r12        ; FLAG.D is always cleared
(1)    1224 :                    udiv16_next:
(1)    1224 : 9A E5                      djnz    r9, udiv16_loop ; rr14=reminder
(1)    1226 : C4 CA CC                   ldw     rr12, rr10      ; rr12=quotient
(1)    1229 :                    udiv16_end:
(1)    1229 : 50 C9                      pop     r9
(1)    122B : AF                         ret
(1)    122C :
(1)    122C :                    ;;; Unsigned division: dividend /= divisor
(1)    122C :                    ;;; @praram @r4: dividend
(1)    122C :                    ;;; @praram @r5: divisor
(1)    122C :                    ;;; @clobber r10-r15
(1)    122C :                    udivsi2:
(1)    122C : C5 C4 CE                   ldw     rr14, @r4
(1)    122F : C5 C5 CC                   ldw     rr12, @r5
(1)    1232 : F6 11 ED                   call    udiv16
(1)    1235 : D7 4C                      ld      0(r4), r12
(1)    1237 : 97 D4 01                   ld      1(r4), r13
(1)    123A : AF                         ret
(1)    123B :
(1)    123B :                    ;;; Signed division: divident *= divisor
(1)    123B :                    ;;; @param @r4: divident
(1)    123B :                    ;;; @param @r5: divisor
(1)    123B :                    ;;; @clobber r10-r15
(1)    123B :                    divsi2:
(1)    123B : C5 C4 CE                   ldw     rr14, @r4
(1)    123E : C5 C5 CC                   ldw     rr12, @r5
(1)    1241 : 37 EE 06                   btjrf   divsi2_abs_divident, r14, #7
(1)    1244 : 60 CE                      com     r14
(1)    1246 : 60 CF                      com     r15
(1)    1248 : A0 CE                      incw    rr14            ; divident = -divident
(1)    124A :                    divsi2_abs_divident:
(1)    124A : 37 CE 06                   btjrf   divsi2_divide, r12, #7
(1)    124D : 60 CC                      com     r12
(1)    124F : 60 CD                      com     r13
(1)    1251 : A0 CC                      incw    rr12            ; divisor = -divisor
(1)    1253 :                    divsi2_divide:
(1)    1253 : F6 11 ED                   call    udiv16
(1)    1256 : C7 E4                      ld      r14, @r4
(1)    1258 : B3 E5                      xor     r14, @r5        ; r14=sign(@r4)^sign(@r5)
(1)    125A : 37 EE 06                   btjrf   divsi2_end, r14, #7
(1)    125D : 60 CC                      com     r12
(1)    125F : 60 CD                      com     r13
(1)    1261 : A0 CC                      incw    rr12            ; divident = = -divident
(1)    1263 :                    divsi2_end:
(1)    1263 : D7 4C                      ld      0(r4), r12
(1)    1265 : 97 D4 01                   ld      1(r4), r13
(1)    1268 : AF                         ret
(1)    1269 :
(1)    1269 :                    ;;; Local Variables:
(1)    1269 :                    ;;; mode: asm
(1)    1269 :                    ;;; End:
(1)    1269 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       1269 :
       1269 :                            end
